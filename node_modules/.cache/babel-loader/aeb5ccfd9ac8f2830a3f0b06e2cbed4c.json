{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\hrms-demo\\\\src\\\\components\\\\DailyAllowancesTableViewSummary.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport MaterialTable from \"material-table\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Box, useDisclosure } from \"@chakra-ui/react\";\nimport { GrTask } from \"react-icons/gr\";\nimport { //useSetRecoilState,\nuseRecoilValue, useRecoilState //useRecoilValueLoadable,\n} from \"recoil\";\nimport { allowsPeriodState, loginLevelState //allowsDataState,\n//empidState,\n} from \"./data/atomdata\"; //import { fetchDailyAllowancesSelector } from \"./data/selectordata\";\n//import AddIcon from \"@material-ui/icons/Add\";\n//import EditIcon from \"@material-ui/icons/Edit\";\n//import DeleteIcon from \"@material-ui/icons/Delete\";\n//import CheckIcon from \"@material-ui/icons/Check\";\n//import SearchIcon from \"@material-ui/icons/Search\";\n//import ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\n//import { CustomDialog } from \"../helpers/CustomDialog\";\n//import { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\n//import { useEmployeesContext } from \"../context/employees_context\";\n\nimport { CustomDialog } from \"../helpers/CustomDialog\";\nimport { useCustomToast } from \"../helpers/useCustomToast\";\nimport { useDailyAllowsPeriod } from \"./dailyallows/useDailyAllowsPeriod\";\nimport { useUpdateDailyAllows } from \"./dailyallows/useUpdateDailyAllows\";\nimport ApprovalManagerScreen from \"./ApprovalManagerScreen\"; //const FILTERSTRING = \"Submitted\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DailyAllowancesTable({\n  month,\n  year\n}) {\n  _s();\n\n  //let history = useHistory();\n  const classes = useStyles();\n  const toast = useCustomToast();\n  const period = `${year}-${month}`; //const [isDialogOpen, setIsDialogOpen] = useState(false);\n  //const [tmpallowsdata, setTmpallowsdata] = useState([]);\n\n  const allows_period = useRecoilValue(allowsPeriodState); //const allows_empid = useRecoilValue(empidState);\n  //const [allowsdata, setAllowsdata] = useRecoilState(allowsDataState);\n  //const setEmpID = useSetRecoilState(empidState);\n\n  const title = `Site Allowances (${allows_period})`;\n  const updateDailyAllows = useUpdateDailyAllows();\n  const [formdata, setFormdata] = useState({});\n  const [editDailyAllowsID, setEditDailyAllowsID] = useState(\"\");\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\n  const {\n    dailyallowsperiod,\n    setDailyAllowsPeriodId\n  } = useDailyAllowsPeriod();\n  const {\n    isOpen: isAppScreenOpen,\n    onOpen: onAppScreenOpen,\n    onClose: onAppScreenClose\n  } = useDisclosure(); // const {\n  //   dailyallowances,\n  //   loadPendingDailyAllowances,\n  //   singlebatch_dailyallowance,\n  //   singlebatch_dailyallowance_loading,\n  //   deleteDailyAllowance,\n  //   setEditDailyAllowanceID,\n  //   setIsDailyAllowanceEditingOn,\n  //   setIsDailyAllowanceEditingOff,\n  //   resetSingleDailyAllowance,\n  //   dailyallowance_period,\n  //   getSingleBatchDailyAllowance,\n  // } = useDailyAllowancesContext();\n\n  const columns = useMemo(() => [{\n    title: \"Name\",\n    field: \"name\"\n  }, {\n    title: \"Period\",\n    field: \"period\"\n  }, {\n    title: \"Location\",\n    field: \"location\"\n  }, {\n    title: \"Manager\",\n    field: \"manager\"\n  }, {\n    title: \"Days\",\n    field: \"no_of_days\",\n    type: \"numeric\"\n  }, {\n    title: \"Amount\",\n    field: \"amount\",\n    type: \"currency\"\n  }, {\n    title: \"Status\",\n    field: \"status\"\n  }], []);\n\n  const Update_DailyAllows = data => {\n    //console.log(\"del data\", data);\n    const {\n      id,\n      attachmentid,\n      rec_id,\n      tableData,\n      ...fields\n    } = data;\n    const editData = { ...fields\n    };\n    setFormdata({ ...editData\n    });\n    setFormdata({ ...editData\n    });\n    setEditDailyAllowsID(id);\n    data.payrun ? toast({\n      title: \"This allowance has been paid. It can not be modified!\",\n      status: \"error\"\n    }) : handleAppScreenOpen();\n  };\n\n  const handleAppScreenOpen = () => {\n    onAppScreenOpen();\n  };\n\n  const handleAppScreenClose = () => {\n    onAppScreenClose();\n  };\n\n  const handleOnUpdateConfirm = data => {\n    console.log(\"update\", data);\n    const posted = data.status === \"Delete\" ? \"D\" : \"\";\n    const upddata = { ...data\n    };\n    updateDailyAllows({\n      id: editDailyAllowsID,\n      ...upddata\n    });\n  };\n\n  useEffect(() => {\n    setDailyAllowsPeriodId(period);\n  }, []); //const handleDialogOpen = () => {\n  //console.log(\"allowsdetls\", allowsdata, allowsdataRef, singlebatch_dailyallowsdetl);\n  //setAllowsdata({ singlebatch_dailyallowsdetl });\n  //setIsDialogOpen(true);\n  //};\n  //const handleDialogClose = () => {\n  //setIsDialogOpen(false);\n  //getSingleBatchDailyAllowance(dailyallowance_period);\n  //};\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      maxW: \"100%\",\n      pt: \"5px\",\n      overflow: \"scroll\",\n      children: /*#__PURE__*/_jsxDEV(MaterialTable, {\n        columns: columns,\n        data: dailyallowsperiod,\n        title: title,\n        actions: [rowData => ({\n          icon: () => /*#__PURE__*/_jsxDEV(GrTask, {\n            size: \"23px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 27\n          }, this),\n          hidden: loginLevel.loginLevel !== \"Manager\",\n          tooltip: \"Edit\",\n          onClick: (event, rowData) => {\n            Update_DailyAllows(rowData);\n          }\n        })],\n        options: {\n          filtering: false,\n          search: false,\n          toolbar: false,\n          paging: false,\n          headerStyle: {\n            backgroundColor: \"rgba(75, 192, 192, 1)\",\n            color: \"#FFF\"\n          },\n          showTitle: false\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CustomDialog, {\n      isOpen: isAppScreenOpen,\n      handleClose: handleAppScreenClose,\n      title: \"\",\n      showButton: true,\n      isFullscree: false,\n      children: /*#__PURE__*/_jsxDEV(ApprovalManagerScreen, {\n        formdata: formdata,\n        setFormdata: setFormdata,\n        handleDialogClose: handleAppScreenClose,\n        onConfirm: handleOnUpdateConfirm,\n        tabIndex: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DailyAllowancesTable, \"Qvj+T6Ku0m4ZtVQ8w6TIDXDqzYc=\", false, function () {\n  return [useStyles, useCustomToast, useRecoilValue, useUpdateDailyAllows, useRecoilState, useDailyAllowsPeriod, useDisclosure];\n});\n\n_c = DailyAllowancesTable;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: 0\n  },\n  dialog: {\n    width: 1000\n  }\n}));\n\nvar _c;\n\n$RefreshReg$(_c, \"DailyAllowancesTable\");","map":{"version":3,"sources":["D:/react-myprojects/hrms-demo/src/components/DailyAllowancesTableViewSummary.js"],"names":["React","useState","useEffect","useMemo","MaterialTable","makeStyles","Box","useDisclosure","GrTask","useRecoilValue","useRecoilState","allowsPeriodState","loginLevelState","CustomDialog","useCustomToast","useDailyAllowsPeriod","useUpdateDailyAllows","ApprovalManagerScreen","DailyAllowancesTable","month","year","classes","useStyles","toast","period","allows_period","title","updateDailyAllows","formdata","setFormdata","editDailyAllowsID","setEditDailyAllowsID","loginLevel","setLoginLevel","dailyallowsperiod","setDailyAllowsPeriodId","isOpen","isAppScreenOpen","onOpen","onAppScreenOpen","onClose","onAppScreenClose","columns","field","type","Update_DailyAllows","data","id","attachmentid","rec_id","tableData","fields","editData","payrun","status","handleAppScreenOpen","handleAppScreenClose","handleOnUpdateConfirm","console","log","posted","upddata","root","rowData","icon","hidden","tooltip","onClick","event","filtering","search","toolbar","paging","headerStyle","backgroundColor","color","showTitle","theme","padding","dialog","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Box, useDisclosure } from \"@chakra-ui/react\";\r\nimport { GrTask } from \"react-icons/gr\";\r\nimport {\r\n  //useSetRecoilState,\r\n  useRecoilValue,\r\n  useRecoilState,\r\n  //useRecoilValueLoadable,\r\n} from \"recoil\";\r\nimport {\r\n  allowsPeriodState,\r\n  loginLevelState,\r\n  //allowsDataState,\r\n  //empidState,\r\n} from \"./data/atomdata\";\r\n//import { fetchDailyAllowancesSelector } from \"./data/selectordata\";\r\n//import AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\n//import DeleteIcon from \"@material-ui/icons/Delete\";\r\n//import CheckIcon from \"@material-ui/icons/Check\";\r\n//import SearchIcon from \"@material-ui/icons/Search\";\r\n//import ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\n//import { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport { useDailyAllowsPeriod } from \"./dailyallows/useDailyAllowsPeriod\";\r\nimport { useUpdateDailyAllows } from \"./dailyallows/useUpdateDailyAllows\";\r\nimport ApprovalManagerScreen from \"./ApprovalManagerScreen\";\r\n//const FILTERSTRING = \"Submitted\";\r\n\r\nexport default function DailyAllowancesTable({ month, year }) {\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  const period = `${year}-${month}`;\r\n\r\n  //const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  //const [tmpallowsdata, setTmpallowsdata] = useState([]);\r\n  const allows_period = useRecoilValue(allowsPeriodState);\r\n  //const allows_empid = useRecoilValue(empidState);\r\n  //const [allowsdata, setAllowsdata] = useRecoilState(allowsDataState);\r\n  //const setEmpID = useSetRecoilState(empidState);\r\n  const title = `Site Allowances (${allows_period})`;\r\n  const updateDailyAllows = useUpdateDailyAllows();\r\n  const [formdata, setFormdata] = useState({});\r\n  const [editDailyAllowsID, setEditDailyAllowsID] = useState(\"\");\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { dailyallowsperiod, setDailyAllowsPeriodId } = useDailyAllowsPeriod();\r\n  const {\r\n    isOpen: isAppScreenOpen,\r\n    onOpen: onAppScreenOpen,\r\n    onClose: onAppScreenClose,\r\n  } = useDisclosure();\r\n  // const {\r\n  //   dailyallowances,\r\n  //   loadPendingDailyAllowances,\r\n  //   singlebatch_dailyallowance,\r\n  //   singlebatch_dailyallowance_loading,\r\n  //   deleteDailyAllowance,\r\n  //   setEditDailyAllowanceID,\r\n  //   setIsDailyAllowanceEditingOn,\r\n  //   setIsDailyAllowanceEditingOff,\r\n  //   resetSingleDailyAllowance,\r\n  //   dailyallowance_period,\r\n  //   getSingleBatchDailyAllowance,\r\n  // } = useDailyAllowancesContext();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"name\",\r\n      },\r\n      { title: \"Period\", field: \"period\" },\r\n      { title: \"Location\", field: \"location\" },\r\n      { title: \"Manager\", field: \"manager\" },\r\n      { title: \"Days\", field: \"no_of_days\", type: \"numeric\" },\r\n      { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n      { title: \"Status\", field: \"status\" },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const Update_DailyAllows = (data) => {\r\n    //console.log(\"del data\", data);\r\n    const { id, attachmentid, rec_id, tableData, ...fields } = data;\r\n    const editData = { ...fields };\r\n\r\n    setFormdata({ ...editData });\r\n    setFormdata({ ...editData });\r\n    setEditDailyAllowsID(id);\r\n    data.payrun\r\n      ? toast({\r\n          title: \"This allowance has been paid. It can not be modified!\",\r\n          status: \"error\",\r\n        })\r\n      : handleAppScreenOpen();\r\n  };\r\n\r\n  const handleAppScreenOpen = () => {\r\n    onAppScreenOpen();\r\n  };\r\n  const handleAppScreenClose = () => {\r\n    onAppScreenClose();\r\n  };\r\n\r\n  const handleOnUpdateConfirm = (data) => {\r\n    console.log(\"update\", data);\r\n    const posted = data.status === \"Delete\" ? \"D\" : \"\";\r\n    const upddata = { ...data };\r\n    updateDailyAllows({ id: editDailyAllowsID, ...upddata });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setDailyAllowsPeriodId(period);\r\n  }, []);\r\n\r\n  //const handleDialogOpen = () => {\r\n  //console.log(\"allowsdetls\", allowsdata, allowsdataRef, singlebatch_dailyallowsdetl);\r\n  //setAllowsdata({ singlebatch_dailyallowsdetl });\r\n  //setIsDialogOpen(true);\r\n  //};\r\n\r\n  //const handleDialogClose = () => {\r\n  //setIsDialogOpen(false);\r\n  //getSingleBatchDailyAllowance(dailyallowance_period);\r\n  //};\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Box maxW=\"100%\" pt=\"5px\" overflow=\"scroll\">\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={dailyallowsperiod}\r\n          title={title}\r\n          actions={[\r\n            (rowData) => ({\r\n              icon: () => <GrTask size=\"23px\" />,\r\n              hidden: loginLevel.loginLevel !== \"Manager\",\r\n              tooltip: \"Edit\",\r\n              onClick: (event, rowData) => {\r\n                Update_DailyAllows(rowData);\r\n              },\r\n            }),\r\n          ]}\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            paging: false,\r\n            headerStyle: {\r\n              backgroundColor: \"rgba(75, 192, 192, 1)\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </Box>\r\n      <CustomDialog\r\n        isOpen={isAppScreenOpen}\r\n        handleClose={handleAppScreenClose}\r\n        title=\"\"\r\n        showButton={true}\r\n        isFullscree={false}\r\n      >\r\n        <ApprovalManagerScreen\r\n          formdata={formdata}\r\n          setFormdata={setFormdata}\r\n          handleDialogClose={handleAppScreenClose}\r\n          onConfirm={handleOnUpdateConfirm}\r\n          tabIndex={2}\r\n        />\r\n      </CustomDialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n  dialog: {\r\n    width: 1000,\r\n  },\r\n}));\r\n"]},"metadata":{},"sourceType":"module"}