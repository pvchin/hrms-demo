{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\hrms-demo\\\\src\\\\context\\\\trainings_context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useReducer } from \"react\";\nimport axios from \"axios\";\nimport reducer from \"../reducers/trainings_reducer\";\nimport { trainings_url } from \"../utils/constants\";\nimport { SET_EDITTRAININGID, SET_ISTRAININGEDITING_ON, SET_ISTRAININGEDITING_OFF //SET_SINGLETRAINING,\n, GET_TRAININGS_BEGIN, GET_TRAININGS_SUCCESS, GET_TRAININGS_ERROR, GET_SINGLE_TRAINING_BEGIN, GET_SINGLE_TRAINING_SUCCESS, GET_SINGLE_TRAINING_ERROR, GET_SINGLEBATCH_TRAINING_BEGIN, GET_SINGLEBATCH_TRAINING_SUCCESS, GET_SINGLEBATCH_TRAINING_ERROR, ADD_TRAINING_BEGIN, ADD_TRAINING_SUCCESS, ADD_TRAINING_ERROR, DELETE_TRAINING_BEGIN, DELETE_TRAINING_SUCCESS, DELETE_TRAINING_ERROR, UPDATE_TRAINING_BEGIN, UPDATE_TRAINING_SUCCESS, UPDATE_TRAINING_ERROR, RESET_SINGLE_TRAINING //RESET_TABLES,\n} from \"../actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  isTrainingEditing: false,\n  alerttraining: {\n    show: false,\n    msg: \"\",\n    type: \"\"\n  },\n  editTrainingID: null,\n  trainings_loading: false,\n  trainings_error: false,\n  trainings: [],\n  single_training_loading: false,\n  single_training_error: false,\n  single_training: {},\n  singlebatch_training_loading: false,\n  singlebatch_training_error: false,\n  singlebatch_training: {},\n  delete_training_loading: false,\n  delete_training_error: false,\n  update_training_loading: false,\n  update_training_error: false,\n  add_training_loading: false,\n  add_training_error: false // filterValue: \"Female\",\n  // filterfield: \"gender\",\n\n};\nconst TrainingsContext = /*#__PURE__*/React.createContext();\nexport const TrainingsProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const loadTrainings = async () => {\n    dispatch({\n      type: GET_TRAININGS_BEGIN\n    });\n\n    try {\n      // const res = await fetch(\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\n      // );\n      const res = await fetch(trainings_url); //const { data } = await axios.get(employees_url);\n      //const employees = data;\n\n      const trainings = await res.json();\n      dispatch({\n        type: GET_TRAININGS_SUCCESS,\n        payload: trainings\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_TRAININGS_ERROR\n      });\n    }\n  };\n\n  const setIsTrainingEditingOn = () => {\n    dispatch({\n      type: SET_ISTRAININGEDITING_ON\n    });\n  };\n\n  const setIsTrainingEditingOff = () => {\n    dispatch({\n      type: SET_ISTRAININGEDITING_OFF\n    });\n  };\n\n  const resetSingleTraining = () => {\n    dispatch({\n      type: RESET_SINGLE_TRAINING\n    });\n  };\n\n  const setEditTrainingID = async id => {\n    try {\n      dispatch({\n        type: SET_EDITTRAININGID,\n        payload: id\n      });\n    } catch (error) {\n      dispatch(error);\n    }\n  };\n\n  const getSingleTraining = async id => {\n    dispatch({\n      type: GET_SINGLE_TRAINING_BEGIN\n    });\n\n    try {\n      const {\n        data\n      } = await axios.get(`${trainings_url}?id=${id}`);\n      const singletraining = data;\n      dispatch({\n        type: GET_SINGLE_TRAINING_SUCCESS,\n        payload: singletraining\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_SINGLE_TRAINING_ERROR\n      });\n    }\n  };\n\n  const getSingleBatchTraining = async empid => {\n    dispatch({\n      type: GET_SINGLEBATCH_TRAINING_BEGIN\n    });\n\n    try {\n      const res = await fetch(`${trainings_url}?fv=${empid}`); //console.log(`${family_url}?fv=${linkid}`);\n\n      const singlebatchtraining = await res.json();\n      dispatch({\n        type: GET_SINGLEBATCH_TRAINING_SUCCESS,\n        payload: singlebatchtraining\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_SINGLEBATCH_TRAINING_ERROR\n      });\n    }\n  };\n\n  const addTraining = async data => {\n    // const { id, name, from_date, to_date, reason, no_of_days, status } = data;\n    //\n    dispatch({\n      type: ADD_TRAINING_BEGIN\n    });\n\n    try {\n      await fetch(trainings_url, {\n        method: \"POST\",\n        body: JSON.stringify({ ...data\n        })\n      });\n      dispatch({\n        type: ADD_TRAINING_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: ADD_TRAINING_ERROR\n      });\n    }\n  };\n\n  const updateTraining = async data => {\n    const {\n      id,\n      ...fields\n    } = data;\n    dispatch({\n      type: UPDATE_TRAINING_BEGIN\n    });\n\n    try {\n      await fetch(trainings_url, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          id,\n          ...fields\n        })\n      });\n      dispatch({\n        type: UPDATE_TRAINING_SUCCESS\n      });\n    } catch (error) {\n      dispatch({\n        type: UPDATE_TRAINING_ERROR\n      });\n    }\n  };\n\n  const deleteTraining = async id => {\n    dispatch({\n      type: DELETE_TRAINING_BEGIN\n    });\n\n    try {\n      await fetch(trainings_url, {\n        method: \"DELETE\",\n        body: JSON.stringify({\n          id: id\n        })\n      });\n      dispatch({\n        type: DELETE_TRAINING_SUCCESS\n      }); //loadEmployees();\n    } catch (err) {\n      dispatch({\n        type: DELETE_TRAINING_ERROR\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(TrainingsContext.Provider, {\n    value: { ...state,\n      loadTrainings,\n      addTraining,\n      updateTraining,\n      deleteTraining,\n      getSingleTraining,\n      getSingleBatchTraining,\n      setEditTrainingID,\n      setIsTrainingEditingOn,\n      setIsTrainingEditingOff,\n      resetSingleTraining\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TrainingsProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = TrainingsProvider;\nexport const useTrainingsContext = () => {\n  _s2();\n\n  return useContext(TrainingsContext);\n};\n\n_s2(useTrainingsContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"TrainingsProvider\");","map":{"version":3,"sources":["D:/react-myprojects/hrms-demo/src/context/trainings_context.js"],"names":["React","useContext","useReducer","axios","reducer","trainings_url","SET_EDITTRAININGID","SET_ISTRAININGEDITING_ON","SET_ISTRAININGEDITING_OFF","GET_TRAININGS_BEGIN","GET_TRAININGS_SUCCESS","GET_TRAININGS_ERROR","GET_SINGLE_TRAINING_BEGIN","GET_SINGLE_TRAINING_SUCCESS","GET_SINGLE_TRAINING_ERROR","GET_SINGLEBATCH_TRAINING_BEGIN","GET_SINGLEBATCH_TRAINING_SUCCESS","GET_SINGLEBATCH_TRAINING_ERROR","ADD_TRAINING_BEGIN","ADD_TRAINING_SUCCESS","ADD_TRAINING_ERROR","DELETE_TRAINING_BEGIN","DELETE_TRAINING_SUCCESS","DELETE_TRAINING_ERROR","UPDATE_TRAINING_BEGIN","UPDATE_TRAINING_SUCCESS","UPDATE_TRAINING_ERROR","RESET_SINGLE_TRAINING","initialState","isTrainingEditing","alerttraining","show","msg","type","editTrainingID","trainings_loading","trainings_error","trainings","single_training_loading","single_training_error","single_training","singlebatch_training_loading","singlebatch_training_error","singlebatch_training","delete_training_loading","delete_training_error","update_training_loading","update_training_error","add_training_loading","add_training_error","TrainingsContext","createContext","TrainingsProvider","children","state","dispatch","loadTrainings","res","fetch","json","payload","error","setIsTrainingEditingOn","setIsTrainingEditingOff","resetSingleTraining","setEditTrainingID","id","getSingleTraining","data","get","singletraining","getSingleBatchTraining","empid","singlebatchtraining","addTraining","method","body","JSON","stringify","err","updateTraining","fields","deleteTraining","useTrainingsContext"],"mappings":"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","sourcesContent":["import React, { useContext,  useReducer } from \"react\";\r\nimport axios from \"axios\";\r\nimport reducer from \"../reducers/trainings_reducer\";\r\nimport { trainings_url } from \"../utils/constants\";\r\n\r\nimport {\r\n  SET_EDITTRAININGID,\r\n  SET_ISTRAININGEDITING_ON,\r\n  SET_ISTRAININGEDITING_OFF,\r\n  //SET_SINGLETRAINING,\r\n  GET_TRAININGS_BEGIN,\r\n  GET_TRAININGS_SUCCESS,\r\n  GET_TRAININGS_ERROR,\r\n  GET_SINGLE_TRAINING_BEGIN,\r\n  GET_SINGLE_TRAINING_SUCCESS,\r\n  GET_SINGLE_TRAINING_ERROR,\r\n  GET_SINGLEBATCH_TRAINING_BEGIN,\r\n  GET_SINGLEBATCH_TRAINING_SUCCESS,\r\n  GET_SINGLEBATCH_TRAINING_ERROR,\r\n  ADD_TRAINING_BEGIN,\r\n  ADD_TRAINING_SUCCESS,\r\n  ADD_TRAINING_ERROR,\r\n  DELETE_TRAINING_BEGIN,\r\n  DELETE_TRAINING_SUCCESS,\r\n  DELETE_TRAINING_ERROR,\r\n  UPDATE_TRAINING_BEGIN,\r\n  UPDATE_TRAINING_SUCCESS,\r\n  UPDATE_TRAINING_ERROR,\r\n  RESET_SINGLE_TRAINING,\r\n  //RESET_TABLES,\r\n} from \"../actions\";\r\n\r\nconst initialState = {\r\n  isTrainingEditing: false,\r\n  alerttraining: { show: false, msg: \"\", type: \"\" },\r\n  editTrainingID: null,\r\n  trainings_loading: false,\r\n  trainings_error: false,\r\n  trainings: [],\r\n  single_training_loading: false,\r\n  single_training_error: false,\r\n  single_training: {},\r\n  singlebatch_training_loading: false,\r\n  singlebatch_training_error: false,\r\n  singlebatch_training: {},\r\n  delete_training_loading: false,\r\n  delete_training_error: false,\r\n  update_training_loading: false,\r\n  update_training_error: false,\r\n  add_training_loading: false,\r\n  add_training_error: false,\r\n  // filterValue: \"Female\",\r\n  // filterfield: \"gender\",\r\n};\r\n\r\nconst TrainingsContext = React.createContext();\r\n\r\nexport const TrainingsProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  const loadTrainings = async () => {\r\n    dispatch({ type: GET_TRAININGS_BEGIN });\r\n    try {\r\n      // const res = await fetch(\r\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\r\n      // );\r\n      const res = await fetch(trainings_url);\r\n      //const { data } = await axios.get(employees_url);\r\n      //const employees = data;\r\n      const trainings = await res.json();\r\n      dispatch({ type: GET_TRAININGS_SUCCESS, payload: trainings });\r\n    } catch (error) {\r\n      dispatch({ type: GET_TRAININGS_ERROR });\r\n    }\r\n  };\r\n\r\n  const setIsTrainingEditingOn = () => {\r\n    dispatch({ type: SET_ISTRAININGEDITING_ON });\r\n  };\r\n\r\n  const setIsTrainingEditingOff = () => {\r\n    dispatch({ type: SET_ISTRAININGEDITING_OFF });\r\n  };\r\n\r\n  const resetSingleTraining = () => {\r\n    dispatch({ type: RESET_SINGLE_TRAINING });\r\n  };\r\n\r\n  const setEditTrainingID = async (id) => {\r\n    try {\r\n      dispatch({ type: SET_EDITTRAININGID, payload: id });\r\n    } catch (error) {\r\n      dispatch(error);\r\n    }\r\n  };\r\n\r\n  const getSingleTraining = async (id) => {\r\n    dispatch({ type: GET_SINGLE_TRAINING_BEGIN });\r\n    try {\r\n      const { data } = await axios.get(`${trainings_url}?id=${id}`);\r\n      const singletraining = data;\r\n      dispatch({ type: GET_SINGLE_TRAINING_SUCCESS, payload: singletraining });\r\n    } catch (error) {\r\n      dispatch({ type: GET_SINGLE_TRAINING_ERROR });\r\n    }\r\n  };\r\n\r\n  const getSingleBatchTraining = async (empid) => {\r\n    dispatch({ type: GET_SINGLEBATCH_TRAINING_BEGIN });\r\n    try {\r\n      const res = await fetch(`${trainings_url}?fv=${empid}`);\r\n      //console.log(`${family_url}?fv=${linkid}`);\r\n      const singlebatchtraining = await res.json();\r\n\r\n      dispatch({\r\n        type: GET_SINGLEBATCH_TRAINING_SUCCESS,\r\n        payload: singlebatchtraining,\r\n      });\r\n    } catch (error) {\r\n      dispatch({ type: GET_SINGLEBATCH_TRAINING_ERROR });\r\n    }\r\n  };\r\n\r\n  const addTraining = async (data) => {\r\n   // const { id, name, from_date, to_date, reason, no_of_days, status } = data;\r\n    //\r\n    dispatch({ type: ADD_TRAINING_BEGIN });\r\n    try {\r\n      await fetch(trainings_url, {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ ...data }),\r\n      });\r\n      dispatch({ type: ADD_TRAINING_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({ type: ADD_TRAINING_ERROR });\r\n    }\r\n  };\r\n\r\n  const updateTraining = async (data) => {\r\n    const { id, ...fields } = data;\r\n\r\n    dispatch({ type: UPDATE_TRAINING_BEGIN });\r\n    try {\r\n      await fetch(trainings_url, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify({ id, ...fields }),\r\n      });\r\n      dispatch({ type: UPDATE_TRAINING_SUCCESS });\r\n    } catch (error) {\r\n      dispatch({ type: UPDATE_TRAINING_ERROR });\r\n    }\r\n  };\r\n\r\n  const deleteTraining = async (id) => {\r\n    dispatch({ type: DELETE_TRAINING_BEGIN });\r\n    try {\r\n      await fetch(trainings_url, {\r\n        method: \"DELETE\",\r\n        body: JSON.stringify({ id: id }),\r\n      });\r\n      dispatch({ type: DELETE_TRAINING_SUCCESS });\r\n      //loadEmployees();\r\n    } catch (err) {\r\n      dispatch({ type: DELETE_TRAINING_ERROR });\r\n    }\r\n  };\r\n  return (\r\n    <TrainingsContext.Provider\r\n      value={{\r\n        ...state,\r\n        loadTrainings,\r\n        addTraining,\r\n        updateTraining,\r\n        deleteTraining,\r\n        getSingleTraining,\r\n        getSingleBatchTraining,\r\n        setEditTrainingID,\r\n        setIsTrainingEditingOn,\r\n        setIsTrainingEditingOff,\r\n        resetSingleTraining,\r\n      }}\r\n    >\r\n      {children}\r\n    </TrainingsContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTrainingsContext = () => {\r\n  return useContext(TrainingsContext);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}