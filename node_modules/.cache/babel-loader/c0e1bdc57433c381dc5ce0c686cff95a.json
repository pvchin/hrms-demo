{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\hrms-demo\\\\src\\\\context\\\\payslips_context.js\";\nimport React, { useContext, useReducer } from \"react\";\nimport axios from \"axios\";\nimport reducer from \"../reducers/payslips_reducer\";\nimport { payslips_url } from \"../utils/constants\";\nimport { payslipitems_url } from \"../utils/constants\";\nimport { payrun_url } from \"../utils/constants\";\nimport { payslipearnings_url } from \"../utils/constants\";\nimport { payslipdeductions_url } from \"../utils/constants\";\nimport { SET_EDITPAYSLIPID, SET_PAYSLIPS_DATA, RESET_PAYSLIPS_DATA, UPDATE_PAYSLIPS_DATA, SET_ISPAYSLIPEDITING_ON, SET_ISPAYSLIPEDITING_OFF, SET_PAYSLIP_PERIOD, SET_PAYSLIP_ENDMONTHDATE,\n//SET_SINGLEPAYSLIP,\nSET_PAYSLIPEARNING_AMOUNT, SET_PAYSLIPDEDUCTION_AMOUNT, GET_PAYSLIPS_BEGIN, GET_PAYSLIPS_SUCCESS, GET_PAYSLIPS_ERROR, GET_PAYSLIPITEMS_BEGIN, GET_PAYSLIPITEMS_SUCCESS, GET_PAYSLIPITEMS_ERROR, ADD_PAYSLIPITEM_BEGIN, ADD_PAYSLIPITEM_SUCCESS, ADD_PAYSLIPITEM_ERROR, DELETE_PAYSLIPITEM_BEGIN, DELETE_PAYSLIPITEM_SUCCESS, DELETE_PAYSLIPITEM_ERROR, UPDATE_PAYSLIPITEM_BEGIN, UPDATE_PAYSLIPITEM_SUCCESS, UPDATE_PAYSLIPITEM_ERROR, GET_PAYRUN_BEGIN, GET_PAYRUN_SUCCESS, GET_PAYRUN_ERROR, GET_BATCHPAYRUN_BEGIN, GET_BATCHPAYRUN_SUCCESS, GET_BATCHPAYRUN_ERROR, ADD_PAYRUN_BEGIN, ADD_PAYRUN_SUCCESS, ADD_PAYRUN_ERROR, UPDATE_PAYRUN_BEGIN, UPDATE_PAYRUN_SUCCESS, UPDATE_PAYRUN_ERROR, DELETE_PAYRUN_BEGIN, DELETE_PAYRUN_SUCCESS, DELETE_PAYRUN_ERROR, GET_SINGLE_PAYSLIP_BEGIN, GET_SINGLE_PAYSLIP_SUCCESS, GET_SINGLE_PAYSLIP_ERROR, GET_PENDING_PAYSLIP_BEGIN, GET_PENDING_PAYSLIP_SUCCESS, GET_PENDING_PAYSLIP_ERROR, GET_SINGLEBATCH_PAYSLIP_BEGIN, GET_SINGLEBATCH_PAYSLIP_SUCCESS, GET_SINGLEBATCH_PAYSLIP_ERROR, ADD_PAYSLIP_BEGIN, ADD_PAYSLIP_SUCCESS, ADD_PAYSLIP_ERROR, DELETE_PAYSLIP_BEGIN, DELETE_PAYSLIP_SUCCESS, DELETE_PAYSLIP_ERROR, UPDATE_PAYSLIP_BEGIN, UPDATE_PAYSLIP_SUCCESS, UPDATE_PAYSLIP_ERROR, RESET_SINGLE_PAYSLIP, GET_PAYSLIPEARNINGS_BEGIN, GET_PAYSLIPEARNINGS_SUCCESS, GET_PAYSLIPEARNINGS_ERROR,\n//GET_SINGLE_PAYSLIPEARNING_BEGIN,\n//GET_SINGLE_PAYSLIPEARNING_SUCCESS,\n//GET_SINGLE_PAYSLIPEARNING_ERROR,\nADD_PAYSLIPEARNING_BEGIN, ADD_PAYSLIPEARNING_SUCCESS, ADD_PAYSLIPEARNING_ERROR, DELETE_PAYSLIPEARNING_BEGIN, DELETE_PAYSLIPEARNING_SUCCESS, DELETE_PAYSLIPEARNING_ERROR, UPDATE_PAYSLIPEARNING_BEGIN, UPDATE_PAYSLIPEARNING_SUCCESS, UPDATE_PAYSLIPEARNING_ERROR, GET_PAYSLIPDEDUCTIONS_BEGIN, GET_PAYSLIPDEDUCTIONS_SUCCESS, GET_PAYSLIPDEDUCTIONS_ERROR,\n//GET_SINGLE_PAYSLIPDEDUCTION_BEGIN,\n//GET_SINGLE_PAYSLIPDEDUCTION_SUCCESS,\n//GET_SINGLE_PAYSLIPDEDUCTION_ERROR,\nADD_PAYSLIPDEDUCTION_BEGIN, ADD_PAYSLIPDEDUCTION_SUCCESS, ADD_PAYSLIPDEDUCTION_ERROR, DELETE_PAYSLIPDEDUCTION_BEGIN, DELETE_PAYSLIPDEDUCTION_SUCCESS, DELETE_PAYSLIPDEDUCTION_ERROR, UPDATE_PAYSLIPDEDUCTION_BEGIN, UPDATE_PAYSLIPDEDUCTION_SUCCESS, UPDATE_PAYSLIPDEDUCTION_ERROR } from \"../actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  isPayslipEditing: false,\n  alertPayslip: {\n    show: false,\n    msg: \"\",\n    type: \"\"\n  },\n  editPayslipID: null,\n  payslips_loading: false,\n  payslips_error: false,\n  payslip_period: \"\",\n  payslip_endmonthdate: \"\",\n  payslip_earning_amount: 0,\n  payslip_deduction_amount: 0,\n  payslips: [],\n  payslipsdata: [],\n  single_payslip_loading: false,\n  single_payslip_error: false,\n  single_payslip: {},\n  singlebatch_payslip_loading: false,\n  singlebatch_payslip_error: false,\n  singlebatch_payslip: {},\n  delete_payslip_loading: false,\n  delete_payslip_error: false,\n  update_payslip_loading: false,\n  update_payslip_error: false,\n  add_payslip_loading: false,\n  add_payslip_error: false,\n  // filterValue: \"Female\",\n  // filterfield: \"gender\",\n  // payslip earnings\n  isPayslipEarningEditing: false,\n  alertPayslipEarning: {\n    show: false,\n    msg: \"\",\n    type: \"\"\n  },\n  editPayslipEarningID: null,\n  payslipearnings_loading: false,\n  payslipearnings_error: false,\n  payslipearnings: [],\n  pending_payslips_loading: false,\n  pending_payslips_error: false,\n  pending_payslips: [],\n  single_payslipearning_loading: false,\n  single_payslipearning_error: false,\n  single_payslipearning: {},\n  delete_payslipearning_loading: false,\n  delete_payslipearning_error: false,\n  update_payslipearning_loading: false,\n  update_payslipearning_error: false,\n  add_payslipearning_loading: false,\n  add_payslipearning_error: false,\n  // payslip deductions\n  isPayslipDeductionEditing: false,\n  alertPayslipDeduction: {\n    show: false,\n    msg: \"\",\n    type: \"\"\n  },\n  editPayslipDeductionID: null,\n  payslipdeductions_loading: false,\n  payslipdeductions_error: false,\n  payslipdeductions: [],\n  single_payslipdeduction_loading: false,\n  single_payslipdeduction_error: false,\n  single_payslipdeduction: {},\n  delete_payslipdeduction_loading: false,\n  delete_payslipdeduction_error: false,\n  update_payslipdeduction_loading: false,\n  update_payslipdeduction_error: false,\n  add_payslipdeduction_loading: false,\n  add_payslipdeduction_error: false,\n  payslipitems_loading: false,\n  payslipitems_error: false,\n  payslipitems: [],\n  delete_payslipitem_loading: false,\n  delete_payslipitem_error: false,\n  update_payslipitem_loading: false,\n  update_payslipitem_error: false,\n  add_payslipitem_loading: false,\n  add_payslipitem_error: false,\n  single_payslipitem: {},\n  payrun_loading: false,\n  payrun_error: false,\n  payrun: [],\n  batchpayrun_loading: false,\n  batchpayrun_error: false,\n  batchpayrun: [],\n  delete_payrun_loading: false,\n  delete_payrun_error: false,\n  update_payrun_loading: false,\n  update_payrun_error: false,\n  add_payrun_loading: false,\n  add_payrun_error: false,\n  single_payrun: {}\n};\nconst PayslipsContext = /*#__PURE__*/React.createContext();\nexport const PayslipsProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  //....... payslip\n  const loadPayslips = async () => {\n    dispatch({\n      type: GET_PAYSLIPS_BEGIN\n    });\n    try {\n      // const res = await fetch(\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\n      // );\n      const res = await fetch(payslips_url);\n      //const { data } = await axios.get(employees_url);\n      //const employees = data;\n      const payslips = await res.json();\n      dispatch({\n        type: GET_PAYSLIPS_SUCCESS,\n        payload: payslips\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_PAYSLIPS_ERROR\n      });\n    }\n  };\n  const loadPendingPayslips = async fi => {\n    dispatch({\n      type: GET_PENDING_PAYSLIP_BEGIN\n    });\n    try {\n      // const res = await fetch(\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\n      // );\n      const res = await fetch(`${payslips_url}?fi=${fi}`);\n      //const { data } = await axios.get(employees_url);\n      //const employees = data;\n      const pending_payslips = await res.json();\n      dispatch({\n        type: GET_PENDING_PAYSLIP_SUCCESS,\n        payload: pending_payslips\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_PENDING_PAYSLIP_ERROR\n      });\n    }\n  };\n  const loadEmpPayslips = async em => {\n    dispatch({\n      type: GET_PAYSLIPS_BEGIN\n    });\n    try {\n      // const res = await fetch(\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\n      // );\n      const res = await fetch(`${payslips_url}?em=${em}`);\n      //const { data } = await axios.get(employees_url);\n      //const employees = data;\n      const payslips = await res.json();\n      dispatch({\n        type: GET_PAYSLIPS_SUCCESS,\n        payload: payslips\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_PAYSLIPS_ERROR\n      });\n    }\n  };\n  const getSingleBatchPayslip = async payrun => {\n    dispatch({\n      type: GET_SINGLEBATCH_PAYSLIP_BEGIN\n    });\n    try {\n      const res = await fetch(`${payslips_url}?fv=${payrun}`);\n      const singlebatchpayslip = await res.json();\n      console.log(\"context\", singlebatchpayslip);\n      dispatch({\n        type: GET_SINGLEBATCH_PAYSLIP_SUCCESS,\n        payload: singlebatchpayslip\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_SINGLEBATCH_PAYSLIP_ERROR\n      });\n    }\n  };\n  const setIsPayslipEditingOn = () => {\n    dispatch({\n      type: SET_ISPAYSLIPEDITING_ON\n    });\n  };\n  const setIsPayslipEditingOff = () => {\n    dispatch({\n      type: SET_ISPAYSLIPEDITING_OFF\n    });\n  };\n  const setPayslipsData = value => {\n    dispatch({\n      type: SET_PAYSLIPS_DATA,\n      payload: value\n    });\n  };\n  const resetPayslipsData = () => {\n    dispatch({\n      type: RESET_PAYSLIPS_DATA\n    });\n  };\n  const updatePayslipsData = (name, value) => {\n    dispatch({\n      type: UPDATE_PAYSLIPS_DATA,\n      payload: {\n        name,\n        value\n      }\n    });\n  };\n  const resetSinglePayslip = () => {\n    dispatch({\n      type: RESET_SINGLE_PAYSLIP\n    });\n  };\n  const setPayslipEarningAmount = value => {\n    dispatch({\n      type: SET_PAYSLIPEARNING_AMOUNT,\n      payload: value\n    });\n  };\n  const setPayslipDeductionAmount = value => {\n    dispatch({\n      type: SET_PAYSLIPDEDUCTION_AMOUNT,\n      payload: value\n    });\n  };\n  const setPayslipPeriod = async name => {\n    try {\n      dispatch({\n        type: SET_PAYSLIP_PERIOD,\n        payload: name\n      });\n    } catch (error) {\n      dispatch(error);\n    }\n  };\n  const setPayslipEndMonthDate = async name => {\n    try {\n      dispatch({\n        type: SET_PAYSLIP_ENDMONTHDATE,\n        payload: name\n      });\n    } catch (error) {\n      dispatch(error);\n    }\n  };\n  const setEditPayslipID = async id => {\n    try {\n      dispatch({\n        type: SET_EDITPAYSLIPID,\n        payload: id\n      });\n    } catch (error) {\n      dispatch(error);\n    }\n  };\n  const getSinglePayslip = async id => {\n    dispatch({\n      type: GET_SINGLE_PAYSLIP_BEGIN\n    });\n    try {\n      const {\n        data\n      } = await axios.get(`${payslips_url}?id=${id}`);\n      const singlepayslip = data;\n      dispatch({\n        type: GET_SINGLE_PAYSLIP_SUCCESS,\n        payload: singlepayslip\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_SINGLE_PAYSLIP_ERROR\n      });\n    }\n  };\n  const addPayslip = async data => {\n    //const { id, name, from_date, to_date, reason, no_of_days, status } = data;\n    //\n    dispatch({\n      type: ADD_PAYSLIP_BEGIN\n    });\n    try {\n      await fetch(payslips_url, {\n        method: \"POST\",\n        body: JSON.stringify({\n          ...data\n        })\n      });\n      dispatch({\n        type: ADD_PAYSLIP_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: ADD_PAYSLIP_ERROR\n      });\n    }\n  };\n  const updatePayslip = async data => {\n    const {\n      id,\n      ...fields\n    } = data;\n    dispatch({\n      type: UPDATE_PAYSLIP_BEGIN\n    });\n    try {\n      await fetch(payslips_url, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          id,\n          ...fields\n        })\n      });\n      dispatch({\n        type: UPDATE_PAYSLIP_SUCCESS\n      });\n    } catch (error) {\n      dispatch({\n        type: UPDATE_PAYSLIP_ERROR\n      });\n    }\n  };\n  const deletePayslip = async id => {\n    dispatch({\n      type: DELETE_PAYSLIP_BEGIN\n    });\n    try {\n      await fetch(payslips_url, {\n        method: \"DELETE\",\n        body: JSON.stringify({\n          id: id\n        })\n      });\n      dispatch({\n        type: DELETE_PAYSLIP_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: DELETE_PAYSLIP_ERROR\n      });\n    }\n  };\n\n  //.... payslip items\n  const getPayslipitems = async fv => {\n    dispatch({\n      type: GET_PAYSLIPITEMS_BEGIN\n    });\n    try {\n      const {\n        data\n      } = await axios.get(`${payslipitems_url}?period=${fv}`);\n      const payslipitems = data;\n      dispatch({\n        type: GET_PAYSLIPITEMS_SUCCESS,\n        payload: payslipitems\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_PAYSLIPITEMS_ERROR\n      });\n    }\n  };\n  const addPayslipitem = async data => {\n    //const { id, name, empid, period, payitem, paytype, amount } = data;\n    //\n    dispatch({\n      type: ADD_PAYSLIPITEM_BEGIN\n    });\n    try {\n      await fetch(payslipitems_url, {\n        method: \"POST\",\n        body: JSON.stringify({\n          ...data\n        })\n      });\n      dispatch({\n        type: ADD_PAYSLIPITEM_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: ADD_PAYSLIPITEM_ERROR\n      });\n    }\n  };\n  const updatePayslipitem = async data => {\n    const {\n      id,\n      ...fields\n    } = data;\n    dispatch({\n      type: UPDATE_PAYSLIPITEM_BEGIN\n    });\n    try {\n      await fetch(payslipitems_url, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          id,\n          ...fields\n        })\n      });\n      dispatch({\n        type: UPDATE_PAYSLIPITEM_SUCCESS\n      });\n    } catch (error) {\n      dispatch({\n        type: UPDATE_PAYSLIPITEM_ERROR\n      });\n    }\n  };\n  const deletePayslipitem = async id => {\n    dispatch({\n      type: DELETE_PAYSLIPITEM_BEGIN\n    });\n    try {\n      await fetch(payslipitems_url, {\n        method: \"DELETE\",\n        body: JSON.stringify({\n          id: id\n        })\n      });\n      dispatch({\n        type: DELETE_PAYSLIPITEM_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: DELETE_PAYSLIPITEM_ERROR\n      });\n    }\n  };\n\n  //.... payrun\n  const getPayrun = async () => {\n    dispatch({\n      type: GET_PAYRUN_BEGIN\n    });\n    try {\n      const {\n        data\n      } = await axios.get(`${payrun_url}`);\n      const payrun = data;\n      dispatch({\n        type: GET_PAYRUN_SUCCESS,\n        payload: payrun\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_PAYRUN_ERROR\n      });\n    }\n  };\n\n  //.... payrun\n  const getBatchPayrun = async fi => {\n    dispatch({\n      type: GET_BATCHPAYRUN_BEGIN\n    });\n    try {\n      const {\n        data\n      } = await axios.get(`${payrun_url}?fi=${fi}`);\n      const payrun = data;\n      dispatch({\n        type: GET_BATCHPAYRUN_SUCCESS,\n        payload: payrun\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_BATCHPAYRUN_ERROR\n      });\n    }\n  };\n  const addPayrun = async data => {\n    //const { id, name, empid, period, payitem, paytype, amount } = data;\n    //\n    dispatch({\n      type: ADD_PAYRUN_BEGIN\n    });\n    try {\n      await fetch(payrun_url, {\n        method: \"POST\",\n        body: JSON.stringify({\n          ...data\n        })\n      });\n      dispatch({\n        type: ADD_PAYRUN_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: ADD_PAYRUN_ERROR\n      });\n    }\n  };\n  const updatePayrun = async data => {\n    const {\n      id,\n      ...fields\n    } = data;\n    dispatch({\n      type: UPDATE_PAYRUN_BEGIN\n    });\n    try {\n      await fetch(payrun_url, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          id,\n          ...fields\n        })\n      });\n      dispatch({\n        type: UPDATE_PAYRUN_SUCCESS\n      });\n    } catch (error) {\n      dispatch({\n        type: UPDATE_PAYRUN_ERROR\n      });\n    }\n  };\n  const deletePayrun = async id => {\n    dispatch({\n      type: DELETE_PAYRUN_BEGIN\n    });\n    try {\n      await fetch(payrun_url, {\n        method: \"DELETE\",\n        body: JSON.stringify({\n          id: id\n        })\n      });\n      dispatch({\n        type: DELETE_PAYRUN_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: DELETE_PAYRUN_ERROR\n      });\n    }\n  };\n\n  //.... payslip earnings\n  const loadPayslipEarnings = async () => {\n    dispatch({\n      type: GET_PAYSLIPEARNINGS_BEGIN\n    });\n    try {\n      // const res = await fetch(\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\n      // );\n      const res = await fetch(payslipearnings_url);\n      //const { data } = await axios.get(employees_url);\n      //const employees = data;\n      const payslipearnings = await res.json();\n      dispatch({\n        type: GET_PAYSLIPEARNINGS_SUCCESS,\n        payload: payslipearnings\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_PAYSLIPEARNINGS_ERROR\n      });\n    }\n  };\n  //.... payslip earnings\n  const getSingleBatchPayslipEarnings = async (empid, period) => {\n    dispatch({\n      type: GET_PAYSLIPEARNINGS_BEGIN\n    });\n    try {\n      // const res = await fetch(\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\n      // );\n      const res = await fetch(`${payslipearnings_url}?fv=${empid}&period=${period}`);\n      //const { data } = await axios.get(employees_url);\n      //const employees = data;\n      const payslipearnings = await res.json();\n      dispatch({\n        type: GET_PAYSLIPEARNINGS_SUCCESS,\n        payload: payslipearnings\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_PAYSLIPEARNINGS_ERROR\n      });\n    }\n  };\n  const addPayslipEarning = async data => {\n    //const { id, name, period, description, amount } = data;\n    //\n    dispatch({\n      type: ADD_PAYSLIPEARNING_BEGIN\n    });\n    try {\n      await fetch(payslipearnings_url, {\n        method: \"POST\",\n        body: JSON.stringify({\n          ...data\n        })\n      });\n      dispatch({\n        type: ADD_PAYSLIPEARNING_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: ADD_PAYSLIPEARNING_ERROR\n      });\n    }\n  };\n  const updatePayslipEarning = async data => {\n    const {\n      id,\n      ...fields\n    } = data;\n    dispatch({\n      type: UPDATE_PAYSLIPEARNING_BEGIN\n    });\n    try {\n      await fetch(payslipearnings_url, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          id,\n          ...fields\n        })\n      });\n      dispatch({\n        type: UPDATE_PAYSLIPEARNING_SUCCESS\n      });\n    } catch (error) {\n      dispatch({\n        type: UPDATE_PAYSLIPEARNING_ERROR\n      });\n    }\n  };\n  const deletePayslipEarning = async id => {\n    dispatch({\n      type: DELETE_PAYSLIPEARNING_BEGIN\n    });\n    try {\n      await fetch(payslipearnings_url, {\n        method: \"DELETE\",\n        body: JSON.stringify({\n          id: id\n        })\n      });\n      dispatch({\n        type: DELETE_PAYSLIPEARNING_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: DELETE_PAYSLIPEARNING_ERROR\n      });\n    }\n  };\n\n  //.... payslip deductions\n  const loadPayslipDeductions = async () => {\n    dispatch({\n      type: GET_PAYSLIPDEDUCTIONS_BEGIN\n    });\n    try {\n      // const res = await fetch(\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\n      // );\n      const res = await fetch(payslipdeductions_url);\n      //const { data } = await axios.get(employees_url);\n      //const employees = data;\n      const payslipdeductions = await res.json();\n      dispatch({\n        type: GET_PAYSLIPDEDUCTIONS_SUCCESS,\n        payload: payslipdeductions\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_PAYSLIPDEDUCTIONS_ERROR\n      });\n    }\n  };\n  const getSingleBatchPayslipDeductions = async (empid, period) => {\n    dispatch({\n      type: GET_PAYSLIPDEDUCTIONS_BEGIN\n    });\n    try {\n      // const res = await fetch(\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\n      // );\n      const res = await fetch(`${payslipdeductions_url}?fv=${empid}&period=${period}`);\n      //const { data } = await axios.get(employees_url);\n      //const employees = data;\n      const payslipdeductions = await res.json();\n      dispatch({\n        type: GET_PAYSLIPDEDUCTIONS_SUCCESS,\n        payload: payslipdeductions\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_PAYSLIPDEDUCTIONS_ERROR\n      });\n    }\n  };\n  const addPayslipDeduction = async data => {\n    //const { id, name, period, description, amount } = data;\n    //\n    dispatch({\n      type: ADD_PAYSLIPDEDUCTION_BEGIN\n    });\n    try {\n      await fetch(payslipdeductions_url, {\n        method: \"POST\",\n        body: JSON.stringify({\n          ...data\n        })\n      });\n      dispatch({\n        type: ADD_PAYSLIPDEDUCTION_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: ADD_PAYSLIPDEDUCTION_ERROR\n      });\n    }\n  };\n  const updatePayslipDeduction = async data => {\n    const {\n      id,\n      ...fields\n    } = data;\n    dispatch({\n      type: UPDATE_PAYSLIPDEDUCTION_BEGIN\n    });\n    try {\n      await fetch(payslipdeductions_url, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          id,\n          ...fields\n        })\n      });\n      dispatch({\n        type: UPDATE_PAYSLIPDEDUCTION_SUCCESS\n      });\n    } catch (error) {\n      dispatch({\n        type: UPDATE_PAYSLIPDEDUCTION_ERROR\n      });\n    }\n  };\n  const deletePayslipDeduction = async id => {\n    dispatch({\n      type: DELETE_PAYSLIPDEDUCTION_BEGIN\n    });\n    try {\n      await fetch(payslipdeductions_url, {\n        method: \"DELETE\",\n        body: JSON.stringify({\n          id: id\n        })\n      });\n      dispatch({\n        type: DELETE_PAYSLIPDEDUCTION_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: DELETE_PAYSLIPDEDUCTION_ERROR\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(PayslipsContext.Provider, {\n    value: {\n      ...state,\n      loadPayslips,\n      loadPendingPayslips,\n      loadEmpPayslips,\n      addPayslip,\n      updatePayslip,\n      deletePayslip,\n      getSinglePayslip,\n      getSingleBatchPayslip,\n      setEditPayslipID,\n      setIsPayslipEditingOn,\n      setIsPayslipEditingOff,\n      setPayslipsData,\n      resetPayslipsData,\n      updatePayslipsData,\n      loadPayslipEarnings,\n      addPayslipEarning,\n      updatePayslipEarning,\n      deletePayslipEarning,\n      getSingleBatchPayslipEarnings,\n      setPayslipEarningAmount,\n      loadPayslipDeductions,\n      addPayslipDeduction,\n      updatePayslipDeduction,\n      deletePayslipDeduction,\n      getSingleBatchPayslipDeductions,\n      setPayslipDeductionAmount,\n      resetSinglePayslip,\n      setPayslipPeriod,\n      setPayslipEndMonthDate,\n      getPayslipitems,\n      deletePayslipitem,\n      updatePayslipitem,\n      addPayslipitem,\n      getPayrun,\n      getBatchPayrun,\n      deletePayrun,\n      updatePayrun,\n      addPayrun\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 653,\n    columnNumber: 5\n  }, this);\n};\nexport const usePayslipsContext = () => {\n  return useContext(PayslipsContext);\n};","map":{"version":3,"names":["React","useContext","useReducer","axios","reducer","payslips_url","payslipitems_url","payrun_url","payslipearnings_url","payslipdeductions_url","SET_EDITPAYSLIPID","SET_PAYSLIPS_DATA","RESET_PAYSLIPS_DATA","UPDATE_PAYSLIPS_DATA","SET_ISPAYSLIPEDITING_ON","SET_ISPAYSLIPEDITING_OFF","SET_PAYSLIP_PERIOD","SET_PAYSLIP_ENDMONTHDATE","SET_PAYSLIPEARNING_AMOUNT","SET_PAYSLIPDEDUCTION_AMOUNT","GET_PAYSLIPS_BEGIN","GET_PAYSLIPS_SUCCESS","GET_PAYSLIPS_ERROR","GET_PAYSLIPITEMS_BEGIN","GET_PAYSLIPITEMS_SUCCESS","GET_PAYSLIPITEMS_ERROR","ADD_PAYSLIPITEM_BEGIN","ADD_PAYSLIPITEM_SUCCESS","ADD_PAYSLIPITEM_ERROR","DELETE_PAYSLIPITEM_BEGIN","DELETE_PAYSLIPITEM_SUCCESS","DELETE_PAYSLIPITEM_ERROR","UPDATE_PAYSLIPITEM_BEGIN","UPDATE_PAYSLIPITEM_SUCCESS","UPDATE_PAYSLIPITEM_ERROR","GET_PAYRUN_BEGIN","GET_PAYRUN_SUCCESS","GET_PAYRUN_ERROR","GET_BATCHPAYRUN_BEGIN","GET_BATCHPAYRUN_SUCCESS","GET_BATCHPAYRUN_ERROR","ADD_PAYRUN_BEGIN","ADD_PAYRUN_SUCCESS","ADD_PAYRUN_ERROR","UPDATE_PAYRUN_BEGIN","UPDATE_PAYRUN_SUCCESS","UPDATE_PAYRUN_ERROR","DELETE_PAYRUN_BEGIN","DELETE_PAYRUN_SUCCESS","DELETE_PAYRUN_ERROR","GET_SINGLE_PAYSLIP_BEGIN","GET_SINGLE_PAYSLIP_SUCCESS","GET_SINGLE_PAYSLIP_ERROR","GET_PENDING_PAYSLIP_BEGIN","GET_PENDING_PAYSLIP_SUCCESS","GET_PENDING_PAYSLIP_ERROR","GET_SINGLEBATCH_PAYSLIP_BEGIN","GET_SINGLEBATCH_PAYSLIP_SUCCESS","GET_SINGLEBATCH_PAYSLIP_ERROR","ADD_PAYSLIP_BEGIN","ADD_PAYSLIP_SUCCESS","ADD_PAYSLIP_ERROR","DELETE_PAYSLIP_BEGIN","DELETE_PAYSLIP_SUCCESS","DELETE_PAYSLIP_ERROR","UPDATE_PAYSLIP_BEGIN","UPDATE_PAYSLIP_SUCCESS","UPDATE_PAYSLIP_ERROR","RESET_SINGLE_PAYSLIP","GET_PAYSLIPEARNINGS_BEGIN","GET_PAYSLIPEARNINGS_SUCCESS","GET_PAYSLIPEARNINGS_ERROR","ADD_PAYSLIPEARNING_BEGIN","ADD_PAYSLIPEARNING_SUCCESS","ADD_PAYSLIPEARNING_ERROR","DELETE_PAYSLIPEARNING_BEGIN","DELETE_PAYSLIPEARNING_SUCCESS","DELETE_PAYSLIPEARNING_ERROR","UPDATE_PAYSLIPEARNING_BEGIN","UPDATE_PAYSLIPEARNING_SUCCESS","UPDATE_PAYSLIPEARNING_ERROR","GET_PAYSLIPDEDUCTIONS_BEGIN","GET_PAYSLIPDEDUCTIONS_SUCCESS","GET_PAYSLIPDEDUCTIONS_ERROR","ADD_PAYSLIPDEDUCTION_BEGIN","ADD_PAYSLIPDEDUCTION_SUCCESS","ADD_PAYSLIPDEDUCTION_ERROR","DELETE_PAYSLIPDEDUCTION_BEGIN","DELETE_PAYSLIPDEDUCTION_SUCCESS","DELETE_PAYSLIPDEDUCTION_ERROR","UPDATE_PAYSLIPDEDUCTION_BEGIN","UPDATE_PAYSLIPDEDUCTION_SUCCESS","UPDATE_PAYSLIPDEDUCTION_ERROR","initialState","isPayslipEditing","alertPayslip","show","msg","type","editPayslipID","payslips_loading","payslips_error","payslip_period","payslip_endmonthdate","payslip_earning_amount","payslip_deduction_amount","payslips","payslipsdata","single_payslip_loading","single_payslip_error","single_payslip","singlebatch_payslip_loading","singlebatch_payslip_error","singlebatch_payslip","delete_payslip_loading","delete_payslip_error","update_payslip_loading","update_payslip_error","add_payslip_loading","add_payslip_error","isPayslipEarningEditing","alertPayslipEarning","editPayslipEarningID","payslipearnings_loading","payslipearnings_error","payslipearnings","pending_payslips_loading","pending_payslips_error","pending_payslips","single_payslipearning_loading","single_payslipearning_error","single_payslipearning","delete_payslipearning_loading","delete_payslipearning_error","update_payslipearning_loading","update_payslipearning_error","add_payslipearning_loading","add_payslipearning_error","isPayslipDeductionEditing","alertPayslipDeduction","editPayslipDeductionID","payslipdeductions_loading","payslipdeductions_error","payslipdeductions","single_payslipdeduction_loading","single_payslipdeduction_error","single_payslipdeduction","delete_payslipdeduction_loading","delete_payslipdeduction_error","update_payslipdeduction_loading","update_payslipdeduction_error","add_payslipdeduction_loading","add_payslipdeduction_error","payslipitems_loading","payslipitems_error","payslipitems","delete_payslipitem_loading","delete_payslipitem_error","update_payslipitem_loading","update_payslipitem_error","add_payslipitem_loading","add_payslipitem_error","single_payslipitem","payrun_loading","payrun_error","payrun","batchpayrun_loading","batchpayrun_error","batchpayrun","delete_payrun_loading","delete_payrun_error","update_payrun_loading","update_payrun_error","add_payrun_loading","add_payrun_error","single_payrun","PayslipsContext","createContext","PayslipsProvider","children","state","dispatch","loadPayslips","res","fetch","json","payload","error","loadPendingPayslips","fi","loadEmpPayslips","em","getSingleBatchPayslip","singlebatchpayslip","console","log","setIsPayslipEditingOn","setIsPayslipEditingOff","setPayslipsData","value","resetPayslipsData","updatePayslipsData","name","resetSinglePayslip","setPayslipEarningAmount","setPayslipDeductionAmount","setPayslipPeriod","setPayslipEndMonthDate","setEditPayslipID","id","getSinglePayslip","data","get","singlepayslip","addPayslip","method","body","JSON","stringify","err","updatePayslip","fields","deletePayslip","getPayslipitems","fv","addPayslipitem","updatePayslipitem","deletePayslipitem","getPayrun","getBatchPayrun","addPayrun","updatePayrun","deletePayrun","loadPayslipEarnings","getSingleBatchPayslipEarnings","empid","period","addPayslipEarning","updatePayslipEarning","deletePayslipEarning","loadPayslipDeductions","getSingleBatchPayslipDeductions","addPayslipDeduction","updatePayslipDeduction","deletePayslipDeduction","usePayslipsContext"],"sources":["D:/react-myprojects/hrms-demo/src/context/payslips_context.js"],"sourcesContent":["import React, { useContext,  useReducer } from \"react\";\r\nimport axios from \"axios\";\r\nimport reducer from \"../reducers/payslips_reducer\";\r\nimport { payslips_url } from \"../utils/constants\";\r\nimport { payslipitems_url } from \"../utils/constants\";\r\nimport { payrun_url } from \"../utils/constants\";\r\nimport { payslipearnings_url } from \"../utils/constants\";\r\nimport { payslipdeductions_url } from \"../utils/constants\";\r\n\r\nimport {\r\n  SET_EDITPAYSLIPID,\r\n  SET_PAYSLIPS_DATA,\r\n  RESET_PAYSLIPS_DATA,\r\n  UPDATE_PAYSLIPS_DATA,\r\n  SET_ISPAYSLIPEDITING_ON,\r\n  SET_ISPAYSLIPEDITING_OFF,\r\n  SET_PAYSLIP_PERIOD,\r\n  SET_PAYSLIP_ENDMONTHDATE,\r\n  //SET_SINGLEPAYSLIP,\r\n  SET_PAYSLIPEARNING_AMOUNT,\r\n  SET_PAYSLIPDEDUCTION_AMOUNT,\r\n  GET_PAYSLIPS_BEGIN,\r\n  GET_PAYSLIPS_SUCCESS,\r\n  GET_PAYSLIPS_ERROR,\r\n  GET_PAYSLIPITEMS_BEGIN,\r\n  GET_PAYSLIPITEMS_SUCCESS,\r\n  GET_PAYSLIPITEMS_ERROR,\r\n  ADD_PAYSLIPITEM_BEGIN,\r\n  ADD_PAYSLIPITEM_SUCCESS,\r\n  ADD_PAYSLIPITEM_ERROR,\r\n  DELETE_PAYSLIPITEM_BEGIN,\r\n  DELETE_PAYSLIPITEM_SUCCESS,\r\n  DELETE_PAYSLIPITEM_ERROR,\r\n  UPDATE_PAYSLIPITEM_BEGIN,\r\n  UPDATE_PAYSLIPITEM_SUCCESS,\r\n  UPDATE_PAYSLIPITEM_ERROR,\r\n  GET_PAYRUN_BEGIN,\r\n  GET_PAYRUN_SUCCESS,\r\n  GET_PAYRUN_ERROR,\r\n  GET_BATCHPAYRUN_BEGIN,\r\n  GET_BATCHPAYRUN_SUCCESS,\r\n  GET_BATCHPAYRUN_ERROR,\r\n  ADD_PAYRUN_BEGIN,\r\n  ADD_PAYRUN_SUCCESS,\r\n  ADD_PAYRUN_ERROR,\r\n  UPDATE_PAYRUN_BEGIN,\r\n  UPDATE_PAYRUN_SUCCESS,\r\n  UPDATE_PAYRUN_ERROR,\r\n  DELETE_PAYRUN_BEGIN,\r\n  DELETE_PAYRUN_SUCCESS,\r\n  DELETE_PAYRUN_ERROR,\r\n  GET_SINGLE_PAYSLIP_BEGIN,\r\n  GET_SINGLE_PAYSLIP_SUCCESS,\r\n  GET_SINGLE_PAYSLIP_ERROR,\r\n  GET_PENDING_PAYSLIP_BEGIN,\r\n  GET_PENDING_PAYSLIP_SUCCESS,\r\n  GET_PENDING_PAYSLIP_ERROR,\r\n  GET_SINGLEBATCH_PAYSLIP_BEGIN,\r\n  GET_SINGLEBATCH_PAYSLIP_SUCCESS,\r\n  GET_SINGLEBATCH_PAYSLIP_ERROR,\r\n  ADD_PAYSLIP_BEGIN,\r\n  ADD_PAYSLIP_SUCCESS,\r\n  ADD_PAYSLIP_ERROR,\r\n  DELETE_PAYSLIP_BEGIN,\r\n  DELETE_PAYSLIP_SUCCESS,\r\n  DELETE_PAYSLIP_ERROR,\r\n  UPDATE_PAYSLIP_BEGIN,\r\n  UPDATE_PAYSLIP_SUCCESS,\r\n  UPDATE_PAYSLIP_ERROR,\r\n  RESET_SINGLE_PAYSLIP,\r\n  GET_PAYSLIPEARNINGS_BEGIN,\r\n  GET_PAYSLIPEARNINGS_SUCCESS,\r\n  GET_PAYSLIPEARNINGS_ERROR,\r\n  //GET_SINGLE_PAYSLIPEARNING_BEGIN,\r\n  //GET_SINGLE_PAYSLIPEARNING_SUCCESS,\r\n  //GET_SINGLE_PAYSLIPEARNING_ERROR,\r\n  ADD_PAYSLIPEARNING_BEGIN,\r\n  ADD_PAYSLIPEARNING_SUCCESS,\r\n  ADD_PAYSLIPEARNING_ERROR,\r\n  DELETE_PAYSLIPEARNING_BEGIN,\r\n  DELETE_PAYSLIPEARNING_SUCCESS,\r\n  DELETE_PAYSLIPEARNING_ERROR,\r\n  UPDATE_PAYSLIPEARNING_BEGIN,\r\n  UPDATE_PAYSLIPEARNING_SUCCESS,\r\n  UPDATE_PAYSLIPEARNING_ERROR,\r\n  GET_PAYSLIPDEDUCTIONS_BEGIN,\r\n  GET_PAYSLIPDEDUCTIONS_SUCCESS,\r\n  GET_PAYSLIPDEDUCTIONS_ERROR,\r\n  //GET_SINGLE_PAYSLIPDEDUCTION_BEGIN,\r\n  //GET_SINGLE_PAYSLIPDEDUCTION_SUCCESS,\r\n  //GET_SINGLE_PAYSLIPDEDUCTION_ERROR,\r\n  ADD_PAYSLIPDEDUCTION_BEGIN,\r\n  ADD_PAYSLIPDEDUCTION_SUCCESS,\r\n  ADD_PAYSLIPDEDUCTION_ERROR,\r\n  DELETE_PAYSLIPDEDUCTION_BEGIN,\r\n  DELETE_PAYSLIPDEDUCTION_SUCCESS,\r\n  DELETE_PAYSLIPDEDUCTION_ERROR,\r\n  UPDATE_PAYSLIPDEDUCTION_BEGIN,\r\n  UPDATE_PAYSLIPDEDUCTION_SUCCESS,\r\n  UPDATE_PAYSLIPDEDUCTION_ERROR,\r\n} from \"../actions\";\r\n\r\nconst initialState = {\r\n  isPayslipEditing: false,\r\n  alertPayslip: { show: false, msg: \"\", type: \"\" },\r\n  editPayslipID: null,\r\n  payslips_loading: false,\r\n  payslips_error: false,\r\n  payslip_period: \"\",\r\n  payslip_endmonthdate: \"\",\r\n  payslip_earning_amount: 0,\r\n  payslip_deduction_amount: 0,\r\n  payslips: [],\r\n  payslipsdata: [],\r\n  single_payslip_loading: false,\r\n  single_payslip_error: false,\r\n  single_payslip: {},\r\n  singlebatch_payslip_loading: false,\r\n  singlebatch_payslip_error: false,\r\n  singlebatch_payslip: {},\r\n  delete_payslip_loading: false,\r\n  delete_payslip_error: false,\r\n  update_payslip_loading: false,\r\n  update_payslip_error: false,\r\n  add_payslip_loading: false,\r\n  add_payslip_error: false,\r\n  // filterValue: \"Female\",\r\n  // filterfield: \"gender\",\r\n  // payslip earnings\r\n  isPayslipEarningEditing: false,\r\n  alertPayslipEarning: { show: false, msg: \"\", type: \"\" },\r\n  editPayslipEarningID: null,\r\n  payslipearnings_loading: false,\r\n  payslipearnings_error: false,\r\n  payslipearnings: [],\r\n  pending_payslips_loading: false,\r\n  pending_payslips_error: false,\r\n  pending_payslips: [],\r\n  single_payslipearning_loading: false,\r\n  single_payslipearning_error: false,\r\n  single_payslipearning: {},\r\n  delete_payslipearning_loading: false,\r\n  delete_payslipearning_error: false,\r\n  update_payslipearning_loading: false,\r\n  update_payslipearning_error: false,\r\n  add_payslipearning_loading: false,\r\n  add_payslipearning_error: false,\r\n  // payslip deductions\r\n  isPayslipDeductionEditing: false,\r\n  alertPayslipDeduction: { show: false, msg: \"\", type: \"\" },\r\n  editPayslipDeductionID: null,\r\n  payslipdeductions_loading: false,\r\n  payslipdeductions_error: false,\r\n  payslipdeductions: [],\r\n  single_payslipdeduction_loading: false,\r\n  single_payslipdeduction_error: false,\r\n  single_payslipdeduction: {},\r\n  delete_payslipdeduction_loading: false,\r\n  delete_payslipdeduction_error: false,\r\n  update_payslipdeduction_loading: false,\r\n  update_payslipdeduction_error: false,\r\n  add_payslipdeduction_loading: false,\r\n  add_payslipdeduction_error: false,\r\n  payslipitems_loading: false,\r\n  payslipitems_error: false,\r\n  payslipitems: [],\r\n  delete_payslipitem_loading: false,\r\n  delete_payslipitem_error: false,\r\n  update_payslipitem_loading: false,\r\n  update_payslipitem_error: false,\r\n  add_payslipitem_loading: false,\r\n  add_payslipitem_error: false,\r\n  single_payslipitem: {},\r\n\r\n  payrun_loading: false,\r\n  payrun_error: false,\r\n  payrun: [],\r\n  batchpayrun_loading: false,\r\n  batchpayrun_error: false,\r\n  batchpayrun: [],\r\n  delete_payrun_loading: false,\r\n  delete_payrun_error: false,\r\n  update_payrun_loading: false,\r\n  update_payrun_error: false,\r\n  add_payrun_loading: false,\r\n  add_payrun_error: false,\r\n  single_payrun: {},\r\n};\r\n\r\nconst PayslipsContext = React.createContext();\r\n\r\nexport const PayslipsProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  //....... payslip\r\n  const loadPayslips = async () => {\r\n    dispatch({ type: GET_PAYSLIPS_BEGIN });\r\n    try {\r\n      // const res = await fetch(\r\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\r\n      // );\r\n      const res = await fetch(payslips_url);\r\n      //const { data } = await axios.get(employees_url);\r\n      //const employees = data;\r\n      const payslips = await res.json();\r\n      dispatch({ type: GET_PAYSLIPS_SUCCESS, payload: payslips });\r\n    } catch (error) {\r\n      dispatch({ type: GET_PAYSLIPS_ERROR });\r\n    }\r\n  };\r\n\r\n  const loadPendingPayslips = async (fi) => {\r\n    dispatch({ type: GET_PENDING_PAYSLIP_BEGIN });\r\n    try {\r\n      // const res = await fetch(\r\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\r\n      // );\r\n      const res = await fetch(`${payslips_url}?fi=${fi}`);\r\n      //const { data } = await axios.get(employees_url);\r\n      //const employees = data;\r\n      const pending_payslips = await res.json();\r\n      dispatch({\r\n        type: GET_PENDING_PAYSLIP_SUCCESS,\r\n        payload: pending_payslips,\r\n      });\r\n    } catch (error) {\r\n      dispatch({ type: GET_PENDING_PAYSLIP_ERROR });\r\n    }\r\n  };\r\n\r\n  const loadEmpPayslips = async (em) => {\r\n    dispatch({ type: GET_PAYSLIPS_BEGIN });\r\n    try {\r\n      // const res = await fetch(\r\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\r\n      // );\r\n      const res = await fetch(`${payslips_url}?em=${em}`);\r\n      //const { data } = await axios.get(employees_url);\r\n      //const employees = data;\r\n      const payslips = await res.json();\r\n      dispatch({ type: GET_PAYSLIPS_SUCCESS, payload: payslips });\r\n    } catch (error) {\r\n      dispatch({ type: GET_PAYSLIPS_ERROR });\r\n    }\r\n  };\r\n\r\n  const getSingleBatchPayslip = async (payrun) => {\r\n    dispatch({ type: GET_SINGLEBATCH_PAYSLIP_BEGIN });\r\n    try {\r\n      const res = await fetch(`${payslips_url}?fv=${payrun}`);\r\n      const singlebatchpayslip = await res.json();\r\n      console.log(\"context\", singlebatchpayslip);\r\n      dispatch({\r\n        type: GET_SINGLEBATCH_PAYSLIP_SUCCESS,\r\n        payload: singlebatchpayslip,\r\n      });\r\n    } catch (error) {\r\n      dispatch({ type: GET_SINGLEBATCH_PAYSLIP_ERROR });\r\n    }\r\n  };\r\n\r\n  const setIsPayslipEditingOn = () => {\r\n    dispatch({ type: SET_ISPAYSLIPEDITING_ON });\r\n  };\r\n\r\n  const setIsPayslipEditingOff = () => {\r\n    dispatch({ type: SET_ISPAYSLIPEDITING_OFF });\r\n  };\r\n\r\n  const setPayslipsData = (value) => {\r\n    dispatch({ type: SET_PAYSLIPS_DATA, payload: value });\r\n  };\r\n\r\n  const resetPayslipsData = () => {\r\n    dispatch({ type: RESET_PAYSLIPS_DATA });\r\n  };\r\n\r\n  const updatePayslipsData = (name, value) => {\r\n    dispatch({ type: UPDATE_PAYSLIPS_DATA, payload: { name, value } });\r\n  };\r\n\r\n  const resetSinglePayslip = () => {\r\n    dispatch({ type: RESET_SINGLE_PAYSLIP });\r\n  };\r\n\r\n  const setPayslipEarningAmount = (value) => {\r\n    dispatch({ type: SET_PAYSLIPEARNING_AMOUNT, payload: value });\r\n  };\r\n  const setPayslipDeductionAmount = (value) => {\r\n    dispatch({ type: SET_PAYSLIPDEDUCTION_AMOUNT, payload: value });\r\n  };\r\n\r\n  const setPayslipPeriod = async (name) => {\r\n    try {\r\n      dispatch({ type: SET_PAYSLIP_PERIOD, payload: name });\r\n    } catch (error) {\r\n      dispatch(error);\r\n    }\r\n  };\r\n  const setPayslipEndMonthDate = async (name) => {\r\n    try {\r\n      dispatch({ type: SET_PAYSLIP_ENDMONTHDATE, payload: name });\r\n    } catch (error) {\r\n      dispatch(error);\r\n    }\r\n  };\r\n\r\n  const setEditPayslipID = async (id) => {\r\n    try {\r\n      dispatch({ type: SET_EDITPAYSLIPID, payload: id });\r\n    } catch (error) {\r\n      dispatch(error);\r\n    }\r\n  };\r\n\r\n  const getSinglePayslip = async (id) => {\r\n    dispatch({ type: GET_SINGLE_PAYSLIP_BEGIN });\r\n    try {\r\n      const { data } = await axios.get(`${payslips_url}?id=${id}`);\r\n      const singlepayslip = data;\r\n      dispatch({ type: GET_SINGLE_PAYSLIP_SUCCESS, payload: singlepayslip });\r\n    } catch (error) {\r\n      dispatch({ type: GET_SINGLE_PAYSLIP_ERROR });\r\n    }\r\n  };\r\n\r\n  const addPayslip = async (data) => {\r\n    //const { id, name, from_date, to_date, reason, no_of_days, status } = data;\r\n    //\r\n    dispatch({ type: ADD_PAYSLIP_BEGIN });\r\n    try {\r\n      await fetch(payslips_url, {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ ...data }),\r\n      });\r\n      dispatch({ type: ADD_PAYSLIP_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({ type: ADD_PAYSLIP_ERROR });\r\n    }\r\n  };\r\n\r\n  const updatePayslip = async (data) => {\r\n    const { id, ...fields } = data;\r\n\r\n    dispatch({ type: UPDATE_PAYSLIP_BEGIN });\r\n    try {\r\n      await fetch(payslips_url, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify({ id, ...fields }),\r\n      });\r\n      dispatch({ type: UPDATE_PAYSLIP_SUCCESS });\r\n    } catch (error) {\r\n      dispatch({ type: UPDATE_PAYSLIP_ERROR });\r\n    }\r\n  };\r\n\r\n  const deletePayslip = async (id) => {\r\n    dispatch({ type: DELETE_PAYSLIP_BEGIN });\r\n    try {\r\n      await fetch(payslips_url, {\r\n        method: \"DELETE\",\r\n        body: JSON.stringify({ id: id }),\r\n      });\r\n      dispatch({ type: DELETE_PAYSLIP_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({ type: DELETE_PAYSLIP_ERROR });\r\n    }\r\n  };\r\n\r\n  //.... payslip items\r\n  const getPayslipitems = async (fv) => {\r\n    dispatch({ type: GET_PAYSLIPITEMS_BEGIN });\r\n    try {\r\n      const { data } = await axios.get(`${payslipitems_url}?period=${fv}`);\r\n      const payslipitems = data;\r\n      dispatch({ type: GET_PAYSLIPITEMS_SUCCESS, payload: payslipitems });\r\n    } catch (error) {\r\n      dispatch({ type: GET_PAYSLIPITEMS_ERROR });\r\n    }\r\n  };\r\n\r\n  const addPayslipitem = async (data) => {\r\n    //const { id, name, empid, period, payitem, paytype, amount } = data;\r\n    //\r\n    dispatch({ type: ADD_PAYSLIPITEM_BEGIN });\r\n    try {\r\n      await fetch(payslipitems_url, {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ ...data }),\r\n      });\r\n      dispatch({ type: ADD_PAYSLIPITEM_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({ type: ADD_PAYSLIPITEM_ERROR });\r\n    }\r\n  };\r\n\r\n  const updatePayslipitem = async (data) => {\r\n    const { id, ...fields } = data;\r\n\r\n    dispatch({ type: UPDATE_PAYSLIPITEM_BEGIN });\r\n    try {\r\n      await fetch(payslipitems_url, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify({ id, ...fields }),\r\n      });\r\n      dispatch({ type: UPDATE_PAYSLIPITEM_SUCCESS });\r\n    } catch (error) {\r\n      dispatch({ type: UPDATE_PAYSLIPITEM_ERROR });\r\n    }\r\n  };\r\n\r\n  const deletePayslipitem = async (id) => {\r\n    dispatch({ type: DELETE_PAYSLIPITEM_BEGIN });\r\n    try {\r\n      await fetch(payslipitems_url, {\r\n        method: \"DELETE\",\r\n        body: JSON.stringify({ id: id }),\r\n      });\r\n      dispatch({ type: DELETE_PAYSLIPITEM_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({ type: DELETE_PAYSLIPITEM_ERROR });\r\n    }\r\n  };\r\n\r\n  //.... payrun\r\n  const getPayrun = async () => {\r\n    dispatch({ type: GET_PAYRUN_BEGIN });\r\n    try {\r\n      const { data } = await axios.get(`${payrun_url}`);\r\n      const payrun = data;\r\n      dispatch({ type: GET_PAYRUN_SUCCESS, payload: payrun });\r\n    } catch (error) {\r\n      dispatch({ type: GET_PAYRUN_ERROR });\r\n    }\r\n  };\r\n\r\n  \r\n  //.... payrun\r\n  const getBatchPayrun = async (fi) => {\r\n    dispatch({ type: GET_BATCHPAYRUN_BEGIN });\r\n    try {\r\n      const { data } = await axios.get(`${payrun_url}?fi=${fi}`);\r\n      const payrun = data;\r\n      dispatch({ type: GET_BATCHPAYRUN_SUCCESS, payload: payrun });\r\n    } catch (error) {\r\n      dispatch({ type: GET_BATCHPAYRUN_ERROR });\r\n    }\r\n  };\r\n\r\n  const addPayrun = async (data) => {\r\n    //const { id, name, empid, period, payitem, paytype, amount } = data;\r\n    //\r\n    dispatch({ type: ADD_PAYRUN_BEGIN });\r\n    try {\r\n      await fetch(payrun_url, {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ ...data }),\r\n      });\r\n      dispatch({ type: ADD_PAYRUN_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({ type: ADD_PAYRUN_ERROR });\r\n    }\r\n  };\r\n\r\n  const updatePayrun = async (data) => {\r\n    const { id, ...fields } = data;\r\n\r\n    dispatch({ type: UPDATE_PAYRUN_BEGIN });\r\n    try {\r\n      await fetch(payrun_url, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify({ id, ...fields }),\r\n      });\r\n      dispatch({ type: UPDATE_PAYRUN_SUCCESS });\r\n    } catch (error) {\r\n      dispatch({ type: UPDATE_PAYRUN_ERROR });\r\n    }\r\n  };\r\n\r\n  const deletePayrun = async (id) => {\r\n    dispatch({ type: DELETE_PAYRUN_BEGIN });\r\n    try {\r\n      await fetch(payrun_url, {\r\n        method: \"DELETE\",\r\n        body: JSON.stringify({ id: id }),\r\n      });\r\n      dispatch({ type: DELETE_PAYRUN_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({ type: DELETE_PAYRUN_ERROR });\r\n    }\r\n  };\r\n\r\n  //.... payslip earnings\r\n  const loadPayslipEarnings = async () => {\r\n    dispatch({ type: GET_PAYSLIPEARNINGS_BEGIN });\r\n    try {\r\n      // const res = await fetch(\r\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\r\n      // );\r\n      const res = await fetch(payslipearnings_url);\r\n      //const { data } = await axios.get(employees_url);\r\n      //const employees = data;\r\n      const payslipearnings = await res.json();\r\n      dispatch({ type: GET_PAYSLIPEARNINGS_SUCCESS, payload: payslipearnings });\r\n    } catch (error) {\r\n      dispatch({ type: GET_PAYSLIPEARNINGS_ERROR });\r\n    }\r\n  };\r\n  //.... payslip earnings\r\n  const getSingleBatchPayslipEarnings = async (empid, period) => {\r\n    dispatch({ type: GET_PAYSLIPEARNINGS_BEGIN });\r\n    try {\r\n      // const res = await fetch(\r\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\r\n      // );\r\n      const res = await fetch(\r\n        `${payslipearnings_url}?fv=${empid}&period=${period}`\r\n      );\r\n      //const { data } = await axios.get(employees_url);\r\n      //const employees = data;\r\n      const payslipearnings = await res.json();\r\n      dispatch({ type: GET_PAYSLIPEARNINGS_SUCCESS, payload: payslipearnings });\r\n    } catch (error) {\r\n      dispatch({ type: GET_PAYSLIPEARNINGS_ERROR });\r\n    }\r\n  };\r\n  const addPayslipEarning = async (data) => {\r\n    //const { id, name, period, description, amount } = data;\r\n    //\r\n    dispatch({ type: ADD_PAYSLIPEARNING_BEGIN });\r\n    try {\r\n      await fetch(payslipearnings_url, {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ ...data }),\r\n      });\r\n      dispatch({ type: ADD_PAYSLIPEARNING_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({ type: ADD_PAYSLIPEARNING_ERROR });\r\n    }\r\n  };\r\n\r\n  const updatePayslipEarning = async (data) => {\r\n    const { id, ...fields } = data;\r\n\r\n    dispatch({ type: UPDATE_PAYSLIPEARNING_BEGIN });\r\n    try {\r\n      await fetch(payslipearnings_url, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify({ id, ...fields }),\r\n      });\r\n      dispatch({ type: UPDATE_PAYSLIPEARNING_SUCCESS });\r\n    } catch (error) {\r\n      dispatch({ type: UPDATE_PAYSLIPEARNING_ERROR });\r\n    }\r\n  };\r\n\r\n  const deletePayslipEarning = async (id) => {\r\n    dispatch({ type: DELETE_PAYSLIPEARNING_BEGIN });\r\n    try {\r\n      await fetch(payslipearnings_url, {\r\n        method: \"DELETE\",\r\n        body: JSON.stringify({ id: id }),\r\n      });\r\n      dispatch({ type: DELETE_PAYSLIPEARNING_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({ type: DELETE_PAYSLIPEARNING_ERROR });\r\n    }\r\n  };\r\n\r\n  //.... payslip deductions\r\n  const loadPayslipDeductions = async () => {\r\n    dispatch({ type: GET_PAYSLIPDEDUCTIONS_BEGIN });\r\n    try {\r\n      // const res = await fetch(\r\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\r\n      // );\r\n      const res = await fetch(payslipdeductions_url);\r\n      //const { data } = await axios.get(employees_url);\r\n      //const employees = data;\r\n      const payslipdeductions = await res.json();\r\n      dispatch({\r\n        type: GET_PAYSLIPDEDUCTIONS_SUCCESS,\r\n        payload: payslipdeductions,\r\n      });\r\n    } catch (error) {\r\n      dispatch({ type: GET_PAYSLIPDEDUCTIONS_ERROR });\r\n    }\r\n  };\r\n  const getSingleBatchPayslipDeductions = async (empid, period) => {\r\n    dispatch({ type: GET_PAYSLIPDEDUCTIONS_BEGIN });\r\n    try {\r\n      // const res = await fetch(\r\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\r\n      // );\r\n      const res = await fetch(\r\n        `${payslipdeductions_url}?fv=${empid}&period=${period}`\r\n      );\r\n      //const { data } = await axios.get(employees_url);\r\n      //const employees = data;\r\n      const payslipdeductions = await res.json();\r\n      dispatch({\r\n        type: GET_PAYSLIPDEDUCTIONS_SUCCESS,\r\n        payload: payslipdeductions,\r\n      });\r\n    } catch (error) {\r\n      dispatch({ type: GET_PAYSLIPDEDUCTIONS_ERROR });\r\n    }\r\n  };\r\n  const addPayslipDeduction = async (data) => {\r\n    //const { id, name, period, description, amount } = data;\r\n    //\r\n    dispatch({ type: ADD_PAYSLIPDEDUCTION_BEGIN });\r\n    try {\r\n      await fetch(payslipdeductions_url, {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ ...data }),\r\n      });\r\n      dispatch({ type: ADD_PAYSLIPDEDUCTION_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({ type: ADD_PAYSLIPDEDUCTION_ERROR });\r\n    }\r\n  };\r\n\r\n  const updatePayslipDeduction = async (data) => {\r\n    const { id, ...fields } = data;\r\n\r\n    dispatch({ type: UPDATE_PAYSLIPDEDUCTION_BEGIN });\r\n    try {\r\n      await fetch(payslipdeductions_url, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify({ id, ...fields }),\r\n      });\r\n      dispatch({ type: UPDATE_PAYSLIPDEDUCTION_SUCCESS });\r\n    } catch (error) {\r\n      dispatch({ type: UPDATE_PAYSLIPDEDUCTION_ERROR });\r\n    }\r\n  };\r\n\r\n  const deletePayslipDeduction = async (id) => {\r\n    dispatch({ type: DELETE_PAYSLIPDEDUCTION_BEGIN });\r\n    try {\r\n      await fetch(payslipdeductions_url, {\r\n        method: \"DELETE\",\r\n        body: JSON.stringify({ id: id }),\r\n      });\r\n      dispatch({ type: DELETE_PAYSLIPDEDUCTION_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({ type: DELETE_PAYSLIPDEDUCTION_ERROR });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <PayslipsContext.Provider\r\n      value={{\r\n        ...state,\r\n        loadPayslips,\r\n        loadPendingPayslips,\r\n        loadEmpPayslips,\r\n        addPayslip,\r\n        updatePayslip,\r\n        deletePayslip,\r\n        getSinglePayslip,\r\n        getSingleBatchPayslip,\r\n        setEditPayslipID,\r\n        setIsPayslipEditingOn,\r\n        setIsPayslipEditingOff,\r\n        setPayslipsData,\r\n        resetPayslipsData,\r\n        updatePayslipsData,\r\n        loadPayslipEarnings,\r\n        addPayslipEarning,\r\n        updatePayslipEarning,\r\n        deletePayslipEarning,\r\n        getSingleBatchPayslipEarnings,\r\n        setPayslipEarningAmount,\r\n        loadPayslipDeductions,\r\n        addPayslipDeduction,\r\n        updatePayslipDeduction,\r\n        deletePayslipDeduction,\r\n        getSingleBatchPayslipDeductions,\r\n        setPayslipDeductionAmount,\r\n        resetSinglePayslip,\r\n        setPayslipPeriod,\r\n        setPayslipEndMonthDate,\r\n        getPayslipitems,\r\n        deletePayslipitem,\r\n        updatePayslipitem,\r\n        addPayslipitem,\r\n        getPayrun,\r\n        getBatchPayrun,\r\n        deletePayrun,\r\n        updatePayrun,\r\n        addPayrun,\r\n      }}\r\n    >\r\n      {children}\r\n    </PayslipsContext.Provider>\r\n  );\r\n};\r\n\r\nexport const usePayslipsContext = () => {\r\n  return useContext(PayslipsContext);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}