{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { leavestypes_url } from \"../../utils/constants\";\nimport { filterByEmpId } from \"./utils\";\nimport axios from \"axios\";\nimport { queryKeys } from \"../react-query/constants\";\n\nasync function getLeavestypes(leaveId) {\n  const {\n    data\n  } = await axios.get(`${leavestypes_url}?fv=${leaveId}`);\n  return data;\n}\n\nexport function useLeavestypes(empid) {\n  _s();\n\n  const [filter, setFilter] = useState(\"all\");\n  const [leaveId, setLeaveId] = useState(\"\");\n  const selectFn = useCallback(unfiltered => filterByEmpId(unfiltered, filter), [filter]);\n  const fallback = [];\n  const {\n    data: leavestypes = fallback\n  } = useQuery([queryKeys.leavestypes, leaveId], () => getLeavestypes(leaveId), {\n    select: filter !== \"all\" ? selectFn : undefined\n  });\n  return {\n    leavestypes,\n    filter,\n    setFilter,\n    setLeaveId\n  };\n}\n\n_s(useLeavestypes, \"f5Z/wJQJP6AEU7wrocu/RxnWjWc=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["D:/react-myprojects/hrms-demo/src/components/leavestypes/useLeavestypes.js"],"names":["useState","useCallback","useQuery","leavestypes_url","filterByEmpId","axios","queryKeys","getLeavestypes","leaveId","data","get","useLeavestypes","empid","filter","setFilter","setLeaveId","selectFn","unfiltered","fallback","leavestypes","select","undefined"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,SAASC,aAAT,QAA8B,SAA9B;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,0BAA1B;;AAEA,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AACrC,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMJ,KAAK,CAACK,GAAN,CAAW,GAAEP,eAAgB,OAAMK,OAAQ,EAA3C,CAAvB;AACA,SAAOC,IAAP;AACD;;AAED,OAAO,SAASE,cAAT,CAAwBC,KAAxB,EAA+B;AAAA;;AACpC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACQ,OAAD,EAAUO,UAAV,IAAwBf,QAAQ,CAAC,EAAD,CAAtC;AAEA,QAAMgB,QAAQ,GAAGf,WAAW,CACzBgB,UAAD,IAAgBb,aAAa,CAACa,UAAD,EAAaJ,MAAb,CADH,EAE1B,CAACA,MAAD,CAF0B,CAA5B;AAKA,QAAMK,QAAQ,GAAG,EAAjB;AACA,QAAM;AAAET,IAAAA,IAAI,EAAEU,WAAW,GAAGD;AAAtB,MAAmChB,QAAQ,CAC/C,CAACI,SAAS,CAACa,WAAX,EAAwBX,OAAxB,CAD+C,EAE/C,MAAMD,cAAc,CAACC,OAAD,CAF2B,EAG/C;AACEY,IAAAA,MAAM,EAAEP,MAAM,KAAK,KAAX,GAAmBG,QAAnB,GAA8BK;AADxC,GAH+C,CAAjD;AAQA,SAAO;AAAEF,IAAAA,WAAF;AAAeN,IAAAA,MAAf;AAAuBC,IAAAA,SAAvB;AAAkCC,IAAAA;AAAlC,GAAP;AACD;;GAnBeJ,c;UAU2BT,Q","sourcesContent":["import { useState, useCallback } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport { leavestypes_url } from \"../../utils/constants\";\r\nimport { filterByEmpId } from \"./utils\";\r\n\r\nimport axios from \"axios\";\r\nimport { queryKeys } from \"../react-query/constants\";\r\n\r\nasync function getLeavestypes(leaveId) {\r\n  const { data } = await axios.get(`${leavestypes_url}?fv=${leaveId}`);\r\n  return data;\r\n}\r\n\r\nexport function useLeavestypes(empid) {\r\n  const [filter, setFilter] = useState(\"all\");\r\n  const [leaveId, setLeaveId] = useState(\"\");\r\n\r\n  const selectFn = useCallback(\r\n    (unfiltered) => filterByEmpId(unfiltered, filter),\r\n    [filter]\r\n  );\r\n\r\n  const fallback = [];\r\n  const { data: leavestypes = fallback } = useQuery(\r\n    [queryKeys.leavestypes, leaveId],\r\n    () => getLeavestypes(leaveId),\r\n    {\r\n      select: filter !== \"all\" ? selectFn : undefined,\r\n    }\r\n  );\r\n\r\n  return { leavestypes, filter, setFilter, setLeaveId };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}