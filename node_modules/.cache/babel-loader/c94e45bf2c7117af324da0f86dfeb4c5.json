{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\hrms-demo\\\\src\\\\components\\\\PayslipForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Icon, TextField, Paper, Typography, Divider, Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CardLayout from \"../helpers/CardLayout\";\nimport CardLayout2 from \"../helpers/CardLayout2\";\nimport { CustomDialog } from \"../helpers/CustomDialog\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useRecoilValue } from \"recoil\";\nimport { payPeriodState,\n//payPeriodEndMonthState,\npayPeriodEmpIdState\n//payEarningDataState,\n//payDeductionDataState,\n} from \"./data/atomdata\";\nimport { usePayslipsContext } from \"../context/payslips_context\";\nimport PayslipViewEarnings from \"./Payslip_ViewEarnings\";\nimport PayslipViewDeductions from \"./Payslip_ViewDeductions\";\nimport Payslip_Earnings from \"./Payslip_Earnings\";\nimport Payslip_Deductions from \"./Payslip_Deductions\";\n\n// const initial_values = {\n//   name: \"\",\n//   period: \"\",\n//   date: \"\",\n//   bank_name: \"\",\n//   bank_acno: \"\",\n//   status: \"Pending\",\n//   total_earnings: 0,\n//   total_deductions: 0,\n//   tap_amount: 0,\n//   scp_amount: 0,\n//   basic_pay: 0,\n//   nett_pay: 0,\n//   tap_checkbox: true,\n// };\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PayslipForm = () => {\n  _s();\n  let navigate = useNavigate();\n  const classes = useStyles();\n  const {\n    //isPayslipEditing,\n    single_payslip,\n    updatePayslip,\n    //addPayslip,\n    editPayslipID,\n    //loadPayslips,\n    getSinglePayslip,\n    single_payslip_loading,\n    single_payslip_error,\n    //payslip_period,\n    //payslip_earning_amount,\n    //payslip_deduction_amount,\n    setPayslipEarningAmount,\n    setPayslipDeductionAmount,\n    payslipearnings,\n    payslipdeductions,\n    getSingleBatchPayslipEarnings,\n    getSingleBatchPayslipDeductions\n  } = usePayslipsContext();\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\n  const payPeriod = useRecoilValue(payPeriodState);\n  const [earningsdata, setEarningsdata] = useState([]);\n  const [oldEarningsdata, setOldEarningsdata] = useState([]);\n  const [deductionsdata, setDeductionsdata] = useState([]);\n  const [oldDeductionsdata, setOldDeductionsdata] = useState([]);\n  const [isEarningsDialogOpen, setIsEarningsDialogOpen] = useState(false);\n  const [isDeductionsDialogOpen, setIsDeductionsDialogOpen] = useState(false);\n  //const [state, setState] = useState(single_payslip);\n  const {\n    handleSubmit,\n    control\n  } = useForm();\n  const {\n    name,\n    period,\n    date,\n    bank_name,\n    bank_acno,\n    //status,\n    total_earnings,\n    total_deductions,\n    tap_amount,\n    scp_amount,\n    basic_pay,\n    nett_pay,\n    tap_checkbox\n  } = single_payslip;\n  useEffect(getSinglePayslip(editPayslipID), []);\n\n  // useEffect(() => {\n  //   if (calc) {\n  //     setTimeout(() => {\n  //       console.log(\"calc\");\n  //       calc_totals();\n  //       setCalc(false);\n  //     }, 10000);\n  //   }\n  // }, [calc]);\n\n  const handleChange = event => {\n    //const { rec_id, ...fields } = single_payslip;\n    // const value =\n    //   event.target.type === \"number\"\n    //     ? parseInt(event.target.value, 10)\n    //     : event.target.value;\n    // setState({ ...state, [event.target.name]: value });\n  };\n  const calc_totals = () => {\n    let totalTAP = 0;\n    let totalSCP = 0;\n    if (tap_checkbox) {\n      totalTAP = Math.ceil(basic_pay * 0.05);\n      totalSCP = Math.round((basic_pay + Number.EPSILON) * 0.035 * 100) / 100;\n    }\n    console.log(\"calc\", totalTAP, totalSCP);\n    const totalEarnings = payslipearnings.reduce((a, v) => a = a + v.amount, 0);\n    const totalDeductions = payslipdeductions.reduce((a, v) => a = a + v.amount, 0);\n    const nettPay = basic_pay + totalEarnings - totalDeductions - totalTAP - totalSCP;\n    setPayslipEarningAmount(totalEarnings);\n    setPayslipDeductionAmount(totalDeductions);\n    updatePayslip({\n      id: editPayslipID,\n      total_earnings: totalEarnings,\n      total_deductions: totalDeductions,\n      tap_amount: totalTAP,\n      scp_amount: totalSCP,\n      nett_pay: nettPay\n    });\n    console.log(\"total\", totalEarnings, totalDeductions, totalTAP, totalSCP, nettPay);\n    getSinglePayslip(editPayslipID);\n  };\n  const onSubmit = data => {\n    const {\n      rec_id,\n      ...fields\n    } = single_payslip;\n    updatePayslip(...fields);\n\n    // if (isPayslipEditing) {\n    //   updatePayslip({ id: editPayslipID, ...data });\n    // } else {\n    //   addPayslip({ ...data });\n    // }\n    // loadPayslips();\n    // history.push(\"/batchpayslips\");\n  };\n\n  const handleEarningsDialogOpen = () => {\n    // setPayEarningData([...payslipearnings]);\n    setOldEarningsdata([...payslipearnings]);\n    setEarningsdata([...payslipearnings]);\n    setIsEarningsDialogOpen(true);\n  };\n  const handleEarningsDialogClose = () => {\n    setIsEarningsDialogOpen(false);\n    getSingleBatchPayslipEarnings(payPeriodEmpId, payPeriod);\n  };\n  const handleDeductionsDialogOpen = () => {\n    setOldDeductionsdata([...payslipdeductions]);\n    setDeductionsdata([...payslipdeductions]);\n    setIsDeductionsDialogOpen(true);\n  };\n  const handleDeductionsDialogClose = () => {\n    setIsDeductionsDialogOpen(false);\n    getSingleBatchPayslipDeductions(payPeriodEmpId, payPeriod);\n  };\n  if (single_payslip_loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 12\n    }, this);\n  }\n  if (single_payslip_error) {\n    navigate(\"/error\");\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        xs: 12,\n        md: 8,\n        lg: 12,\n        children: /*#__PURE__*/_jsxDEV(CardLayout2, {\n          title: \"Employee Profile\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit(onSubmit),\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h5\",\n                  component: \"h3\",\n                  children: \"PAYSLIP FORM\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  component: \"p\",\n                  children: \"Payslip Preparation\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 214,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  variant: \"contained\",\n                  color: \"primary\",\n                  className: classes.button,\n                  children: [\"Submit \", /*#__PURE__*/_jsxDEV(Icon, {\n                    className: classes.rightIcon,\n                    children: \"send\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 222,\n                    columnNumber: 28\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 216,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {\n              className: classes.divider\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(Controller, {\n                  name: \"name\",\n                  control: control,\n                  defaultValue: name,\n                  render: _ref => {\n                    let {\n                      field: {\n                        onChange,\n                        value\n                      },\n                      fieldState: {\n                        error\n                      }\n                    } = _ref;\n                    return /*#__PURE__*/_jsxDEV(TextField, {\n                      label: \"Name\",\n                      id: \"margin-normal\",\n                      name: \"name\",\n                      defaultValue: name,\n                      className: classes.textField,\n                      onChange: handleChange,\n                      InputProps: {\n                        readOnly: true\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 238,\n                      columnNumber: 25\n                    }, this);\n                  },\n                  rules: {\n                    required: \"Name required\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(Controller, {\n                  name: \"period\",\n                  control: control,\n                  defaultValue: period,\n                  render: _ref2 => {\n                    let {\n                      field: {\n                        onChange,\n                        value\n                      },\n                      fieldState: {\n                        error\n                      }\n                    } = _ref2;\n                    return /*#__PURE__*/_jsxDEV(TextField, {\n                      label: \"Period\",\n                      id: \"margin-normal\",\n                      name: \"period\",\n                      defaultValue: period,\n                      className: classes.textField,\n                      onChange: handleChange,\n                      InputProps: {\n                        readOnly: true\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 272,\n                      columnNumber: 25\n                    }, this);\n                  }\n                  //rules={{ required: \"Name required\" }}\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 263,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Controller, {\n                  name: \"date\",\n                  control: control,\n                  defaultValue: date,\n                  render: _ref3 => {\n                    let {\n                      field: {\n                        onChange,\n                        value\n                      },\n                      fieldState: {\n                        error\n                      }\n                    } = _ref3;\n                    return /*#__PURE__*/_jsxDEV(TextField, {\n                      label: \"Date\",\n                      type: \"date\",\n                      id: \"margin-normal\",\n                      name: \"date\",\n                      defaultValue: date,\n                      className: classes.textField,\n                      onChange: handleChange,\n                      InputLabelProps: {\n                        shrink: true\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 296,\n                      columnNumber: 25\n                    }, this);\n                  }\n                  //rules={{ required: \"Name required\" }}\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 287,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(Controller, {\n                  name: \"bank_name\",\n                  control: control,\n                  defaultValue: bank_name,\n                  render: _ref4 => {\n                    let {\n                      field: {\n                        onChange,\n                        value\n                      },\n                      fieldState: {\n                        error\n                      }\n                    } = _ref4;\n                    return /*#__PURE__*/_jsxDEV(TextField, {\n                      label: \"Bank Name\",\n                      id: \"margin-normal\",\n                      name: \"bank_name\",\n                      defaultValue: bank_name,\n                      className: classes.textField,\n                      onChange: handleChange,\n                      InputProps: {\n                        readOnly: true\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 323,\n                      columnNumber: 25\n                    }, this);\n                  }\n                  //rules={{ required: \"Name required\" }}\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 314,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Controller, {\n                  name: \"bank_acno\",\n                  control: control,\n                  defaultValue: bank_acno,\n                  render: _ref5 => {\n                    let {\n                      field: {\n                        onChange,\n                        value\n                      },\n                      fieldState: {\n                        error\n                      }\n                    } = _ref5;\n                    return /*#__PURE__*/_jsxDEV(TextField, {\n                      label: \"Bank AC No\",\n                      id: \"margin-normal\",\n                      name: \"bank_acno\",\n                      value: bank_acno,\n                      className: classes.textField,\n                      onChange: handleChange,\n                      InputProps: {\n                        readOnly: true\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 347,\n                      columnNumber: 25\n                    }, this);\n                  }\n                  //rules={{ required: \"Name required\" }}\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 338,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 313,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(Controller, {\n                  name: \"tap_amount\",\n                  control: control,\n                  defaultValue: tap_amount,\n                  render: _ref6 => {\n                    let {\n                      field: {\n                        onChange,\n                        value\n                      },\n                      fieldState: {\n                        error\n                      }\n                    } = _ref6;\n                    return /*#__PURE__*/_jsxDEV(TextField, {\n                      label: \"TAP Contrinution\",\n                      type: \"currency\",\n                      id: \"standard-number\",\n                      name: \"tap_amount\",\n                      defaultValue: tap_amount,\n                      className: classes.textField\n                      //onChange={onChange}\n                      ,\n                      onChange: e => {\n                        handleChange(parseInt(e.target.value, 10));\n                      },\n                      InputProps: {\n                        readOnly: true\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 373,\n                      columnNumber: 25\n                    }, this);\n                  }\n                  //rules={{ required: \"Name required\" }}\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 364,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Controller, {\n                  name: \"scp_amount\",\n                  control: control,\n                  defaultValue: scp_amount,\n                  render: _ref7 => {\n                    let {\n                      field: {\n                        onChange,\n                        value\n                      },\n                      fieldState: {\n                        error\n                      }\n                    } = _ref7;\n                    return /*#__PURE__*/_jsxDEV(TextField, {\n                      label: \"SCP Contribution\",\n                      type: \"currency\",\n                      id: \"standard-number\",\n                      name: \"scp_amount\",\n                      defaultValue: scp_amount,\n                      className: classes.textField\n                      //onChange={onChange}\n                      ,\n                      onChange: e => {\n                        handleChange(parseInt(e.target.value, 10));\n                      },\n                      InputProps: {\n                        readOnly: true\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 401,\n                      columnNumber: 25\n                    }, this);\n                  }\n                  //rules={{ required: \"Name required\" }}\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 392,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 363,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(Controller, {\n                  name: \"total_earnings\",\n                  control: control,\n                  defaultValue: total_earnings,\n                  render: _ref8 => {\n                    let {\n                      field: {\n                        onChange,\n                        value\n                      },\n                      fieldState: {\n                        error\n                      }\n                    } = _ref8;\n                    return /*#__PURE__*/_jsxDEV(TextField, {\n                      label: \"Total Earnings\",\n                      type: \"number\",\n                      id: \"standard-number\",\n                      name: \"total_earnings\",\n                      value: total_earnings,\n                      className: classes.textField\n                      //onChange={onChange}\n                      ,\n                      onChange: e => {\n                        handleChange(parseInt(e.target.value, 10));\n                      },\n                      InputProps: {\n                        readOnly: true\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 431,\n                      columnNumber: 25\n                    }, this);\n                  }\n                  //rules={{ required: \"Name required\" }}\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 422,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Controller, {\n                  name: \"total_deductions\",\n                  control: control,\n                  defaultValue: total_deductions,\n                  render: _ref9 => {\n                    let {\n                      field: {\n                        onChange,\n                        value\n                      },\n                      fieldState: {\n                        error\n                      }\n                    } = _ref9;\n                    return /*#__PURE__*/_jsxDEV(TextField, {\n                      label: \"Total Deductions\",\n                      type: \"number\",\n                      id: \"standard-number\",\n                      name: \"total_deductions\",\n                      value: total_deductions,\n                      className: classes.textField\n                      //onChange={onChange}\n                      ,\n                      onChange: e => {\n                        handleChange(parseInt(e.target.value, 10));\n                      },\n                      InputProps: {\n                        readOnly: true\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 459,\n                      columnNumber: 25\n                    }, this);\n                  }\n                  //rules={{ required: \"Name required\" }}\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 450,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 421,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(Controller, {\n                  name: \"basic_pay\",\n                  control: control,\n                  defaultValue: basic_pay,\n                  render: _ref10 => {\n                    let {\n                      field: {\n                        onChange,\n                        value\n                      },\n                      fieldState: {\n                        error\n                      }\n                    } = _ref10;\n                    return /*#__PURE__*/_jsxDEV(TextField, {\n                      label: \"Basic Pay\",\n                      type: \"number\",\n                      id: \"standard-number\",\n                      name: \"basic_pay\",\n                      value: basic_pay,\n                      className: classes.textField,\n                      onChange: handleChange,\n                      InputProps: {\n                        readOnly: true\n                      }\n                      // onChange={(e) => {\n                      //   handleChange(parseInt(e.target.value, 10));\n                      // }}\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 489,\n                      columnNumber: 25\n                    }, this);\n                  }\n                  //rules={{ required: \"Name required\" }}\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 480,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Controller, {\n                  name: \"nett_pay\",\n                  control: control,\n                  defaultValue: nett_pay,\n                  render: _ref11 => {\n                    let {\n                      field: {\n                        onChange,\n                        value\n                      },\n                      fieldState: {\n                        error\n                      }\n                    } = _ref11;\n                    return /*#__PURE__*/_jsxDEV(TextField, {\n                      label: \"Nett Pay\",\n                      type: \"number\",\n                      id: \"standard-number\",\n                      name: \"nett_pay\",\n                      value: nett_pay,\n                      className: classes.textField\n                      //onChange={onChange}\n                      ,\n                      onChange: e => {\n                        handleChange(parseInt(e.target.value, 10));\n                      },\n                      InputProps: {\n                        readOnly: true\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 517,\n                      columnNumber: 25\n                    }, this);\n                  }\n                  //rules={{ required: \"Name required\" }}\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 508,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 479,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"contained\",\n                color: \"primary\",\n                className: classes.button,\n                onClick: calc_totals,\n                children: [\"Calc \", /*#__PURE__*/_jsxDEV(Icon, {\n                  className: classes.rightIcon,\n                  children: \"send\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 545,\n                  columnNumber: 24\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 538,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {\n              className: classes.divider\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 548,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          alignItems: \"center\",\n          className: classes.grid,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            md: 8,\n            lg: 6,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(CardLayout, {\n                title: \"Earnings\",\n                handleClick: handleEarningsDialogOpen,\n                children: /*#__PURE__*/_jsxDEV(PayslipViewEarnings, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 560,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 556,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 555,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            md: 8,\n            lg: 6,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(CardLayout, {\n                title: \"Deductions\",\n                handleClick: handleDeductionsDialogOpen,\n                children: /*#__PURE__*/_jsxDEV(PayslipViewDeductions, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 570,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 566,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 565,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 564,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        className: classes.divider\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CustomDialog, {\n        isOpen: isEarningsDialogOpen,\n        handleClose: handleEarningsDialogClose,\n        title: \"\",\n        showButton: true,\n        isFullscreen: false,\n        isFullwidth: false,\n        children: /*#__PURE__*/_jsxDEV(Payslip_Earnings, {\n          setEarningsdata: setEarningsdata,\n          earningsdata: earningsdata,\n          oldEarningsdata: oldEarningsdata,\n          handleDialogClose: handleEarningsDialogClose\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CustomDialog, {\n        isOpen: isDeductionsDialogOpen,\n        handleClose: handleDeductionsDialogClose,\n        title: \"\",\n        showButton: true,\n        isFullscreen: false,\n        isFullwidth: false,\n        children: /*#__PURE__*/_jsxDEV(Payslip_Deductions, {\n          setDeductionsdata: setDeductionsdata,\n          deductionsdata: deductionsdata,\n          oldDeductionsdata: oldDeductionsdata,\n          handleDialogClose: handleDeductionsDialogClose\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n};\n_s(PayslipForm, \"Lozi7n8e8Gnm36tBs6y6J9gJqUU=\", false, function () {\n  return [useNavigate, useStyles, usePayslipsContext, useRecoilValue, useRecoilValue, useForm];\n});\n_c = PayslipForm;\nconst useStyles = makeStyles(theme => ({\n  button: {\n    margin: theme.spacing(1)\n  },\n  leftIcon: {\n    marginRight: theme.spacing(1)\n  },\n  rightIcon: {\n    marginLeft: theme.spacing(1)\n  },\n  iconSmall: {\n    fontSize: 20\n  },\n  root: {\n    padding: theme.spacing(3, 2)\n  },\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  divider: {\n    padding: 4\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 350\n  },\n  grid: {\n    padding: theme.spacing(3, 2)\n    // justifyContent: \"center\",\n  },\n\n  box: {\n    height: 100,\n    display: \"flex\",\n    border: \"1px solid black\",\n    padding: 8\n  }\n}));\nexport default PayslipForm;\nvar _c;\n$RefreshReg$(_c, \"PayslipForm\");","map":{"version":3,"names":["React","useState","useEffect","Button","Icon","TextField","Paper","Typography","Divider","Grid","makeStyles","CardLayout","CardLayout2","CustomDialog","Controller","useForm","useNavigate","useRecoilValue","payPeriodState","payPeriodEmpIdState","usePayslipsContext","PayslipViewEarnings","PayslipViewDeductions","Payslip_Earnings","Payslip_Deductions","PayslipForm","navigate","classes","useStyles","single_payslip","updatePayslip","editPayslipID","getSinglePayslip","single_payslip_loading","single_payslip_error","setPayslipEarningAmount","setPayslipDeductionAmount","payslipearnings","payslipdeductions","getSingleBatchPayslipEarnings","getSingleBatchPayslipDeductions","payPeriodEmpId","payPeriod","earningsdata","setEarningsdata","oldEarningsdata","setOldEarningsdata","deductionsdata","setDeductionsdata","oldDeductionsdata","setOldDeductionsdata","isEarningsDialogOpen","setIsEarningsDialogOpen","isDeductionsDialogOpen","setIsDeductionsDialogOpen","handleSubmit","control","name","period","date","bank_name","bank_acno","total_earnings","total_deductions","tap_amount","scp_amount","basic_pay","nett_pay","tap_checkbox","handleChange","event","calc_totals","totalTAP","totalSCP","Math","ceil","round","Number","EPSILON","console","log","totalEarnings","reduce","a","v","amount","totalDeductions","nettPay","id","onSubmit","data","rec_id","fields","handleEarningsDialogOpen","handleEarningsDialogClose","handleDeductionsDialogOpen","handleDeductionsDialogClose","root","button","rightIcon","divider","field","onChange","value","fieldState","error","textField","readOnly","required","shrink","e","parseInt","target","grid","theme","margin","spacing","leftIcon","marginRight","marginLeft","iconSmall","fontSize","padding","container","display","flexWrap","width","box","height","border"],"sources":["D:/react-myprojects/hrms-demo/src/components/PayslipForm.js"],"sourcesContent":["import React, { useState,  useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  TextField,\r\n    Paper,\r\n  Typography,\r\n    Divider,\r\n  Grid,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CardLayout from \"../helpers/CardLayout\";\r\nimport CardLayout2 from \"../helpers/CardLayout2\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport {\r\n  payPeriodState,\r\n  //payPeriodEndMonthState,\r\n  payPeriodEmpIdState,\r\n  //payEarningDataState,\r\n  //payDeductionDataState,\r\n} from \"./data/atomdata\";\r\n\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport PayslipViewEarnings from \"./Payslip_ViewEarnings\";\r\nimport PayslipViewDeductions from \"./Payslip_ViewDeductions\";\r\nimport Payslip_Earnings from \"./Payslip_Earnings\";\r\nimport Payslip_Deductions from \"./Payslip_Deductions\";\r\n\r\n// const initial_values = {\r\n//   name: \"\",\r\n//   period: \"\",\r\n//   date: \"\",\r\n//   bank_name: \"\",\r\n//   bank_acno: \"\",\r\n//   status: \"Pending\",\r\n//   total_earnings: 0,\r\n//   total_deductions: 0,\r\n//   tap_amount: 0,\r\n//   scp_amount: 0,\r\n//   basic_pay: 0,\r\n//   nett_pay: 0,\r\n//   tap_checkbox: true,\r\n// };\r\n\r\nconst PayslipForm = () => {\r\n  let navigate = useNavigate();\r\n   const classes = useStyles();\r\n  const {\r\n    //isPayslipEditing,\r\n    single_payslip,\r\n    updatePayslip,\r\n    //addPayslip,\r\n    editPayslipID,\r\n    //loadPayslips,\r\n    getSinglePayslip,\r\n    single_payslip_loading,\r\n    single_payslip_error,\r\n    //payslip_period,\r\n    //payslip_earning_amount,\r\n    //payslip_deduction_amount,\r\n    setPayslipEarningAmount,\r\n    setPayslipDeductionAmount,\r\n    payslipearnings,\r\n    payslipdeductions,\r\n    getSingleBatchPayslipEarnings,\r\n    getSingleBatchPayslipDeductions,\r\n  } = usePayslipsContext();\r\n  \r\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\r\n  const payPeriod = useRecoilValue(payPeriodState);\r\n    const [earningsdata, setEarningsdata] = useState([]);\r\n  const [oldEarningsdata, setOldEarningsdata] = useState([]);\r\n  const [deductionsdata, setDeductionsdata] = useState([]);\r\n  const [oldDeductionsdata, setOldDeductionsdata] = useState([]);\r\n  const [isEarningsDialogOpen, setIsEarningsDialogOpen] = useState(false);\r\n  const [isDeductionsDialogOpen, setIsDeductionsDialogOpen] = useState(false);\r\n  //const [state, setState] = useState(single_payslip);\r\n  const { handleSubmit, control } = useForm();\r\n\r\n  const {\r\n    name,\r\n    period,\r\n    date,\r\n    bank_name,\r\n    bank_acno,\r\n    //status,\r\n    total_earnings,\r\n    total_deductions,\r\n    tap_amount,\r\n    scp_amount,\r\n    basic_pay,\r\n    nett_pay,\r\n    tap_checkbox,\r\n  } = single_payslip;\r\n\r\n  useEffect(\r\n    getSinglePayslip(editPayslipID)\r\n  , []);\r\n\r\n  // useEffect(() => {\r\n  //   if (calc) {\r\n  //     setTimeout(() => {\r\n  //       console.log(\"calc\");\r\n  //       calc_totals();\r\n  //       setCalc(false);\r\n  //     }, 10000);\r\n  //   }\r\n  // }, [calc]);\r\n\r\n  const handleChange = (event) => {\r\n    //const { rec_id, ...fields } = single_payslip;\r\n    // const value =\r\n    //   event.target.type === \"number\"\r\n    //     ? parseInt(event.target.value, 10)\r\n    //     : event.target.value;\r\n    // setState({ ...state, [event.target.name]: value });\r\n  };\r\n\r\n  const calc_totals = () => {\r\n    let totalTAP = 0;\r\n    let totalSCP = 0;\r\n    if (tap_checkbox) {\r\n      totalTAP = Math.ceil(basic_pay * 0.05);\r\n      totalSCP = Math.round((basic_pay + Number.EPSILON) * 0.035 * 100) / 100;\r\n    }\r\n    console.log(\"calc\", totalTAP, totalSCP)\r\n    const totalEarnings = payslipearnings.reduce(\r\n      (a, v) => (a = a + v.amount),\r\n      0\r\n    );\r\n    const totalDeductions = payslipdeductions.reduce(\r\n      (a, v) => (a = a + v.amount),\r\n      0\r\n    );\r\n    const nettPay =\r\n      basic_pay + totalEarnings - totalDeductions - totalTAP - totalSCP;\r\n    setPayslipEarningAmount(totalEarnings);\r\n    setPayslipDeductionAmount(totalDeductions);\r\n    updatePayslip({\r\n      id: editPayslipID,\r\n      total_earnings: totalEarnings,\r\n      total_deductions: totalDeductions,\r\n      tap_amount: totalTAP,\r\n      scp_amount: totalSCP,\r\n      nett_pay: nettPay,\r\n    });\r\n    console.log(\r\n      \"total\",\r\n      totalEarnings,\r\n      totalDeductions,\r\n      totalTAP,\r\n      totalSCP,\r\n      nettPay\r\n    );\r\n    getSinglePayslip(editPayslipID);\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    const { rec_id, ...fields } = single_payslip;\r\n    updatePayslip(...fields);\r\n\r\n    // if (isPayslipEditing) {\r\n    //   updatePayslip({ id: editPayslipID, ...data });\r\n    // } else {\r\n    //   addPayslip({ ...data });\r\n    // }\r\n    // loadPayslips();\r\n    // history.push(\"/batchpayslips\");\r\n  };\r\n  const handleEarningsDialogOpen = () => {\r\n    // setPayEarningData([...payslipearnings]);\r\n    setOldEarningsdata([...payslipearnings]);\r\n    setEarningsdata([...payslipearnings]);\r\n    setIsEarningsDialogOpen(true);\r\n  };\r\n\r\n  const handleEarningsDialogClose = () => {\r\n    setIsEarningsDialogOpen(false);\r\n    getSingleBatchPayslipEarnings(payPeriodEmpId, payPeriod);\r\n  };\r\n  const handleDeductionsDialogOpen = () => {\r\n    setOldDeductionsdata([...payslipdeductions]);\r\n    setDeductionsdata([...payslipdeductions]);\r\n    setIsDeductionsDialogOpen(true);\r\n  };\r\n\r\n  const handleDeductionsDialogClose = () => {\r\n    setIsDeductionsDialogOpen(false);\r\n    getSingleBatchPayslipDeductions(payPeriodEmpId, payPeriod);\r\n  };\r\n\r\n  if (single_payslip_loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (single_payslip_error) {\r\n    navigate(\"/error\");\r\n  }\r\n  return (\r\n    <div>\r\n      <Paper className={classes.root}>\r\n        <Grid xs={12} md={8} lg={12}>\r\n          <CardLayout2 title=\"Employee Profile\">\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n              <Grid>\r\n                <div>\r\n                  <Typography variant=\"h5\" component=\"h3\">\r\n                    PAYSLIP FORM\r\n                  </Typography>\r\n                  <Typography component=\"p\">Payslip Preparation</Typography>\r\n\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                  >\r\n                    Submit <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                </div>\r\n              </Grid>\r\n              <Divider className={classes.divider} />\r\n              <Grid item xs={12}>\r\n                <div>\r\n                  <Controller\r\n                    name=\"name\"\r\n                    control={control}\r\n                    defaultValue={name}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Name\"\r\n                          id=\"margin-normal\"\r\n                          name=\"name\"\r\n                          defaultValue={name}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        >\r\n                          {/* {employees.map((e) => {\r\n                  return (\r\n                    <MenuItem key={e.name} value={e.name}>\r\n                      {e.name}\r\n                    </MenuItem>\r\n                  );\r\n                })} */}\r\n                        </TextField>\r\n                      );\r\n                    }}\r\n                    rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Controller\r\n                    name=\"period\"\r\n                    control={control}\r\n                    defaultValue={period}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Period\"\r\n                          id=\"margin-normal\"\r\n                          name=\"period\"\r\n                          defaultValue={period}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                  <Controller\r\n                    name=\"date\"\r\n                    control={control}\r\n                    defaultValue={date}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Date\"\r\n                          type=\"date\"\r\n                          id=\"margin-normal\"\r\n                          name=\"date\"\r\n                          defaultValue={date}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputLabelProps={{\r\n                            shrink: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Controller\r\n                    name=\"bank_name\"\r\n                    control={control}\r\n                    defaultValue={bank_name}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Bank Name\"\r\n                          id=\"margin-normal\"\r\n                          name=\"bank_name\"\r\n                          defaultValue={bank_name}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                  <Controller\r\n                    name=\"bank_acno\"\r\n                    control={control}\r\n                    defaultValue={bank_acno}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Bank AC No\"\r\n                          id=\"margin-normal\"\r\n                          name=\"bank_acno\"\r\n                          value={bank_acno}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Controller\r\n                    name=\"tap_amount\"\r\n                    control={control}\r\n                    defaultValue={tap_amount}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"TAP Contrinution\"\r\n                          type=\"currency\"\r\n                          id=\"standard-number\"\r\n                          name=\"tap_amount\"\r\n                          defaultValue={tap_amount}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            handleChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                  <Controller\r\n                    name=\"scp_amount\"\r\n                    control={control}\r\n                    defaultValue={scp_amount}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"SCP Contribution\"\r\n                          type=\"currency\"\r\n                          id=\"standard-number\"\r\n                          name=\"scp_amount\"\r\n                          defaultValue={scp_amount}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            handleChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Controller\r\n                    name=\"total_earnings\"\r\n                    control={control}\r\n                    defaultValue={total_earnings}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Total Earnings\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"total_earnings\"\r\n                          value={total_earnings}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            handleChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                  <Controller\r\n                    name=\"total_deductions\"\r\n                    control={control}\r\n                    defaultValue={total_deductions}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Total Deductions\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"total_deductions\"\r\n                          value={total_deductions}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            handleChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Controller\r\n                    name=\"basic_pay\"\r\n                    control={control}\r\n                    defaultValue={basic_pay}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Basic Pay\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"basic_pay\"\r\n                          value={basic_pay}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                          // onChange={(e) => {\r\n                          //   handleChange(parseInt(e.target.value, 10));\r\n                          // }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                  <Controller\r\n                    name=\"nett_pay\"\r\n                    control={control}\r\n                    defaultValue={nett_pay}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Nett Pay\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"nett_pay\"\r\n                          value={nett_pay}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            handleChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.button}\r\n                  onClick={calc_totals}\r\n                >\r\n                  Calc <Icon className={classes.rightIcon}>send</Icon>\r\n                </Button>\r\n              </Grid>\r\n              <Divider className={classes.divider} />\r\n            </form>\r\n          </CardLayout2>\r\n        </Grid>\r\n        <div>\r\n          <Grid container alignItems=\"center\" className={classes.grid}>\r\n            <Grid item xs={6} md={8} lg={6}>\r\n              <div>\r\n                <CardLayout\r\n                  title=\"Earnings\"\r\n                  handleClick={handleEarningsDialogOpen}\r\n                >\r\n                  <PayslipViewEarnings />\r\n                </CardLayout>\r\n              </div>\r\n            </Grid>\r\n            <Grid item xs={6} md={8} lg={6}>\r\n              <div>\r\n                <CardLayout\r\n                  title=\"Deductions\"\r\n                  handleClick={handleDeductionsDialogOpen}\r\n                >\r\n                  <PayslipViewDeductions />\r\n                </CardLayout>\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n        <Divider className={classes.divider} />\r\n        <CustomDialog\r\n          isOpen={isEarningsDialogOpen}\r\n          handleClose={handleEarningsDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <Payslip_Earnings\r\n            setEarningsdata={setEarningsdata}\r\n            earningsdata={earningsdata}\r\n            oldEarningsdata={oldEarningsdata}\r\n            handleDialogClose={handleEarningsDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isDeductionsDialogOpen}\r\n          handleClose={handleDeductionsDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <Payslip_Deductions\r\n            setDeductionsdata={setDeductionsdata}\r\n            deductionsdata={deductionsdata}\r\n            oldDeductionsdata={oldDeductionsdata}\r\n            handleDialogClose={handleDeductionsDialogClose}\r\n          />\r\n        </CustomDialog>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  divider: {\r\n    padding: 4,\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 350,\r\n  },\r\n  grid: {\r\n    padding: theme.spacing(3, 2),\r\n    // justifyContent: \"center\",\r\n  },\r\n  box: {\r\n    height: 100,\r\n    display: \"flex\",\r\n    border: \"1px solid black\",\r\n    padding: 8,\r\n  },\r\n}));\r\n\r\nexport default PayslipForm;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAGC,SAAS,QAAQ,OAAO;AACnD,SACEC,MAAM,EACNC,IAAI,EACJC,SAAS,EACPC,KAAK,EACPC,UAAU,EACRC,OAAO,EACTC,IAAI,QAEC,mBAAmB;AAC1B,SAASC,UAAU,QAAQ,0BAA0B;AACrD,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,WAAW,MAAM,wBAAwB;AAChD,SAASC,YAAY,QAAQ,yBAAyB;AACtD,SAASC,UAAU,EAAEC,OAAO,QAAQ,iBAAiB;AACrD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,cAAc,QAAQ,QAAQ;AACvC,SACEC,cAAc;AACd;AACAC;AACA;AACA;AAAA,OACK,iBAAiB;AAExB,SAASC,kBAAkB,QAAQ,6BAA6B;AAChE,OAAOC,mBAAmB,MAAM,wBAAwB;AACxD,OAAOC,qBAAqB,MAAM,0BAA0B;AAC5D,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,kBAAkB,MAAM,sBAAsB;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA,MAAMC,WAAW,GAAG,MAAM;EAAA;EACxB,IAAIC,QAAQ,GAAGV,WAAW,EAAE;EAC3B,MAAMW,OAAO,GAAGC,SAAS,EAAE;EAC5B,MAAM;IACJ;IACAC,cAAc;IACdC,aAAa;IACb;IACAC,aAAa;IACb;IACAC,gBAAgB;IAChBC,sBAAsB;IACtBC,oBAAoB;IACpB;IACA;IACA;IACAC,uBAAuB;IACvBC,yBAAyB;IACzBC,eAAe;IACfC,iBAAiB;IACjBC,6BAA6B;IAC7BC;EACF,CAAC,GAAGpB,kBAAkB,EAAE;EAExB,MAAMqB,cAAc,GAAGxB,cAAc,CAACE,mBAAmB,CAAC;EAC1D,MAAMuB,SAAS,GAAGzB,cAAc,CAACC,cAAc,CAAC;EAC9C,MAAM,CAACyB,YAAY,EAAEC,eAAe,CAAC,GAAG3C,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAAC4C,eAAe,EAAEC,kBAAkB,CAAC,GAAG7C,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAAC8C,cAAc,EAAEC,iBAAiB,CAAC,GAAG/C,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACgD,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGjD,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACkD,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGnD,QAAQ,CAAC,KAAK,CAAC;EACvE,MAAM,CAACoD,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGrD,QAAQ,CAAC,KAAK,CAAC;EAC3E;EACA,MAAM;IAAEsD,YAAY;IAAEC;EAAQ,CAAC,GAAGzC,OAAO,EAAE;EAE3C,MAAM;IACJ0C,IAAI;IACJC,MAAM;IACNC,IAAI;IACJC,SAAS;IACTC,SAAS;IACT;IACAC,cAAc;IACdC,gBAAgB;IAChBC,UAAU;IACVC,UAAU;IACVC,SAAS;IACTC,QAAQ;IACRC;EACF,CAAC,GAAGvC,cAAc;EAElB3B,SAAS,CACP8B,gBAAgB,CAACD,aAAa,CAAC,EAC/B,EAAE,CAAC;;EAEL;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMsC,YAAY,GAAIC,KAAK,IAAK;IAC9B;IACA;IACA;IACA;IACA;IACA;EAAA,CACD;EAED,MAAMC,WAAW,GAAG,MAAM;IACxB,IAAIC,QAAQ,GAAG,CAAC;IAChB,IAAIC,QAAQ,GAAG,CAAC;IAChB,IAAIL,YAAY,EAAE;MAChBI,QAAQ,GAAGE,IAAI,CAACC,IAAI,CAACT,SAAS,GAAG,IAAI,CAAC;MACtCO,QAAQ,GAAGC,IAAI,CAACE,KAAK,CAAC,CAACV,SAAS,GAAGW,MAAM,CAACC,OAAO,IAAI,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG;IACzE;IACAC,OAAO,CAACC,GAAG,CAAC,MAAM,EAAER,QAAQ,EAAEC,QAAQ,CAAC;IACvC,MAAMQ,aAAa,GAAG5C,eAAe,CAAC6C,MAAM,CAC1C,CAACC,CAAC,EAAEC,CAAC,KAAMD,CAAC,GAAGA,CAAC,GAAGC,CAAC,CAACC,MAAO,EAC5B,CAAC,CACF;IACD,MAAMC,eAAe,GAAGhD,iBAAiB,CAAC4C,MAAM,CAC9C,CAACC,CAAC,EAAEC,CAAC,KAAMD,CAAC,GAAGA,CAAC,GAAGC,CAAC,CAACC,MAAO,EAC5B,CAAC,CACF;IACD,MAAME,OAAO,GACXrB,SAAS,GAAGe,aAAa,GAAGK,eAAe,GAAGd,QAAQ,GAAGC,QAAQ;IACnEtC,uBAAuB,CAAC8C,aAAa,CAAC;IACtC7C,yBAAyB,CAACkD,eAAe,CAAC;IAC1CxD,aAAa,CAAC;MACZ0D,EAAE,EAAEzD,aAAa;MACjB+B,cAAc,EAAEmB,aAAa;MAC7BlB,gBAAgB,EAAEuB,eAAe;MACjCtB,UAAU,EAAEQ,QAAQ;MACpBP,UAAU,EAAEQ,QAAQ;MACpBN,QAAQ,EAAEoB;IACZ,CAAC,CAAC;IACFR,OAAO,CAACC,GAAG,CACT,OAAO,EACPC,aAAa,EACbK,eAAe,EACfd,QAAQ,EACRC,QAAQ,EACRc,OAAO,CACR;IACDvD,gBAAgB,CAACD,aAAa,CAAC;EACjC,CAAC;EAED,MAAM0D,QAAQ,GAAIC,IAAI,IAAK;IACzB,MAAM;MAAEC,MAAM;MAAE,GAAGC;IAAO,CAAC,GAAG/D,cAAc;IAC5CC,aAAa,CAAC,GAAG8D,MAAM,CAAC;;IAExB;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC;;EACD,MAAMC,wBAAwB,GAAG,MAAM;IACrC;IACA/C,kBAAkB,CAAC,CAAC,GAAGT,eAAe,CAAC,CAAC;IACxCO,eAAe,CAAC,CAAC,GAAGP,eAAe,CAAC,CAAC;IACrCe,uBAAuB,CAAC,IAAI,CAAC;EAC/B,CAAC;EAED,MAAM0C,yBAAyB,GAAG,MAAM;IACtC1C,uBAAuB,CAAC,KAAK,CAAC;IAC9Bb,6BAA6B,CAACE,cAAc,EAAEC,SAAS,CAAC;EAC1D,CAAC;EACD,MAAMqD,0BAA0B,GAAG,MAAM;IACvC7C,oBAAoB,CAAC,CAAC,GAAGZ,iBAAiB,CAAC,CAAC;IAC5CU,iBAAiB,CAAC,CAAC,GAAGV,iBAAiB,CAAC,CAAC;IACzCgB,yBAAyB,CAAC,IAAI,CAAC;EACjC,CAAC;EAED,MAAM0C,2BAA2B,GAAG,MAAM;IACxC1C,yBAAyB,CAAC,KAAK,CAAC;IAChCd,+BAA+B,CAACC,cAAc,EAAEC,SAAS,CAAC;EAC5D,CAAC;EAED,IAAIT,sBAAsB,EAAE;IAC1B,oBAAO;MAAA,UAAK;IAAU;MAAA;MAAA;MAAA;IAAA,QAAM;EAC9B;EAEA,IAAIC,oBAAoB,EAAE;IACxBR,QAAQ,CAAC,QAAQ,CAAC;EACpB;EACA,oBACE;IAAA,uBACE,QAAC,KAAK;MAAC,SAAS,EAAEC,OAAO,CAACsE,IAAK;MAAA,wBAC7B,QAAC,IAAI;QAAC,EAAE,EAAE,EAAG;QAAC,EAAE,EAAE,CAAE;QAAC,EAAE,EAAE,EAAG;QAAA,uBAC1B,QAAC,WAAW;UAAC,KAAK,EAAC,kBAAkB;UAAA,uBACnC;YAAM,QAAQ,EAAE1C,YAAY,CAACkC,QAAQ,CAAE;YAAA,wBACrC,QAAC,IAAI;cAAA,uBACH;gBAAA,wBACE,QAAC,UAAU;kBAAC,OAAO,EAAC,IAAI;kBAAC,SAAS,EAAC,IAAI;kBAAA,UAAC;gBAExC;kBAAA;kBAAA;kBAAA;gBAAA,QAAa,eACb,QAAC,UAAU;kBAAC,SAAS,EAAC,GAAG;kBAAA,UAAC;gBAAmB;kBAAA;kBAAA;kBAAA;gBAAA,QAAa,eAE1D,QAAC,MAAM;kBACL,IAAI,EAAC,QAAQ;kBACb,OAAO,EAAC,WAAW;kBACnB,KAAK,EAAC,SAAS;kBACf,SAAS,EAAE9D,OAAO,CAACuE,MAAO;kBAAA,WAC3B,SACQ,uBAAC,IAAI;oBAAC,SAAS,EAAEvE,OAAO,CAACwE,SAAU;oBAAA,UAAC;kBAAI;oBAAA;oBAAA;oBAAA;kBAAA,QAAO;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QAC/C;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YACL;cAAA;cAAA;cAAA;YAAA,QACD,eACP,QAAC,OAAO;cAAC,SAAS,EAAExE,OAAO,CAACyE;YAAQ;cAAA;cAAA;cAAA;YAAA,QAAG,eACvC,QAAC,IAAI;cAAC,IAAI;cAAC,EAAE,EAAE,EAAG;cAAA,wBAChB;gBAAA,uBACE,QAAC,UAAU;kBACT,IAAI,EAAC,MAAM;kBACX,OAAO,EAAE5C,OAAQ;kBACjB,YAAY,EAAEC,IAAK;kBACnB,MAAM,EAAE,QAGF;oBAAA,IAHG;sBACP4C,KAAK,EAAE;wBAAEC,QAAQ;wBAAEC;sBAAM,CAAC;sBAC1BC,UAAU,EAAE;wBAAEC;sBAAM;oBACtB,CAAC;oBACC,oBACE,QAAC,SAAS;sBACR,KAAK,EAAC,MAAM;sBACZ,EAAE,EAAC,eAAe;sBAClB,IAAI,EAAC,MAAM;sBACX,YAAY,EAAEhD,IAAK;sBACnB,SAAS,EAAE9B,OAAO,CAAC+E,SAAU;sBAC7B,QAAQ,EAAErC,YAAa;sBACvB,UAAU,EAAE;wBACVsC,QAAQ,EAAE;sBACZ;oBAAE;sBAAA;sBAAA;sBAAA;oBAAA,QASQ;kBAEhB,CAAE;kBACF,KAAK,EAAE;oBAAEC,QAAQ,EAAE;kBAAgB;gBAAE;kBAAA;kBAAA;kBAAA;gBAAA;cACrC;gBAAA;gBAAA;gBAAA;cAAA,QACE,eACN;gBAAA,wBACE,QAAC,UAAU;kBACT,IAAI,EAAC,QAAQ;kBACb,OAAO,EAAEpD,OAAQ;kBACjB,YAAY,EAAEE,MAAO;kBACrB,MAAM,EAAE,SAGF;oBAAA,IAHG;sBACP2C,KAAK,EAAE;wBAAEC,QAAQ;wBAAEC;sBAAM,CAAC;sBAC1BC,UAAU,EAAE;wBAAEC;sBAAM;oBACtB,CAAC;oBACC,oBACE,QAAC,SAAS;sBACR,KAAK,EAAC,QAAQ;sBACd,EAAE,EAAC,eAAe;sBAClB,IAAI,EAAC,QAAQ;sBACb,YAAY,EAAE/C,MAAO;sBACrB,SAAS,EAAE/B,OAAO,CAAC+E,SAAU;sBAC7B,QAAQ,EAAErC,YAAa;sBACvB,UAAU,EAAE;wBACVsC,QAAQ,EAAE;sBACZ;oBAAE;sBAAA;sBAAA;sBAAA;oBAAA,QACS;kBAEjB;kBACA;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QACA,eACF,QAAC,UAAU;kBACT,IAAI,EAAC,MAAM;kBACX,OAAO,EAAEnD,OAAQ;kBACjB,YAAY,EAAEG,IAAK;kBACnB,MAAM,EAAE,SAGF;oBAAA,IAHG;sBACP0C,KAAK,EAAE;wBAAEC,QAAQ;wBAAEC;sBAAM,CAAC;sBAC1BC,UAAU,EAAE;wBAAEC;sBAAM;oBACtB,CAAC;oBACC,oBACE,QAAC,SAAS;sBACR,KAAK,EAAC,MAAM;sBACZ,IAAI,EAAC,MAAM;sBACX,EAAE,EAAC,eAAe;sBAClB,IAAI,EAAC,MAAM;sBACX,YAAY,EAAE9C,IAAK;sBACnB,SAAS,EAAEhC,OAAO,CAAC+E,SAAU;sBAC7B,QAAQ,EAAErC,YAAa;sBACvB,eAAe,EAAE;wBACfwC,MAAM,EAAE;sBACV;oBAAE;sBAAA;sBAAA;sBAAA;oBAAA,QACS;kBAEjB;kBACA;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QACA;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QACE,eACN;gBAAA,wBACE,QAAC,UAAU;kBACT,IAAI,EAAC,WAAW;kBAChB,OAAO,EAAErD,OAAQ;kBACjB,YAAY,EAAEI,SAAU;kBACxB,MAAM,EAAE,SAGF;oBAAA,IAHG;sBACPyC,KAAK,EAAE;wBAAEC,QAAQ;wBAAEC;sBAAM,CAAC;sBAC1BC,UAAU,EAAE;wBAAEC;sBAAM;oBACtB,CAAC;oBACC,oBACE,QAAC,SAAS;sBACR,KAAK,EAAC,WAAW;sBACjB,EAAE,EAAC,eAAe;sBAClB,IAAI,EAAC,WAAW;sBAChB,YAAY,EAAE7C,SAAU;sBACxB,SAAS,EAAEjC,OAAO,CAAC+E,SAAU;sBAC7B,QAAQ,EAAErC,YAAa;sBACvB,UAAU,EAAE;wBACVsC,QAAQ,EAAE;sBACZ;oBAAE;sBAAA;sBAAA;sBAAA;oBAAA,QACS;kBAEjB;kBACA;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QACA,eACF,QAAC,UAAU;kBACT,IAAI,EAAC,WAAW;kBAChB,OAAO,EAAEnD,OAAQ;kBACjB,YAAY,EAAEK,SAAU;kBACxB,MAAM,EAAE,SAGF;oBAAA,IAHG;sBACPwC,KAAK,EAAE;wBAAEC,QAAQ;wBAAEC;sBAAM,CAAC;sBAC1BC,UAAU,EAAE;wBAAEC;sBAAM;oBACtB,CAAC;oBACC,oBACE,QAAC,SAAS;sBACR,KAAK,EAAC,YAAY;sBAClB,EAAE,EAAC,eAAe;sBAClB,IAAI,EAAC,WAAW;sBAChB,KAAK,EAAE5C,SAAU;sBACjB,SAAS,EAAElC,OAAO,CAAC+E,SAAU;sBAC7B,QAAQ,EAAErC,YAAa;sBACvB,UAAU,EAAE;wBACVsC,QAAQ,EAAE;sBACZ;oBAAE;sBAAA;sBAAA;sBAAA;oBAAA,QACS;kBAEjB;kBACA;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QACA;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QACE,eACN;gBAAA,wBACE,QAAC,UAAU;kBACT,IAAI,EAAC,YAAY;kBACjB,OAAO,EAAEnD,OAAQ;kBACjB,YAAY,EAAEQ,UAAW;kBACzB,MAAM,EAAE,SAGF;oBAAA,IAHG;sBACPqC,KAAK,EAAE;wBAAEC,QAAQ;wBAAEC;sBAAM,CAAC;sBAC1BC,UAAU,EAAE;wBAAEC;sBAAM;oBACtB,CAAC;oBACC,oBACE,QAAC,SAAS;sBACR,KAAK,EAAC,kBAAkB;sBACxB,IAAI,EAAC,UAAU;sBACf,EAAE,EAAC,iBAAiB;sBACpB,IAAI,EAAC,YAAY;sBACjB,YAAY,EAAEzC,UAAW;sBACzB,SAAS,EAAErC,OAAO,CAAC+E;sBACnB;sBAAA;sBACA,QAAQ,EAAGI,CAAC,IAAK;wBACfzC,YAAY,CAAC0C,QAAQ,CAACD,CAAC,CAACE,MAAM,CAACT,KAAK,EAAE,EAAE,CAAC,CAAC;sBAC5C,CAAE;sBACF,UAAU,EAAE;wBACVI,QAAQ,EAAE;sBACZ;oBAAE;sBAAA;sBAAA;sBAAA;oBAAA,QACS;kBAEjB;kBACA;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QACA,eACF,QAAC,UAAU;kBACT,IAAI,EAAC,YAAY;kBACjB,OAAO,EAAEnD,OAAQ;kBACjB,YAAY,EAAES,UAAW;kBACzB,MAAM,EAAE,SAGF;oBAAA,IAHG;sBACPoC,KAAK,EAAE;wBAAEC,QAAQ;wBAAEC;sBAAM,CAAC;sBAC1BC,UAAU,EAAE;wBAAEC;sBAAM;oBACtB,CAAC;oBACC,oBACE,QAAC,SAAS;sBACR,KAAK,EAAC,kBAAkB;sBACxB,IAAI,EAAC,UAAU;sBACf,EAAE,EAAC,iBAAiB;sBACpB,IAAI,EAAC,YAAY;sBACjB,YAAY,EAAExC,UAAW;sBACzB,SAAS,EAAEtC,OAAO,CAAC+E;sBACnB;sBAAA;sBACA,QAAQ,EAAGI,CAAC,IAAK;wBACfzC,YAAY,CAAC0C,QAAQ,CAACD,CAAC,CAACE,MAAM,CAACT,KAAK,EAAE,EAAE,CAAC,CAAC;sBAC5C,CAAE;sBACF,UAAU,EAAE;wBACVI,QAAQ,EAAE;sBACZ;oBAAE;sBAAA;sBAAA;sBAAA;oBAAA,QACS;kBAEjB;kBACA;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QACA;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QACE,eACN;gBAAA,wBACE,QAAC,UAAU;kBACT,IAAI,EAAC,gBAAgB;kBACrB,OAAO,EAAEnD,OAAQ;kBACjB,YAAY,EAAEM,cAAe;kBAC7B,MAAM,EAAE,SAGF;oBAAA,IAHG;sBACPuC,KAAK,EAAE;wBAAEC,QAAQ;wBAAEC;sBAAM,CAAC;sBAC1BC,UAAU,EAAE;wBAAEC;sBAAM;oBACtB,CAAC;oBACC,oBACE,QAAC,SAAS;sBACR,KAAK,EAAC,gBAAgB;sBACtB,IAAI,EAAC,QAAQ;sBACb,EAAE,EAAC,iBAAiB;sBACpB,IAAI,EAAC,gBAAgB;sBACrB,KAAK,EAAE3C,cAAe;sBACtB,SAAS,EAAEnC,OAAO,CAAC+E;sBACnB;sBAAA;sBACA,QAAQ,EAAGI,CAAC,IAAK;wBACfzC,YAAY,CAAC0C,QAAQ,CAACD,CAAC,CAACE,MAAM,CAACT,KAAK,EAAE,EAAE,CAAC,CAAC;sBAC5C,CAAE;sBACF,UAAU,EAAE;wBACVI,QAAQ,EAAE;sBACZ;oBAAE;sBAAA;sBAAA;sBAAA;oBAAA,QACS;kBAEjB;kBACA;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QACA,eACF,QAAC,UAAU;kBACT,IAAI,EAAC,kBAAkB;kBACvB,OAAO,EAAEnD,OAAQ;kBACjB,YAAY,EAAEO,gBAAiB;kBAC/B,MAAM,EAAE,SAGF;oBAAA,IAHG;sBACPsC,KAAK,EAAE;wBAAEC,QAAQ;wBAAEC;sBAAM,CAAC;sBAC1BC,UAAU,EAAE;wBAAEC;sBAAM;oBACtB,CAAC;oBACC,oBACE,QAAC,SAAS;sBACR,KAAK,EAAC,kBAAkB;sBACxB,IAAI,EAAC,QAAQ;sBACb,EAAE,EAAC,iBAAiB;sBACpB,IAAI,EAAC,kBAAkB;sBACvB,KAAK,EAAE1C,gBAAiB;sBACxB,SAAS,EAAEpC,OAAO,CAAC+E;sBACnB;sBAAA;sBACA,QAAQ,EAAGI,CAAC,IAAK;wBACfzC,YAAY,CAAC0C,QAAQ,CAACD,CAAC,CAACE,MAAM,CAACT,KAAK,EAAE,EAAE,CAAC,CAAC;sBAC5C,CAAE;sBACF,UAAU,EAAE;wBACVI,QAAQ,EAAE;sBACZ;oBAAE;sBAAA;sBAAA;sBAAA;oBAAA,QACS;kBAEjB;kBACA;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QACA;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QACE,eACN;gBAAA,wBACE,QAAC,UAAU;kBACT,IAAI,EAAC,WAAW;kBAChB,OAAO,EAAEnD,OAAQ;kBACjB,YAAY,EAAEU,SAAU;kBACxB,MAAM,EAAE,UAGF;oBAAA,IAHG;sBACPmC,KAAK,EAAE;wBAAEC,QAAQ;wBAAEC;sBAAM,CAAC;sBAC1BC,UAAU,EAAE;wBAAEC;sBAAM;oBACtB,CAAC;oBACC,oBACE,QAAC,SAAS;sBACR,KAAK,EAAC,WAAW;sBACjB,IAAI,EAAC,QAAQ;sBACb,EAAE,EAAC,iBAAiB;sBACpB,IAAI,EAAC,WAAW;sBAChB,KAAK,EAAEvC,SAAU;sBACjB,SAAS,EAAEvC,OAAO,CAAC+E,SAAU;sBAC7B,QAAQ,EAAErC,YAAa;sBACvB,UAAU,EAAE;wBACVsC,QAAQ,EAAE;sBACZ;sBACA;sBACA;sBACA;oBAAA;sBAAA;sBAAA;sBAAA;oBAAA,QACW;kBAEjB;kBACA;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QACA,eACF,QAAC,UAAU;kBACT,IAAI,EAAC,UAAU;kBACf,OAAO,EAAEnD,OAAQ;kBACjB,YAAY,EAAEW,QAAS;kBACvB,MAAM,EAAE,UAGF;oBAAA,IAHG;sBACPkC,KAAK,EAAE;wBAAEC,QAAQ;wBAAEC;sBAAM,CAAC;sBAC1BC,UAAU,EAAE;wBAAEC;sBAAM;oBACtB,CAAC;oBACC,oBACE,QAAC,SAAS;sBACR,KAAK,EAAC,UAAU;sBAChB,IAAI,EAAC,QAAQ;sBACb,EAAE,EAAC,iBAAiB;sBACpB,IAAI,EAAC,UAAU;sBACf,KAAK,EAAEtC,QAAS;sBAChB,SAAS,EAAExC,OAAO,CAAC+E;sBACnB;sBAAA;sBACA,QAAQ,EAAGI,CAAC,IAAK;wBACfzC,YAAY,CAAC0C,QAAQ,CAACD,CAAC,CAACE,MAAM,CAACT,KAAK,EAAE,EAAE,CAAC,CAAC;sBAC5C,CAAE;sBACF,UAAU,EAAE;wBACVI,QAAQ,EAAE;sBACZ;oBAAE;sBAAA;sBAAA;sBAAA;oBAAA,QACS;kBAEjB;kBACA;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QACA;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QACE,eAEN,QAAC,MAAM;gBACL,IAAI,EAAC,QAAQ;gBACb,OAAO,EAAC,WAAW;gBACnB,KAAK,EAAC,SAAS;gBACf,SAAS,EAAEhF,OAAO,CAACuE,MAAO;gBAC1B,OAAO,EAAE3B,WAAY;gBAAA,WACtB,OACM,uBAAC,IAAI;kBAAC,SAAS,EAAE5C,OAAO,CAACwE,SAAU;kBAAA,UAAC;gBAAI;kBAAA;kBAAA;kBAAA;gBAAA,QAAO;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QAC7C;YAAA;cAAA;cAAA;cAAA;YAAA,QACJ,eACP,QAAC,OAAO;cAAC,SAAS,EAAExE,OAAO,CAACyE;YAAQ;cAAA;cAAA;cAAA;YAAA,QAAG;UAAA;YAAA;YAAA;YAAA;UAAA;QAClC;UAAA;UAAA;UAAA;QAAA;MACK;QAAA;QAAA;QAAA;MAAA,QACT,eACP;QAAA,uBACE,QAAC,IAAI;UAAC,SAAS;UAAC,UAAU,EAAC,QAAQ;UAAC,SAAS,EAAEzE,OAAO,CAACsF,IAAK;UAAA,wBAC1D,QAAC,IAAI;YAAC,IAAI;YAAC,EAAE,EAAE,CAAE;YAAC,EAAE,EAAE,CAAE;YAAC,EAAE,EAAE,CAAE;YAAA,uBAC7B;cAAA,uBACE,QAAC,UAAU;gBACT,KAAK,EAAC,UAAU;gBAChB,WAAW,EAAEpB,wBAAyB;gBAAA,uBAEtC,QAAC,mBAAmB;kBAAA;kBAAA;kBAAA;gBAAA;cAAG;gBAAA;gBAAA;gBAAA;cAAA;YACZ;cAAA;cAAA;cAAA;YAAA;UACT;YAAA;YAAA;YAAA;UAAA,QACD,eACP,QAAC,IAAI;YAAC,IAAI;YAAC,EAAE,EAAE,CAAE;YAAC,EAAE,EAAE,CAAE;YAAC,EAAE,EAAE,CAAE;YAAA,uBAC7B;cAAA,uBACE,QAAC,UAAU;gBACT,KAAK,EAAC,YAAY;gBAClB,WAAW,EAAEE,0BAA2B;gBAAA,uBAExC,QAAC,qBAAqB;kBAAA;kBAAA;kBAAA;gBAAA;cAAG;gBAAA;gBAAA;gBAAA;cAAA;YACd;cAAA;cAAA;cAAA;YAAA;UACT;YAAA;YAAA;YAAA;UAAA,QACD;QAAA;UAAA;UAAA;UAAA;QAAA;MACF;QAAA;QAAA;QAAA;MAAA,QACH,eACN,QAAC,OAAO;QAAC,SAAS,EAAEpE,OAAO,CAACyE;MAAQ;QAAA;QAAA;QAAA;MAAA,QAAG,eACvC,QAAC,YAAY;QACX,MAAM,EAAEjD,oBAAqB;QAC7B,WAAW,EAAE2C,yBAA0B;QACvC,KAAK,EAAC,EAAE;QACR,UAAU,EAAE,IAAK;QACjB,YAAY,EAAE,KAAM;QACpB,WAAW,EAAE,KAAM;QAAA,uBAEnB,QAAC,gBAAgB;UACf,eAAe,EAAElD,eAAgB;UACjC,YAAY,EAAED,YAAa;UAC3B,eAAe,EAAEE,eAAgB;UACjC,iBAAiB,EAAEiD;QAA0B;UAAA;UAAA;UAAA;QAAA;MAC7C;QAAA;QAAA;QAAA;MAAA,QACW,eACf,QAAC,YAAY;QACX,MAAM,EAAEzC,sBAAuB;QAC/B,WAAW,EAAE2C,2BAA4B;QACzC,KAAK,EAAC,EAAE;QACR,UAAU,EAAE,IAAK;QACjB,YAAY,EAAE,KAAM;QACpB,WAAW,EAAE,KAAM;QAAA,uBAEnB,QAAC,kBAAkB;UACjB,iBAAiB,EAAEhD,iBAAkB;UACrC,cAAc,EAAED,cAAe;UAC/B,iBAAiB,EAAEE,iBAAkB;UACrC,iBAAiB,EAAE+C;QAA4B;UAAA;UAAA;UAAA;QAAA;MAC/C;QAAA;QAAA;QAAA;MAAA,QACW;IAAA;MAAA;MAAA;MAAA;IAAA;EACT;IAAA;IAAA;IAAA;EAAA,QACJ;AAEV,CAAC;AAAC,GAjjBIvE,WAAW;EAAA,QACAT,WAAW,EACTY,SAAS,EAoBtBR,kBAAkB,EAECH,cAAc,EACnBA,cAAc,EAQEF,OAAO;AAAA;AAAA,KAjCrCU,WAAW;AAmjBjB,MAAMG,SAAS,GAAGlB,UAAU,CAAEwG,KAAK,KAAM;EACvChB,MAAM,EAAE;IACNiB,MAAM,EAAED,KAAK,CAACE,OAAO,CAAC,CAAC;EACzB,CAAC;EACDC,QAAQ,EAAE;IACRC,WAAW,EAAEJ,KAAK,CAACE,OAAO,CAAC,CAAC;EAC9B,CAAC;EACDjB,SAAS,EAAE;IACToB,UAAU,EAAEL,KAAK,CAACE,OAAO,CAAC,CAAC;EAC7B,CAAC;EACDI,SAAS,EAAE;IACTC,QAAQ,EAAE;EACZ,CAAC;EACDxB,IAAI,EAAE;IACJyB,OAAO,EAAER,KAAK,CAACE,OAAO,CAAC,CAAC,EAAE,CAAC;EAC7B,CAAC;EACDO,SAAS,EAAE;IACTC,OAAO,EAAE,MAAM;IACfC,QAAQ,EAAE;EACZ,CAAC;EACDzB,OAAO,EAAE;IACPsB,OAAO,EAAE;EACX,CAAC;EACDhB,SAAS,EAAE;IACTa,UAAU,EAAEL,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC;IAC5BE,WAAW,EAAEJ,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC;IAC7BU,KAAK,EAAE;EACT,CAAC;EACDb,IAAI,EAAE;IACJS,OAAO,EAAER,KAAK,CAACE,OAAO,CAAC,CAAC,EAAE,CAAC;IAC3B;EACF,CAAC;;EACDW,GAAG,EAAE;IACHC,MAAM,EAAE,GAAG;IACXJ,OAAO,EAAE,MAAM;IACfK,MAAM,EAAE,iBAAiB;IACzBP,OAAO,EAAE;EACX;AACF,CAAC,CAAC,CAAC;AAEH,eAAejG,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module"}