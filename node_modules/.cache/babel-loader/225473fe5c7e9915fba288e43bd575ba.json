{"ast":null,"code":"import { useState, useCallback } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { periods_url } from \"../../utils/constants\";\nimport { filterByEmpId } from \"./utils\";\nimport axios from \"axios\";\nimport { queryKeys } from \"../react-query/constants\";\nasync function getPeriods(id) {\n  const {\n    data\n  } = await axios.get(`${periods_url}?em=${id}`);\n  //const { data } = await axios.get(`${payslips_url}`);\n  return data;\n}\nexport function usePeriods(empid) {\n  const [filter, setFilter] = useState(\"all\");\n  const [periodId, setPeriodId] = useState(\"\");\n  const selectFn = useCallback(unfiltered => filterByEmpId(unfiltered, filter), [filter]);\n  const fallback = [];\n  const {\n    data: periods = fallback\n  } = useQuery([queryKeys.periods, periodId],\n  //queryKeys.payslips,\n  () => getPeriods(periodId), {\n    select: filter !== \"all\" ? selectFn : undefined\n  });\n  return {\n    periods,\n    filter,\n    setFilter,\n    setPeriodId\n  };\n}","map":{"version":3,"names":["useState","useCallback","useQuery","periods_url","filterByEmpId","axios","queryKeys","getPeriods","id","data","get","usePeriods","empid","filter","setFilter","periodId","setPeriodId","selectFn","unfiltered","fallback","periods","select","undefined"],"sources":["D:/react-myprojects/hrms-demo/src/components/periods/usePeriods.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport { periods_url } from \"../../utils/constants\";\r\nimport { filterByEmpId } from \"./utils\";\r\n\r\nimport axios from \"axios\";\r\nimport { queryKeys } from \"../react-query/constants\";\r\n\r\nasync function getPeriods(id) {\r\n  const { data } = await axios.get(`${periods_url}?em=${id}`);\r\n  //const { data } = await axios.get(`${payslips_url}`);\r\n  return data;\r\n}\r\n\r\nexport function usePeriods(empid) {\r\n  const [filter, setFilter] = useState(\"all\");\r\n  const [periodId, setPeriodId] = useState(\"\");\r\n\r\n  const selectFn = useCallback(\r\n    (unfiltered) => filterByEmpId(unfiltered, filter),\r\n    [filter]\r\n  );\r\n\r\n  const fallback = [];\r\n  const { data: periods = fallback } = useQuery(\r\n    [queryKeys.periods, periodId],\r\n    //queryKeys.payslips,\r\n    () => getPeriods(periodId),\r\n    {\r\n      select: filter !== \"all\" ? selectFn : undefined,\r\n    }\r\n  );\r\n\r\n  return { periods, filter, setFilter, setPeriodId };\r\n}\r\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,WAAW,QAAQ,uBAAuB;AACnD,SAASC,aAAa,QAAQ,SAAS;AAEvC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,0BAA0B;AAEpD,eAAeC,UAAU,CAACC,EAAE,EAAE;EAC5B,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAE,GAAEP,WAAY,OAAMK,EAAG,EAAC,CAAC;EAC3D;EACA,OAAOC,IAAI;AACb;AAEA,OAAO,SAASE,UAAU,CAACC,KAAK,EAAE;EAChC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMiB,QAAQ,GAAGhB,WAAW,CACzBiB,UAAU,IAAKd,aAAa,CAACc,UAAU,EAAEL,MAAM,CAAC,EACjD,CAACA,MAAM,CAAC,CACT;EAED,MAAMM,QAAQ,GAAG,EAAE;EACnB,MAAM;IAAEV,IAAI,EAAEW,OAAO,GAAGD;EAAS,CAAC,GAAGjB,QAAQ,CAC3C,CAACI,SAAS,CAACc,OAAO,EAAEL,QAAQ,CAAC;EAC7B;EACA,MAAMR,UAAU,CAACQ,QAAQ,CAAC,EAC1B;IACEM,MAAM,EAAER,MAAM,KAAK,KAAK,GAAGI,QAAQ,GAAGK;EACxC,CAAC,CACF;EAED,OAAO;IAAEF,OAAO;IAAEP,MAAM;IAAEC,SAAS;IAAEE;EAAY,CAAC;AACpD"},"metadata":{},"sourceType":"module"}