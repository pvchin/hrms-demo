{"ast":null,"code":"var v8StyleErrors = require('./lib/v8-style')();\nvar reformat = require('./lib/reformat');\nfunction ErrorMaker(name, ParentError) {\n  function NewError(message) {\n    if (!(this instanceof NewError)) return new NewError(message);\n\n    // Use a try/catch block to capture the stack trace. Capturing the stack trace here is\n    // necessary, otherwise we will get the stack trace at the time the new error class was created,\n    // rather than when it is instantiated.  We add `message` and `name` so that the stack trace\n    // string will match our current error class.\n    try {\n      throw new Error(message);\n    } catch (err) {\n      err.name = name;\n      this.stack = err.stack;\n    }\n\n    // if we have v8-styled stack messages, then reformat\n    if (v8StyleErrors) {\n      if (this.stack) this.stack = reformat(this.stack, name, message);\n    }\n    this.message = message || '';\n    this.name = name;\n  }\n  NewError.prototype = new (ParentError || Error)();\n  NewError.prototype.constructor = NewError;\n  NewError.prototype.inspect = function () {\n    return this.message ? '[' + name + ': ' + this.message + ']' : '[' + name + ']';\n  };\n  NewError.prototype.name = name;\n  return NewError;\n}\nmodule.exports = ErrorMaker;","map":{"version":3,"names":["v8StyleErrors","require","reformat","ErrorMaker","name","ParentError","NewError","message","Error","err","stack","prototype","constructor","inspect","module","exports"],"sources":["D:/react-myprojects/hrms-demo/node_modules/custom-error/index.js"],"sourcesContent":["var v8StyleErrors = require('./lib/v8-style')()\nvar reformat = require('./lib/reformat')\n\nfunction ErrorMaker(name, ParentError) {\n  function NewError(message) {\n    if (!(this instanceof NewError))\n      return new NewError(message)\n\n    // Use a try/catch block to capture the stack trace. Capturing the stack trace here is\n    // necessary, otherwise we will get the stack trace at the time the new error class was created,\n    // rather than when it is instantiated.  We add `message` and `name` so that the stack trace\n    // string will match our current error class.\n    try {\n      throw new Error(message)\n    }\n    catch (err) {\n      err.name = name\n      this.stack = err.stack\n    }\n\n    // if we have v8-styled stack messages, then reformat\n    if (v8StyleErrors) {\n      if (this.stack) this.stack = reformat(this.stack, name, message)\n    }\n\n    this.message = message || ''\n    this.name = name\n  }\n\n  NewError.prototype = new (ParentError || Error)()\n  NewError.prototype.constructor = NewError\n  NewError.prototype.inspect = function() {\n    return this.message\n      ? '[' + name + ': ' + this.message + ']'\n      : '[' + name + ']'\n  }\n  NewError.prototype.name = name\n\n  return NewError\n}\n\nmodule.exports = ErrorMaker\n"],"mappings":"AAAA,IAAIA,aAAa,GAAGC,OAAO,CAAC,gBAAgB,CAAC,EAAE;AAC/C,IAAIC,QAAQ,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAExC,SAASE,UAAU,CAACC,IAAI,EAAEC,WAAW,EAAE;EACrC,SAASC,QAAQ,CAACC,OAAO,EAAE;IACzB,IAAI,EAAE,IAAI,YAAYD,QAAQ,CAAC,EAC7B,OAAO,IAAIA,QAAQ,CAACC,OAAO,CAAC;;IAE9B;IACA;IACA;IACA;IACA,IAAI;MACF,MAAM,IAAIC,KAAK,CAACD,OAAO,CAAC;IAC1B,CAAC,CACD,OAAOE,GAAG,EAAE;MACVA,GAAG,CAACL,IAAI,GAAGA,IAAI;MACf,IAAI,CAACM,KAAK,GAAGD,GAAG,CAACC,KAAK;IACxB;;IAEA;IACA,IAAIV,aAAa,EAAE;MACjB,IAAI,IAAI,CAACU,KAAK,EAAE,IAAI,CAACA,KAAK,GAAGR,QAAQ,CAAC,IAAI,CAACQ,KAAK,EAAEN,IAAI,EAAEG,OAAO,CAAC;IAClE;IAEA,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAI,EAAE;IAC5B,IAAI,CAACH,IAAI,GAAGA,IAAI;EAClB;EAEAE,QAAQ,CAACK,SAAS,GAAG,KAAKN,WAAW,IAAIG,KAAK,GAAG;EACjDF,QAAQ,CAACK,SAAS,CAACC,WAAW,GAAGN,QAAQ;EACzCA,QAAQ,CAACK,SAAS,CAACE,OAAO,GAAG,YAAW;IACtC,OAAO,IAAI,CAACN,OAAO,GACf,GAAG,GAAGH,IAAI,GAAG,IAAI,GAAG,IAAI,CAACG,OAAO,GAAG,GAAG,GACtC,GAAG,GAAGH,IAAI,GAAG,GAAG;EACtB,CAAC;EACDE,QAAQ,CAACK,SAAS,CAACP,IAAI,GAAGA,IAAI;EAE9B,OAAOE,QAAQ;AACjB;AAEAQ,MAAM,CAACC,OAAO,GAAGZ,UAAU"},"metadata":{},"sourceType":"script"}