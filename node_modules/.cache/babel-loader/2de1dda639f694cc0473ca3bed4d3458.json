{"ast":null,"code":"'use strict';\n\nvar support = require('./support');\nvar utils = require('./utils');\nvar crc32 = require('./crc32');\nvar signature = require('./signature');\nvar defaults = require('./defaults');\nvar base64 = require('./base64');\nvar compressions = require('./compressions');\nvar CompressedObject = require('./compressedObject');\nvar nodeBuffer = require('./nodeBuffer');\nvar utf8 = require('./utf8');\nvar StringWriter = require('./stringWriter');\nvar Uint8ArrayWriter = require('./uint8ArrayWriter');\n\n/**\n * Returns the raw data of a ZipObject, decompress the content if necessary.\n * @param {ZipObject} file the file to use.\n * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.\n */\nvar getRawData = function (file) {\n  if (file._data instanceof CompressedObject) {\n    file._data = file._data.getContent();\n    file.options.binary = true;\n    file.options.base64 = false;\n    if (utils.getTypeOf(file._data) === \"uint8array\") {\n      var copy = file._data;\n      // when reading an arraybuffer, the CompressedObject mechanism will keep it and subarray() a Uint8Array.\n      // if we request a file in the same format, we might get the same Uint8Array or its ArrayBuffer (the original zip file).\n      file._data = new Uint8Array(copy.length);\n      // with an empty Uint8Array, Opera fails with a \"Offset larger than array size\"\n      if (copy.length !== 0) {\n        file._data.set(copy, 0);\n      }\n    }\n  }\n  return file._data;\n};\n\n/**\n * Returns the data of a ZipObject in a binary form. If the content is an unicode string, encode it.\n * @param {ZipObject} file the file to use.\n * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.\n */\nvar getBinaryData = function (file) {\n  var result = getRawData(file),\n    type = utils.getTypeOf(result);\n  if (type === \"string\") {\n    if (!file.options.binary) {\n      // unicode text !\n      // unicode string => binary string is a painful process, check if we can avoid it.\n      if (support.nodebuffer) {\n        return nodeBuffer(result, \"utf-8\");\n      }\n    }\n    return file.asBinary();\n  }\n  return result;\n};\n\n/**\n * Transform this._data into a string.\n * @param {function} filter a function String -> String, applied if not null on the result.\n * @return {String} the string representing this._data.\n */\nvar dataToString = function (asUTF8) {\n  var result = getRawData(this);\n  if (result === null || typeof result === \"undefined\") {\n    return \"\";\n  }\n  // if the data is a base64 string, we decode it before checking the encoding !\n  if (this.options.base64) {\n    result = base64.decode(result);\n  }\n  if (asUTF8 && this.options.binary) {\n    // JSZip.prototype.utf8decode supports arrays as input\n    // skip to array => string step, utf8decode will do it.\n    result = out.utf8decode(result);\n  } else {\n    // no utf8 transformation, do the array => string step.\n    result = utils.transformTo(\"string\", result);\n  }\n  if (!asUTF8 && !this.options.binary) {\n    result = utils.transformTo(\"string\", out.utf8encode(result));\n  }\n  return result;\n};\n/**\n * A simple object representing a file in the zip file.\n * @constructor\n * @param {string} name the name of the file\n * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data\n * @param {Object} options the options of the file\n */\nvar ZipObject = function (name, data, options) {\n  this.name = name;\n  this.dir = options.dir;\n  this.date = options.date;\n  this.comment = options.comment;\n  this._data = data;\n  this.options = options;\n\n  /*\n   * This object contains initial values for dir and date.\n   * With them, we can check if the user changed the deprecated metadata in\n   * `ZipObject#options` or not.\n   */\n  this._initialMetadata = {\n    dir: options.dir,\n    date: options.date\n  };\n};\nZipObject.prototype = {\n  /**\n   * Return the content as UTF8 string.\n   * @return {string} the UTF8 string.\n   */\n  asText: function () {\n    return dataToString.call(this, true);\n  },\n  /**\n   * Returns the binary content.\n   * @return {string} the content as binary.\n   */\n  asBinary: function () {\n    return dataToString.call(this, false);\n  },\n  /**\n   * Returns the content as a nodejs Buffer.\n   * @return {Buffer} the content as a Buffer.\n   */\n  asNodeBuffer: function () {\n    var result = getBinaryData(this);\n    return utils.transformTo(\"nodebuffer\", result);\n  },\n  /**\n   * Returns the content as an Uint8Array.\n   * @return {Uint8Array} the content as an Uint8Array.\n   */\n  asUint8Array: function () {\n    var result = getBinaryData(this);\n    return utils.transformTo(\"uint8array\", result);\n  },\n  /**\n   * Returns the content as an ArrayBuffer.\n   * @return {ArrayBuffer} the content as an ArrayBufer.\n   */\n  asArrayBuffer: function () {\n    return this.asUint8Array().buffer;\n  }\n};\n\n/**\n * Transform an integer into a string in hexadecimal.\n * @private\n * @param {number} dec the number to convert.\n * @param {number} bytes the number of bytes to generate.\n * @returns {string} the result.\n */\nvar decToHex = function (dec, bytes) {\n  var hex = \"\",\n    i;\n  for (i = 0; i < bytes; i++) {\n    hex += String.fromCharCode(dec & 0xff);\n    dec = dec >>> 8;\n  }\n  return hex;\n};\n\n/**\n * Merge the objects passed as parameters into a new one.\n * @private\n * @param {...Object} var_args All objects to merge.\n * @return {Object} a new object with the data of the others.\n */\nvar extend = function () {\n  var result = {},\n    i,\n    attr;\n  for (i = 0; i < arguments.length; i++) {\n    // arguments is not enumerable in some browsers\n    for (attr in arguments[i]) {\n      if (arguments[i].hasOwnProperty(attr) && typeof result[attr] === \"undefined\") {\n        result[attr] = arguments[i][attr];\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Transforms the (incomplete) options from the user into the complete\n * set of options to create a file.\n * @private\n * @param {Object} o the options from the user.\n * @return {Object} the complete set of options.\n */\nvar prepareFileAttrs = function (o) {\n  o = o || {};\n  if (o.base64 === true && (o.binary === null || o.binary === undefined)) {\n    o.binary = true;\n  }\n  o = extend(o, defaults);\n  o.date = o.date || new Date();\n  if (o.compression !== null) o.compression = o.compression.toUpperCase();\n  return o;\n};\n\n/**\n * Add a file in the current folder.\n * @private\n * @param {string} name the name of the file\n * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data of the file\n * @param {Object} o the options of the file\n * @return {Object} the new file.\n */\nvar fileAdd = function (name, data, o) {\n  // be sure sub folders exist\n  var dataType = utils.getTypeOf(data),\n    parent;\n  o = prepareFileAttrs(o);\n  if (o.createFolders && (parent = parentFolder(name))) {\n    folderAdd.call(this, parent, true);\n  }\n  if (o.dir || data === null || typeof data === \"undefined\") {\n    o.base64 = false;\n    o.binary = false;\n    data = null;\n  } else if (dataType === \"string\") {\n    if (o.binary && !o.base64) {\n      // optimizedBinaryString == true means that the file has already been filtered with a 0xFF mask\n      if (o.optimizedBinaryString !== true) {\n        // this is a string, not in a base64 format.\n        // Be sure that this is a correct \"binary string\"\n        data = utils.string2binary(data);\n      }\n    }\n  } else {\n    // arraybuffer, uint8array, ...\n    o.base64 = false;\n    o.binary = true;\n    if (!dataType && !(data instanceof CompressedObject)) {\n      throw new Error(\"The data of '\" + name + \"' is in an unsupported format !\");\n    }\n\n    // special case : it's way easier to work with Uint8Array than with ArrayBuffer\n    if (dataType === \"arraybuffer\") {\n      data = utils.transformTo(\"uint8array\", data);\n    }\n  }\n  var object = new ZipObject(name, data, o);\n  this.files[name] = object;\n  return object;\n};\n\n/**\n * Find the parent folder of the path.\n * @private\n * @param {string} path the path to use\n * @return {string} the parent folder, or \"\"\n */\nvar parentFolder = function (path) {\n  if (path.slice(-1) == '/') {\n    path = path.substring(0, path.length - 1);\n  }\n  var lastSlash = path.lastIndexOf('/');\n  return lastSlash > 0 ? path.substring(0, lastSlash) : \"\";\n};\n\n/**\n * Add a (sub) folder in the current folder.\n * @private\n * @param {string} name the folder's name\n * @param {boolean=} [createFolders] If true, automatically create sub \n *  folders. Defaults to false.\n * @return {Object} the new folder.\n */\nvar folderAdd = function (name, createFolders) {\n  // Check the name ends with a /\n  if (name.slice(-1) != \"/\") {\n    name += \"/\"; // IE doesn't like substr(-1)\n  }\n\n  createFolders = typeof createFolders !== 'undefined' ? createFolders : false;\n\n  // Does this folder already exist?\n  if (!this.files[name]) {\n    fileAdd.call(this, name, null, {\n      dir: true,\n      createFolders: createFolders\n    });\n  }\n  return this.files[name];\n};\n\n/**\n * Generate a JSZip.CompressedObject for a given zipOject.\n * @param {ZipObject} file the object to read.\n * @param {JSZip.compression} compression the compression to use.\n * @return {JSZip.CompressedObject} the compressed result.\n */\nvar generateCompressedObjectFrom = function (file, compression) {\n  var result = new CompressedObject(),\n    content;\n\n  // the data has not been decompressed, we might reuse things !\n  if (file._data instanceof CompressedObject) {\n    result.uncompressedSize = file._data.uncompressedSize;\n    result.crc32 = file._data.crc32;\n    if (result.uncompressedSize === 0 || file.dir) {\n      compression = compressions['STORE'];\n      result.compressedContent = \"\";\n      result.crc32 = 0;\n    } else if (file._data.compressionMethod === compression.magic) {\n      result.compressedContent = file._data.getCompressedContent();\n    } else {\n      content = file._data.getContent();\n      // need to decompress / recompress\n      result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content));\n    }\n  } else {\n    // have uncompressed data\n    content = getBinaryData(file);\n    if (!content || content.length === 0 || file.dir) {\n      compression = compressions['STORE'];\n      content = \"\";\n    }\n    result.uncompressedSize = content.length;\n    result.crc32 = crc32(content);\n    result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content));\n  }\n  result.compressedSize = result.compressedContent.length;\n  result.compressionMethod = compression.magic;\n  return result;\n};\n\n/**\n * Generate the various parts used in the construction of the final zip file.\n * @param {string} name the file name.\n * @param {ZipObject} file the file content.\n * @param {JSZip.CompressedObject} compressedObject the compressed object.\n * @param {number} offset the current offset from the start of the zip file.\n * @return {object} the zip parts.\n */\nvar generateZipParts = function (name, file, compressedObject, offset) {\n  var data = compressedObject.compressedContent,\n    utfEncodedFileName = utils.transformTo(\"string\", utf8.utf8encode(file.name)),\n    comment = file.comment || \"\",\n    utfEncodedComment = utils.transformTo(\"string\", utf8.utf8encode(comment)),\n    useUTF8ForFileName = utfEncodedFileName.length !== file.name.length,\n    useUTF8ForComment = utfEncodedComment.length !== comment.length,\n    o = file.options,\n    dosTime,\n    dosDate,\n    extraFields = \"\",\n    unicodePathExtraField = \"\",\n    unicodeCommentExtraField = \"\",\n    dir,\n    date;\n\n  // handle the deprecated options.dir\n  if (file._initialMetadata.dir !== file.dir) {\n    dir = file.dir;\n  } else {\n    dir = o.dir;\n  }\n\n  // handle the deprecated options.date\n  if (file._initialMetadata.date !== file.date) {\n    date = file.date;\n  } else {\n    date = o.date;\n  }\n\n  // date\n  // @see http://www.delorie.com/djgpp/doc/rbinter/it/52/13.html\n  // @see http://www.delorie.com/djgpp/doc/rbinter/it/65/16.html\n  // @see http://www.delorie.com/djgpp/doc/rbinter/it/66/16.html\n\n  dosTime = date.getHours();\n  dosTime = dosTime << 6;\n  dosTime = dosTime | date.getMinutes();\n  dosTime = dosTime << 5;\n  dosTime = dosTime | date.getSeconds() / 2;\n  dosDate = date.getFullYear() - 1980;\n  dosDate = dosDate << 4;\n  dosDate = dosDate | date.getMonth() + 1;\n  dosDate = dosDate << 5;\n  dosDate = dosDate | date.getDate();\n  if (useUTF8ForFileName) {\n    // set the unicode path extra field. unzip needs at least one extra\n    // field to correctly handle unicode path, so using the path is as good\n    // as any other information. This could improve the situation with\n    // other archive managers too.\n    // This field is usually used without the utf8 flag, with a non\n    // unicode path in the header (winrar, winzip). This helps (a bit)\n    // with the messy Windows' default compressed folders feature but\n    // breaks on p7zip which doesn't seek the unicode path extra field.\n    // So for now, UTF-8 everywhere !\n    unicodePathExtraField =\n    // Version\n    decToHex(1, 1) +\n    // NameCRC32\n    decToHex(crc32(utfEncodedFileName), 4) +\n    // UnicodeName\n    utfEncodedFileName;\n    extraFields +=\n    // Info-ZIP Unicode Path Extra Field\n    \"\\x75\\x70\" +\n    // size\n    decToHex(unicodePathExtraField.length, 2) +\n    // content\n    unicodePathExtraField;\n  }\n  if (useUTF8ForComment) {\n    unicodeCommentExtraField =\n    // Version\n    decToHex(1, 1) +\n    // CommentCRC32\n    decToHex(this.crc32(utfEncodedComment), 4) +\n    // UnicodeName\n    utfEncodedComment;\n    extraFields +=\n    // Info-ZIP Unicode Path Extra Field\n    \"\\x75\\x63\" +\n    // size\n    decToHex(unicodeCommentExtraField.length, 2) +\n    // content\n    unicodeCommentExtraField;\n  }\n  var header = \"\";\n\n  // version needed to extract\n  header += \"\\x0A\\x00\";\n  // general purpose bit flag\n  // set bit 11 if utf8\n  header += useUTF8ForFileName || useUTF8ForComment ? \"\\x00\\x08\" : \"\\x00\\x00\";\n  // compression method\n  header += compressedObject.compressionMethod;\n  // last mod file time\n  header += decToHex(dosTime, 2);\n  // last mod file date\n  header += decToHex(dosDate, 2);\n  // crc-32\n  header += decToHex(compressedObject.crc32, 4);\n  // compressed size\n  header += decToHex(compressedObject.compressedSize, 4);\n  // uncompressed size\n  header += decToHex(compressedObject.uncompressedSize, 4);\n  // file name length\n  header += decToHex(utfEncodedFileName.length, 2);\n  // extra field length\n  header += decToHex(extraFields.length, 2);\n  var fileRecord = signature.LOCAL_FILE_HEADER + header + utfEncodedFileName + extraFields;\n  var dirRecord = signature.CENTRAL_FILE_HEADER +\n  // version made by (00: DOS)\n  \"\\x14\\x00\" +\n  // file header (common to file and central directory)\n  header +\n  // file comment length\n  decToHex(utfEncodedComment.length, 2) +\n  // disk number start\n  \"\\x00\\x00\" +\n  // internal file attributes TODO\n  \"\\x00\\x00\" + (\n  // external file attributes\n  dir === true ? \"\\x10\\x00\\x00\\x00\" : \"\\x00\\x00\\x00\\x00\") +\n  // relative offset of local header\n  decToHex(offset, 4) +\n  // file name\n  utfEncodedFileName +\n  // extra field\n  extraFields +\n  // file comment\n  utfEncodedComment;\n  return {\n    fileRecord: fileRecord,\n    dirRecord: dirRecord,\n    compressedObject: compressedObject\n  };\n};\n\n// return the actual prototype of JSZip\nvar out = {\n  /**\n   * Read an existing zip and merge the data in the current JSZip object.\n   * The implementation is in jszip-load.js, don't forget to include it.\n   * @param {String|ArrayBuffer|Uint8Array|Buffer} stream  The stream to load\n   * @param {Object} options Options for loading the stream.\n   *  options.base64 : is the stream in base64 ? default : false\n   * @return {JSZip} the current JSZip object\n   */\n  load: function (stream, options) {\n    throw new Error(\"Load method is not defined. Is the file jszip-load.js included ?\");\n  },\n  /**\n   * Filter nested files/folders with the specified function.\n   * @param {Function} search the predicate to use :\n   * function (relativePath, file) {...}\n   * It takes 2 arguments : the relative path and the file.\n   * @return {Array} An array of matching elements.\n   */\n  filter: function (search) {\n    var result = [],\n      filename,\n      relativePath,\n      file,\n      fileClone;\n    for (filename in this.files) {\n      if (!this.files.hasOwnProperty(filename)) {\n        continue;\n      }\n      file = this.files[filename];\n      // return a new object, don't let the user mess with our internal objects :)\n      fileClone = new ZipObject(file.name, file._data, extend(file.options));\n      relativePath = filename.slice(this.root.length, filename.length);\n      if (filename.slice(0, this.root.length) === this.root &&\n      // the file is in the current root\n      search(relativePath, fileClone)) {\n        // and the file matches the function\n        result.push(fileClone);\n      }\n    }\n    return result;\n  },\n  /**\n   * Add a file to the zip file, or search a file.\n   * @param   {string|RegExp} name The name of the file to add (if data is defined),\n   * the name of the file to find (if no data) or a regex to match files.\n   * @param   {String|ArrayBuffer|Uint8Array|Buffer} data  The file data, either raw or base64 encoded\n   * @param   {Object} o     File options\n   * @return  {JSZip|Object|Array} this JSZip object (when adding a file),\n   * a file (when searching by string) or an array of files (when searching by regex).\n   */\n  file: function (name, data, o) {\n    if (arguments.length === 1) {\n      if (utils.isRegExp(name)) {\n        var regexp = name;\n        return this.filter(function (relativePath, file) {\n          return !file.dir && regexp.test(relativePath);\n        });\n      } else {\n        // text\n        return this.filter(function (relativePath, file) {\n          return !file.dir && relativePath === name;\n        })[0] || null;\n      }\n    } else {\n      // more than one argument : we have data !\n      name = this.root + name;\n      fileAdd.call(this, name, data, o);\n    }\n    return this;\n  },\n  /**\n   * Add a directory to the zip file, or search.\n   * @param   {String|RegExp} arg The name of the directory to add, or a regex to search folders.\n   * @return  {JSZip} an object with the new directory as the root, or an array containing matching folders.\n   */\n  folder: function (arg) {\n    if (!arg) {\n      return this;\n    }\n    if (utils.isRegExp(arg)) {\n      return this.filter(function (relativePath, file) {\n        return file.dir && arg.test(relativePath);\n      });\n    }\n\n    // else, name is a new folder\n    var name = this.root + arg;\n    var newFolder = folderAdd.call(this, name);\n\n    // Allow chaining by returning a new object with this folder as the root\n    var ret = this.clone();\n    ret.root = newFolder.name;\n    return ret;\n  },\n  /**\n   * Delete a file, or a directory and all sub-files, from the zip\n   * @param {string} name the name of the file to delete\n   * @return {JSZip} this JSZip object\n   */\n  remove: function (name) {\n    name = this.root + name;\n    var file = this.files[name];\n    if (!file) {\n      // Look for any folders\n      if (name.slice(-1) != \"/\") {\n        name += \"/\";\n      }\n      file = this.files[name];\n    }\n    if (file && !file.dir) {\n      // file\n      delete this.files[name];\n    } else {\n      // maybe a folder, delete recursively\n      var kids = this.filter(function (relativePath, file) {\n        return file.name.slice(0, name.length) === name;\n      });\n      for (var i = 0; i < kids.length; i++) {\n        delete this.files[kids[i].name];\n      }\n    }\n    return this;\n  },\n  /**\n   * Generate the complete zip file\n   * @param {Object} options the options to generate the zip file :\n   * - base64, (deprecated, use type instead) true to generate base64.\n   * - compression, \"STORE\" by default.\n   * - type, \"base64\" by default. Values are : string, base64, uint8array, arraybuffer, blob.\n   * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the zip file\n   */\n  generate: function (options) {\n    options = extend(options || {}, {\n      base64: true,\n      compression: \"STORE\",\n      type: \"base64\",\n      comment: null\n    });\n    utils.checkSupport(options.type);\n    var zipData = [],\n      localDirLength = 0,\n      centralDirLength = 0,\n      writer,\n      i,\n      utfEncodedComment = utils.transformTo(\"string\", this.utf8encode(options.comment || this.comment || \"\"));\n\n    // first, generate all the zip parts.\n    for (var name in this.files) {\n      if (!this.files.hasOwnProperty(name)) {\n        continue;\n      }\n      var file = this.files[name];\n      var compressionName = file.options.compression || options.compression.toUpperCase();\n      var compression = compressions[compressionName];\n      if (!compression) {\n        throw new Error(compressionName + \" is not a valid compression method !\");\n      }\n      var compressedObject = generateCompressedObjectFrom.call(this, file, compression);\n      var zipPart = generateZipParts.call(this, name, file, compressedObject, localDirLength);\n      localDirLength += zipPart.fileRecord.length + compressedObject.compressedSize;\n      centralDirLength += zipPart.dirRecord.length;\n      zipData.push(zipPart);\n    }\n    var dirEnd = \"\";\n\n    // end of central dir signature\n    dirEnd = signature.CENTRAL_DIRECTORY_END +\n    // number of this disk\n    \"\\x00\\x00\" +\n    // number of the disk with the start of the central directory\n    \"\\x00\\x00\" +\n    // total number of entries in the central directory on this disk\n    decToHex(zipData.length, 2) +\n    // total number of entries in the central directory\n    decToHex(zipData.length, 2) +\n    // size of the central directory   4 bytes\n    decToHex(centralDirLength, 4) +\n    // offset of start of central directory with respect to the starting disk number\n    decToHex(localDirLength, 4) +\n    // .ZIP file comment length\n    decToHex(utfEncodedComment.length, 2) +\n    // .ZIP file comment\n    utfEncodedComment;\n\n    // we have all the parts (and the total length)\n    // time to create a writer !\n    var typeName = options.type.toLowerCase();\n    if (typeName === \"uint8array\" || typeName === \"arraybuffer\" || typeName === \"blob\" || typeName === \"nodebuffer\") {\n      writer = new Uint8ArrayWriter(localDirLength + centralDirLength + dirEnd.length);\n    } else {\n      writer = new StringWriter(localDirLength + centralDirLength + dirEnd.length);\n    }\n    for (i = 0; i < zipData.length; i++) {\n      writer.append(zipData[i].fileRecord);\n      writer.append(zipData[i].compressedObject.compressedContent);\n    }\n    for (i = 0; i < zipData.length; i++) {\n      writer.append(zipData[i].dirRecord);\n    }\n    writer.append(dirEnd);\n    var zip = writer.finalize();\n    switch (options.type.toLowerCase()) {\n      // case \"zip is an Uint8Array\"\n      case \"uint8array\":\n      case \"arraybuffer\":\n      case \"nodebuffer\":\n        return utils.transformTo(options.type.toLowerCase(), zip);\n      case \"blob\":\n        return utils.arrayBuffer2Blob(utils.transformTo(\"arraybuffer\", zip));\n      // case \"zip is a string\"\n      case \"base64\":\n        return options.base64 ? base64.encode(zip) : zip;\n      default:\n        // case \"string\" :\n        return zip;\n    }\n  },\n  /**\n   * @deprecated\n   * This method will be removed in a future version without replacement.\n   */\n  crc32: function (input, crc) {\n    return crc32(input, crc);\n  },\n  /**\n   * @deprecated\n   * This method will be removed in a future version without replacement.\n   */\n  utf8encode: function (string) {\n    return utils.transformTo(\"string\", utf8.utf8encode(string));\n  },\n  /**\n   * @deprecated\n   * This method will be removed in a future version without replacement.\n   */\n  utf8decode: function (input) {\n    return utf8.utf8decode(input);\n  }\n};\nmodule.exports = out;","map":{"version":3,"names":["support","require","utils","crc32","signature","defaults","base64","compressions","CompressedObject","nodeBuffer","utf8","StringWriter","Uint8ArrayWriter","getRawData","file","_data","getContent","options","binary","getTypeOf","copy","Uint8Array","length","set","getBinaryData","result","type","nodebuffer","asBinary","dataToString","asUTF8","decode","out","utf8decode","transformTo","utf8encode","ZipObject","name","data","dir","date","comment","_initialMetadata","prototype","asText","call","asNodeBuffer","asUint8Array","asArrayBuffer","buffer","decToHex","dec","bytes","hex","i","String","fromCharCode","extend","attr","arguments","hasOwnProperty","prepareFileAttrs","o","undefined","Date","compression","toUpperCase","fileAdd","dataType","parent","createFolders","parentFolder","folderAdd","optimizedBinaryString","string2binary","Error","object","files","path","slice","substring","lastSlash","lastIndexOf","generateCompressedObjectFrom","content","uncompressedSize","compressedContent","compressionMethod","magic","getCompressedContent","compress","compressInputType","compressedSize","generateZipParts","compressedObject","offset","utfEncodedFileName","utfEncodedComment","useUTF8ForFileName","useUTF8ForComment","dosTime","dosDate","extraFields","unicodePathExtraField","unicodeCommentExtraField","getHours","getMinutes","getSeconds","getFullYear","getMonth","getDate","header","fileRecord","LOCAL_FILE_HEADER","dirRecord","CENTRAL_FILE_HEADER","load","stream","filter","search","filename","relativePath","fileClone","root","push","isRegExp","regexp","test","folder","arg","newFolder","ret","clone","remove","kids","generate","checkSupport","zipData","localDirLength","centralDirLength","writer","compressionName","zipPart","dirEnd","CENTRAL_DIRECTORY_END","typeName","toLowerCase","append","zip","finalize","arrayBuffer2Blob","encode","input","crc","string","module","exports"],"sources":["D:/react-myprojects/hrms-demo/node_modules/jszip/lib/object.js"],"sourcesContent":["'use strict';\nvar support = require('./support');\nvar utils = require('./utils');\nvar crc32 = require('./crc32');\nvar signature = require('./signature');\nvar defaults = require('./defaults');\nvar base64 = require('./base64');\nvar compressions = require('./compressions');\nvar CompressedObject = require('./compressedObject');\nvar nodeBuffer = require('./nodeBuffer');\nvar utf8 = require('./utf8');\nvar StringWriter = require('./stringWriter');\nvar Uint8ArrayWriter = require('./uint8ArrayWriter');\n\n/**\n * Returns the raw data of a ZipObject, decompress the content if necessary.\n * @param {ZipObject} file the file to use.\n * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.\n */\nvar getRawData = function(file) {\n    if (file._data instanceof CompressedObject) {\n        file._data = file._data.getContent();\n        file.options.binary = true;\n        file.options.base64 = false;\n\n        if (utils.getTypeOf(file._data) === \"uint8array\") {\n            var copy = file._data;\n            // when reading an arraybuffer, the CompressedObject mechanism will keep it and subarray() a Uint8Array.\n            // if we request a file in the same format, we might get the same Uint8Array or its ArrayBuffer (the original zip file).\n            file._data = new Uint8Array(copy.length);\n            // with an empty Uint8Array, Opera fails with a \"Offset larger than array size\"\n            if (copy.length !== 0) {\n                file._data.set(copy, 0);\n            }\n        }\n    }\n    return file._data;\n};\n\n/**\n * Returns the data of a ZipObject in a binary form. If the content is an unicode string, encode it.\n * @param {ZipObject} file the file to use.\n * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.\n */\nvar getBinaryData = function(file) {\n    var result = getRawData(file),\n        type = utils.getTypeOf(result);\n    if (type === \"string\") {\n        if (!file.options.binary) {\n            // unicode text !\n            // unicode string => binary string is a painful process, check if we can avoid it.\n            if (support.nodebuffer) {\n                return nodeBuffer(result, \"utf-8\");\n            }\n        }\n        return file.asBinary();\n    }\n    return result;\n};\n\n/**\n * Transform this._data into a string.\n * @param {function} filter a function String -> String, applied if not null on the result.\n * @return {String} the string representing this._data.\n */\nvar dataToString = function(asUTF8) {\n    var result = getRawData(this);\n    if (result === null || typeof result === \"undefined\") {\n        return \"\";\n    }\n    // if the data is a base64 string, we decode it before checking the encoding !\n    if (this.options.base64) {\n        result = base64.decode(result);\n    }\n    if (asUTF8 && this.options.binary) {\n        // JSZip.prototype.utf8decode supports arrays as input\n        // skip to array => string step, utf8decode will do it.\n        result = out.utf8decode(result);\n    }\n    else {\n        // no utf8 transformation, do the array => string step.\n        result = utils.transformTo(\"string\", result);\n    }\n\n    if (!asUTF8 && !this.options.binary) {\n        result = utils.transformTo(\"string\", out.utf8encode(result));\n    }\n    return result;\n};\n/**\n * A simple object representing a file in the zip file.\n * @constructor\n * @param {string} name the name of the file\n * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data\n * @param {Object} options the options of the file\n */\nvar ZipObject = function(name, data, options) {\n    this.name = name;\n    this.dir = options.dir;\n    this.date = options.date;\n    this.comment = options.comment;\n\n    this._data = data;\n    this.options = options;\n\n    /*\n     * This object contains initial values for dir and date.\n     * With them, we can check if the user changed the deprecated metadata in\n     * `ZipObject#options` or not.\n     */\n    this._initialMetadata = {\n      dir : options.dir,\n      date : options.date\n    };\n};\n\nZipObject.prototype = {\n    /**\n     * Return the content as UTF8 string.\n     * @return {string} the UTF8 string.\n     */\n    asText: function() {\n        return dataToString.call(this, true);\n    },\n    /**\n     * Returns the binary content.\n     * @return {string} the content as binary.\n     */\n    asBinary: function() {\n        return dataToString.call(this, false);\n    },\n    /**\n     * Returns the content as a nodejs Buffer.\n     * @return {Buffer} the content as a Buffer.\n     */\n    asNodeBuffer: function() {\n        var result = getBinaryData(this);\n        return utils.transformTo(\"nodebuffer\", result);\n    },\n    /**\n     * Returns the content as an Uint8Array.\n     * @return {Uint8Array} the content as an Uint8Array.\n     */\n    asUint8Array: function() {\n        var result = getBinaryData(this);\n        return utils.transformTo(\"uint8array\", result);\n    },\n    /**\n     * Returns the content as an ArrayBuffer.\n     * @return {ArrayBuffer} the content as an ArrayBufer.\n     */\n    asArrayBuffer: function() {\n        return this.asUint8Array().buffer;\n    }\n};\n\n/**\n * Transform an integer into a string in hexadecimal.\n * @private\n * @param {number} dec the number to convert.\n * @param {number} bytes the number of bytes to generate.\n * @returns {string} the result.\n */\nvar decToHex = function(dec, bytes) {\n    var hex = \"\",\n        i;\n    for (i = 0; i < bytes; i++) {\n        hex += String.fromCharCode(dec & 0xff);\n        dec = dec >>> 8;\n    }\n    return hex;\n};\n\n/**\n * Merge the objects passed as parameters into a new one.\n * @private\n * @param {...Object} var_args All objects to merge.\n * @return {Object} a new object with the data of the others.\n */\nvar extend = function() {\n    var result = {}, i, attr;\n    for (i = 0; i < arguments.length; i++) { // arguments is not enumerable in some browsers\n        for (attr in arguments[i]) {\n            if (arguments[i].hasOwnProperty(attr) && typeof result[attr] === \"undefined\") {\n                result[attr] = arguments[i][attr];\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Transforms the (incomplete) options from the user into the complete\n * set of options to create a file.\n * @private\n * @param {Object} o the options from the user.\n * @return {Object} the complete set of options.\n */\nvar prepareFileAttrs = function(o) {\n    o = o || {};\n    if (o.base64 === true && (o.binary === null || o.binary === undefined)) {\n        o.binary = true;\n    }\n    o = extend(o, defaults);\n    o.date = o.date || new Date();\n    if (o.compression !== null) o.compression = o.compression.toUpperCase();\n\n    return o;\n};\n\n/**\n * Add a file in the current folder.\n * @private\n * @param {string} name the name of the file\n * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data of the file\n * @param {Object} o the options of the file\n * @return {Object} the new file.\n */\nvar fileAdd = function(name, data, o) {\n    // be sure sub folders exist\n    var dataType = utils.getTypeOf(data),\n        parent;\n\n    o = prepareFileAttrs(o);\n\n    if (o.createFolders && (parent = parentFolder(name))) {\n        folderAdd.call(this, parent, true);\n    }\n\n    if (o.dir || data === null || typeof data === \"undefined\") {\n        o.base64 = false;\n        o.binary = false;\n        data = null;\n    }\n    else if (dataType === \"string\") {\n        if (o.binary && !o.base64) {\n            // optimizedBinaryString == true means that the file has already been filtered with a 0xFF mask\n            if (o.optimizedBinaryString !== true) {\n                // this is a string, not in a base64 format.\n                // Be sure that this is a correct \"binary string\"\n                data = utils.string2binary(data);\n            }\n        }\n    }\n    else { // arraybuffer, uint8array, ...\n        o.base64 = false;\n        o.binary = true;\n\n        if (!dataType && !(data instanceof CompressedObject)) {\n            throw new Error(\"The data of '\" + name + \"' is in an unsupported format !\");\n        }\n\n        // special case : it's way easier to work with Uint8Array than with ArrayBuffer\n        if (dataType === \"arraybuffer\") {\n            data = utils.transformTo(\"uint8array\", data);\n        }\n    }\n\n    var object = new ZipObject(name, data, o);\n    this.files[name] = object;\n    return object;\n};\n\n/**\n * Find the parent folder of the path.\n * @private\n * @param {string} path the path to use\n * @return {string} the parent folder, or \"\"\n */\nvar parentFolder = function (path) {\n    if (path.slice(-1) == '/') {\n        path = path.substring(0, path.length - 1);\n    }\n    var lastSlash = path.lastIndexOf('/');\n    return (lastSlash > 0) ? path.substring(0, lastSlash) : \"\";\n};\n\n/**\n * Add a (sub) folder in the current folder.\n * @private\n * @param {string} name the folder's name\n * @param {boolean=} [createFolders] If true, automatically create sub \n *  folders. Defaults to false.\n * @return {Object} the new folder.\n */\nvar folderAdd = function(name, createFolders) {\n    // Check the name ends with a /\n    if (name.slice(-1) != \"/\") {\n        name += \"/\"; // IE doesn't like substr(-1)\n    }\n\n    createFolders = (typeof createFolders !== 'undefined') ? createFolders : false;\n\n    // Does this folder already exist?\n    if (!this.files[name]) {\n        fileAdd.call(this, name, null, {\n            dir: true,\n            createFolders: createFolders\n        });\n    }\n    return this.files[name];\n};\n\n/**\n * Generate a JSZip.CompressedObject for a given zipOject.\n * @param {ZipObject} file the object to read.\n * @param {JSZip.compression} compression the compression to use.\n * @return {JSZip.CompressedObject} the compressed result.\n */\nvar generateCompressedObjectFrom = function(file, compression) {\n    var result = new CompressedObject(),\n        content;\n\n    // the data has not been decompressed, we might reuse things !\n    if (file._data instanceof CompressedObject) {\n        result.uncompressedSize = file._data.uncompressedSize;\n        result.crc32 = file._data.crc32;\n\n        if (result.uncompressedSize === 0 || file.dir) {\n            compression = compressions['STORE'];\n            result.compressedContent = \"\";\n            result.crc32 = 0;\n        }\n        else if (file._data.compressionMethod === compression.magic) {\n            result.compressedContent = file._data.getCompressedContent();\n        }\n        else {\n            content = file._data.getContent();\n            // need to decompress / recompress\n            result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content));\n        }\n    }\n    else {\n        // have uncompressed data\n        content = getBinaryData(file);\n        if (!content || content.length === 0 || file.dir) {\n            compression = compressions['STORE'];\n            content = \"\";\n        }\n        result.uncompressedSize = content.length;\n        result.crc32 = crc32(content);\n        result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content));\n    }\n\n    result.compressedSize = result.compressedContent.length;\n    result.compressionMethod = compression.magic;\n\n    return result;\n};\n\n/**\n * Generate the various parts used in the construction of the final zip file.\n * @param {string} name the file name.\n * @param {ZipObject} file the file content.\n * @param {JSZip.CompressedObject} compressedObject the compressed object.\n * @param {number} offset the current offset from the start of the zip file.\n * @return {object} the zip parts.\n */\nvar generateZipParts = function(name, file, compressedObject, offset) {\n    var data = compressedObject.compressedContent,\n        utfEncodedFileName = utils.transformTo(\"string\", utf8.utf8encode(file.name)),\n        comment = file.comment || \"\",\n        utfEncodedComment = utils.transformTo(\"string\", utf8.utf8encode(comment)),\n        useUTF8ForFileName = utfEncodedFileName.length !== file.name.length,\n        useUTF8ForComment = utfEncodedComment.length !== comment.length,\n        o = file.options,\n        dosTime,\n        dosDate,\n        extraFields = \"\",\n        unicodePathExtraField = \"\",\n        unicodeCommentExtraField = \"\",\n        dir, date;\n\n\n    // handle the deprecated options.dir\n    if (file._initialMetadata.dir !== file.dir) {\n        dir = file.dir;\n    } else {\n        dir = o.dir;\n    }\n\n    // handle the deprecated options.date\n    if(file._initialMetadata.date !== file.date) {\n        date = file.date;\n    } else {\n        date = o.date;\n    }\n\n    // date\n    // @see http://www.delorie.com/djgpp/doc/rbinter/it/52/13.html\n    // @see http://www.delorie.com/djgpp/doc/rbinter/it/65/16.html\n    // @see http://www.delorie.com/djgpp/doc/rbinter/it/66/16.html\n\n    dosTime = date.getHours();\n    dosTime = dosTime << 6;\n    dosTime = dosTime | date.getMinutes();\n    dosTime = dosTime << 5;\n    dosTime = dosTime | date.getSeconds() / 2;\n\n    dosDate = date.getFullYear() - 1980;\n    dosDate = dosDate << 4;\n    dosDate = dosDate | (date.getMonth() + 1);\n    dosDate = dosDate << 5;\n    dosDate = dosDate | date.getDate();\n\n    if (useUTF8ForFileName) {\n        // set the unicode path extra field. unzip needs at least one extra\n        // field to correctly handle unicode path, so using the path is as good\n        // as any other information. This could improve the situation with\n        // other archive managers too.\n        // This field is usually used without the utf8 flag, with a non\n        // unicode path in the header (winrar, winzip). This helps (a bit)\n        // with the messy Windows' default compressed folders feature but\n        // breaks on p7zip which doesn't seek the unicode path extra field.\n        // So for now, UTF-8 everywhere !\n        unicodePathExtraField =\n            // Version\n            decToHex(1, 1) +\n            // NameCRC32\n            decToHex(crc32(utfEncodedFileName), 4) +\n            // UnicodeName\n            utfEncodedFileName;\n\n        extraFields +=\n            // Info-ZIP Unicode Path Extra Field\n            \"\\x75\\x70\" +\n            // size\n            decToHex(unicodePathExtraField.length, 2) +\n            // content\n            unicodePathExtraField;\n    }\n\n    if(useUTF8ForComment) {\n\n        unicodeCommentExtraField =\n            // Version\n            decToHex(1, 1) +\n            // CommentCRC32\n            decToHex(this.crc32(utfEncodedComment), 4) +\n            // UnicodeName\n            utfEncodedComment;\n\n        extraFields +=\n            // Info-ZIP Unicode Path Extra Field\n            \"\\x75\\x63\" +\n            // size\n            decToHex(unicodeCommentExtraField.length, 2) +\n            // content\n            unicodeCommentExtraField;\n    }\n\n    var header = \"\";\n\n    // version needed to extract\n    header += \"\\x0A\\x00\";\n    // general purpose bit flag\n    // set bit 11 if utf8\n    header += (useUTF8ForFileName || useUTF8ForComment) ? \"\\x00\\x08\" : \"\\x00\\x00\";\n    // compression method\n    header += compressedObject.compressionMethod;\n    // last mod file time\n    header += decToHex(dosTime, 2);\n    // last mod file date\n    header += decToHex(dosDate, 2);\n    // crc-32\n    header += decToHex(compressedObject.crc32, 4);\n    // compressed size\n    header += decToHex(compressedObject.compressedSize, 4);\n    // uncompressed size\n    header += decToHex(compressedObject.uncompressedSize, 4);\n    // file name length\n    header += decToHex(utfEncodedFileName.length, 2);\n    // extra field length\n    header += decToHex(extraFields.length, 2);\n\n\n    var fileRecord = signature.LOCAL_FILE_HEADER + header + utfEncodedFileName + extraFields;\n\n    var dirRecord = signature.CENTRAL_FILE_HEADER +\n    // version made by (00: DOS)\n    \"\\x14\\x00\" +\n    // file header (common to file and central directory)\n    header +\n    // file comment length\n    decToHex(utfEncodedComment.length, 2) +\n    // disk number start\n    \"\\x00\\x00\" +\n    // internal file attributes TODO\n    \"\\x00\\x00\" +\n    // external file attributes\n    (dir === true ? \"\\x10\\x00\\x00\\x00\" : \"\\x00\\x00\\x00\\x00\") +\n    // relative offset of local header\n    decToHex(offset, 4) +\n    // file name\n    utfEncodedFileName +\n    // extra field\n    extraFields +\n    // file comment\n    utfEncodedComment;\n\n    return {\n        fileRecord: fileRecord,\n        dirRecord: dirRecord,\n        compressedObject: compressedObject\n    };\n};\n\n\n// return the actual prototype of JSZip\nvar out = {\n    /**\n     * Read an existing zip and merge the data in the current JSZip object.\n     * The implementation is in jszip-load.js, don't forget to include it.\n     * @param {String|ArrayBuffer|Uint8Array|Buffer} stream  The stream to load\n     * @param {Object} options Options for loading the stream.\n     *  options.base64 : is the stream in base64 ? default : false\n     * @return {JSZip} the current JSZip object\n     */\n    load: function(stream, options) {\n        throw new Error(\"Load method is not defined. Is the file jszip-load.js included ?\");\n    },\n\n    /**\n     * Filter nested files/folders with the specified function.\n     * @param {Function} search the predicate to use :\n     * function (relativePath, file) {...}\n     * It takes 2 arguments : the relative path and the file.\n     * @return {Array} An array of matching elements.\n     */\n    filter: function(search) {\n        var result = [],\n            filename, relativePath, file, fileClone;\n        for (filename in this.files) {\n            if (!this.files.hasOwnProperty(filename)) {\n                continue;\n            }\n            file = this.files[filename];\n            // return a new object, don't let the user mess with our internal objects :)\n            fileClone = new ZipObject(file.name, file._data, extend(file.options));\n            relativePath = filename.slice(this.root.length, filename.length);\n            if (filename.slice(0, this.root.length) === this.root && // the file is in the current root\n            search(relativePath, fileClone)) { // and the file matches the function\n                result.push(fileClone);\n            }\n        }\n        return result;\n    },\n\n    /**\n     * Add a file to the zip file, or search a file.\n     * @param   {string|RegExp} name The name of the file to add (if data is defined),\n     * the name of the file to find (if no data) or a regex to match files.\n     * @param   {String|ArrayBuffer|Uint8Array|Buffer} data  The file data, either raw or base64 encoded\n     * @param   {Object} o     File options\n     * @return  {JSZip|Object|Array} this JSZip object (when adding a file),\n     * a file (when searching by string) or an array of files (when searching by regex).\n     */\n    file: function(name, data, o) {\n        if (arguments.length === 1) {\n            if (utils.isRegExp(name)) {\n                var regexp = name;\n                return this.filter(function(relativePath, file) {\n                    return !file.dir && regexp.test(relativePath);\n                });\n            }\n            else { // text\n                return this.filter(function(relativePath, file) {\n                    return !file.dir && relativePath === name;\n                })[0] || null;\n            }\n        }\n        else { // more than one argument : we have data !\n            name = this.root + name;\n            fileAdd.call(this, name, data, o);\n        }\n        return this;\n    },\n\n    /**\n     * Add a directory to the zip file, or search.\n     * @param   {String|RegExp} arg The name of the directory to add, or a regex to search folders.\n     * @return  {JSZip} an object with the new directory as the root, or an array containing matching folders.\n     */\n    folder: function(arg) {\n        if (!arg) {\n            return this;\n        }\n\n        if (utils.isRegExp(arg)) {\n            return this.filter(function(relativePath, file) {\n                return file.dir && arg.test(relativePath);\n            });\n        }\n\n        // else, name is a new folder\n        var name = this.root + arg;\n        var newFolder = folderAdd.call(this, name);\n\n        // Allow chaining by returning a new object with this folder as the root\n        var ret = this.clone();\n        ret.root = newFolder.name;\n        return ret;\n    },\n\n    /**\n     * Delete a file, or a directory and all sub-files, from the zip\n     * @param {string} name the name of the file to delete\n     * @return {JSZip} this JSZip object\n     */\n    remove: function(name) {\n        name = this.root + name;\n        var file = this.files[name];\n        if (!file) {\n            // Look for any folders\n            if (name.slice(-1) != \"/\") {\n                name += \"/\";\n            }\n            file = this.files[name];\n        }\n\n        if (file && !file.dir) {\n            // file\n            delete this.files[name];\n        } else {\n            // maybe a folder, delete recursively\n            var kids = this.filter(function(relativePath, file) {\n                return file.name.slice(0, name.length) === name;\n            });\n            for (var i = 0; i < kids.length; i++) {\n                delete this.files[kids[i].name];\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * Generate the complete zip file\n     * @param {Object} options the options to generate the zip file :\n     * - base64, (deprecated, use type instead) true to generate base64.\n     * - compression, \"STORE\" by default.\n     * - type, \"base64\" by default. Values are : string, base64, uint8array, arraybuffer, blob.\n     * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the zip file\n     */\n    generate: function(options) {\n        options = extend(options || {}, {\n            base64: true,\n            compression: \"STORE\",\n            type: \"base64\",\n            comment: null\n        });\n\n        utils.checkSupport(options.type);\n\n        var zipData = [],\n            localDirLength = 0,\n            centralDirLength = 0,\n            writer, i,\n            utfEncodedComment = utils.transformTo(\"string\", this.utf8encode(options.comment || this.comment || \"\"));\n\n        // first, generate all the zip parts.\n        for (var name in this.files) {\n            if (!this.files.hasOwnProperty(name)) {\n                continue;\n            }\n            var file = this.files[name];\n\n            var compressionName = file.options.compression || options.compression.toUpperCase();\n            var compression = compressions[compressionName];\n            if (!compression) {\n                throw new Error(compressionName + \" is not a valid compression method !\");\n            }\n\n            var compressedObject = generateCompressedObjectFrom.call(this, file, compression);\n\n            var zipPart = generateZipParts.call(this, name, file, compressedObject, localDirLength);\n            localDirLength += zipPart.fileRecord.length + compressedObject.compressedSize;\n            centralDirLength += zipPart.dirRecord.length;\n            zipData.push(zipPart);\n        }\n\n        var dirEnd = \"\";\n\n        // end of central dir signature\n        dirEnd = signature.CENTRAL_DIRECTORY_END +\n        // number of this disk\n        \"\\x00\\x00\" +\n        // number of the disk with the start of the central directory\n        \"\\x00\\x00\" +\n        // total number of entries in the central directory on this disk\n        decToHex(zipData.length, 2) +\n        // total number of entries in the central directory\n        decToHex(zipData.length, 2) +\n        // size of the central directory   4 bytes\n        decToHex(centralDirLength, 4) +\n        // offset of start of central directory with respect to the starting disk number\n        decToHex(localDirLength, 4) +\n        // .ZIP file comment length\n        decToHex(utfEncodedComment.length, 2) +\n        // .ZIP file comment\n        utfEncodedComment;\n\n\n        // we have all the parts (and the total length)\n        // time to create a writer !\n        var typeName = options.type.toLowerCase();\n        if(typeName===\"uint8array\"||typeName===\"arraybuffer\"||typeName===\"blob\"||typeName===\"nodebuffer\") {\n            writer = new Uint8ArrayWriter(localDirLength + centralDirLength + dirEnd.length);\n        }else{\n            writer = new StringWriter(localDirLength + centralDirLength + dirEnd.length);\n        }\n\n        for (i = 0; i < zipData.length; i++) {\n            writer.append(zipData[i].fileRecord);\n            writer.append(zipData[i].compressedObject.compressedContent);\n        }\n        for (i = 0; i < zipData.length; i++) {\n            writer.append(zipData[i].dirRecord);\n        }\n\n        writer.append(dirEnd);\n\n        var zip = writer.finalize();\n\n\n\n        switch(options.type.toLowerCase()) {\n            // case \"zip is an Uint8Array\"\n            case \"uint8array\" :\n            case \"arraybuffer\" :\n            case \"nodebuffer\" :\n               return utils.transformTo(options.type.toLowerCase(), zip);\n            case \"blob\" :\n               return utils.arrayBuffer2Blob(utils.transformTo(\"arraybuffer\", zip));\n            // case \"zip is a string\"\n            case \"base64\" :\n               return (options.base64) ? base64.encode(zip) : zip;\n            default : // case \"string\" :\n               return zip;\n         }\n      \n    },\n\n    /**\n     * @deprecated\n     * This method will be removed in a future version without replacement.\n     */\n    crc32: function (input, crc) {\n        return crc32(input, crc);\n    },\n\n    /**\n     * @deprecated\n     * This method will be removed in a future version without replacement.\n     */\n    utf8encode: function (string) {\n        return utils.transformTo(\"string\", utf8.utf8encode(string));\n    },\n\n    /**\n     * @deprecated\n     * This method will be removed in a future version without replacement.\n     */\n    utf8decode: function (input) {\n        return utf8.utf8decode(input);\n    }\n};\nmodule.exports = out;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}