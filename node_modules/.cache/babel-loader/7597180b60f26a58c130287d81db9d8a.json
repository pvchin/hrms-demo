{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { groups_url } from \"../../utils/constants\";\nimport { filterByEmpId } from \"./utils\";\nimport axios from \"axios\";\nimport { queryKeys } from \"../react-query/constants\";\nasync function getGroups(groupId) {\n  const {\n    data\n  } = await axios.get(`${groups_url}?fv=${groupId}`);\n  return data;\n}\nexport function useGroups(empid) {\n  _s();\n  const [filter, setFilter] = useState(\"all\");\n  const [groupId, setGroupId] = useState(\"\");\n  const selectFn = useCallback(unfiltered => filterByEmpId(unfiltered, filter), [filter]);\n  const fallback = [];\n  const {\n    data: groups = fallback\n  } = useQuery([queryKeys.groups, groupId], () => getGroups(groupId), {\n    select: filter !== \"all\" ? selectFn : undefined\n  });\n  return {\n    groups,\n    filter,\n    setFilter,\n    setGroupId\n  };\n}\n_s(useGroups, \"NJJCWNOvNxNLHQMV49gtlGIy8Sc=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"names":["useState","useCallback","useQuery","groups_url","filterByEmpId","axios","queryKeys","getGroups","groupId","data","get","useGroups","empid","filter","setFilter","setGroupId","selectFn","unfiltered","fallback","groups","select","undefined"],"sources":["D:/react-myprojects/hrms-demo/src/components/groups/useGroups.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport { groups_url } from \"../../utils/constants\";\r\nimport { filterByEmpId } from \"./utils\";\r\n\r\nimport axios from \"axios\";\r\nimport { queryKeys } from \"../react-query/constants\";\r\n\r\nasync function getGroups(groupId) {\r\n  const { data } = await axios.get(`${groups_url}?fv=${groupId}`);\r\n  return data;\r\n}\r\n\r\nexport function useGroups(empid) {\r\n  const [filter, setFilter] = useState(\"all\");\r\n  const [groupId, setGroupId] = useState(\"\");\r\n\r\n  const selectFn = useCallback(\r\n    (unfiltered) => filterByEmpId(unfiltered, filter),\r\n    [filter]\r\n  );\r\n\r\n  const fallback = [];\r\n  const { data: groups = fallback } = useQuery(\r\n    [queryKeys.groups, groupId],\r\n    () => getGroups(groupId),\r\n    {\r\n      select: filter !== \"all\" ? selectFn : undefined,\r\n    }\r\n  );\r\n\r\n  return { groups, filter, setFilter, setGroupId };\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,UAAU,QAAQ,uBAAuB;AAClD,SAASC,aAAa,QAAQ,SAAS;AAEvC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,0BAA0B;AAEpD,eAAeC,SAAS,CAACC,OAAO,EAAE;EAChC,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAE,GAAEP,UAAW,OAAMK,OAAQ,EAAC,CAAC;EAC/D,OAAOC,IAAI;AACb;AAEA,OAAO,SAASE,SAAS,CAACC,KAAK,EAAE;EAAA;EAC/B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACQ,OAAO,EAAEO,UAAU,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMgB,QAAQ,GAAGf,WAAW,CACzBgB,UAAU,IAAKb,aAAa,CAACa,UAAU,EAAEJ,MAAM,CAAC,EACjD,CAACA,MAAM,CAAC,CACT;EAED,MAAMK,QAAQ,GAAG,EAAE;EACnB,MAAM;IAAET,IAAI,EAAEU,MAAM,GAAGD;EAAS,CAAC,GAAGhB,QAAQ,CAC1C,CAACI,SAAS,CAACa,MAAM,EAAEX,OAAO,CAAC,EAC3B,MAAMD,SAAS,CAACC,OAAO,CAAC,EACxB;IACEY,MAAM,EAAEP,MAAM,KAAK,KAAK,GAAGG,QAAQ,GAAGK;EACxC,CAAC,CACF;EAED,OAAO;IAAEF,MAAM;IAAEN,MAAM;IAAEC,SAAS;IAAEC;EAAW,CAAC;AAClD;AAAC,GAnBeJ,SAAS;EAAA,QAUaT,QAAQ;AAAA"},"metadata":{},"sourceType":"module"}