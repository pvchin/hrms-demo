{"ast":null,"code":"var v8StyleErrors = require('./lib/v8-style')();\n\nvar reformat = require('./lib/reformat');\n\nfunction ErrorMaker(name, ParentError) {\n  function NewError(message) {\n    if (!(this instanceof NewError)) return new NewError(message); // Use a try/catch block to capture the stack trace. Capturing the stack trace here is\n    // necessary, otherwise we will get the stack trace at the time the new error class was created,\n    // rather than when it is instantiated.  We add `message` and `name` so that the stack trace\n    // string will match our current error class.\n\n    try {\n      throw new Error(message);\n    } catch (err) {\n      err.name = name;\n      this.stack = err.stack;\n    } // if we have v8-styled stack messages, then reformat\n\n\n    if (v8StyleErrors) {\n      if (this.stack) this.stack = reformat(this.stack, name, message);\n    }\n\n    this.message = message || '';\n    this.name = name;\n  }\n\n  NewError.prototype = new (ParentError || Error)();\n  NewError.prototype.constructor = NewError;\n\n  NewError.prototype.inspect = function () {\n    return this.message ? '[' + name + ': ' + this.message + ']' : '[' + name + ']';\n  };\n\n  NewError.prototype.name = name;\n  return NewError;\n}\n\nmodule.exports = ErrorMaker;","map":{"version":3,"sources":["D:/react-myprojects/hrms-demo/node_modules/custom-error/index.js"],"names":["v8StyleErrors","require","reformat","ErrorMaker","name","ParentError","NewError","message","Error","err","stack","prototype","constructor","inspect","module","exports"],"mappings":"AAAA,IAAIA,aAAa,GAAGC,OAAO,CAAC,gBAAD,CAAP,EAApB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,gBAAD,CAAtB;;AAEA,SAASE,UAAT,CAAoBC,IAApB,EAA0BC,WAA1B,EAAuC;AACrC,WAASC,QAAT,CAAkBC,OAAlB,EAA2B;AACzB,QAAI,EAAE,gBAAgBD,QAAlB,CAAJ,EACE,OAAO,IAAIA,QAAJ,CAAaC,OAAb,CAAP,CAFuB,CAIzB;AACA;AACA;AACA;;AACA,QAAI;AACF,YAAM,IAAIC,KAAJ,CAAUD,OAAV,CAAN;AACD,KAFD,CAGA,OAAOE,GAAP,EAAY;AACVA,MAAAA,GAAG,CAACL,IAAJ,GAAWA,IAAX;AACA,WAAKM,KAAL,GAAaD,GAAG,CAACC,KAAjB;AACD,KAdwB,CAgBzB;;;AACA,QAAIV,aAAJ,EAAmB;AACjB,UAAI,KAAKU,KAAT,EAAgB,KAAKA,KAAL,GAAaR,QAAQ,CAAC,KAAKQ,KAAN,EAAaN,IAAb,EAAmBG,OAAnB,CAArB;AACjB;;AAED,SAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACA,SAAKH,IAAL,GAAYA,IAAZ;AACD;;AAEDE,EAAAA,QAAQ,CAACK,SAAT,GAAqB,KAAKN,WAAW,IAAIG,KAApB,GAArB;AACAF,EAAAA,QAAQ,CAACK,SAAT,CAAmBC,WAAnB,GAAiCN,QAAjC;;AACAA,EAAAA,QAAQ,CAACK,SAAT,CAAmBE,OAAnB,GAA6B,YAAW;AACtC,WAAO,KAAKN,OAAL,GACH,MAAMH,IAAN,GAAa,IAAb,GAAoB,KAAKG,OAAzB,GAAmC,GADhC,GAEH,MAAMH,IAAN,GAAa,GAFjB;AAGD,GAJD;;AAKAE,EAAAA,QAAQ,CAACK,SAAT,CAAmBP,IAAnB,GAA0BA,IAA1B;AAEA,SAAOE,QAAP;AACD;;AAEDQ,MAAM,CAACC,OAAP,GAAiBZ,UAAjB","sourcesContent":["var v8StyleErrors = require('./lib/v8-style')()\nvar reformat = require('./lib/reformat')\n\nfunction ErrorMaker(name, ParentError) {\n  function NewError(message) {\n    if (!(this instanceof NewError))\n      return new NewError(message)\n\n    // Use a try/catch block to capture the stack trace. Capturing the stack trace here is\n    // necessary, otherwise we will get the stack trace at the time the new error class was created,\n    // rather than when it is instantiated.  We add `message` and `name` so that the stack trace\n    // string will match our current error class.\n    try {\n      throw new Error(message)\n    }\n    catch (err) {\n      err.name = name\n      this.stack = err.stack\n    }\n\n    // if we have v8-styled stack messages, then reformat\n    if (v8StyleErrors) {\n      if (this.stack) this.stack = reformat(this.stack, name, message)\n    }\n\n    this.message = message || ''\n    this.name = name\n  }\n\n  NewError.prototype = new (ParentError || Error)()\n  NewError.prototype.constructor = NewError\n  NewError.prototype.inspect = function() {\n    return this.message\n      ? '[' + name + ': ' + this.message + ']'\n      : '[' + name + ']'\n  }\n  NewError.prototype.name = name\n\n  return NewError\n}\n\nmodule.exports = ErrorMaker\n"]},"metadata":{},"sourceType":"script"}