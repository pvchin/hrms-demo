{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\hrms-demo\\\\src\\\\context\\\\leaves_context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useReducer } from \"react\";\nimport axios from \"axios\";\nimport reducer from \"../reducers/leaves_reducer\";\nimport { leaves_url } from \"../utils/constants\";\nimport { SET_EDITLEAVEID, SET_ISLEAVEEDITING_ON, SET_ISLEAVEEDITING_OFF //SET_SINGLELEAVE,\n, GET_LEAVES_BEGIN, GET_LEAVES_SUCCESS, GET_LEAVES_ERROR, GET_SINGLE_LEAVE_BEGIN, GET_SINGLE_LEAVE_SUCCESS, GET_SINGLE_LEAVE_ERROR, GET_SINGLEBATCH_LEAVE_BEGIN, GET_SINGLEBATCH_LEAVE_SUCCESS, GET_SINGLEBATCH_LEAVE_ERROR, ADD_LEAVE_BEGIN, ADD_LEAVE_SUCCESS, ADD_LEAVE_ERROR, DELETE_LEAVE_BEGIN, DELETE_LEAVE_SUCCESS, DELETE_LEAVE_ERROR, UPDATE_LEAVE_BEGIN, UPDATE_LEAVE_SUCCESS, UPDATE_LEAVE_ERROR, RESET_SINGLE_LEAVE //RESET_TABLES,\n} from \"../actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  isLeaveEditing: false,\n  alertleave: {\n    show: false,\n    msg: \"\",\n    type: \"\"\n  },\n  editLeaveID: null,\n  leaves_loading: false,\n  leaves_error: false,\n  leaves: [],\n  single_leave_loading: false,\n  single_leave_error: false,\n  single_leave: {},\n  singlebatch_leave_loading: false,\n  singlebatch_leave_error: false,\n  singlebatch_leave: {},\n  delete_leave_loading: false,\n  delete_leave_error: false,\n  update_leave_loading: false,\n  update_leave_error: false,\n  add_leave_loading: false,\n  add_leave_error: false // filterValue: \"Female\",\n  // filterfield: \"gender\",\n\n};\nconst LeavesContext = /*#__PURE__*/React.createContext();\nexport const LeavesProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const loadLeaves = async () => {\n    dispatch({\n      type: GET_LEAVES_BEGIN\n    });\n\n    try {\n      // const res = await fetch(\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\n      // );\n      const res = await fetch(leaves_url); //const { data } = await axios.get(employees_url);\n      //const employees = data;\n\n      const leaves = await res.json();\n      dispatch({\n        type: GET_LEAVES_SUCCESS,\n        payload: leaves\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_LEAVES_ERROR\n      });\n    }\n  };\n\n  const loadPendingLeaves = async fi => {\n    dispatch({\n      type: GET_LEAVES_BEGIN\n    });\n\n    try {\n      //const res = await fetch(leaves_url);\n      //const { data } = await axios.get(employees_url);\n      //const employees = data;\n      const {\n        data\n      } = await axios.get(`${leaves_url}?fi=${fi}`);\n      const leaves = data;\n      dispatch({\n        type: GET_LEAVES_SUCCESS,\n        payload: leaves\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_LEAVES_ERROR\n      });\n    }\n  };\n\n  const loadEmpLeaves = async fv => {\n    dispatch({\n      type: GET_LEAVES_BEGIN\n    });\n\n    try {\n      const {\n        data\n      } = await axios.get(`${leaves_url}?fv=${fv}`);\n      const leaves = data;\n      dispatch({\n        type: GET_LEAVES_SUCCESS,\n        payload: leaves\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_LEAVES_ERROR\n      });\n    }\n  };\n\n  const setIsLeaveEditingOn = () => {\n    dispatch({\n      type: SET_ISLEAVEEDITING_ON\n    });\n  };\n\n  const setIsLeaveEditingOff = () => {\n    dispatch({\n      type: SET_ISLEAVEEDITING_OFF\n    });\n  };\n\n  const resetSingleLeave = () => {\n    dispatch({\n      type: RESET_SINGLE_LEAVE\n    });\n  };\n\n  const setEditLeaveID = async id => {\n    try {\n      dispatch({\n        type: SET_EDITLEAVEID,\n        payload: id\n      });\n    } catch (error) {\n      dispatch(error);\n    }\n  };\n\n  const getSingleLeave = async id => {\n    dispatch({\n      type: GET_SINGLE_LEAVE_BEGIN\n    });\n\n    try {\n      const {\n        data\n      } = await axios.get(`${leaves_url}?id=${id}`);\n      const singleleave = data;\n      dispatch({\n        type: GET_SINGLE_LEAVE_SUCCESS,\n        payload: singleleave\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_SINGLE_LEAVE_ERROR\n      });\n    }\n  };\n\n  const getSingleBatchLeave = async empid => {\n    dispatch({\n      type: GET_SINGLEBATCH_LEAVE_BEGIN\n    });\n\n    try {\n      const {\n        data\n      } = await axios.get(`${leaves_url}?fv=${empid}`);\n      const singlebatchleave = data; // const res = await fetch(`${leaves_url}?fv=${empid}`);\n      //console.log(`${family_url}?fv=${linkid}`);\n      // const singlebatchleave = await res.json();\n\n      dispatch({\n        type: GET_SINGLEBATCH_LEAVE_SUCCESS,\n        payload: singlebatchleave\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_SINGLEBATCH_LEAVE_ERROR\n      });\n    }\n  };\n\n  const addLeave = async data => {\n    //const { id, name, from_date, to_date, reason, no_of_days, status } = data;\n    dispatch({\n      type: ADD_LEAVE_BEGIN\n    });\n\n    try {\n      await fetch(leaves_url, {\n        method: \"POST\",\n        body: JSON.stringify({ ...data\n        })\n      });\n      dispatch({\n        type: ADD_LEAVE_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: ADD_LEAVE_ERROR\n      });\n    }\n  };\n\n  const updateLeave = async data => {\n    const {\n      id,\n      ...fields\n    } = data;\n    dispatch({\n      type: UPDATE_LEAVE_BEGIN\n    });\n\n    try {\n      await fetch(leaves_url, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          id,\n          ...fields\n        })\n      });\n      dispatch({\n        type: UPDATE_LEAVE_SUCCESS\n      });\n    } catch (error) {\n      dispatch({\n        type: UPDATE_LEAVE_ERROR\n      });\n    }\n  };\n\n  const deleteLeave = async id => {\n    dispatch({\n      type: DELETE_LEAVE_BEGIN\n    });\n\n    try {\n      await fetch(leaves_url, {\n        method: \"DELETE\",\n        body: JSON.stringify({\n          id: id\n        })\n      });\n      dispatch({\n        type: DELETE_LEAVE_SUCCESS\n      }); //loadEmployees();\n    } catch (err) {\n      dispatch({\n        type: DELETE_LEAVE_ERROR\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(LeavesContext.Provider, {\n    value: { ...state,\n      loadLeaves,\n      loadPendingLeaves,\n      loadEmpLeaves,\n      addLeave,\n      updateLeave,\n      deleteLeave,\n      getSingleLeave,\n      getSingleBatchLeave,\n      setEditLeaveID,\n      setIsLeaveEditingOn,\n      setIsLeaveEditingOff,\n      resetSingleLeave\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LeavesProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = LeavesProvider;\nexport const useLeavesContext = () => {\n  _s2();\n\n  return useContext(LeavesContext);\n};\n\n_s2(useLeavesContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"LeavesProvider\");","map":{"version":3,"sources":["D:/react-myprojects/hrms-demo/src/context/leaves_context.js"],"names":["React","useContext","useReducer","axios","reducer","leaves_url","SET_EDITLEAVEID","SET_ISLEAVEEDITING_ON","SET_ISLEAVEEDITING_OFF","GET_LEAVES_BEGIN","GET_LEAVES_SUCCESS","GET_LEAVES_ERROR","GET_SINGLE_LEAVE_BEGIN","GET_SINGLE_LEAVE_SUCCESS","GET_SINGLE_LEAVE_ERROR","GET_SINGLEBATCH_LEAVE_BEGIN","GET_SINGLEBATCH_LEAVE_SUCCESS","GET_SINGLEBATCH_LEAVE_ERROR","ADD_LEAVE_BEGIN","ADD_LEAVE_SUCCESS","ADD_LEAVE_ERROR","DELETE_LEAVE_BEGIN","DELETE_LEAVE_SUCCESS","DELETE_LEAVE_ERROR","UPDATE_LEAVE_BEGIN","UPDATE_LEAVE_SUCCESS","UPDATE_LEAVE_ERROR","RESET_SINGLE_LEAVE","initialState","isLeaveEditing","alertleave","show","msg","type","editLeaveID","leaves_loading","leaves_error","leaves","single_leave_loading","single_leave_error","single_leave","singlebatch_leave_loading","singlebatch_leave_error","singlebatch_leave","delete_leave_loading","delete_leave_error","update_leave_loading","update_leave_error","add_leave_loading","add_leave_error","LeavesContext","createContext","LeavesProvider","children","state","dispatch","loadLeaves","res","fetch","json","payload","error","loadPendingLeaves","fi","data","get","loadEmpLeaves","fv","setIsLeaveEditingOn","setIsLeaveEditingOff","resetSingleLeave","setEditLeaveID","id","getSingleLeave","singleleave","getSingleBatchLeave","empid","singlebatchleave","addLeave","method","body","JSON","stringify","err","updateLeave","fields","deleteLeave","useLeavesContext"],"mappings":"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","sourcesContent":["import React, { useContext,  useReducer } from \"react\";\r\nimport axios from \"axios\";\r\nimport reducer from \"../reducers/leaves_reducer\";\r\nimport { leaves_url } from \"../utils/constants\";\r\n\r\nimport {\r\n  SET_EDITLEAVEID,\r\n  SET_ISLEAVEEDITING_ON,\r\n  SET_ISLEAVEEDITING_OFF,\r\n  //SET_SINGLELEAVE,\r\n  GET_LEAVES_BEGIN,\r\n  GET_LEAVES_SUCCESS,\r\n  GET_LEAVES_ERROR,\r\n  GET_SINGLE_LEAVE_BEGIN,\r\n  GET_SINGLE_LEAVE_SUCCESS,\r\n  GET_SINGLE_LEAVE_ERROR,\r\n  GET_SINGLEBATCH_LEAVE_BEGIN,\r\n  GET_SINGLEBATCH_LEAVE_SUCCESS,\r\n  GET_SINGLEBATCH_LEAVE_ERROR,\r\n  ADD_LEAVE_BEGIN,\r\n  ADD_LEAVE_SUCCESS,\r\n  ADD_LEAVE_ERROR,\r\n  DELETE_LEAVE_BEGIN,\r\n  DELETE_LEAVE_SUCCESS,\r\n  DELETE_LEAVE_ERROR,\r\n  UPDATE_LEAVE_BEGIN,\r\n  UPDATE_LEAVE_SUCCESS,\r\n  UPDATE_LEAVE_ERROR,\r\n  RESET_SINGLE_LEAVE,\r\n  //RESET_TABLES,\r\n} from \"../actions\";\r\n\r\nconst initialState = {\r\n  isLeaveEditing: false,\r\n  alertleave: { show: false, msg: \"\", type: \"\" },\r\n  editLeaveID: null,\r\n  leaves_loading: false,\r\n  leaves_error: false,\r\n  leaves: [],\r\n  single_leave_loading: false,\r\n  single_leave_error: false,\r\n  single_leave: {},\r\n  singlebatch_leave_loading: false,\r\n  singlebatch_leave_error: false,\r\n  singlebatch_leave: {},\r\n  delete_leave_loading: false,\r\n  delete_leave_error: false,\r\n  update_leave_loading: false,\r\n  update_leave_error: false,\r\n  add_leave_loading: false,\r\n  add_leave_error: false,\r\n  // filterValue: \"Female\",\r\n  // filterfield: \"gender\",\r\n};\r\n\r\nconst LeavesContext = React.createContext();\r\n\r\nexport const LeavesProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  const loadLeaves = async () => {\r\n    dispatch({ type: GET_LEAVES_BEGIN });\r\n    try {\r\n      // const res = await fetch(\r\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\r\n      // );\r\n      const res = await fetch(leaves_url);\r\n      //const { data } = await axios.get(employees_url);\r\n      //const employees = data;\r\n      const leaves = await res.json();\r\n      dispatch({ type: GET_LEAVES_SUCCESS, payload: leaves });\r\n    } catch (error) {\r\n      dispatch({ type: GET_LEAVES_ERROR });\r\n    }\r\n  };\r\n\r\n  const loadPendingLeaves = async (fi) => {\r\n    dispatch({ type: GET_LEAVES_BEGIN });\r\n    try {\r\n      //const res = await fetch(leaves_url);\r\n      //const { data } = await axios.get(employees_url);\r\n      //const employees = data;\r\n      const { data } = await axios.get(`${leaves_url}?fi=${fi}`);\r\n      const leaves = data;\r\n\r\n      dispatch({ type: GET_LEAVES_SUCCESS, payload: leaves });\r\n    } catch (error) {\r\n      dispatch({ type: GET_LEAVES_ERROR });\r\n    }\r\n  };\r\n\r\n  const loadEmpLeaves = async (fv) => {\r\n    dispatch({ type: GET_LEAVES_BEGIN });\r\n    try {\r\n      const { data } = await axios.get(`${leaves_url}?fv=${fv}`);\r\n      const leaves = data;\r\n\r\n      dispatch({ type: GET_LEAVES_SUCCESS, payload: leaves });\r\n    } catch (error) {\r\n      dispatch({ type: GET_LEAVES_ERROR });\r\n    }\r\n  };\r\n\r\n  const setIsLeaveEditingOn = () => {\r\n    dispatch({ type: SET_ISLEAVEEDITING_ON });\r\n  };\r\n\r\n  const setIsLeaveEditingOff = () => {\r\n    dispatch({ type: SET_ISLEAVEEDITING_OFF });\r\n  };\r\n\r\n  const resetSingleLeave = () => {\r\n    dispatch({ type: RESET_SINGLE_LEAVE });\r\n  };\r\n\r\n  const setEditLeaveID = async (id) => {\r\n    try {\r\n      dispatch({ type: SET_EDITLEAVEID, payload: id });\r\n    } catch (error) {\r\n      dispatch(error);\r\n    }\r\n  };\r\n\r\n  const getSingleLeave = async (id) => {\r\n    dispatch({ type: GET_SINGLE_LEAVE_BEGIN });\r\n    try {\r\n      const { data } = await axios.get(`${leaves_url}?id=${id}`);\r\n      const singleleave = data;\r\n      dispatch({ type: GET_SINGLE_LEAVE_SUCCESS, payload: singleleave });\r\n    } catch (error) {\r\n      dispatch({ type: GET_SINGLE_LEAVE_ERROR });\r\n    }\r\n  };\r\n\r\n  const getSingleBatchLeave = async (empid) => {\r\n    dispatch({ type: GET_SINGLEBATCH_LEAVE_BEGIN });\r\n    try {\r\n      const { data } = await axios.get(`${leaves_url}?fv=${empid}`);\r\n      const singlebatchleave = data;\r\n\r\n      // const res = await fetch(`${leaves_url}?fv=${empid}`);\r\n      //console.log(`${family_url}?fv=${linkid}`);\r\n      // const singlebatchleave = await res.json();\r\n\r\n      dispatch({\r\n        type: GET_SINGLEBATCH_LEAVE_SUCCESS,\r\n        payload: singlebatchleave,\r\n      });\r\n    } catch (error) {\r\n      dispatch({ type: GET_SINGLEBATCH_LEAVE_ERROR });\r\n    }\r\n  };\r\n\r\n  const addLeave = async (data) => {\r\n    //const { id, name, from_date, to_date, reason, no_of_days, status } = data;\r\n    \r\n    dispatch({ type: ADD_LEAVE_BEGIN });\r\n    try {\r\n      await fetch(leaves_url, {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ ...data }),\r\n      });\r\n      dispatch({ type: ADD_LEAVE_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({ type: ADD_LEAVE_ERROR });\r\n    }\r\n  };\r\n\r\n  const updateLeave = async (data) => {\r\n    const { id, ...fields } = data;\r\n\r\n    dispatch({ type: UPDATE_LEAVE_BEGIN });\r\n    try {\r\n      await fetch(leaves_url, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify({ id, ...fields }),\r\n      });\r\n      dispatch({ type: UPDATE_LEAVE_SUCCESS });\r\n    } catch (error) {\r\n      dispatch({ type: UPDATE_LEAVE_ERROR });\r\n    }\r\n  };\r\n\r\n  const deleteLeave = async (id) => {\r\n    dispatch({ type: DELETE_LEAVE_BEGIN });\r\n    try {\r\n      await fetch(leaves_url, {\r\n        method: \"DELETE\",\r\n        body: JSON.stringify({ id: id }),\r\n      });\r\n      dispatch({ type: DELETE_LEAVE_SUCCESS });\r\n      //loadEmployees();\r\n    } catch (err) {\r\n      dispatch({ type: DELETE_LEAVE_ERROR });\r\n    }\r\n  };\r\n  return (\r\n    <LeavesContext.Provider\r\n      value={{\r\n        ...state,\r\n        loadLeaves,\r\n        loadPendingLeaves,\r\n        loadEmpLeaves,\r\n        addLeave,\r\n        updateLeave,\r\n        deleteLeave,\r\n        getSingleLeave,\r\n        getSingleBatchLeave,\r\n        setEditLeaveID,\r\n        setIsLeaveEditingOn,\r\n        setIsLeaveEditingOff,\r\n        resetSingleLeave,\r\n      }}\r\n    >\r\n      {children}\r\n    </LeavesContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useLeavesContext = () => {\r\n  return useContext(LeavesContext);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}