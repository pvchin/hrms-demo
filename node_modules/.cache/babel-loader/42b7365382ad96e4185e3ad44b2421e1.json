{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\hrms-demo\\\\src\\\\components\\\\PayslipTableViewSummary.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport MaterialTable from \"material-table\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Box, useDisclosure } from \"@chakra-ui/react\";\nimport { GrTask } from \"react-icons/gr\";\nimport { useRecoilState } from \"recoil\"; //import { useHistory } from \"react-router-dom\";\n//import { useSetRecoilState } from \"recoil\";\n\nimport //payPeriodState,\n//payPeriodEndMonthState,\n//payPeriodEmpIdState,\n\"./data/atomdata\"; //import { usePayslipsContext } from \"../context/payslips_context\";\n\nimport { CustomDialog } from \"../helpers/CustomDialog\";\nimport { usePayrunStatus } from \"./payrun/usePayrunStatus\";\nimport { loginLevelState } from \"./data/atomdata\";\nimport { useUpdatePayrun } from \"./payrun/useUpdatePayrun\";\nimport ApprovalManagerScreen from \"./ApprovalManagerScreen\"; //const FILTERSTRING = \"Pending\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PayslipTableVIew({\n  status\n}) {\n  _s();\n\n  //let history = useHistory();\n  const classes = useStyles();\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState); //const setPayPeriodEmpId = useSetRecoilState(payPeriodEmpIdState);\n  //const { payrun, getPayrun,payrun_loading, loadPendingPayslips } =\n  //  usePayslipsContext();\n  //const { loadEmployees, employees } = useEmployeesContext();\n\n  const updatePayrun = useUpdatePayrun();\n  const {\n    payrunstatus,\n    setPayrunStatusId\n  } = usePayrunStatus();\n  const [payrunID, setPayrunID] = useState(\"\");\n  const [formdata, setFormdata] = useState({});\n  const {\n    isOpen: isAppScreenOpen,\n    onOpen: onAppScreenOpen,\n    onClose: onAppScreenClose\n  } = useDisclosure();\n  const columns = useMemo(() => [// { title: \"Period\", field: \"period\" },\n  {\n    title: \"Payrun Batch\",\n    field: \"payrun\",\n    type: \"date\",\n    dateSetting: {\n      locale: \"en-GB\"\n    }\n  }, // {\n  //   title: \"Pay Date\",\n  //   field: \"pay_date\",\n  //   type: \"date\",\n  //   dateSetting: { locale: \"en-GB\" },\n  // },\n  {\n    title: \"Total Wages\",\n    field: \"totalwages\",\n    type: \"currency\"\n  }, {\n    title: \"TAP Amount\",\n    field: \"totaltap\",\n    type: \"currency\"\n  }, {\n    title: \"SCP Amount\",\n    field: \"totalscp\",\n    type: \"currency\"\n  }, {\n    title: \"Site Allowances\",\n    field: \"totalsitesallows\",\n    type: \"currency\"\n  }, {\n    title: \"Expenses Claims\",\n    field: \"totalexpensesclaims\",\n    type: \"currency\"\n  }, {\n    title: \"Total Allowances\",\n    field: \"totalallows\",\n    type: \"currency\"\n  }, {\n    title: \"Total Deductions\",\n    field: \"totaldeducts\",\n    type: \"currency\"\n  }, {\n    title: \"Total Payroll\",\n    field: \"totalpayroll\",\n    type: \"currency\"\n  }, {\n    title: \"Status\",\n    field: \"status\"\n  }], []);\n\n  const Update_Payrun = data => {\n    const {\n      id,\n      rec_id,\n      tableData,\n      ...fields\n    } = data;\n    const editData = { ...fields\n    };\n    setFormdata({ ...editData\n    });\n    setFormdata({ ...editData\n    });\n    setPayrunID(id);\n    handleAppScreenOpen();\n  };\n\n  const handleAppScreenOpen = () => {\n    onAppScreenOpen();\n  };\n\n  const handleAppScreenClose = () => {\n    onAppScreenClose();\n  };\n\n  const handleOnUpdateConfirm = data => {\n    console.log(\"update\", data);\n    const posted = data.status === \"Delete\" ? \"D\" : \"\";\n    const upddata = { ...data\n    };\n    updatePayrun({\n      id: payrunID,\n      ...upddata\n    });\n  };\n\n  useEffect(() => {\n    setPayrunStatusId(status);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      maxW: \"100%\",\n      pt: \"5px\",\n      overflow: \"Scroll\",\n      children: /*#__PURE__*/_jsxDEV(MaterialTable, {\n        columns: columns,\n        data: payrunstatus,\n        title: \"Payslips\",\n        actions: [rowData => ({\n          icon: () => /*#__PURE__*/_jsxDEV(GrTask, {\n            size: \"23px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 27\n          }, this),\n          hidden: loginLevel.loginLevel !== \"Manager\",\n          tooltip: \"Edit\",\n          onClick: (event, rowData) => {\n            Update_Payrun(rowData);\n          }\n        })],\n        options: {\n          filtering: false,\n          search: false,\n          toolbar: false,\n          paging: false,\n          headerStyle: {\n            backgroundColor: \"rgba(75, 192, 192, 1)\",\n            color: \"#FFF\"\n          },\n          showTitle: false\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CustomDialog, {\n      isOpen: isAppScreenOpen,\n      handleClose: handleAppScreenClose,\n      title: \"\",\n      showButton: true,\n      isFullscree: false,\n      children: /*#__PURE__*/_jsxDEV(ApprovalManagerScreen, {\n        formdata: formdata,\n        setFormdata: setFormdata,\n        handleDialogClose: handleAppScreenClose,\n        onConfirm: handleOnUpdateConfirm,\n        tabIndex: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PayslipTableVIew, \"J17SeRbzmAeAXCobXfcwCLbNsR8=\", false, function () {\n  return [useStyles, useRecoilState, useUpdatePayrun, usePayrunStatus, useDisclosure];\n});\n\n_c = PayslipTableVIew;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: 0\n  }\n}));\n\nvar _c;\n\n$RefreshReg$(_c, \"PayslipTableVIew\");","map":{"version":3,"sources":["D:/react-myprojects/hrms-demo/src/components/PayslipTableViewSummary.js"],"names":["React","useEffect","useMemo","useState","MaterialTable","makeStyles","Box","useDisclosure","GrTask","useRecoilState","CustomDialog","usePayrunStatus","loginLevelState","useUpdatePayrun","ApprovalManagerScreen","PayslipTableVIew","status","classes","useStyles","loginLevel","setLoginLevel","updatePayrun","payrunstatus","setPayrunStatusId","payrunID","setPayrunID","formdata","setFormdata","isOpen","isAppScreenOpen","onOpen","onAppScreenOpen","onClose","onAppScreenClose","columns","title","field","type","dateSetting","locale","Update_Payrun","data","id","rec_id","tableData","fields","editData","handleAppScreenOpen","handleAppScreenClose","handleOnUpdateConfirm","console","log","posted","upddata","root","rowData","icon","hidden","tooltip","onClick","event","filtering","search","toolbar","paging","headerStyle","backgroundColor","color","showTitle","theme","padding"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Box, useDisclosure } from \"@chakra-ui/react\";\r\nimport { GrTask } from \"react-icons/gr\";\r\nimport { useRecoilState } from \"recoil\";\r\n//import { useHistory } from \"react-router-dom\";\r\n//import { useSetRecoilState } from \"recoil\";\r\nimport //payPeriodState,\r\n//payPeriodEndMonthState,\r\n//payPeriodEmpIdState,\r\n\"./data/atomdata\";\r\n//import { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { usePayrunStatus } from \"./payrun/usePayrunStatus\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useUpdatePayrun } from \"./payrun/useUpdatePayrun\";\r\nimport ApprovalManagerScreen from \"./ApprovalManagerScreen\";\r\n\r\n//const FILTERSTRING = \"Pending\";\r\n\r\nexport default function PayslipTableVIew({ status }) {\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n   const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  //const setPayPeriodEmpId = useSetRecoilState(payPeriodEmpIdState);\r\n  //const { payrun, getPayrun,payrun_loading, loadPendingPayslips } =\r\n  //  usePayslipsContext();\r\n  //const { loadEmployees, employees } = useEmployeesContext();\r\n  const updatePayrun = useUpdatePayrun()\r\n  const { payrunstatus, setPayrunStatusId } = usePayrunStatus();\r\n  const [payrunID, setPayrunID] = useState(\"\")\r\n  const [formdata, setFormdata] = useState({});\r\n  const {\r\n    isOpen: isAppScreenOpen,\r\n    onOpen: onAppScreenOpen,\r\n    onClose: onAppScreenClose,\r\n  } = useDisclosure();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      // { title: \"Period\", field: \"period\" },\r\n      {\r\n        title: \"Payrun Batch\",\r\n        field: \"payrun\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n      },\r\n      // {\r\n      //   title: \"Pay Date\",\r\n      //   field: \"pay_date\",\r\n      //   type: \"date\",\r\n      //   dateSetting: { locale: \"en-GB\" },\r\n      // },\r\n      { title: \"Total Wages\", field: \"totalwages\", type: \"currency\" },\r\n      { title: \"TAP Amount\", field: \"totaltap\", type: \"currency\" },\r\n      { title: \"SCP Amount\", field: \"totalscp\", type: \"currency\" },\r\n      { title: \"Site Allowances\", field: \"totalsitesallows\", type: \"currency\" },\r\n      {\r\n        title: \"Expenses Claims\",\r\n        field: \"totalexpensesclaims\",\r\n        type: \"currency\",\r\n      },\r\n      { title: \"Total Allowances\", field: \"totalallows\", type: \"currency\" },\r\n      { title: \"Total Deductions\", field: \"totaldeducts\", type: \"currency\" },\r\n      { title: \"Total Payroll\", field: \"totalpayroll\", type: \"currency\" },\r\n      { title: \"Status\", field: \"status\" },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const Update_Payrun = (data) => {\r\n     const { id, rec_id, tableData, ...fields } = data;\r\n     const editData = { ...fields };\r\n\r\n     setFormdata({ ...editData });\r\n     setFormdata({ ...editData });\r\n     setPayrunID(id);\r\n     handleAppScreenOpen();\r\n  }\r\n\r\n  const handleAppScreenOpen = () => {\r\n    onAppScreenOpen();\r\n  };\r\n  const handleAppScreenClose = () => {\r\n    onAppScreenClose();\r\n  };\r\n\r\n   const handleOnUpdateConfirm = (data) => {\r\n     console.log(\"update\", data);\r\n     const posted = data.status === \"Delete\" ? \"D\" : \"\";\r\n     const upddata = { ...data };\r\n     updatePayrun({ id: payrunID, ...upddata });\r\n  };\r\n  \r\n  useEffect(() => {\r\n    setPayrunStatusId(status);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Box maxW=\"100%\" pt=\"5px\" overflow=\"Scroll\">\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={payrunstatus}\r\n          title=\"Payslips\"\r\n          actions={[\r\n            (rowData) => ({\r\n              icon: () => <GrTask size=\"23px\" />,\r\n              hidden: loginLevel.loginLevel !== \"Manager\",\r\n              tooltip: \"Edit\",\r\n              onClick: (event, rowData) => {\r\n                Update_Payrun(rowData);\r\n              },\r\n            }),\r\n          ]}\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            paging: false,\r\n            headerStyle: {\r\n              backgroundColor: \"rgba(75, 192, 192, 1)\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </Box>\r\n      <CustomDialog\r\n        isOpen={isAppScreenOpen}\r\n        handleClose={handleAppScreenClose}\r\n        title=\"\"\r\n        showButton={true}\r\n        isFullscree={false}\r\n      >\r\n        <ApprovalManagerScreen\r\n          formdata={formdata}\r\n          setFormdata={setFormdata}\r\n          handleDialogClose={handleAppScreenClose}\r\n          onConfirm={handleOnUpdateConfirm}\r\n          tabIndex={3}\r\n        />\r\n      </CustomDialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n"]},"metadata":{},"sourceType":"module"}