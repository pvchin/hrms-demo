[{"D:\\react-myprojects\\hrms-demo\\src\\index.js":"1","D:\\react-myprojects\\hrms-demo\\src\\reportWebVitals.js":"2","D:\\react-myprojects\\hrms-demo\\src\\App.js":"3","D:\\react-myprojects\\hrms-demo\\src\\context\\employees_context.js":"4","D:\\react-myprojects\\hrms-demo\\src\\context\\dailyallowances_context.js":"5","D:\\react-myprojects\\hrms-demo\\src\\context\\leaves_context.js":"6","D:\\react-myprojects\\hrms-demo\\src\\context\\expenses_context.js":"7","D:\\react-myprojects\\hrms-demo\\src\\context\\tables_context.js":"8","D:\\react-myprojects\\hrms-demo\\src\\context\\payslips_context.js":"9","D:\\react-myprojects\\hrms-demo\\src\\context\\trainings_context.js":"10","D:\\react-myprojects\\hrms-demo\\src\\context\\auth_context.js":"11","D:\\react-myprojects\\hrms-demo\\src\\actions.js":"12","D:\\react-myprojects\\hrms-demo\\src\\components\\Main.js":"13","D:\\react-myprojects\\hrms-demo\\src\\components\\MainMenu.js":"14","D:\\react-myprojects\\hrms-demo\\src\\utils\\firebase.js":"15","D:\\react-myprojects\\hrms-demo\\src\\utils\\constants.js":"16","D:\\react-myprojects\\hrms-demo\\src\\reducers\\employees_reducer.js":"17","D:\\react-myprojects\\hrms-demo\\src\\reducers\\dailyallowances_reducer.js":"18","D:\\react-myprojects\\hrms-demo\\src\\reducers\\expenses_reducer.js":"19","D:\\react-myprojects\\hrms-demo\\src\\reducers\\leaves_reducer.js":"20","D:\\react-myprojects\\hrms-demo\\src\\reducers\\tables_reducer.js":"21","D:\\react-myprojects\\hrms-demo\\src\\reducers\\trainings_reducer.js":"22","D:\\react-myprojects\\hrms-demo\\src\\reducers\\payslips_reducer.js":"23","D:\\react-myprojects\\hrms-demo\\src\\components\\app\\Loading.tsx":"24","D:\\react-myprojects\\hrms-demo\\src\\components\\LoginForm.js":"25","D:\\react-myprojects\\hrms-demo\\src\\components\\DashboardMain.js":"26","D:\\react-myprojects\\hrms-demo\\src\\components\\data\\atomdata.js":"27","D:\\react-myprojects\\hrms-demo\\src\\components\\theme\\index.js":"28","D:\\react-myprojects\\hrms-demo\\src\\components\\SigninForm.js":"29","D:\\react-myprojects\\hrms-demo\\src\\components\\Example6.js":"30","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleEmployeeStaff.js":"31","D:\\react-myprojects\\hrms-demo\\src\\components\\SideDrawer.js":"32","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleLeave.js":"33","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleDailyAllowance.js":"34","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleExpense.js":"35","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleDailyAllowsDetlsStaff.js":"36","D:\\react-myprojects\\hrms-demo\\src\\components\\BatchDailyAllowances.js":"37","D:\\react-myprojects\\hrms-demo\\src\\components\\SinglePayslip.js":"38","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleEmployee.js":"39","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleDailyAllowsDetls.js":"40","D:\\react-myprojects\\hrms-demo\\src\\components\\Payrun.js":"41","D:\\react-myprojects\\hrms-demo\\src\\components\\UserAccessTable.js":"42","D:\\react-myprojects\\hrms-demo\\src\\components\\Payrunbatch.js":"43","D:\\react-myprojects\\hrms-demo\\src\\components\\ApprovalManager.js":"44","D:\\react-myprojects\\hrms-demo\\src\\components\\Appbanner.js":"45","D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsDirector.js":"46","D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeFormStaff.js":"47","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveForm.js":"48","D:\\react-myprojects\\hrms-demo\\src\\components\\DaiylAllowanceForm.js":"49","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseForm.js":"50","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowsDetlsTableStaff.js":"51","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableStaff.js":"52","D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipForm.js":"53","D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeFormNew.js":"54","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowsDetlsTable.js":"55","D:\\react-myprojects\\hrms-demo\\src\\components\\CurrencyTable.js":"56","D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\useUpdateEmployees.js":"57","D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\useEmployees.js":"58","D:\\react-myprojects\\hrms-demo\\src\\components\\payslips\\useUpdatePayslips.js":"59","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDailyAllowsStatus.js":"60","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableView.js":"61","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableAdmin.js":"62","D:\\react-myprojects\\hrms-demo\\src\\pages\\index.js":"63","D:\\react-myprojects\\hrms-demo\\src\\helpers\\useCustomToast.ts":"64","D:\\react-myprojects\\hrms-demo\\src\\components\\user\\useUser.js":"65","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpJobhistory.js":"66","D:\\react-myprojects\\hrms-demo\\src\\helpers\\AlertDialogBox.js":"67","D:\\react-myprojects\\hrms-demo\\src\\components\\Payslip_Deductions.js":"68","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDailyAllows.js":"69","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useUpdateLeaves.js":"70","D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useUpdateExpenses.js":"71","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\useDailyAllowsDetlsBatch.js":"72","D:\\react-myprojects\\hrms-demo\\src\\components\\designations\\useDesignations.js":"73","D:\\react-myprojects\\hrms-demo\\src\\components\\currency\\useAddCurrency.js":"74","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\utils.js":"75","D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\utils.js":"76","D:\\react-myprojects\\hrms-demo\\src\\components\\react-query\\constants.js":"77","D:\\react-myprojects\\hrms-demo\\src\\helpers\\CustomDialog.js":"78","D:\\react-myprojects\\hrms-demo\\src\\pages\\ErrorPage.js":"79","D:\\react-myprojects\\hrms-demo\\src\\components\\JobhistoryForm.js":"80","D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\useDeleteJobhistory.js":"81","D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\useUpdateJobhistory.js":"82","D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\useAddJobhistory.js":"83","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\utils.js":"84","D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\useJobhistory.js":"85","D:\\react-myprojects\\hrms-demo\\src\\components\\user-storage\\index.js":"86","D:\\react-myprojects\\hrms-demo\\src\\components\\jobstatus\\useJobstatus.js":"87","D:\\react-myprojects\\hrms-demo\\src\\components\\departments\\useDepartments.js":"88","D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\utils.js":"89","D:\\react-myprojects\\hrms-demo\\src\\components\\jobstatus\\utils.js":"90","D:\\react-myprojects\\hrms-demo\\src\\pages\\ClientsPage.js":"91","D:\\react-myprojects\\hrms-demo\\src\\pages\\PrivateRoute.js":"92","D:\\react-myprojects\\hrms-demo\\src\\pages\\DailyAllowancesPage.js":"93","D:\\react-myprojects\\hrms-demo\\src\\pages\\DailyAllowancesStaffPage.js":"94","D:\\react-myprojects\\hrms-demo\\src\\pages\\TablesPage.js":"95","D:\\react-myprojects\\hrms-demo\\src\\pages\\DesignationPage.js":"96","D:\\react-myprojects\\hrms-demo\\src\\pages\\DepartmentsPage.js":"97","D:\\react-myprojects\\hrms-demo\\src\\pages\\AllowancesPage.js":"98","D:\\react-myprojects\\hrms-demo\\src\\pages\\BatchPayslipsPage.js":"99","D:\\react-myprojects\\hrms-demo\\src\\pages\\PayslipPage.js":"100","D:\\react-myprojects\\hrms-demo\\src\\pages\\PayrollPage.js":"101","D:\\react-myprojects\\hrms-demo\\src\\pages\\PayslipStaffPage.js":"102","D:\\react-myprojects\\hrms-demo\\src\\pages\\UserAccessPage.js":"103","D:\\react-myprojects\\hrms-demo\\src\\pages\\TrainingsStaffPage.js":"104","D:\\react-myprojects\\hrms-demo\\src\\pages\\ExpensesStaffPage.js":"105","D:\\react-myprojects\\hrms-demo\\src\\pages\\HocPage.js":"106","D:\\react-myprojects\\hrms-demo\\src\\pages\\ExpensesPage.js":"107","D:\\react-myprojects\\hrms-demo\\src\\pages\\LeaveStaffPage.js":"108","D:\\react-myprojects\\hrms-demo\\src\\pages\\LeavePage.js":"109","D:\\react-myprojects\\hrms-demo\\src\\pages\\AllEmployeesPage.js":"110","D:\\react-myprojects\\hrms-demo\\src\\pages\\DashboardPage.js":"111","D:\\react-myprojects\\hrms-demo\\src\\pages\\HomePage.js":"112","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesPeriods.js":"113","D:\\react-myprojects\\hrms-demo\\src\\components\\TablesUpdate.js":"114","D:\\react-myprojects\\hrms-demo\\src\\components\\Example.js":"115","D:\\react-myprojects\\hrms-demo\\src\\components\\TableForm.js":"116","D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTable.js":"117","D:\\react-myprojects\\hrms-demo\\src\\components\\currency\\useDeleteCurrency.js":"118","D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTableStaff.js":"119","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpTrainings.js":"120","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableStaff.js":"121","D:\\react-myprojects\\hrms-demo\\src\\components\\HocTable.js":"122","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTable.js":"123","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableStaff.js":"124","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableAdmin.js":"125","D:\\react-myprojects\\hrms-demo\\src\\components\\AllEmployeesTable.js":"126","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeDirector.js":"127","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeStaff.js":"128","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeManager.js":"129","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeOpsSpvr.js":"130","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeAdminManager.js":"131","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeAdmin.js":"132","D:\\react-myprojects\\hrms-demo\\src\\components\\currency\\useUpdateCurrency.js":"133","D:\\react-myprojects\\hrms-demo\\src\\components\\currency\\useCurrency.js":"134","D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\useAddEmployees.js":"135","D:\\react-myprojects\\hrms-demo\\src\\components\\Payslip_Earnings.js":"136","D:\\react-myprojects\\hrms-demo\\src\\components\\Payslip_ViewDeductions.js":"137","D:\\react-myprojects\\hrms-demo\\src\\helpers\\CardLayout.js":"138","D:\\react-myprojects\\hrms-demo\\src\\components\\Payslip_ViewEarnings.js":"139","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\useDeleteDailyAllowsDetls.js":"140","D:\\react-myprojects\\hrms-demo\\src\\helpers\\CardLayout2.js":"141","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDeleteDailyAllows.js":"142","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesAddPeriod.js":"143","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useUpdateDailyAllows.js":"144","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\useUpdateDailyAllowsDetls.js":"145","D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useAddExpenses.js":"146","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useAddLeaves.js":"147","D:\\react-myprojects\\hrms-demo\\src\\components\\InstitutesTable.js":"148","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDailyAllowsPayrun.js":"149","D:\\react-myprojects\\hrms-demo\\src\\components\\payslips\\usePayslipsBatch.js":"150","D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useExpensesPayrun.js":"151","D:\\react-myprojects\\hrms-demo\\src\\components\\DesignationsTable.js":"152","D:\\react-myprojects\\hrms-demo\\src\\components\\PrintPayslip.js":"153","D:\\react-myprojects\\hrms-demo\\src\\components\\payslips\\usePayslips.js":"154","D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\usePayrun.js":"155","D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\useDeletePayrun.js":"156","D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useDeleteExpenses.js":"157","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useDeleteLeaves.js":"158","D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\useDeleteTrainings.js":"159","D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeFormAdd.js":"160","D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useHoc.js":"161","D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useDeleteHoc.js":"162","D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\useDeleteEmployees.js":"163","D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeView.js":"164","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableApproval.js":"165","D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTableViewSummary.js":"166","D:\\react-myprojects\\hrms-demo\\src\\components\\WPExpiryViewStaff.js":"167","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableVeryfy.js":"168","D:\\react-myprojects\\hrms-demo\\src\\components\\Copyright.js":"169","D:\\react-myprojects\\hrms-demo\\src\\components\\LeavesTableViewSummary.js":"170","D:\\react-myprojects\\hrms-demo\\src\\components\\Export2ExcelDialog.js":"171","D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeTableLeaveView.js":"172","D:\\react-myprojects\\hrms-demo\\src\\components\\TrainingsTableViewAdmin.js":"173","D:\\react-myprojects\\hrms-demo\\src\\components\\HocTableViewSummary.js":"174","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableAdmin.js":"175","D:\\react-myprojects\\hrms-demo\\src\\components\\WPExpiryViewAdmin.js":"176","D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTableAdmin.js":"177","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableViewAdmin.js":"178","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableManager.js":"179","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableViewSummary.js":"180","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableViewSummary.js":"181","D:\\react-myprojects\\hrms-demo\\src\\components\\Export2Excel.js":"182","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\useAddDailyAllowsDetls.js":"183","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useAddDailyAllows.js":"184","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableViewStaff.js":"185","D:\\react-myprojects\\hrms-demo\\src\\components\\TrainingsTableViewStaff.js":"186","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableViewStaff.js":"187","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveFormAdmin.js":"188","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useLeaves.js":"189","D:\\react-myprojects\\hrms-demo\\src\\components\\HocForm.js":"190","D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useExpenses.js":"191","D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\useAddTrainings.js":"192","D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\useUpdateTrainings.js":"193","D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\useTrainings.js":"194","D:\\react-myprojects\\hrms-demo\\src\\components\\institutes\\useInstitutes.js":"195","D:\\react-myprojects\\hrms-demo\\src\\components\\institutes\\useUpdateInstitutes.js":"196","D:\\react-myprojects\\hrms-demo\\src\\components\\DepartmentsTable.js":"197","D:\\react-myprojects\\hrms-demo\\src\\components\\institutes\\useAddInstitutes.js":"198","D:\\react-myprojects\\hrms-demo\\src\\components\\institutes\\useDeleteInstitutes.js":"199","D:\\react-myprojects\\hrms-demo\\src\\components\\DeductionsTable.js":"200","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpEducations.js":"201","D:\\react-myprojects\\hrms-demo\\src\\components\\AllowancesTable.js":"202","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpExperiences.js":"203","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpFamily.js":"204","D:\\react-myprojects\\hrms-demo\\src\\components\\payslips\\utils.js":"205","D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\utils.js":"206","D:\\react-myprojects\\hrms-demo\\src\\components\\designations\\useAddDesignations.js":"207","D:\\react-myprojects\\hrms-demo\\src\\helpers\\Utils.js":"208","D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\utils.js":"209","D:\\react-myprojects\\hrms-demo\\src\\components\\designations\\useDeleteDesignations.js":"210","D:\\react-myprojects\\hrms-demo\\src\\components\\designations\\useUpdateDesignations.js":"211","D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\utils.js":"212","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useLeavesStatus.js":"213","D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\usePayrunStatus.js":"214","D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useHocPeriod.js":"215","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useLeavesPeriod.js":"216","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpPersonal.js":"217","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewTrainings.js":"218","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewLeaves.js":"219","D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useExpensesPeriod.js":"220","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDailyAllowsPeriod.js":"221","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewExperiences.js":"222","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewEducations.js":"223","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewFamily.js":"224","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\utils.js":"225","D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\utils.js":"226","D:\\react-myprojects\\hrms-demo\\src\\components\\departments\\useAddDepartments.js":"227","D:\\react-myprojects\\hrms-demo\\src\\components\\hoclocation\\useHoclocation.js":"228","D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\useDeletePayItems.js":"229","D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\useAddPayItems.js":"230","D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\useUpdatePayItems.js":"231","D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\usePayItems.js":"232","D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\useDeleteEducations.js":"233","D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\useDeleteExperiences.js":"234","D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\useAddExperiences.js":"235","D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\useUpdateExperiences.js":"236","D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\useExperiences.js":"237","D:\\react-myprojects\\hrms-demo\\src\\components\\family\\useAddFamily.js":"238","D:\\react-myprojects\\hrms-demo\\src\\components\\family\\useDeleteFamily.js":"239","D:\\react-myprojects\\hrms-demo\\src\\components\\family\\useUpdateFamily.js":"240","D:\\react-myprojects\\hrms-demo\\src\\components\\family\\useFamily.js":"241","D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\useAddEducations.js":"242","D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\useUpdateEducations.js":"243","D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\useEducations.js":"244","D:\\react-myprojects\\hrms-demo\\src\\components\\departments\\useDeleteDepartments.js":"245","D:\\react-myprojects\\hrms-demo\\src\\components\\departments\\useUpdateDepartments.js":"246","D:\\react-myprojects\\hrms-demo\\src\\components\\hoclocation\\utils.js":"247","D:\\react-myprojects\\hrms-demo\\src\\components\\family\\utils.js":"248","D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\utils.js":"249","D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\utils.js":"250","D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\utils.js":"251","D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useUpdateHoc.js":"252","D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useAddHoc.js":"253","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhy\\useHocwhy.js":"254","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhydetails\\useHocwhydetails.js":"255","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhatdetails\\useHocwhatdetails.js":"256","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhat\\useHocwhat.js":"257","D:\\react-myprojects\\hrms-demo\\src\\components\\hoccategory\\useHoccategory.js":"258","D:\\react-myprojects\\hrms-demo\\src\\components\\hoccategory\\utils.js":"259","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhat\\utils.js":"260","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhydetails\\utils.js":"261","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhatdetails\\utils.js":"262","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhy\\utils.js":"263","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableManager.js":"264","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableView.js":"265","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableViewManager.js":"266","D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTableViewManager.js":"267","D:\\react-myprojects\\hrms-demo\\src\\helpers\\CardLayout3.js":"268","D:\\react-myprojects\\hrms-demo\\src\\components\\PrintPaySummary.js":"269","D:\\react-myprojects\\hrms-demo\\src\\components\\PaySummary.js":"270","D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\useUpdatePayrun.js":"271","D:\\react-myprojects\\hrms-demo\\src\\components\\PayForm.js":"272","D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeForm.js":"273","D:\\react-myprojects\\hrms-demo\\src\\components\\allowances\\useAllowances.js":"274","D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsManager.js":"275","D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsAdminManager.js":"276","D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsOpsSpvr.js":"277","D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsAdmin.js":"278","D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsStaff.js":"279"},{"size":2725,"mtime":1647269175826,"results":"280","hashOfConfig":"281"},{"size":362,"mtime":1612573013334,"results":"282","hashOfConfig":"281"},{"size":1797,"mtime":1634484908980,"results":"283","hashOfConfig":"281"},{"size":5101,"mtime":1645969744657,"results":"284","hashOfConfig":"281"},{"size":14583,"mtime":1645969843302,"results":"285","hashOfConfig":"281"},{"size":6098,"mtime":1645969677496,"results":"286","hashOfConfig":"281"},{"size":6798,"mtime":1645969712169,"results":"287","hashOfConfig":"281"},{"size":20798,"mtime":1645969557550,"results":"288","hashOfConfig":"281"},{"size":21513,"mtime":1645969640874,"results":"289","hashOfConfig":"281"},{"size":5422,"mtime":1645969469803,"results":"290","hashOfConfig":"281"},{"size":549,"mtime":1645969860100,"results":"291","hashOfConfig":"281"},{"size":24202,"mtime":1624975052616,"results":"292","hashOfConfig":"281"},{"size":1431,"mtime":1646195053433,"results":"293","hashOfConfig":"281"},{"size":1418,"mtime":1646195151368,"results":"294","hashOfConfig":"281"},{"size":783,"mtime":1626360373349,"results":"295","hashOfConfig":"281"},{"size":9966,"mtime":1644158469829,"results":"296","hashOfConfig":"281"},{"size":3564,"mtime":1623643063828,"results":"297","hashOfConfig":"281"},{"size":10817,"mtime":1645968575917,"results":"298","hashOfConfig":"281"},{"size":4605,"mtime":1645968550334,"results":"299","hashOfConfig":"281"},{"size":3957,"mtime":1645968544100,"results":"300","hashOfConfig":"281"},{"size":20287,"mtime":1623596884027,"results":"301","hashOfConfig":"281"},{"size":4247,"mtime":1645968509522,"results":"302","hashOfConfig":"281"},{"size":17440,"mtime":1645968527670,"results":"303","hashOfConfig":"281"},{"size":646,"mtime":1626924860523,"results":"304","hashOfConfig":"281"},{"size":4458,"mtime":1645976297077,"results":"305","hashOfConfig":"281"},{"size":14571,"mtime":1647353615065,"results":"306","hashOfConfig":"281"},{"size":3130,"mtime":1647162136668,"results":"307","hashOfConfig":"281"},{"size":856,"mtime":1645969912967,"results":"308","hashOfConfig":"281"},{"size":10297,"mtime":1647185493379,"results":"309","hashOfConfig":"281"},{"size":7904,"mtime":1645980015642,"results":"310","hashOfConfig":"281"},{"size":4931,"mtime":1645971611735,"results":"311","hashOfConfig":"281"},{"size":4513,"mtime":1646019270551,"results":"312","hashOfConfig":"281"},{"size":3910,"mtime":1645971447824,"results":"313","hashOfConfig":"281"},{"size":3571,"mtime":1645971865063,"results":"314","hashOfConfig":"281"},{"size":3922,"mtime":1645971537597,"results":"315","hashOfConfig":"281"},{"size":3531,"mtime":1645971743093,"results":"316","hashOfConfig":"281"},{"size":3276,"mtime":1624400993741,"results":"317","hashOfConfig":"281"},{"size":4603,"mtime":1645971364259,"results":"318","hashOfConfig":"281"},{"size":4933,"mtime":1645971681300,"results":"319","hashOfConfig":"281"},{"size":3598,"mtime":1645971810406,"results":"320","hashOfConfig":"281"},{"size":24014,"mtime":1647161994923,"results":"321","hashOfConfig":"281"},{"size":4569,"mtime":1645970863486,"results":"322","hashOfConfig":"281"},{"size":27670,"mtime":1647352229758,"results":"323","hashOfConfig":"281"},{"size":9301,"mtime":1645982574946,"results":"324","hashOfConfig":"281"},{"size":7232,"mtime":1646145241707,"results":"325","hashOfConfig":"281"},{"size":8104,"mtime":1645975955863,"results":"326","hashOfConfig":"281"},{"size":38728,"mtime":1646999145446,"results":"327","hashOfConfig":"281"},{"size":12406,"mtime":1646018359449,"results":"328","hashOfConfig":"281"},{"size":10012,"mtime":1646146016147,"results":"329","hashOfConfig":"281"},{"size":10448,"mtime":1645979976591,"results":"330","hashOfConfig":"281"},{"size":24811,"mtime":1646147676988,"results":"331","hashOfConfig":"281"},{"size":12254,"mtime":1646993657272,"results":"332","hashOfConfig":"281"},{"size":22033,"mtime":1646146706612,"results":"333","hashOfConfig":"281"},{"size":38752,"mtime":1645980487274,"results":"334","hashOfConfig":"281"},{"size":6634,"mtime":1646016730919,"results":"335","hashOfConfig":"281"},{"size":2587,"mtime":1634559156672,"results":"336","hashOfConfig":"281"},{"size":785,"mtime":1625802942098,"results":"337","hashOfConfig":"281"},{"size":995,"mtime":1639703740352,"results":"338","hashOfConfig":"281"},{"size":818,"mtime":1647258582243,"results":"339","hashOfConfig":"281"},{"size":1145,"mtime":1631841429724,"results":"340","hashOfConfig":"281"},{"size":3738,"mtime":1645981828671,"results":"341","hashOfConfig":"281"},{"size":8080,"mtime":1645982388762,"results":"342","hashOfConfig":"281"},{"size":1351,"mtime":1638065354430,"results":"343","hashOfConfig":"281"},{"size":646,"mtime":1625798737997,"results":"344","hashOfConfig":"281"},{"size":1524,"mtime":1631151422337,"results":"345","hashOfConfig":"281"},{"size":6854,"mtime":1645980766214,"results":"346","hashOfConfig":"281"},{"size":3129,"mtime":1645969398295,"results":"347","hashOfConfig":"281"},{"size":6869,"mtime":1645973465936,"results":"348","hashOfConfig":"281"},{"size":1133,"mtime":1631197215977,"results":"349","hashOfConfig":"281"},{"size":772,"mtime":1645969974454,"results":"350","hashOfConfig":"281"},{"size":770,"mtime":1630322149187,"results":"351","hashOfConfig":"281"},{"size":1511,"mtime":1631234568295,"results":"352","hashOfConfig":"281"},{"size":547,"mtime":1625758222838,"results":"353","hashOfConfig":"281"},{"size":716,"mtime":1628652117726,"results":"354","hashOfConfig":"281"},{"size":228,"mtime":1626012237438,"results":"355","hashOfConfig":"281"},{"size":224,"mtime":1626004799326,"results":"356","hashOfConfig":"281"},{"size":1335,"mtime":1646051804752,"results":"357","hashOfConfig":"281"},{"size":1497,"mtime":1624329676645,"results":"358","hashOfConfig":"281"},{"size":743,"mtime":1645969038875,"results":"359","hashOfConfig":"281"},{"size":14087,"mtime":1646018338773,"results":"360","hashOfConfig":"281"},{"size":743,"mtime":1643767446853,"results":"361","hashOfConfig":"281"},{"size":796,"mtime":1645969992819,"results":"362","hashOfConfig":"281"},{"size":733,"mtime":1643767355276,"results":"363","hashOfConfig":"281"},{"size":238,"mtime":1626013581220,"results":"364","hashOfConfig":"281"},{"size":1012,"mtime":1643767702539,"results":"365","hashOfConfig":"281"},{"size":453,"mtime":1625889377868,"results":"366","hashOfConfig":"281"},{"size":1034,"mtime":1644158820394,"results":"367","hashOfConfig":"281"},{"size":501,"mtime":1625800533121,"results":"368","hashOfConfig":"281"},{"size":226,"mtime":1643767532301,"results":"369","hashOfConfig":"281"},{"size":0,"mtime":1644158542469,"results":"370","hashOfConfig":"281"},{"size":3116,"mtime":1620536608782,"results":"371","hashOfConfig":"281"},{"size":594,"mtime":1645968672135,"results":"372","hashOfConfig":"281"},{"size":3421,"mtime":1621866966445,"results":"373","hashOfConfig":"281"},{"size":3432,"mtime":1624282741154,"results":"374","hashOfConfig":"281"},{"size":3190,"mtime":1645965290297,"results":"375","hashOfConfig":"281"},{"size":3129,"mtime":1620537502474,"results":"376","hashOfConfig":"281"},{"size":3214,"mtime":1621176394282,"results":"377","hashOfConfig":"281"},{"size":3189,"mtime":1621005948632,"results":"378","hashOfConfig":"281"},{"size":3206,"mtime":1621344267720,"results":"379","hashOfConfig":"281"},{"size":3271,"mtime":1645968693211,"results":"380","hashOfConfig":"281"},{"size":3183,"mtime":1645968724692,"results":"381","hashOfConfig":"281"},{"size":3203,"mtime":1626019204916,"results":"382","hashOfConfig":"281"},{"size":3198,"mtime":1645968606178,"results":"383","hashOfConfig":"281"},{"size":3316,"mtime":1645968628748,"results":"384","hashOfConfig":"281"},{"size":3247,"mtime":1645968941503,"results":"385","hashOfConfig":"281"},{"size":3361,"mtime":1645968762827,"results":"386","hashOfConfig":"281"},{"size":3683,"mtime":1623172638593,"results":"387","hashOfConfig":"281"},{"size":3315,"mtime":1623942108178,"results":"388","hashOfConfig":"281"},{"size":3366,"mtime":1629622148918,"results":"389","hashOfConfig":"281"},{"size":3158,"mtime":1646013496086,"results":"390","hashOfConfig":"281"},{"size":222,"mtime":1646194879220,"results":"391","hashOfConfig":"281"},{"size":1315,"mtime":1646136950035,"results":"392","hashOfConfig":"281"},{"size":2023,"mtime":1646147825474,"results":"393","hashOfConfig":"281"},{"size":2351,"mtime":1645971233648,"results":"394","hashOfConfig":"281"},{"size":4085,"mtime":1622901629555,"results":"395","hashOfConfig":"281"},{"size":2343,"mtime":1622902246334,"results":"396","hashOfConfig":"281"},{"size":10223,"mtime":1646147982591,"results":"397","hashOfConfig":"281"},{"size":726,"mtime":1628652185180,"results":"398","hashOfConfig":"281"},{"size":5655,"mtime":1647352737491,"results":"399","hashOfConfig":"281"},{"size":5060,"mtime":1646017386881,"results":"400","hashOfConfig":"281"},{"size":7748,"mtime":1645979788885,"results":"401","hashOfConfig":"281"},{"size":8768,"mtime":1646018226709,"results":"402","hashOfConfig":"281"},{"size":7272,"mtime":1646017513705,"results":"403","hashOfConfig":"281"},{"size":15032,"mtime":1646408129752,"results":"404","hashOfConfig":"281"},{"size":6712,"mtime":1646269921241,"results":"405","hashOfConfig":"281"},{"size":13149,"mtime":1646148125709,"results":"406","hashOfConfig":"281"},{"size":44602,"mtime":1645978368415,"results":"407","hashOfConfig":"281"},{"size":9203,"mtime":1646107233630,"results":"408","hashOfConfig":"281"},{"size":44090,"mtime":1645978208554,"results":"409","hashOfConfig":"281"},{"size":29341,"mtime":1645977961443,"results":"410","hashOfConfig":"281"},{"size":46540,"mtime":1647351632151,"results":"411","hashOfConfig":"281"},{"size":27534,"mtime":1645978900635,"results":"412","hashOfConfig":"281"},{"size":769,"mtime":1628652247996,"results":"413","hashOfConfig":"281"},{"size":477,"mtime":1632542575544,"results":"414","hashOfConfig":"281"},{"size":724,"mtime":1625802698233,"results":"415","hashOfConfig":"281"},{"size":6973,"mtime":1645973272923,"results":"416","hashOfConfig":"281"},{"size":3380,"mtime":1645973139523,"results":"417","hashOfConfig":"281"},{"size":1171,"mtime":1645969263513,"results":"418","hashOfConfig":"281"},{"size":2524,"mtime":1645972877915,"results":"419","hashOfConfig":"281"},{"size":812,"mtime":1645970078681,"results":"420","hashOfConfig":"281"},{"size":913,"mtime":1645969221169,"results":"421","hashOfConfig":"281"},{"size":760,"mtime":1626012143637,"results":"422","hashOfConfig":"281"},{"size":16761,"mtime":1646998339306,"results":"423","hashOfConfig":"281"},{"size":803,"mtime":1630322171248,"results":"424","hashOfConfig":"281"},{"size":839,"mtime":1629643605781,"results":"425","hashOfConfig":"281"},{"size":717,"mtime":1626000835564,"results":"426","hashOfConfig":"281"},{"size":703,"mtime":1625839094668,"results":"427","hashOfConfig":"281"},{"size":2409,"mtime":1634559139097,"results":"428","hashOfConfig":"281"},{"size":1104,"mtime":1632152172173,"results":"429","hashOfConfig":"281"},{"size":1055,"mtime":1630040562812,"results":"430","hashOfConfig":"281"},{"size":1099,"mtime":1630230678288,"results":"431","hashOfConfig":"281"},{"size":2475,"mtime":1634559121280,"results":"432","hashOfConfig":"281"},{"size":12982,"mtime":1645972084122,"results":"433","hashOfConfig":"281"},{"size":1024,"mtime":1645441459882,"results":"434","hashOfConfig":"281"},{"size":998,"mtime":1626013831261,"results":"435","hashOfConfig":"281"},{"size":713,"mtime":1626014110639,"results":"436","hashOfConfig":"281"},{"size":727,"mtime":1626000997584,"results":"437","hashOfConfig":"281"},{"size":713,"mtime":1625839833770,"results":"438","hashOfConfig":"281"},{"size":734,"mtime":1625837998174,"results":"439","hashOfConfig":"281"},{"size":5208,"mtime":1645980569795,"results":"440","hashOfConfig":"281"},{"size":879,"mtime":1638064176425,"results":"441","hashOfConfig":"281"},{"size":693,"mtime":1638064051891,"results":"442","hashOfConfig":"281"},{"size":734,"mtime":1625802828834,"results":"443","hashOfConfig":"281"},{"size":14524,"mtime":1624364976073,"results":"444","hashOfConfig":"281"},{"size":10976,"mtime":1646018517461,"results":"445","hashOfConfig":"281"},{"size":2668,"mtime":1645973592769,"results":"446","hashOfConfig":"281"},{"size":3257,"mtime":1646149024242,"results":"447","hashOfConfig":"281"},{"size":7885,"mtime":1646194087394,"results":"448","hashOfConfig":"281"},{"size":468,"mtime":1634881547580,"results":"449","hashOfConfig":"281"},{"size":2432,"mtime":1646095308344,"results":"450","hashOfConfig":"281"},{"size":6224,"mtime":1647351596327,"results":"451","hashOfConfig":"281"},{"size":6355,"mtime":1646149284841,"results":"452","hashOfConfig":"281"},{"size":4272,"mtime":1646149475434,"results":"453","hashOfConfig":"281"},{"size":3504,"mtime":1645978948579,"results":"454","hashOfConfig":"281"},{"size":8478,"mtime":1645979859556,"results":"455","hashOfConfig":"281"},{"size":5869,"mtime":1646408594970,"results":"456","hashOfConfig":"281"},{"size":7353,"mtime":1645974116939,"results":"457","hashOfConfig":"281"},{"size":5547,"mtime":1646193885018,"results":"458","hashOfConfig":"281"},{"size":10325,"mtime":1646018543447,"results":"459","hashOfConfig":"281"},{"size":2961,"mtime":1645979271164,"results":"460","hashOfConfig":"281"},{"size":3801,"mtime":1645981594016,"results":"461","hashOfConfig":"281"},{"size":10829,"mtime":1647351551294,"results":"462","hashOfConfig":"281"},{"size":802,"mtime":1645970093177,"results":"463","hashOfConfig":"281"},{"size":750,"mtime":1626012044446,"results":"464","hashOfConfig":"281"},{"size":4644,"mtime":1646149872023,"results":"465","hashOfConfig":"281"},{"size":3095,"mtime":1646149514655,"results":"466","hashOfConfig":"281"},{"size":3234,"mtime":1646193930190,"results":"467","hashOfConfig":"281"},{"size":11600,"mtime":1646018373818,"results":"468","hashOfConfig":"281"},{"size":1093,"mtime":1635268047989,"results":"469","hashOfConfig":"281"},{"size":24244,"mtime":1646018202774,"results":"470","hashOfConfig":"281"},{"size":1018,"mtime":1626000648360,"results":"471","hashOfConfig":"281"},{"size":724,"mtime":1625838060126,"results":"472","hashOfConfig":"281"},{"size":777,"mtime":1625837935113,"results":"473","hashOfConfig":"281"},{"size":952,"mtime":1625837870028,"results":"474","hashOfConfig":"281"},{"size":493,"mtime":1627306271324,"results":"475","hashOfConfig":"281"},{"size":782,"mtime":1627306338795,"results":"476","hashOfConfig":"281"},{"size":2441,"mtime":1634559105876,"results":"477","hashOfConfig":"281"},{"size":729,"mtime":1627307060429,"results":"478","hashOfConfig":"281"},{"size":739,"mtime":1627306207024,"results":"479","hashOfConfig":"281"},{"size":2519,"mtime":1634559087977,"results":"480","hashOfConfig":"281"},{"size":4012,"mtime":1634915187548,"results":"481","hashOfConfig":"281"},{"size":2521,"mtime":1645967994855,"results":"482","hashOfConfig":"281"},{"size":3797,"mtime":1626278320869,"results":"483","hashOfConfig":"281"},{"size":4070,"mtime":1645980806482,"results":"484","hashOfConfig":"281"},{"size":450,"mtime":1628647536437,"results":"485","hashOfConfig":"281"},{"size":678,"mtime":1631761584227,"results":"486","hashOfConfig":"281"},{"size":743,"mtime":1625801372351,"results":"487","hashOfConfig":"281"},{"size":559,"mtime":1646487183365,"results":"488","hashOfConfig":"281"},{"size":218,"mtime":1626014179037,"results":"489","hashOfConfig":"281"},{"size":753,"mtime":1625801448372,"results":"490","hashOfConfig":"281"},{"size":796,"mtime":1625802990123,"results":"491","hashOfConfig":"281"},{"size":212,"mtime":1638172282050,"results":"492","hashOfConfig":"281"},{"size":1187,"mtime":1637680924176,"results":"493","hashOfConfig":"281"},{"size":1067,"mtime":1631801114382,"results":"494","hashOfConfig":"281"},{"size":1309,"mtime":1646051027296,"results":"495","hashOfConfig":"281"},{"size":1375,"mtime":1632042598961,"results":"496","hashOfConfig":"281"},{"size":28732,"mtime":1624808084032,"results":"497","hashOfConfig":"281"},{"size":1596,"mtime":1646017475444,"results":"498","hashOfConfig":"281"},{"size":1531,"mtime":1646017458224,"results":"499","hashOfConfig":"281"},{"size":1347,"mtime":1632038635671,"results":"500","hashOfConfig":"281"},{"size":1104,"mtime":1632040092091,"results":"501","hashOfConfig":"281"},{"size":1587,"mtime":1646017418139,"results":"502","hashOfConfig":"281"},{"size":1553,"mtime":1622901288533,"results":"503","hashOfConfig":"281"},{"size":1404,"mtime":1646017436516,"results":"504","hashOfConfig":"281"},{"size":218,"mtime":1632042511765,"results":"505","hashOfConfig":"281"},{"size":224,"mtime":1626059101507,"results":"506","hashOfConfig":"281"},{"size":742,"mtime":1625800887575,"results":"507","hashOfConfig":"281"},{"size":1056,"mtime":1638199168189,"results":"508","hashOfConfig":"281"},{"size":727,"mtime":1626014379405,"results":"509","hashOfConfig":"281"},{"size":717,"mtime":1626014330237,"results":"510","hashOfConfig":"281"},{"size":770,"mtime":1626014520002,"results":"511","hashOfConfig":"281"},{"size":1072,"mtime":1632306858886,"results":"512","hashOfConfig":"281"},{"size":741,"mtime":1625832767335,"results":"513","hashOfConfig":"281"},{"size":748,"mtime":1625833836425,"results":"514","hashOfConfig":"281"},{"size":738,"mtime":1625833769320,"results":"515","hashOfConfig":"281"},{"size":789,"mtime":1626011673317,"results":"516","hashOfConfig":"281"},{"size":978,"mtime":1625833701287,"results":"517","hashOfConfig":"281"},{"size":704,"mtime":1625831924179,"results":"518","hashOfConfig":"281"},{"size":714,"mtime":1625831978364,"results":"519","hashOfConfig":"281"},{"size":757,"mtime":1625831672038,"results":"520","hashOfConfig":"281"},{"size":916,"mtime":1625832650282,"results":"521","hashOfConfig":"281"},{"size":731,"mtime":1625832717517,"results":"522","hashOfConfig":"281"},{"size":784,"mtime":1625832816616,"results":"523","hashOfConfig":"281"},{"size":965,"mtime":1625833417248,"results":"524","hashOfConfig":"281"},{"size":746,"mtime":1625800910412,"results":"525","hashOfConfig":"281"},{"size":789,"mtime":1625802984510,"results":"526","hashOfConfig":"281"},{"size":175,"mtime":1638189001426,"results":"527","hashOfConfig":"281"},{"size":165,"mtime":1638188907547,"results":"528","hashOfConfig":"281"},{"size":180,"mtime":1638188926234,"results":"529","hashOfConfig":"281"},{"size":173,"mtime":1638188950802,"results":"530","hashOfConfig":"281"},{"size":222,"mtime":1632278524654,"results":"531","hashOfConfig":"281"},{"size":736,"mtime":1638064098760,"results":"532","hashOfConfig":"281"},{"size":683,"mtime":1638064239149,"results":"533","hashOfConfig":"281"},{"size":912,"mtime":1638725848973,"results":"534","hashOfConfig":"281"},{"size":1003,"mtime":1638726017088,"results":"535","hashOfConfig":"281"},{"size":1016,"mtime":1638725530053,"results":"536","hashOfConfig":"281"},{"size":925,"mtime":1638725343906,"results":"537","hashOfConfig":"281"},{"size":1056,"mtime":1638724980499,"results":"538","hashOfConfig":"281"},{"size":175,"mtime":1638725004641,"results":"539","hashOfConfig":"281"},{"size":167,"mtime":1638725369531,"results":"540","hashOfConfig":"281"},{"size":179,"mtime":1638726036775,"results":"541","hashOfConfig":"281"},{"size":181,"mtime":1638725545603,"results":"542","hashOfConfig":"281"},{"size":165,"mtime":1638725867948,"results":"543","hashOfConfig":"281"},{"size":10156,"mtime":1645979750546,"results":"544","hashOfConfig":"281"},{"size":2973,"mtime":1645979584450,"results":"545","hashOfConfig":"281"},{"size":3822,"mtime":1646018743344,"results":"546","hashOfConfig":"281"},{"size":2794,"mtime":1646019170674,"results":"547","hashOfConfig":"281"},{"size":1416,"mtime":1645969199841,"results":"548","hashOfConfig":"281"},{"size":8465,"mtime":1645972127907,"results":"549","hashOfConfig":"281"},{"size":20375,"mtime":1645975405230,"results":"550","hashOfConfig":"281"},{"size":756,"mtime":1626014159472,"results":"551","hashOfConfig":"281"},{"size":51224,"mtime":1647260402282,"results":"552","hashOfConfig":"281"},{"size":42398,"mtime":1646999532121,"results":"553","hashOfConfig":"281"},{"size":476,"mtime":1625801885836,"results":"554","hashOfConfig":"281"},{"size":8103,"mtime":1645975933952,"results":"555","hashOfConfig":"281"},{"size":7368,"mtime":1645975982561,"results":"556","hashOfConfig":"281"},{"size":6527,"mtime":1645975898649,"results":"557","hashOfConfig":"281"},{"size":6151,"mtime":1646270156343,"results":"558","hashOfConfig":"281"},{"size":5653,"mtime":1647352403697,"results":"559","hashOfConfig":"281"},{"filePath":"560","messages":"561","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},"279dzi",{"filePath":"563","messages":"564","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"565","messages":"566","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"567","usedDeprecatedRules":"562"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"576","messages":"577","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"578","messages":"579","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"580","messages":"581","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"588","usedDeprecatedRules":"562"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"591","usedDeprecatedRules":"562"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"596","messages":"597","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"598","messages":"599","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"602","messages":"603","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"606","messages":"607","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"608","messages":"609","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"610","messages":"611","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"612"},{"filePath":"613","messages":"614","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"617","messages":"618","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"619","messages":"620","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"621","messages":"622","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"623","messages":"624","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"625","usedDeprecatedRules":"562"},{"filePath":"626","messages":"627","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"630","usedDeprecatedRules":"562"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"633","messages":"634","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"635","messages":"636","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"639","messages":"640","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"641","messages":"642","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"643","messages":"644","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"645","messages":"646","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"647","messages":"648","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"649","usedDeprecatedRules":"562"},{"filePath":"650","messages":"651","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"652","messages":"653","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"654"},{"filePath":"655","messages":"656","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"657","usedDeprecatedRules":"562"},{"filePath":"658","messages":"659","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"660","usedDeprecatedRules":"562"},{"filePath":"661","messages":"662","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"665","usedDeprecatedRules":"562"},{"filePath":"666","messages":"667","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"668","usedDeprecatedRules":"562"},{"filePath":"669","messages":"670","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"671","usedDeprecatedRules":"562"},{"filePath":"672","messages":"673","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"674","usedDeprecatedRules":"562"},{"filePath":"675","messages":"676","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"677","usedDeprecatedRules":"562"},{"filePath":"678","messages":"679","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"680","usedDeprecatedRules":"562"},{"filePath":"681","messages":"682","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"683","usedDeprecatedRules":"562"},{"filePath":"684","messages":"685","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"686","usedDeprecatedRules":"562"},{"filePath":"687","messages":"688","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"689","usedDeprecatedRules":"562"},{"filePath":"690","messages":"691","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"692","messages":"693","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"694","messages":"695","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"696","messages":"697","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"698","messages":"699","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"700","messages":"701","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"702","usedDeprecatedRules":"562"},{"filePath":"703","messages":"704","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"705","usedDeprecatedRules":"562"},{"filePath":"706","messages":"707","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"708","messages":"709","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"612"},{"filePath":"710","messages":"711","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"712","messages":"713","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"714","usedDeprecatedRules":"562"},{"filePath":"715","messages":"716","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"717","messages":"718","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"719","usedDeprecatedRules":"562"},{"filePath":"720","messages":"721","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"722","messages":"723","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"724","messages":"725","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"726","messages":"727","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"728","messages":"729","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"730","messages":"731","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"732","messages":"733","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"734","messages":"735","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"736","messages":"737","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"738","messages":"739","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"740","messages":"741","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"742","messages":"743","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"744","messages":"745","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"746","messages":"747","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"748","messages":"749","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"750","messages":"751","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"752","messages":"753","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"754","messages":"755","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"756","messages":"757","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"758","messages":"759","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"760","messages":"761","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"762","messages":"763","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"764","messages":"765","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"766","messages":"767","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"768","messages":"769","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"770","messages":"771","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"772","messages":"773","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"774","messages":"775","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"776","messages":"777","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"778","messages":"779","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"780","messages":"781","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"782","messages":"783","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"784","messages":"785","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"786","messages":"787","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"788","messages":"789","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"790","messages":"791","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"792","messages":"793","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"794","messages":"795","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"796","messages":"797","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"798","usedDeprecatedRules":"562"},{"filePath":"799","messages":"800","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"801","messages":"802","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"803","messages":"804","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"805","messages":"806","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"807","messages":"808","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"809","messages":"810","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"811","messages":"812","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"813","messages":"814","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"815","messages":"816","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"817","messages":"818","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"819","usedDeprecatedRules":"562"},{"filePath":"820","messages":"821","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"822","messages":"823","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"824"},{"filePath":"825","messages":"826","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"827","usedDeprecatedRules":"562"},{"filePath":"828","messages":"829","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"830","usedDeprecatedRules":"562"},{"filePath":"831","messages":"832","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"833","usedDeprecatedRules":"562"},{"filePath":"834","messages":"835","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"836","usedDeprecatedRules":"562"},{"filePath":"837","messages":"838","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"839","usedDeprecatedRules":"562"},{"filePath":"840","messages":"841","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"842","usedDeprecatedRules":"562"},{"filePath":"843","messages":"844","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"845","usedDeprecatedRules":"562"},{"filePath":"846","messages":"847","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"848","usedDeprecatedRules":"562"},{"filePath":"849","messages":"850","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"851","usedDeprecatedRules":"562"},{"filePath":"852","messages":"853","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"854","usedDeprecatedRules":"562"},{"filePath":"855","messages":"856","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"857","usedDeprecatedRules":"562"},{"filePath":"858","messages":"859","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"860","usedDeprecatedRules":"562"},{"filePath":"861","messages":"862","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"863","usedDeprecatedRules":"562"},{"filePath":"864","messages":"865","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"866","messages":"867","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"868","messages":"869","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"870","messages":"871","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"872","usedDeprecatedRules":"562"},{"filePath":"873","messages":"874","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"875","usedDeprecatedRules":"562"},{"filePath":"876","messages":"877","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"878","messages":"879","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"880","usedDeprecatedRules":"562"},{"filePath":"881","messages":"882","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"883","messages":"884","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"885","messages":"886","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"887","messages":"888","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"889","usedDeprecatedRules":"562"},{"filePath":"890","messages":"891","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"892","messages":"893","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"894","messages":"895","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"896","messages":"897","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"898","messages":"899","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"900","messages":"901","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"902","messages":"903","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"904","messages":"905","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"906","messages":"907","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"908","messages":"909","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"910","messages":"911","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"912","messages":"913","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"914","messages":"915","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"916","messages":"917","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"918","messages":"919","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"920","messages":"921","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"922","messages":"923","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"924","usedDeprecatedRules":"562"},{"filePath":"925","messages":"926","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"927","messages":"928","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"929","messages":"930","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"931","messages":"932","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"933","usedDeprecatedRules":"562"},{"filePath":"934","messages":"935","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"936","usedDeprecatedRules":"562"},{"filePath":"937","messages":"938","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"939","usedDeprecatedRules":"562"},{"filePath":"940","messages":"941","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"942","usedDeprecatedRules":"562"},{"filePath":"943","messages":"944","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"945","usedDeprecatedRules":"562"},{"filePath":"946","messages":"947","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"948","messages":"949","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"950","usedDeprecatedRules":"562"},{"filePath":"951","messages":"952","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"953","usedDeprecatedRules":"562"},{"filePath":"954","messages":"955","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"956","usedDeprecatedRules":"562"},{"filePath":"957","messages":"958","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"959","messages":"960","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"961","usedDeprecatedRules":"562"},{"filePath":"962","messages":"963","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"964","usedDeprecatedRules":"562"},{"filePath":"965","messages":"966","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"967","messages":"968","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"969","messages":"970","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"971","messages":"972","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"973","usedDeprecatedRules":"562"},{"filePath":"974","messages":"975","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"976","usedDeprecatedRules":"562"},{"filePath":"977","messages":"978","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"979","usedDeprecatedRules":"562"},{"filePath":"980","messages":"981","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"982","usedDeprecatedRules":"562"},{"filePath":"983","messages":"984","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"985","messages":"986","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"987","messages":"988","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"989","usedDeprecatedRules":"562"},{"filePath":"990","messages":"991","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"992","usedDeprecatedRules":"562"},{"filePath":"993","messages":"994","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"995","usedDeprecatedRules":"562"},{"filePath":"996","messages":"997","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"998","usedDeprecatedRules":"562"},{"filePath":"999","messages":"1000","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1001","messages":"1002","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1003","usedDeprecatedRules":"562"},{"filePath":"1004","messages":"1005","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1006","messages":"1007","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1008","messages":"1009","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1010","messages":"1011","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1012","messages":"1013","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1014","messages":"1015","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1016","messages":"1017","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1018","messages":"1019","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1020","messages":"1021","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1022","messages":"1023","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1024","usedDeprecatedRules":"562"},{"filePath":"1025","messages":"1026","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1027","usedDeprecatedRules":"562"},{"filePath":"1028","messages":"1029","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1030","usedDeprecatedRules":"562"},{"filePath":"1031","messages":"1032","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1033","usedDeprecatedRules":"562"},{"filePath":"1034","messages":"1035","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1036","usedDeprecatedRules":"562"},{"filePath":"1037","messages":"1038","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1039","messages":"1040","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1041","messages":"1042","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1043","messages":"1044","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1045","messages":"1046","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1047","messages":"1048","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1049","messages":"1050","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1051","messages":"1052","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1053","messages":"1054","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1055","messages":"1056","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1057","messages":"1058","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1059","messages":"1060","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1061","messages":"1062","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1063","messages":"1064","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1065","usedDeprecatedRules":"562"},{"filePath":"1066","messages":"1067","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1068","usedDeprecatedRules":"562"},{"filePath":"1069","messages":"1070","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1071","messages":"1072","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1073","messages":"1074","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1075","usedDeprecatedRules":"562"},{"filePath":"1076","messages":"1077","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1078","usedDeprecatedRules":"562"},{"filePath":"1079","messages":"1080","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1081","usedDeprecatedRules":"562"},{"filePath":"1082","messages":"1083","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1084","messages":"1085","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1086","messages":"1087","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1088","messages":"1089","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1090","messages":"1091","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1092","messages":"1093","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1094","messages":"1095","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1096","messages":"1097","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1098","messages":"1099","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1100","messages":"1101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1102","messages":"1103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1104","messages":"1105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1106","messages":"1107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1108","messages":"1109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1110","messages":"1111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1112","messages":"1113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1114","messages":"1115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1116","messages":"1117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1118","messages":"1119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1120","messages":"1121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1122","messages":"1123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1124","messages":"1125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1126","messages":"1127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1128","messages":"1129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1130","messages":"1131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1132","messages":"1133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1134","messages":"1135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1136","messages":"1137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1138","messages":"1139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1140","messages":"1141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1142","messages":"1143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1144","messages":"1145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1146","messages":"1147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1148","messages":"1149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1150","messages":"1151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1152","messages":"1153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1154","messages":"1155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1156","messages":"1157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1158","messages":"1159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1160","messages":"1161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1162","usedDeprecatedRules":"562"},{"filePath":"1163","messages":"1164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1165","usedDeprecatedRules":"562"},{"filePath":"1166","messages":"1167","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1168","usedDeprecatedRules":"562"},{"filePath":"1169","messages":"1170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1171","usedDeprecatedRules":"562"},{"filePath":"1172","messages":"1173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1174","messages":"1175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1176","messages":"1177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1178","usedDeprecatedRules":"562"},{"filePath":"1179","messages":"1180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1181","messages":"1182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1183","usedDeprecatedRules":"562"},{"filePath":"1184","messages":"1185","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1186","usedDeprecatedRules":"562"},{"filePath":"1187","messages":"1188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1189"},{"filePath":"1190","messages":"1191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1192","messages":"1193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1194","messages":"1195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"562"},{"filePath":"1196","messages":"1197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1198","usedDeprecatedRules":"562"},{"filePath":"1199","messages":"1200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\react-myprojects\\hrms-demo\\src\\index.js",[],["1201","1202"],"D:\\react-myprojects\\hrms-demo\\src\\reportWebVitals.js",[],"D:\\react-myprojects\\hrms-demo\\src\\App.js",["1203"],"//import React, { useState } from \"react\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n//import { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n//import Switch from \"@material-ui/core/Switch\";\nimport { theme } from \"./components/theme\";\nimport { Loading } from \"./components/app/Loading\";\n// import {\n//   orange,\n//   lightBlue,\n//   deepPurple,\n//   deepOrange,\n// } from \"@material-ui/core/colors\";\n//import DashboardMain from \"./components/DashboardMain\";\nimport Main from \"./components/Main\";\nimport MainMenu from \"./components/MainMenu\";\n\nconst App = () => {\n  //const [darkState, setDarkState] = useState(false);\n  //const palletType = darkState ? \"dark\" : \"light\";\n  //const mainPrimaryColor = darkState ? orange[500] : lightBlue[500];\n  //const mainSecondaryColor = darkState ? deepOrange[900] : deepPurple[500];\n\n  // const darkTheme = createMuiTheme({\n  //   palette: {\n  //     type: palletType,\n  //     primary: {\n  //       main: mainPrimaryColor,\n  //     },\n  //     secondary: {\n  //       main: mainSecondaryColor,\n  //     },\n  //   },\n  // });\n  // const lightTheme = createMuiTheme({\n  //   palette: {\n  //     type: palletType,\n  //     primary: {\n  //       main: \"#4dabf5\",\n  //     },\n  //     secondary: {\n  //       main: \"#f73378\",\n  //     },\n  //   },\n  // });\n\n  // const handleThemeChange = () => {\n  //   setDarkState(!darkState);\n  // };\n\n  return (\n    <ChakraProvider theme={theme}>\n      {/* <ThemeProvider theme={lightTheme}> */}\n      <CssBaseline />\n      <div>\n        <Loading />\n        <MainMenu />\n      </div>\n      {/* <Switch checked={darkState} onChange={handleThemeChange} /> */}\n\n      {/* </ThemeProvider> */}\n    </ChakraProvider>\n  );\n};\n\nexport default App;\n","D:\\react-myprojects\\hrms-demo\\src\\context\\employees_context.js",[],"D:\\react-myprojects\\hrms-demo\\src\\context\\dailyallowances_context.js",[],"D:\\react-myprojects\\hrms-demo\\src\\context\\leaves_context.js",[],"D:\\react-myprojects\\hrms-demo\\src\\context\\expenses_context.js",[],"D:\\react-myprojects\\hrms-demo\\src\\context\\tables_context.js",[],"D:\\react-myprojects\\hrms-demo\\src\\context\\payslips_context.js",[],"D:\\react-myprojects\\hrms-demo\\src\\context\\trainings_context.js",[],"D:\\react-myprojects\\hrms-demo\\src\\context\\auth_context.js",[],"D:\\react-myprojects\\hrms-demo\\src\\actions.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\Main.js",["1204"],"import React from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\n//import {  useHistory } from \"react-router-dom\";\r\nimport LoginForm from \"./LoginForm\";\r\n//import DashboardMain from \"./DashboardMain\";\r\nimport DashboardMain from \"./DashboardMain\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\n//import { useAuthContext } from \"../context/auth_context\";\r\n//import { useEmployees } from \"./employees/useEmployees\";\r\n\r\nconst Main = () => {\r\n  //const history = useHistory();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  //const { currentUser } = useAuthContext();\r\n  //const [role, setRole] = useState(\"\");\r\n  // const SwitchCase = () => {\r\n  //   //onsole.log(loginLevel);\r\n  //   switch (loginLevel.loginLevel) {\r\n  //     case \"Staff\":\r\n  //       return <DashboardStaff />;\r\n  //     case \"Admin\":\r\n  //       return <DashboardAdmin />;\r\n  //     case \"OpsSpvr\":\r\n  //       return <DashboardOpsSpvr />;\r\n  //     case \"AdminManager\":\r\n  //       return <DashboardAdminManager />;\r\n  //     case \"Manager\":\r\n  //       return <DashboardManager />;\r\n  //     case \"Director\":\r\n  //       return <DashboardDirector />;\r\n  //     default:\r\n  //       return `You are not an authorised user!`;\r\n  //   }\r\n  // };\r\n\r\n  if (!loginLevel.login) {\r\n    return <LoginForm />;\r\n  } else {\r\n    return (\r\n      <div>\r\n        <DashboardMain />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Main;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\MainMenu.js",["1205","1206"],"import React from \"react\";\r\n//import {  useHistory } from \"react-router-dom\";\r\nimport { useRecoilState } from \"recoil\";\r\n//import { Button } from \"@chakra-ui/react\";\r\nimport LoginForm from \"./LoginForm\";\r\nimport DashboardMain from \"./DashboardMain\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\n//import { useAuthContext } from \"../context/auth_context\";\r\n//import { useEmployees } from \"./employees/useEmployees\";\r\n\r\nconst Main = () => {\r\n  //const history = useHistory();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  //const { currentUser } = useAuthContext();\r\n  //const [role, setRole] = useState(\"\");\r\n  const SwitchCase = () => {\r\n    //console.log(loginLevel);\r\n    // switch (loginLevel.loginLevel) {\r\n    //   case \"Staff\":\r\n    //     return <DashboardStaff />;\r\n    //   case \"Admin\":\r\n    //     return <DashboardAdmin />;\r\n    //   case \"OpsSpvr\":\r\n    //     return <DashboardOpsSpvr />;\r\n    //   case \"AdminManager\":\r\n    //     return <DashboardAdminManager />;\r\n    //   case \"Manager\":\r\n    //     return <DashboardManager />;\r\n    //   case \"Director\":\r\n    //     return <DashboardDirector />;\r\n    //   default:\r\n    //     return \"You are not authorised user!\";\r\n    // }\r\n  };\r\n\r\n  if (!loginLevel.login) {\r\n    return <LoginForm />;\r\n  } else {\r\n    return (\r\n      <div>\r\n        <DashboardMain />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Main;\r\n","D:\\react-myprojects\\hrms-demo\\src\\utils\\firebase.js",[],"D:\\react-myprojects\\hrms-demo\\src\\utils\\constants.js",[],"D:\\react-myprojects\\hrms-demo\\src\\reducers\\employees_reducer.js",[],"D:\\react-myprojects\\hrms-demo\\src\\reducers\\dailyallowances_reducer.js",[],"D:\\react-myprojects\\hrms-demo\\src\\reducers\\expenses_reducer.js",[],"D:\\react-myprojects\\hrms-demo\\src\\reducers\\leaves_reducer.js",[],"D:\\react-myprojects\\hrms-demo\\src\\reducers\\tables_reducer.js",[],"D:\\react-myprojects\\hrms-demo\\src\\reducers\\trainings_reducer.js",[],"D:\\react-myprojects\\hrms-demo\\src\\reducers\\payslips_reducer.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\app\\Loading.tsx",[],["1207","1208"],"D:\\react-myprojects\\hrms-demo\\src\\components\\LoginForm.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\DashboardMain.js",["1209","1210","1211"],"D:\\react-myprojects\\hrms-demo\\src\\components\\data\\atomdata.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\theme\\index.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\SigninForm.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\Example6.js",["1212","1213","1214","1215"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport * as emailjs from \"emailjs-com\";\r\nimport axios from \"axios\";\r\nimport clsx from \"clsx\";\r\n//import Table from \"../helpers/TableContainer\";\r\nimport { Box, Image } from \"@chakra-ui/react\";\r\n//import Paper from \"@material-ui/core/Paper\";\r\n//import { Cloudinary, Transformation } from \"@cloudinary/base\";\r\n// import {Image ,\r\n//   AdvancedImage,\r\n//   accessibility,\r\n//   responsive,\r\n// } from \"@cloudinary/react\";\r\n// Import required actions.\r\n//import { thumbnail, scale } from \"@cloudinary/base/actions/resize\";\r\n//import { byRadius } from \"@cloudinary/base/actions/roundCorners\";\r\n//import { sepia } from \"@cloudinary/base/actions/effect\";\r\n//import { source } from \"@cloudinary/base/actions/overlay\";\r\n//import { opacity, brightness } from \"@cloudinary/base/actions/adjust\";\r\n//import { byAngle } from \"@cloudinary/base/actions/rotate\";\r\n//import { format } from \"@cloudinary/base/actions/delivery\";\r\n// Import required qualifiers.\r\n//import { face } from \"@cloudinary/base/qualifiers/focusOn\";\r\n//import { focusOn } from \"@cloudinary/base/qualifiers/gravity\";\r\n//import { image } from \"@cloudinary/base/qualifiers/source\";\r\n//import { Position } from \"@cloudinary/base/qualifiers/position\";\r\n//import { southEast } from \"@cloudinary/base/qualifiers/compass\";\r\n//import { compass } from \"@cloudinary/base/qualifiers/gravity\";\r\n//import { png } from \"@cloudinary/base/qualifiers/format\";\r\n\r\n//const drawerWidth = 240;\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\n\r\nconst Example = () => {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const [data, setData] = useState([]);\r\n  // const myCld = new Cloudinary({ cloudName: \"dlmzwvakr\" });\r\n  // const myImage = myCld.image(\"sample\");\r\n  const [emailstatus, setEmailStatus] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    axios(\"http://api.tvmaze.com/search/shows?q=girls\")\r\n      .then((res) => {\r\n        setData(res.data);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }, []);\r\n\r\n  // Apply the transformation.\r\n  // myImage\r\n  //   .resize(thumbnail().width(150).height(150).gravity(focusOn(face()))) // Crop the image.\r\n  //   .roundCorners(byRadius(20)) // Round the corners.\r\n  //   .effect(sepia()) // Apply a sepia effect.\r\n  //   .overlay(\r\n  //     // Overlay the Cloudinary logo.\r\n  //     source(\r\n  //       image(\"cloudinary_icon_blue\").transformation(\r\n  //         new Transformation()\r\n  //           .resize(scale(50)) // Resize the logo.\r\n  //           .adjust(opacity(60)) // Adjust the opacity of the logo.\r\n  //           .adjust(brightness(200))\r\n  //       ) // Adjust the brightness of the logo.\r\n  //     ).position(\r\n  //       new Position().gravity(compass(southEast())).offsetX(5).offsetY(5)\r\n  //     ) // Position the logo.\r\n  //   )\r\n  //   .rotate(byAngle(10)) // Rotate the result.\r\n  //   .delivery(format(png())); // Deliver as PNG. */\r\n\r\n  const columns = useMemo(() => [\r\n    {\r\n      Header: \"TV Show\",\r\n      columns: [\r\n        {\r\n          Header: \"Name\",\r\n          accessor: \"show.name\",\r\n        },\r\n        {\r\n          Header: \"Language\",\r\n          accessor: \"show.language\",\r\n        },\r\n        {\r\n          Header: \"Official Site\",\r\n          accessor: \"show.officialSite\",\r\n          Cell: ({ cell: { value } }) =>\r\n            value ? <a href={value}>{value}</a> : \"-\",\r\n        },\r\n        {\r\n          Header: \"Status\",\r\n          accessor: \"show.status\",\r\n        },\r\n        {\r\n          Header: \"Premiered\",\r\n          accessor: \"show.premiered\",\r\n          Cell: ({ cell: { value } }) => value || \"-\",\r\n        },\r\n        {\r\n          Header: \"Time\",\r\n          accessor: \"show.schedule.time\",\r\n          Cell: ({ cell: { value } }) => value || \"-\",\r\n        },\r\n      ],\r\n    },\r\n  ]);\r\n\r\n  const handleButtonClick = () => {\r\n    var data = {\r\n      to_name: \"pvchin\",\r\n      to_email: \"pvchinbn@gmail.com\",\r\n      message: \"This is a reminder!!\",\r\n      cc_to: \"pvchinbn@yahoo.com\",\r\n    };\r\n\r\n    emailjs.send(SERVICE_ID, TEMPLATE_ID, data, USER_ID).then(\r\n      function (response) {\r\n        console.log(response.status, response.text);\r\n        setEmailStatus(\"success\");\r\n      },\r\n      function (err) {\r\n        console.log(err);\r\n        setEmailStatus(\"failure\");\r\n      }\r\n    );\r\n    console.log(\"email\", emailstatus);\r\n    if (emailstatus === \"success\") {\r\n      toast({\r\n        title: \"Invalid email or password!\",\r\n        status: \"warning\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <paper className={fixedHeightPaper} style={{ backgroundColor: \"white\" }}>\r\n      <section className={classes.section}>\r\n        {/* <Image\r\n          cloudName=\"dlmzwvakr\"\r\n          secure=\"true\"\r\n          upload_preset=\"advtrade\"\r\n          publicId=\"smartsecurity-ss3_d21ecw.jpg\"\r\n        >\r\n          <Transformation\r\n            width=\"400\"\r\n            height=\"250\"\r\n            gravity=\"face\"\r\n            crop=\"thumb\"\r\n          />\r\n        </Image> */}\r\n        {/* <div>\r\n          <AdvancedImage cldImg={myImage} />\r\n        </div>{\" \"} */}\r\n\r\n        <Image\r\n          boxSize=\"200px\"\r\n          src=\"https://res.cloudinary.com/dlmzwvakr/image/upload/v1626538637/advtrade/smartsecurity-ss3_d21ecw.jpg\"\r\n          alt=\"Dan Abramov\"\r\n        />\r\n        <div className=\"App\">\r\n          <h1>\r\n            <center>React Table Demo</center>\r\n          </h1>\r\n          {/* <Table columns={columns} data={data} /> */}\r\n          <button onClick={handleButtonClick}>Send Email</button>\r\n        </div>\r\n      </section>\r\n    </paper>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  container: {\r\n    margin: 0,\r\n    padding: 0,\r\n    width: \"80vw\",\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"repeat(auto-fill,250px)\",\r\n    gridAutoRows: \"10px\",\r\n    position: \"absolute\",\r\n    left: \"50%\",\r\n    transform: \"translateX(-50%)\",\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"primary\",\r\n  },\r\n  fixedHeight: {\r\n    height: 800,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(10),\r\n    // display: \"flex\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n    border: \"1px solid\",\r\n    width: \"100%\",\r\n    color: \"primary\",\r\n    bcakgroundColor: \"black\",\r\n  },\r\n  card: {\r\n    backgroundColor: \"black\",\r\n  },\r\n  section: {\r\n    width: \"90vw\",\r\n    margin: \"5rem auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n  },\r\n  underline: {\r\n    width: \"5rem\",\r\n    height: \"0.25rem\",\r\n    marginBottom: \"1.25rem\",\r\n    background: \"var(--clr-primary-5)\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n  },\r\n  title: {\r\n    marginbottom: \"4rem\",\r\n    textAlign: \"center\",\r\n  },\r\n  jobscenter: {\r\n    width: \"80vw\",\r\n    margin: \"0 auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n    flexDirection: \"row\",\r\n  },\r\n  btncontainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    marginBottom: \"4rem\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  jobbtn: {\r\n    background: \"transparent\",\r\n    borderColor: \"transparent\",\r\n    textTransform: \"capitalize\",\r\n    fontSize: \"1.25rem\",\r\n    letterSpacing: \"var(--spacing)\",\r\n    margin: \"0 0.5rem\",\r\n    transition: \"var(--transition)\",\r\n    cursor: \"pointer\",\r\n    padding: \"0.25rem 0\",\r\n    lineHeight: \"1\",\r\n    outlineColor: \"var(--clr-primary-10)\",\r\n    \"&:hover\": {\r\n      color: \"var(--clr-primary-5)\",\r\n      boxShadow: \"0 2px var(--clr-primary-5)\",\r\n    },\r\n  },\r\n  activebtn: {\r\n    color: \"var(--clr-primary-5)\",\r\n    boxShadow: \"0 2px var(--clr-primary-5)\",\r\n  },\r\n  jobinfo: {\r\n    fontWeight: \"400\",\r\n  },\r\n}));\r\n\r\nexport default Example;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleEmployeeStaff.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\SideDrawer.js",["1216"],"import React from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport {\r\n  //RecoilRoot,\r\n  //atom,\r\n  //selector,\r\n  useRecoilState,\r\n  //useRecoilValue,\r\n  //useSetRecoilState,\r\n} from \"recoil\";\r\n\r\n//import MenuListItems from \"./MenuListItems\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport MenuListItemsStaff from \"./MenuListItemsStaff\";\r\nimport MenuListItemsAdmin from \"./MenuListItemsAdmin\";\r\nimport MenuListItemsOpsSpvr from \"./MenuListItemsOpsSpvr\";\r\nimport MenuListItemsAdminManager from \"./MenuListItemsAdminManager\";\r\nimport MenuListItemsManager from \"./MenuListItemsManager\";\r\nimport MenuListItemsDirector from \"./MenuListItemsDirector\"\r\n//import headerlogo from \"../assets/headerlogo.png\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst SideDrawer = ({ HandleDrawerOpen, handleDrawerClose, open }) => {\r\n  const classes = useStyles();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n\r\n  const SwitchCase = () => {\r\n  \r\n    switch (loginLevel.loginLevel) {\r\n      case \"Staff\":\r\n        return <MenuListItemsStaff />;\r\n      case \"Admin\":\r\n        return <MenuListItemsAdmin />;\r\n      case \"OpsSpvr\":\r\n        return <MenuListItemsOpsSpvr />;\r\n      case \"AdminManager\":\r\n        return <MenuListItemsAdminManager />;\r\n      case \"Manager\":\r\n        return <MenuListItemsManager />;\r\n      case \"Director\":\r\n        return <MenuListItemsDirector />;\r\n      default:\r\n        return \"You are not authorised user!\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        {/* \"flex-end\" */}\r\n\r\n        <div className={classes.toolbarIcon}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </div>\r\n\r\n        <Divider />\r\n        <List>\r\n          <SwitchCase />\r\n        </List>\r\n      </Drawer>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      //changing the sidebar hide width\r\n      width: theme.spacing(7),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n  image: {\r\n    width: 200,\r\n    height: 1150,\r\n  },\r\n  img: {\r\n    margin: \"auto\",\r\n    display: \"block\",\r\n    maxWidth: \"100%\",\r\n    maxHeight: \"100%\",\r\n  },\r\n}));\r\n\r\nexport default SideDrawer;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleLeave.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\SingleDailyAllowance.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\SingleExpense.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\SingleDailyAllowsDetlsStaff.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\BatchDailyAllowances.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\SinglePayslip.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\SingleEmployee.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\SingleDailyAllowsDetls.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\Payrun.js",["1217","1218","1219"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport MaterialTable from \"material-table\";\r\nimport clsx from \"clsx\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  Paper,\r\n  Grid,\r\n  Icon,\r\n  Divider,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  Box,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  //Select,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\n// import {\r\n//   Input,\r\n//   InputGroup,\r\n//   InputLeftAddon,\r\n//   NumberInput,\r\n//   NumberInputField,\r\n//   NumberInputStepper,\r\n//   NumberIncrementStepper,\r\n//   NumberDecrementStepper,\r\n//   Stack,\r\n//} from \"@chakra-ui/react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\nimport { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\nimport { payrunState, payrunIdState } from \"./data/atomdata\";\r\n//import { usePayrun } from \"./payrun/usePayrun\";\r\nimport { useCurrency } from \"./currency/useCurrency\";\r\n//import { useExpenses } from \"./expenses/useExpenses\";\r\nimport UpdateCurrency from \"./CurrencyTable\";\r\n//import { usePayslipsBatch } from \"./payslips/usePayslipsBatch\";\r\n\r\n//const drawerWidth = 240;\r\n\r\nconst columns = [\r\n  {\r\n    title: \"NAME\",\r\n    field: \"name\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      width: 280,\r\n      maxWidth: 280,\r\n    },\r\n  },\r\n];\r\n\r\n// const selectmonths = [\r\n//   { mth: \"January\" },\r\n//   { mth: \"February\" },\r\n//   { mth: \"March\" },\r\n//   { mth: \"April\" },\r\n//   { mth: \"May\" },\r\n//   { mth: \"June\" },\r\n//   { mth: \"July\" },\r\n//   { mth: \"August\" },\r\n//   { mth: \"September\" },\r\n//   { mth: \"October\" },\r\n//   { mth: \"November\" },\r\n//   { mth: \"December\" },\r\n// ];\r\n\r\nconst Payrun = () => {\r\n  let navigate = useNavigate();\r\n  //let date = new Date();\r\n  //let longMonth = date.toLocaleString(\"en-us\", { month: \"long\" });\r\n\r\n  const classes = useStyles();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  //const { payrun } = usePayrun();\r\n  //const { payslipsbatch, psbpayrunId, setPSBPayrunId } = usePayslipsBatch();\r\n  const { currency } = useCurrency();\r\n  //const { expenses, setPayrunId } = useExpensesPayrun();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [loadPaybatch, setLoadPaybatch] = useState(false);\r\n  const { loadEmployees, employees } = useEmployeesContext();\r\n  const { loadUnpaidExpenses,  unpaidexpenses, updateExpense } =\r\n    useExpensesContext();\r\n  const { unpaiddailyallows, loadUnpaidDailyAllows, updateDailyAllowance } =\r\n    useDailyAllowancesContext();\r\n  const {\r\n    addPayrun,\r\n    getPayrun,\r\n    payrun,\r\n    payrun_loading,\r\n    addPayslip,\r\n    resetPayslipsData,\r\n    singlebatch_payslip_loading,\r\n    setPayslipPeriod,\r\n  } = usePayslipsContext();\r\n  const [input, setInput] = useRecoilState(payrunState);\r\n  const [payrunid, setPayrunId] = useRecoilState(payrunIdState);\r\n  const [alert, setAlert] = useState(false);\r\n  const [error] = useState(false);\r\n  const [errornoselect, setErrornoselect] = useState(false);\r\n  const [isPayrunExist, setIsPayrunExist] = useState(false);\r\n  const [isSubmit, setIsSubmit] = useState(false);\r\n\r\n  //filter regisned employees\r\n  const allemployees = employees.filter((r) => !r.hasresigned && !r.nonpayroll)\r\n\r\n  useEffect(() => {\r\n    if (!payrun_loading) {\r\n      setLoadPaybatch(false);\r\n    }\r\n  }, [loadPaybatch]);\r\n\r\n  function formatDate(string) {\r\n    var options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\r\n    return new Date(string).toLocaleDateString(\"en-GB\", options);\r\n  }\r\n\r\n  function formatPayrun() {\r\n    // const yy =\r\n    //   input.fromdate.substring(0, 4) + \"-\" + input.fromdate.substring(5, 7);\r\n    // const mm = input.fromdate.substring(5, 7);\r\n    // const d = input.fromdate;\r\n  }\r\n\r\n  const payrunExists = (data) => {\r\n    return payrun.some(function (el) {\r\n      return el.payrun === data;\r\n    });\r\n  };\r\n  const handleChange = (e) => {\r\n    setInput({ ...input, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handlePayrunSubmit = (e) => {\r\n    e.preventDefault();\r\n    setPayrunId(\"\");\r\n    var count = allemployees.reduce((acc, r) => {\r\n      if (r.tableData.checked) {\r\n        return acc + 1;\r\n      } else {\r\n        return acc;\r\n      }\r\n    }, 0);\r\n    //console.log(\"count\", count);\r\n    if (count === 0) {\r\n      setErrornoselect(true);\r\n      setTimeout(() => {\r\n        setErrornoselect(false);\r\n      }, 3000);\r\n      return null;\r\n    }\r\n\r\n    const period =\r\n      formatDate(input.fromdate) + \" - \" + formatDate(input.todate);\r\n    const payrundata =\r\n      input.fromdate.substring(0, 4) + \"-\" + input.fromdate.substring(5, 7);\r\n    setInput({\r\n      ...input,\r\n      period: period,\r\n      payrun: payrundata,\r\n      status: \"New\",\r\n    });\r\n    formatPayrun();\r\n    setPayslipPeriod(payrundata);\r\n    const isExist = payrunExists(payrundata);\r\n\r\n    if (isExist) {\r\n      //console.log(\"exist\");\r\n      setIsPayrunExist(true);\r\n      setIsSubmit(false);\r\n      setAlert(true);\r\n    } else {\r\n      //console.log(\"add\");\r\n      checkSelectedEmployees(period, payrundata);\r\n      add_Payrun(period, payrundata);\r\n      setIsPayrunExist(false);\r\n      setAlert(true);\r\n      setIsSubmit(true);\r\n      setLoadPaybatch(true);\r\n    }\r\n  };\r\n\r\n  const checkSelectedEmployees = (period, payrun) => {\r\n    //console.log(\"payrun\", payrun, period);\r\n    var exp = 0,\r\n      allows = 0,\r\n      tmpbasicsalary = 0,\r\n      tmptotalallows = 0,\r\n      tmptotalTAP = 0,\r\n      tmptotalSCP = 0,\r\n      //tmpsiteallows = 0,\r\n      //tmpexpsclaims = 0,\r\n      tmpnettpay = 0,\r\n      tmpcurrrate = 0,\r\n      tmpbasicsalarybnd = 0,\r\n      tmptotalallowsbnd = 0,\r\n      tmptotalTAPbnd = 0,\r\n      tmptotalSCPbnd = 0,\r\n      tmpsiteallowsbnd = 0,\r\n      tmpexpsclaimsbnd = 0,\r\n      tmpnettpaybnd = 0;\r\n\r\n    resetPayslipsData();\r\n    allemployees &&\r\n      allemployees.forEach((emp, index) => {\r\n        exp = 0;\r\n        allows = 0;\r\n        tmpbasicsalary = 0;\r\n        tmptotalallows = 0;\r\n        tmptotalTAP = 0;\r\n        tmptotalSCP = 0;\r\n        tmpnettpay = 0;\r\n        tmpcurrrate = 0;\r\n        tmpbasicsalarybnd = 0;\r\n        tmptotalallowsbnd = 0;\r\n        tmptotalTAPbnd = 0;\r\n        tmpsiteallowsbnd = 0;\r\n        tmpexpsclaimsbnd = 0;\r\n        tmptotalSCPbnd = 0;\r\n        tmpnettpaybnd = 0;\r\n\r\n        if (emp.tableData.checked) {\r\n          exp = 0;\r\n          if (unpaidexpenses) {\r\n            unpaidexpenses\r\n              .filter((r) => r.empid === emp.id)\r\n              .map((i) => {\r\n                updateExpense({ id: i.id, payrun: payrun });\r\n                return (exp = exp + i.amount);\r\n              });\r\n          }\r\n          allows = 0;\r\n          if (unpaiddailyallows) {\r\n            unpaiddailyallows\r\n              .filter((r) => r.empid === emp.id)\r\n              .map((i) => {\r\n                updateDailyAllowance({ id: i.id, payrun: payrun });\r\n                return (allows = allows + i.amount);\r\n              });\r\n          }\r\n\r\n          const {\r\n            id,\r\n            name,\r\n            bank_name,\r\n            bank_acno,\r\n            basic_salary,\r\n            salary_currency,\r\n            tap_acno,\r\n            scp_acno,\r\n            tap_checkbox,\r\n          } = emp;\r\n\r\n          tmpbasicsalary = basic_salary;\r\n\r\n          if (salary_currency && salary_currency !== \"BND\") {\r\n            const table = currency\r\n              .filter((r) => r.currency === salary_currency)\r\n              .map((rec) => {\r\n                return { ...rec };\r\n              });\r\n            tmpcurrrate = table[0].rate;\r\n          } else {\r\n            tmpcurrrate = 1;\r\n          }\r\n\r\n          //console.log(\"USD\", table, basic_salary, tmpbasicsalary);\r\n          //tmptotalallows = allows + exp;\r\n          tmptotalTAP = tap_checkbox ? Math.ceil(tmpbasicsalary * 0.05) : 0;\r\n          tmptotalSCP = tap_checkbox\r\n            ? Math.round((tmpbasicsalary + Number.EPSILON) * 0.035 * 100) / 100\r\n            : 0;\r\n          if (tmptotalSCP > 98) {\r\n            tmptotalSCP = 98;\r\n          }\r\n          tmpnettpay =\r\n            tmpbasicsalary +\r\n            allows +\r\n            exp +\r\n            tmptotalallows -\r\n            tmptotalTAP -\r\n            tmptotalSCP;\r\n\r\n          tmpbasicsalarybnd =\r\n            Math.round((basic_salary + Number.EPSILON) * tmpcurrrate * 100) /\r\n            100;\r\n\r\n          tmptotalTAPbnd =\r\n            Math.round((tmptotalTAP + Number.EPSILON) * tmpcurrrate * 100) /\r\n            100;\r\n          tmptotalSCPbnd =\r\n            Math.round((tmptotalSCP + Number.EPSILON) * tmpcurrrate * 100) /\r\n            100;\r\n          tmpnettpaybnd =\r\n            Math.round((tmpnettpay + Number.EPSILON) * tmpcurrrate * 100) / 100;\r\n          tmpsiteallowsbnd =\r\n            Math.round((allows + Number.EPSILON) * tmpcurrrate * 100) / 100;\r\n          tmpexpsclaimsbnd =\r\n            Math.round((exp + Number.EPSILON) * tmpcurrrate * 100) / 100;\r\n\r\n          tmpnettpaybnd =\r\n            tmpbasicsalarybnd +\r\n            tmpsiteallowsbnd +\r\n            tmpexpsclaimsbnd -\r\n            tmptotalTAPbnd -\r\n            tmptotalSCPbnd;\r\n\r\n          const data = {\r\n            name: name,\r\n            period: period,\r\n            pay_date: input.pay_date,\r\n            payrun: payrun,\r\n            bank_name: bank_name,\r\n            bank_acno: bank_acno,\r\n            salary_currency: salary_currency ? salary_currency : \"BND\",\r\n            currency_rate: tmpcurrrate,\r\n            tap_acno: tap_acno,\r\n            scp_acno: scp_acno,\r\n            tap_checkbox: tap_checkbox,\r\n            empid: id,\r\n            status: \"Pending\",\r\n            allows_type1: \"Site Allowances\",\r\n            allows_type1amt: allows,\r\n            allows_type2: \"Expenses Claims\",\r\n            allows_type2amt: exp,\r\n            allows_type3: \" \",\r\n            allows_type3amt: 0,\r\n            allows_type4: \" \",\r\n            allows_type4amt: 0,\r\n            allows_type5: \" \",\r\n            allows_type5amt: 0,\r\n            allows_type6: \" \",\r\n            allows_type6amt: 0,\r\n            allows_type7: \" \",\r\n            allows_type7amt: 0,\r\n            allows_type8: \" \",\r\n            allows_type8amt: 0,\r\n            deducts_type1: \" \",\r\n            deducts_type1amt: 0,\r\n            deducts_type2: \" \",\r\n            deducts_type2amt: 0,\r\n            deducts_type3: \" \",\r\n            deducts_type3amt: 0,\r\n            deducts_type4: \" \",\r\n            deducts_type4amt: 0,\r\n            deducts_type5: \" \",\r\n            deducts_type5amt: 0,\r\n            deducts_type6: \" \",\r\n            deducts_type6amt: 0,\r\n            deducts_type7: \" \",\r\n            deducts_type7amt: 0,\r\n            deducts_type8: \" \",\r\n            deducts_type8amt: 0,\r\n\r\n            wages: tmpbasicsalary,\r\n            tap_amount: tmptotalTAP,\r\n            scp_amount: tmptotalSCP,\r\n            total_allowances: tmptotalallows,\r\n            total_deductions: 0,\r\n            site_allows: allows,\r\n            expenses_claims: exp,\r\n            nett_pay: tmpnettpay,\r\n\r\n            wages_bnd: tmpbasicsalarybnd,\r\n            site_allows_bnd: tmpsiteallowsbnd,\r\n            expenses_claims_bnd: tmpexpsclaimsbnd,\r\n            total_allowances_bnd: tmptotalallowsbnd,\r\n            total_deductions_bnd: 0,\r\n            tap_amount_bnd: tmptotalTAPbnd,\r\n            scp_amount_bnd: tmptotalSCPbnd,\r\n            nett_pay_bnd: tmpnettpaybnd,\r\n          };\r\n          addPayslip({ ...data });\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleNext = () => {\r\n    navigate(\"/payrunbatch\");\r\n  };\r\n\r\n  const add_Payrun = (period, payrun) => {\r\n    //update payrun\r\n    addPayrun({\r\n      pay_freq: input.payfreq,\r\n      from_date: input.fromdate,\r\n      to_date: input.todate,\r\n      pay_date: input.paydate,\r\n      period: period,\r\n      payrun: payrun,\r\n      status: \"Pending\",\r\n    });\r\n    getPayrun();\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadEmployees();\r\n    loadUnpaidExpenses();\r\n    loadUnpaidDailyAllows();\r\n    getPayrun();\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   loadUnpaidDailyAllows();\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   console.log(\"useEffect here\", input.payrun);\r\n\r\n  //   // getSingleBatchPayslip(input.payrun);\r\n  //   if (singlebatchpayslip) {\r\n  //     checkSelectedEmployees(input.period, input.payrun);\r\n  //     setLoadPaybatch(false);\r\n  //   }\r\n  // }, [loadPaybatch]);\r\n\r\n  //   useEffect(() => {\r\n  //     if (input.period && input.payrun) {\r\n  //       //add_Payrun();\r\n\r\n  //       setAlert(true);\r\n  //     }\r\n  //   }, [input]);\r\n\r\n  return (\r\n    <Paper className={fixedHeightPaper} style={{ backgroundColor: \"659dbd\" }}>\r\n      <section className={classes.section}>\r\n        <Grid\r\n          direction=\"row\"\r\n          container\r\n          spacing={1}\r\n          // style={{ border: \"1px solid white\" }}\r\n        >\r\n          <Grid\r\n            container\r\n            item\r\n            sm={3}\r\n            style={{ border: \"1px solid black\" }}\r\n            direction=\"column\"\r\n            align=\"left\"\r\n          >\r\n            <article className={classes.jobinfo}>\r\n              <h2>Pay Run</h2>\r\n              <form onSubmit={handlePayrunSubmit}>\r\n                <div>\r\n                  {/* <InputLabel\r\n                    htmlFor=\"deduct-customized-native-simple\"\r\n                    className={classes.formLabel}\r\n                  >\r\n                    Copy From\r\n                  </InputLabel>\r\n                  <NativeSelect\r\n                    name=\"copyfrom\"\r\n                    value={\"New\"}\r\n                    style={{\r\n                      padding: 4,\r\n                      marginLeft: 5,\r\n                      width: \"100%\",\r\n                      textAlign: \"left\",\r\n                    }}\r\n                    onChange={(e) => handleChange(e)}\r\n                  >\r\n                    <option value=\"\">New</option>\r\n                    {payrun.map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.payrun}>\r\n                          {row.payrun}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </NativeSelect> */}\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Pay Frequency\"\r\n                    variant=\"filled\"\r\n                    required\r\n                    //defaultValue=\"Monthly\"\r\n                    style={{ width: \"100%\" }}\r\n                    name=\"payfreq\"\r\n                    value={input.payfreq}\r\n                    onChange={(e) => handleChange(e)}\r\n                    select\r\n                  >\r\n                    {/* <MenuItem value=\"Weekly\">Weekly</MenuItem> */}\r\n                    <option value=\"Monthly\">Monthly</option>\r\n                  </TextField>\r\n                </div>\r\n                {/* <div>\r\n                  <InputLabel\r\n                    htmlFor=\"deduct-customized-native-simple\"\r\n                    className={classes.formLabel}\r\n                  >\r\n                    Month\r\n                  </InputLabel>\r\n                  <NativeSelect\r\n                    name=\"selectmonth\"\r\n                    defaultValue={longMonth}\r\n                    // value={input.selectmonth}\r\n                    style={{\r\n                      padding: 4,\r\n                      marginLeft: 5,\r\n                      width: \"100%\",\r\n                      textAlign: \"left\",\r\n                    }}\r\n                    onChange={(e) => handleChange(e)}\r\n                  >\r\n                    {selectmonths.map((row, i) => {\r\n                      return (\r\n                        <option key={i} value={row.mth}>\r\n                          {row.mth}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </NativeSelect>\r\n                </div> */}\r\n                <div>\r\n                  <TextField\r\n                    label=\"From Date\"\r\n                    variant=\"filled\"\r\n                    name=\"fromdate\"\r\n                    type=\"date\"\r\n                    value={input.fromdate}\r\n                    required\r\n                    style={{ width: \"100%\" }}\r\n                    onChange={(e) => handleChange(e)}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"To Date\"\r\n                    variant=\"filled\"\r\n                    type=\"date\"\r\n                    name=\"todate\"\r\n                    value={input.todate}\r\n                    required\r\n                    onChange={(e) => handleChange(e)}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Payment Date\"\r\n                    variant=\"filled\"\r\n                    type=\"date\"\r\n                    name=\"paydate\"\r\n                    value={input.paydate}\r\n                    required\r\n                    style={{ width: \"100%\" }}\r\n                    onChange={(e) => handleChange(e)}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <div>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.button}\r\n                      onClick={onOpen}\r\n                      disabled={isSubmit}\r\n                    >\r\n                      Currency Exchange Table\r\n                    </Button>\r\n                  </div>\r\n                  <div>\r\n                    <Button\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.button}\r\n                    >\r\n                      Submit <Icon className={classes.rightIcon}>send</Icon>\r\n                    </Button>\r\n\r\n                    {alert && !isPayrunExist && (\r\n                      <Button\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.button}\r\n                        onClick={handleNext}\r\n                      >\r\n                        Next <Icon className={classes.rightIcon}>send</Icon>\r\n                      </Button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  {alert && !isPayrunExist && !singlebatch_payslip_loading && (\r\n                    <h3>New Payrun being added!</h3>\r\n                  )}\r\n                  {alert && isPayrunExist && (\r\n                    <h3>This payrun already existed!</h3>\r\n                  )}\r\n                </div>\r\n                <div>\r\n                  {error && <h3>This Payrun period already existed!</h3>}\r\n                  {errornoselect && <h3>You must select employees!</h3>}\r\n                </div>\r\n              </form>\r\n            </article>\r\n          </Grid>\r\n          <Divider\r\n            orientation=\"vertical\"\r\n            flexItem\r\n            style={{ background: \"white\" }}\r\n          />\r\n          <Grid\r\n            container\r\n            item\r\n            sm={3}\r\n            style={{ border: \"1px solid black\" }}\r\n            align=\"right\"\r\n          >\r\n            <Box h=\"500\" w=\"full\" overflow=\"scroll\">\r\n              <MaterialTable\r\n                columns={columns}\r\n                //data={employees.filter((r) => !r.hasresigned && !r.nonpayroll)}\r\n                data={allemployees}\r\n                title=\"Employee Listing\"\r\n                options={{\r\n                  filtering: false,\r\n                  search: false,\r\n                  toolbar: true,\r\n                  selection: true,\r\n                  paging: false,\r\n                  pageSize: 10,\r\n                  headerStyle: {\r\n                    backgroundColor: \"#90CDF4\",\r\n                    color: \"primary\",\r\n                  },\r\n                  showTitle: true,\r\n                  // selectionProps: rowData => {\r\n                  //   rowData.tableData.checked = true\r\n                  // }\r\n                }}\r\n              />\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n        <Modal isOpen={isOpen} onClose={onClose}>\r\n          <ModalOverlay />\r\n          <ModalContent>\r\n            <ModalHeader>Currency Table</ModalHeader>\r\n            <ModalCloseButton />\r\n            <ModalBody>\r\n              <Box>\r\n                <UpdateCurrency />\r\n                {/* <Stack spacing={4}>\r\n                  <InputGroup>\r\n                    <InputLeftAddon children=\"USD\" />\r\n                    <Input type=\"text\" placeholder=\"USD Rate\" />\r\n                  </InputGroup>\r\n                  <InputGroup>\r\n                    <InputLeftAddon children=\"MYR\" />\r\n                    <Input type=\"text\" placeholder=\"MYR Rate\" />\r\n                  </InputGroup>\r\n                </Stack> */}\r\n              </Box>\r\n            </ModalBody>\r\n\r\n            <ModalFooter>\r\n              <Button colorScheme=\"blue\" mr={3} onClick={onClose}>\r\n                Close\r\n              </Button>\r\n            </ModalFooter>\r\n          </ModalContent>\r\n        </Modal>\r\n      </section>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  container: {\r\n    margin: 0,\r\n    padding: 0,\r\n    width: \"80vw\",\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"repeat(auto-fill,250px)\",\r\n    gridAutoRows: \"10px\",\r\n    position: \"absolute\",\r\n    left: \"50%\",\r\n    transform: \"translateX(-50%)\",\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"primary\",\r\n  },\r\n  fixedHeight: {\r\n    height: 800,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(10),\r\n    // display: \"flex\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n    border: \"1px solid\",\r\n    width: \"100%\",\r\n    color: \"primary\",\r\n    bcakgroundColor: \"black\",\r\n  },\r\n  card: {\r\n    backgroundColor: \"black\",\r\n  },\r\n  section: {\r\n    width: \"95vw\",\r\n    margin: \"5rem auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n  },\r\n  underline: {\r\n    width: \"5rem\",\r\n    height: \"0.25rem\",\r\n    marginBottom: \"1.25rem\",\r\n    background: \"var(--clr-primary-5)\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n  },\r\n  title: {\r\n    marginbottom: \"4rem\",\r\n    textAlign: \"center\",\r\n  },\r\n  jobscenter: {\r\n    width: \"80vw\",\r\n    margin: \"0 auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n    flexDirection: \"row\",\r\n  },\r\n  btncontainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    marginBottom: \"4rem\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  jobbtn: {\r\n    background: \"transparent\",\r\n    borderColor: \"transparent\",\r\n    textTransform: \"capitalize\",\r\n    fontSize: \"1.25rem\",\r\n    letterSpacing: \"var(--spacing)\",\r\n    margin: \"0 0.5rem\",\r\n    transition: \"var(--transition)\",\r\n    cursor: \"pointer\",\r\n    padding: \"0.25rem 0\",\r\n    lineHeight: \"1\",\r\n    outlineColor: \"var(--clr-primary-10)\",\r\n    \"&:hover\": {\r\n      color: \"var(--clr-primary-5)\",\r\n      boxShadow: \"0 2px var(--clr-primary-5)\",\r\n    },\r\n  },\r\n  activebtn: {\r\n    color: \"var(--clr-primary-5)\",\r\n    boxShadow: \"0 2px var(--clr-primary-5)\",\r\n  },\r\n  jobinfo: {\r\n    fontWeight: \"400\",\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  formLabel: {\r\n    fontSize: 12,\r\n    textAlign: \"left\",\r\n    marginLeft: 8,\r\n    marginTop: 5,\r\n  },\r\n}));\r\n\r\nexport default Payrun;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\UserAccessTable.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\Payrunbatch.js",["1220","1221","1222","1223","1224","1225"],"import React, { useState, useEffect } from \"react\";\r\n//import { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport * as emailjs from \"emailjs-com\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { FiSave, FiCheckCircle, FiMail } from \"react-icons/fi\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\n//import { Button} from \"@material-ui/core\"\r\nimport {\r\n  Box,\r\n  Button,\r\n  Divider,\r\n  Grid,\r\n  GridItem,\r\n  Flex,\r\n  Heading,\r\n  Stack,\r\n  VStack,\r\n  //Spacer,\r\n  Tabs,\r\n  TabList,\r\n  TabPanels,\r\n  Tab,\r\n  TabPanel,\r\n  Table,\r\n  //Thead,\r\n  Tbody,\r\n  //Tfoot,\r\n  //Tr,\r\n  //Th,\r\n  //Td,\r\n  //TableCaption,\r\n  Text,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  //ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  //Wrap,\r\n  //WrapItem,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport PayForm from \"./PayForm\";\r\nimport PaySummary from \"./PaySummary\";\r\n//import PrintPaySummary from \"./PrintPaySummary\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\nimport { usePayrun } from \"./payrun/usePayrun\";\r\nimport { useUpdatePayrun } from \"./payrun/useUpdatePayrun\";\r\nimport { usePayslipsBatch } from \"./payslips/usePayslipsBatch\";\r\nimport { useUpdatePayslips } from \"./payslips/useUpdatePayslips\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport {\r\n  payrunState,\r\n  //paydataState,\r\n  payrunIdState,\r\n  payrunStatusState,\r\n} from \"./data/atomdata\";\r\n//import { useRecoilValue } from \"recoil\";\r\n\r\nconst PrintPaySummary = React.lazy(() => import(\"./PrintPaySummary\"));\r\n\r\n//const drawerWidth = 240;\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\n\r\nconst initial_formdata = {\r\n  name: \"\",\r\n  period: \"\",\r\n  pay_date: null,\r\n  payrun: \"\",\r\n  bank_name: \"\",\r\n  bank_acno: \"\",\r\n  salary_currency: \"BND\",\r\n  currency_rate: 1,\r\n  tap_acno: \"\",\r\n  scp_acno: \"\",\r\n  tap_checkbox: false,\r\n  empid: \"\",\r\n  status: \"\",\r\n  allows_type1: \"\",\r\n  allows_type1amt: \"\",\r\n  allows_type2: \"\",\r\n  allows_type2amt: \"\",\r\n  allows_type3: \" \",\r\n  allows_type3amt: 0,\r\n  allows_type4: \"\",\r\n  allows_type4amt: 0,\r\n  allows_type5: \" \",\r\n  allows_type5amt: 0,\r\n  allows_type6: \" \",\r\n  allows_type6amt: 0,\r\n  allows_type7: \" \",\r\n  allows_type7amt: 0,\r\n  allows_type8: \" \",\r\n  allows_type8amt: 0,\r\n  deducts_type1: \" \",\r\n  deducts_type1amt: 0,\r\n  deducts_type2: \" \",\r\n  deducts_type2amt: 0,\r\n  deducts_type3: \" \",\r\n  deducts_type3amt: 0,\r\n  deducts_type4: \" \",\r\n  deducts_type4amt: 0,\r\n  deducts_type5: \" \",\r\n  deducts_type5amt: 0,\r\n  deducts_type6: \" \",\r\n  deducts_type6amt: 0,\r\n  deducts_type7: \" \",\r\n  deducts_type7amt: 0,\r\n  deducts_type8: \" \",\r\n  deducts_type8amt: 0,\r\n\r\n  wages: 0,\r\n  tap_amount: 0,\r\n  scp_amount: 0,\r\n  total_allowances: 0,\r\n  total_deductions: 0,\r\n  site_allows: 0,\r\n  expenses_claims: 0,\r\n  nett_pay: 0,\r\n\r\n  wages_bnd: 0,\r\n  site_allows_bnd: 0,\r\n  expenses_claims_bnd: 0,\r\n  total_allowances_bnd: 0,\r\n  total_deductions_bnd: 0,\r\n  tap_amount_bnd: 0,\r\n  scp_amount_bnd: 0,\r\n  nett_pay_bnd: 0,\r\n};\r\n\r\nconst months = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\",\r\n];\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      width: 280,\r\n      maxWidth: 280,\r\n    },\r\n  },\r\n];\r\n\r\nconst Payrunbatch = () => {\r\n  let navigate = useNavigate();\r\n  //const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  //const componentRef = useRef();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n  //const { register, handleSubmit, control, setValue, reset, watch } = useForm();\r\n\r\n  const {\r\n    //payrun,\r\n    //getSingleBatchPayslip,\r\n    //singlebatchpayslip,\r\n    payslip_period,\r\n    //updatePayslip,\r\n    //updatePayrun,\r\n    //singlebatch_payslip_loading,\r\n    //singlebatch_payslip_error,\r\n  } = usePayslipsContext();\r\n  const { payslipsbatch, psbpayrunId, setPSBPayrunId } = usePayslipsBatch();\r\n  const { employees } = useEmployees();\r\n  const { payrun } = usePayrun();\r\n  const updatePayslip = useUpdatePayslips();\r\n  const updatePayrun = useUpdatePayrun();\r\n  const { loadPayitems, payitems } = useTablesContext();\r\n  const [payrundata, setPayrundata] = useRecoilState(payrunState);\r\n  const [payrunId] = useRecoilState(payrunIdState);\r\n  const [payrunstatus, setPayrunStatus] = useRecoilState(payrunStatusState);\r\n  const [loadFormdata, setLoadFormdata] = useState(false);\r\n  const [loadUpdatedata, setLoadUpdatedata] = useState(false);\r\n  const [formdata, setFormdata] = useState(initial_formdata);\r\n  const [rowindex, setRowIndex] = useState(0);\r\n  const [emponclick, setEmponclick] = useState(false);\r\n  //const [showSumm, setShowSumm] = useState(false);\r\n  const [isCalc, setIsCalc] = useState(false);\r\n  const [isStart, setIsStart] = useState(true);\r\n  const [isShow, setIsShow] = useState(false);\r\n  const [isUpdPayslip, setIsUpdPayslip] = useState(false);\r\n  const [tabno, setTabno] = useState(0);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const singlebatchpayslip = payslipsbatch;\r\n\r\n  useEffect(() => {\r\n    loadPayitems();\r\n    setEmponclick(true);\r\n    // getSingleBatchPayslip(payslip_period);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setRowIndex(0);\r\n    // handleEmpButtonClick(0);\r\n    setEmponclick(false);\r\n  }, [emponclick]);\r\n\r\n  useEffect(() => {\r\n    setLoadFormdata(false);\r\n  }, [loadUpdatedata]);\r\n\r\n  useEffect(() => {\r\n    setPSBPayrunId(payslip_period);\r\n    //setIsCalc(true);\r\n  }, [psbpayrunId]);\r\n\r\n  useEffect(() => {\r\n    calcPayrunTotals();\r\n    setIsCalc(false);\r\n  }, [isCalc]);\r\n\r\n  useEffect(() => {\r\n    saveIndividualPayslips()\r\n    setIsUpdPayslip(false)\r\n  },[isUpdPayslip])\r\n\r\n  useEffect(() => {\r\n    if (tabno === 1) {\r\n      setIsShow(true);\r\n    } else {\r\n      setIsShow(false);\r\n    }\r\n  }, [tabno]);\r\n\r\n\r\n  // useEffect(() => {\r\n  //   handleEmpButtonClick(0);\r\n  //   setIsLoad(false);\r\n  // }, [isLoad]);\r\n\r\n  // const handleShowSumm = (e) => {\r\n  //   e.preventDefault();\r\n  //   setShowSumm(!showSumm);\r\n  // };\r\n\r\n  const sleep = (time) => {\r\n    return new Promise((resolve) => setTimeout(resolve, time));\r\n  };\r\n\r\n  const handlePrintSummary = (e) => {\r\n    e.preventDefault();\r\n    if (payrundata.status === \"Verified\" || payrundata.status === \"Approved\") {\r\n      exportPdfTable(singlebatchpayslip);\r\n    } else {\r\n      // save individual payslips\r\n      saveIndividualPayslips();\r\n      // save payrun\r\n      updatePayrun({\r\n        id: payrunId,\r\n        totalpayroll: payrundata.totalpayroll,\r\n        totalwages: payrundata.totalwages,\r\n        totaltap: payrundata.totaltap,\r\n        totalscp: payrundata.totalscp,\r\n        totalallows: payrundata.totalallows,\r\n        totaldeducts: payrundata.totaldeducts,\r\n        totalsitesallows: payrundata.totalsiteallows,\r\n        totalexpensesclaims: payrundata.totalexpensesclaims,\r\n      });\r\n      exportPdfTable(singlebatchpayslip);\r\n    }\r\n  };\r\n\r\n  const exportPdfTable = (singlebatchpayslip) => {\r\n    PrintPaySummary((singlebatchpayslip = { singlebatchpayslip }));\r\n  };\r\n\r\n  const handleSavePayslips = (e) => {\r\n    e.preventDefault();\r\n\r\n    //calcPayrunTotals();\r\n    // eslint-disable-next-line no-lone-blocks\r\n    // {\r\n    //   singlebatchpayslip.forEach((rec) => {\r\n    //     const { id, rec_id, tableData, ...fields } = rec;\r\n    //     updatePayslip({ id, ...fields });\r\n    //   });\r\n    // }\r\n    // save individual payslips\r\n    saveIndividualPayslips();\r\n\r\n    //update payrun\r\n    handleSavePayrun();\r\n    toast({\r\n      title: \"Changes have been saved!\",\r\n      status: \"success\",\r\n    });\r\n    navigate(\"/payslip\");\r\n  };\r\n\r\n  const saveIndividualPayslips = () => {\r\n    singlebatchpayslip.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        const { id, rec_id, tableData, ...fields } = rec;\r\n        console.log(\"updatepayslip\", rec);\r\n        updatePayslip({ id, ...fields });\r\n        //uncheck\r\n        const data = rec;\r\n        data.tableData.checked = false;\r\n      }\r\n    });\r\n  };\r\n\r\n  const calcPayrunTotals = () => {\r\n    // if (!psbpayrunId) {\r\n    //   return null;\r\n    // }\r\n    const tmpbatch = singlebatchpayslip\r\n      .filter((r) => r.payrun === payslip_period)\r\n      .map((rec) => {\r\n        return { ...rec };\r\n      });\r\n    //console.log(\"recalc\", tmpbatch);\r\n\r\n    const totalpayroll = tmpbatch.reduce((acc, item) => {\r\n      const value = isNaN(item.nett_pay_bnd) ? 0 : item.nett_pay_bnd;\r\n      return acc + Math.round((value + Number.EPSILON) * 100) / 100;\r\n    }, 0);\r\n    const totalwages = tmpbatch.reduce((acc, item, index) => {\r\n      const value = isNaN(item.wages_bnd) ? 0 : item.wages_bnd;\r\n      return acc + Math.round((value + Number.EPSILON) * 100) / 100;\r\n    }, 0);\r\n    const totaltap = tmpbatch.reduce((acc, item) => {\r\n      const value = isNaN(item.tap_amount_bnd) ? 0 : item.tap_amount_bnd;\r\n      return acc + Math.round((value + Number.EPSILON) * 100) / 100;\r\n    }, 0);\r\n\r\n    const totalscp = tmpbatch.reduce((acc, item) => {\r\n      const value = isNaN(item.scp_amount_bnd) ? 0 : item.scp_amount_bnd;\r\n      return acc + Math.round((value + Number.EPSILON) * 100) / 100;\r\n    }, 0);\r\n\r\n    const totalallows = tmpbatch.reduce((acc, item) => {\r\n      const value = isNaN(item.total_allowances_bnd)\r\n        ? 0\r\n        : item.total_allowances_bnd;\r\n      return acc + Math.round((value + Number.EPSILON) * 100) / 100;\r\n    }, 0);\r\n\r\n    const totaldeducts = tmpbatch.reduce((acc, item) => {\r\n      const value = isNaN(item.total_deductions_bnd)\r\n        ? 0\r\n        : item.total_deductions_bnd;\r\n      return acc + Math.round((value + Number.EPSILON) * 100) / 100;\r\n    }, 0);\r\n\r\n    const totalsiteallows = tmpbatch.reduce((acc, item) => {\r\n      const value = isNaN(item.site_allows_bnd) ? 0 : item.site_allows_bnd;\r\n      return acc + Math.round((value + Number.EPSILON) * 100) / 100;\r\n    }, 0);\r\n\r\n    const totalexpensesclaims = tmpbatch.reduce((acc, item) => {\r\n      const value = isNaN(item.expenses_claims_bnd)\r\n        ? 0\r\n        : item.expenses_claims_bnd;\r\n      return acc + Math.round((value + Number.EPSILON) * 100) / 100;\r\n    }, 0);\r\n\r\n    setPayrundata(\r\n      (prev) =>\r\n        (prev = {\r\n          ...payrundata,\r\n          totalpayroll: totalpayroll,\r\n          totalwages: totalwages,\r\n          totaltap: totaltap,\r\n          totalscp: totalscp,\r\n          totalallows: totalallows,\r\n          totaldeducts: totaldeducts,\r\n          totalsiteallows: totalsiteallows,\r\n          totalexpensesclaims: totalexpensesclaims,\r\n        })\r\n    );\r\n  };\r\n\r\n  const handleSavePayrun = () => {\r\n    if (payrundata.status === \"Verified\" || payrundata.status === \"Approved\") {\r\n      toast({\r\n        title: `This payroll batch has been ${payrundata.status}! No changes can be made!`,\r\n        status: \"warning\",\r\n      });\r\n      return <div></div>;\r\n    }\r\n\r\n    const tmppayrun = payrun.filter((r) => r.payrun === payslip_period);\r\n    //console.log(\"paysave\", tmppayrun[0].id);\r\n    // eslint-disable-next-line no-lone-blocks\r\n    //console.log(\"paybatch\", payslip_period, payrundata);\r\n    updatePayrun({\r\n      id: tmppayrun[0].id,\r\n      totalpayroll: payrundata.totalpayroll,\r\n      totalwages: payrundata.totalwages,\r\n      totaltap: payrundata.totaltap,\r\n      totalscp: payrundata.totalscp,\r\n      totalallows: payrundata.totalallows,\r\n      totaldeducts: payrundata.totaldeducts,\r\n      totalsitesallows: payrundata.totalsiteallows,\r\n      totalexpensesclaims: payrundata.totalexpensesclaims,\r\n    });\r\n    navigate(\"/payslip\");\r\n  };\r\n\r\n  const handleVerifyPayslips = (e) => {\r\n    e.preventDefault();\r\n    setPayrundata((prev) => (prev = { ...payrundata, status: \"Verified\" }));\r\n    setPayrunStatus(\"Verified\");\r\n    // save individual payslips\r\n    saveIndividualPayslips();\r\n    // save payrun\r\n    updatePayrun({\r\n      id: payrunId,\r\n      status: \"Verified\",\r\n      totalpayroll: payrundata.totalpayroll,\r\n      totalwages: payrundata.totalwages,\r\n      totaltap: payrundata.totaltap,\r\n      totalscp: payrundata.totalscp,\r\n      totalallows: payrundata.totalallows,\r\n      totaldeducts: payrundata.totaldeducts,\r\n      totalsitesallows: payrundata.totalsiteallows,\r\n      totalexpensesclaims: payrundata.totalexpensesclaims,\r\n    });\r\n    toast({\r\n      title: \"Batch has been verified!\",\r\n      status: \"success\",\r\n    });\r\n  };\r\n\r\n  const handleEmpButtonClick = (index) => {\r\n    const paydata = singlebatchpayslip[index];\r\n    //setFormdata(prev => prev = initial_formdata);\r\n    setFormdata((prev) => (prev = { ...initial_formdata, ...paydata }));\r\n    //setFormdata({ ...initial_formdata, ...paydata });\r\n    setLoadFormdata(true);\r\n    setIsUpdPayslip(true)\r\n  };\r\n\r\n  const handleTabChange = (index) => {\r\n    setTabno(index);\r\n    if (index === 1) {\r\n      calcPayrunTotals();\r\n    }\r\n    setIsShow(false);\r\n  };\r\n\r\n  \r\n\r\n  const SentEmailModal = () => {\r\n    return (\r\n      <Box>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={payslipsbatch}\r\n          title=\"Employees\"\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: true,\r\n            selection: true,\r\n            pageSize: 10,\r\n            headerStyle: {\r\n              backgroundColor: \"#daad86\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    colorScheme=\"blue\"\r\n                    isDisabled={payrundata.status !== \"Approve\" ? true : false}\r\n                    onClick={() => handleSentEmail()}\r\n                    leftIcon={<FiMail color=\"white\" fontSize=\"1.5em\" />}\r\n                  >\r\n                    Email\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  const handleSentEmail = (data) => {\r\n    const mth = months[payslip_period.substring(6, 7)];\r\n    const yr = payslip_period.substring(0, 4);\r\n\r\n    payslipsbatch.forEach((pay) => {\r\n      if (pay.tableData.checked) {\r\n        const { name, empid } = pay;\r\n        const emp = employees\r\n          .filter((r) => r.id === empid)\r\n          .map((rec) => {\r\n            return { ...rec };\r\n          });\r\n\r\n        var emaildata = {\r\n          to_name: name,\r\n          to_email: emp[0].email,\r\n          message: `Your payroll for the month of ${mth} ${yr} has been transfered. Please login in to view your payslip!`,\r\n        };\r\n\r\n        emailjs.send(SERVICE_ID, TEMPLATE_ID, emaildata, USER_ID).then(\r\n          function (response) {\r\n            console.log(response.status, response.text);\r\n            toast({\r\n              title: `Email has sent successfully to ${emaildata.to_email}!`,\r\n              status: \"success\",\r\n            });\r\n          },\r\n          function (err) {\r\n            console.log(err);\r\n            toast({\r\n              title: `Email has fail to send to ${emaildata.to_email}!`,\r\n              status: \"warning\",\r\n            });\r\n          }\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      marginLeft={4}\r\n      marginTop={70}\r\n      w=\"98%\"\r\n      h=\"100%\"\r\n      style={{ backgroundColor: \"lightcyan\" }}\r\n    >\r\n      <VStack>\r\n        <Grid templateRows=\"repeat(1,1fr)\" templateColumns=\"repeat(1,1fr)\">\r\n          <GridItem rowSpan={1} colSpan={1}>\r\n            <Grid templateRows=\"repeat(1,1fr)\" templateColumns=\"repeat(10,1fr)\">\r\n              <GridItem rowSpan={1} colSpan={2}></GridItem>\r\n              <GridItem rowSpan={1} colSpan={4}>\r\n                <Box textAlign=\"center\" alignItems=\"center\">\r\n                  <Heading pl=\"10\" pt={2}>\r\n                    Payroll\r\n                  </Heading>\r\n                </Box>\r\n              </GridItem>\r\n              <GridItem rowSpan={1} colSpan={4} pt={0}>\r\n                <Box pt=\"2\" pr={5} alignItems=\"right\" align=\"right\">\r\n                  <Stack spacing={4} direction=\"row\" align=\"center\" pl={150}>\r\n                    <Button\r\n                      width=\"800px\"\r\n                      colorScheme=\"blue\"\r\n                      isDisabled={\r\n                        payrundata.status === \"Verified\" ||\r\n                        payrundata.status === \"Approved\" ||\r\n                        !isShow\r\n                          ? true\r\n                          : false\r\n                      }\r\n                      onClick={(e) => handleSavePayslips(e)}\r\n                      leftIcon={<FiSave color=\"white\" fontSize=\"1.5em\" />}\r\n                    >\r\n                      Save/Exit\r\n                    </Button>\r\n                    <Button\r\n                      isDisabled={!isShow}\r\n                      width=\"500px\"\r\n                      colorScheme=\"blue\"\r\n                      onClick={(e) => handlePrintSummary(e)}\r\n                      leftIcon={<FiSave color=\"white\" fontSize=\"1.5em\" />}\r\n                    >\r\n                      Print\r\n                    </Button>\r\n\r\n                    <Button\r\n                      width=\"500px\"\r\n                      colorScheme=\"blue\"\r\n                      isDisabled={\r\n                        payrundata.status === \"Verified\" ||\r\n                        payrundata.status === \"Approved\" ||\r\n                        payrundata.status === \"New\" ||\r\n                        !isShow\r\n                          ? true\r\n                          : false\r\n                      }\r\n                      onClick={(e) => handleVerifyPayslips(e)}\r\n                      leftIcon={\r\n                        <FiCheckCircle color=\"white\" fontSize=\"1.5em\" />\r\n                      }\r\n                    >\r\n                      Verify\r\n                    </Button>\r\n                    <Button\r\n                      width=\"500px\"\r\n                      colorScheme=\"blue\"\r\n                      isDisabled={\r\n                        payrundata.status !== \"Approved\" ? true : false\r\n                      }\r\n                      onClick={onOpen}\r\n                      leftIcon={<FiMail color=\"white\" fontSize=\"1.5em\" />}\r\n                    >\r\n                      Email\r\n                    </Button>\r\n                  </Stack>\r\n                </Box>\r\n              </GridItem>\r\n            </Grid>\r\n            <Divider\r\n              style={{ border: \"1px solid lightgrey\" }}\r\n              orientation=\"horizontal\"\r\n              colorScheme=\"red\"\r\n              variant=\"solid\"\r\n            />\r\n          </GridItem>\r\n          <GridItem rowSpan={1} colSpan={1}>\r\n            <Tabs defaultIndex={0} onChange={(index) => handleTabChange(index)}>\r\n              <TabList marginLeft={4}>\r\n                <Tab>\r\n                  <Box>\r\n                    <Heading size=\"sm\">Details</Heading>\r\n                  </Box>\r\n                </Tab>\r\n                <Tab>\r\n                  <Box>\r\n                    <Heading size=\"sm\">Summary</Heading>\r\n                  </Box>\r\n                </Tab>\r\n              </TabList>\r\n              <TabPanels>\r\n                <TabPanel>\r\n                  <Grid\r\n                    templateRows=\"repeat(1,1fr)\"\r\n                    templateColumns=\"repeat(10,1fr)\"\r\n                  >\r\n                    <GridItem colSpan={2}>\r\n                      <Box textAlign=\"center\" p={4}>\r\n                        <Heading size=\"sm\" alignItems=\"center\">\r\n                          Employees\r\n                        </Heading>\r\n                      </Box>\r\n                      <Divider backgroundColor=\"white\" />\r\n                      <Box\r\n                        h=\"550\"\r\n                        border=\"2px solid white\"\r\n                        backgroundColor=\"cyan.100\"\r\n                        overflow=\"scroll\"\r\n                      >\r\n                        {/* {payslipsbatch &&\r\n                      payslipsbatch.map((item, index) => {\r\n                        return (\r\n                          <div>\r\n                            <Button\r\n                              className={classes.empbtn}\r\n                              variant=\"outlined\"\r\n                              // ${index === value && \"activebtn\"}\r\n                              onClick={(e) => {\r\n                                setRowIndex(index);\r\n                                handleEmpButtonClick(index);\r\n                              }}\r\n                            >\r\n                              <div key={item.id}> {item.name}</div>\r\n                            </Button>\r\n                            <Divider\r\n                              variant=\"fullWidth\"\r\n                              className={classes.divider}\r\n                            />\r\n                          </div>\r\n                        );\r\n                      })} */}\r\n                        <Table variant=\"simple\">\r\n                          {/* <Thead>\r\n                        <Tr>\r\n                          <Th>Employees</Th>\r\n                        </Tr>\r\n                      </Thead> */}\r\n                          <Tbody>\r\n                            {payslipsbatch.map((item, index) => {\r\n                              return (\r\n                                <div>\r\n                                  <Button\r\n                                    //className={classes.empbtn}\r\n                                    fontSize={{\r\n                                      base: \"10px\",\r\n                                      md: \"10px\",\r\n                                      lg: \"12px\",\r\n                                      xl: \"16px\",\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    height={[\r\n                                      `${\r\n                                        item.name.length > 30 ? \"60px\" : \"40px\"\r\n                                      }`,\r\n                                      \"40px\",\r\n                                    ]}\r\n                                    style={{\r\n                                      whiteSpace: \"normal\",\r\n                                      wordWrap: \"break-word\",\r\n                                    }}\r\n                                    // ${index === value && \"activebtn\"}\r\n                                    onClick={(e) => {\r\n                                      setRowIndex(index);\r\n                                      setIsStart(false);\r\n                                      handleEmpButtonClick(index);\r\n                                    }}\r\n                                  >\r\n                                    <Text align=\"left\">{item.name}</Text>\r\n                                  </Button>\r\n                                  <Divider backgroundColor=\"white\" />\r\n                                </div>\r\n                              );\r\n                            })}\r\n                          </Tbody>\r\n                        </Table>\r\n                      </Box>\r\n                    </GridItem>\r\n                    <GridItem colSpan={8}>\r\n                      <PayForm\r\n                        formdata={formdata}\r\n                        setFormdata={setFormdata}\r\n                        loadFormdata={loadFormdata}\r\n                        setLoadFormdata={setLoadFormdata}\r\n                        payitems={payitems}\r\n                        setLoadUpdatedata={setLoadUpdatedata}\r\n                        singlebatchpayslip={singlebatchpayslip}\r\n                        rowindex={rowindex}\r\n                        isCalc={isCalc}\r\n                        isStart={isStart}\r\n                        setIsStart={setIsStart}\r\n                        setIsCalc={setIsCalc}\r\n                       \r\n                      />\r\n                    </GridItem>\r\n                  </Grid>\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <PaySummary\r\n                    payrundata={payrundata}\r\n                    singlebatchpayslip={singlebatchpayslip}\r\n                  />\r\n                </TabPanel>\r\n              </TabPanels>\r\n            </Tabs>\r\n          </GridItem>\r\n        </Grid>\r\n      </VStack>\r\n      <Modal isOpen={isOpen} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          {/* <ModalHeader>Sending EMail Notifications</ModalHeader> */}\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            <SentEmailModal />\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button colorScheme=\"blue\" mr={3} onClick={onClose}>\r\n              Close\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </Flex>\r\n  );\r\n};\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   root: {\r\n//     flexGrow: 1,\r\n//   },\r\n//   button: {\r\n//     margin: theme.spacing(1),\r\n//   },\r\n//   container: {\r\n//     margin: 0,\r\n//     padding: 0,\r\n//     width: \"80vw\",\r\n//     display: \"grid\",\r\n//     gridTemplateColumns: \"repeat(auto-fill,250px)\",\r\n//     gridAutoRows: \"10px\",\r\n//     position: \"absolute\",\r\n//     left: \"50%\",\r\n//     transform: \"translateX(-50%)\",\r\n//     justifyContent: \"center\",\r\n//     backgroundColor: \"primary\",\r\n//   },\r\n//   fixedHeight: {\r\n//     height: 800,\r\n//   },\r\n//   paper: {\r\n//     paddingTop: theme.spacing(10),\r\n//     // display: \"flex\",\r\n//     display: \"flex\",\r\n//     overflow: \"auto\",\r\n//     flexDirection: \"column\",\r\n//     border: \"1px solid\",\r\n//     width: \"100%\",\r\n//     color: \"primary\",\r\n//     bcakgroundColor: \"white\",\r\n//   },\r\n//   card: {\r\n//     backgroundColor: \"white\",\r\n//   },\r\n//   section: {\r\n//     width: \"80vw\",\r\n//     margin: \"1rem auto\",\r\n//     maxWidth: \"var(--max-width)\",\r\n//   },\r\n//   underline: {\r\n//     width: \"5rem\",\r\n//     height: \"0.25rem\",\r\n//     marginBottom: \"1.25rem\",\r\n//     background: \"var(--clr-primary-5)\",\r\n//     marginLeft: \"auto\",\r\n//     marginRight: \"auto\",\r\n//   },\r\n//   title: {\r\n//     marginbottom: \"4rem\",\r\n//     textAlign: \"center\",\r\n//   },\r\n//   empscenter: {\r\n//     width: \"80vw\",\r\n//     margin: \"0 auto\",\r\n//     maxWidth: \"var(--max-width)\",\r\n//     flexDirection: \"row\",\r\n//   },\r\n//   empcontainer: {\r\n//     display: \"flex\",\r\n//     flexDirection: \"row\",\r\n//     justifyContent: \"center\",\r\n//     marginBottom: \"4rem\",\r\n//     flexWrap: \"wrap\",\r\n//   },\r\n//   empbtn: {\r\n//     background: \"transparent\",\r\n//     borderColor: \"transparent\",\r\n//     textTransform: \"capitalize\",\r\n//     fontSize: \"1rem\",\r\n//     letterSpacing: \"var(--spacing)\",\r\n//     margin: \"0 0.5rem\",\r\n//     transition: \"var(--transition)\",\r\n//     cursor: \"pointer\",\r\n//     padding: \"0.25rem 0\",\r\n//     lineHeight: \"1\",\r\n//     outlineColor: \"var(--clr-primary-10)\",\r\n//     \"&:hover\": {\r\n//       color: \"var(--clr-primary-5)\",\r\n//       boxShadow: \"0 2px var(--clr-primary-5)\",\r\n//     },\r\n//   },\r\n//   activebtn: {\r\n//     color: \"var(--clr-primary-5)\",\r\n//     boxShadow: \"0 2px var(--clr-primary-5)\",\r\n//   },\r\n//   empinfo: {\r\n//     fontWeight: \"400\",\r\n//   },\r\n//   divider: {\r\n//     // Theme Color, or use css color in quote\r\n//     background: \"white\",\r\n//   },\r\n//   textField: {\r\n//     marginLeft: theme.spacing(1),\r\n//     marginRight: theme.spacing(1),\r\n//     width: 350,\r\n//   },\r\n// }));\r\n\r\nexport default Payrunbatch;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\ApprovalManager.js",["1226"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\nimport { Grid,  Container, Box } from \"@material-ui/core\";\r\n//import CardLayout from \"../helpers/CardLayout\";\r\n//import CardLayout2 from \"../helpers/CardLayout2\";\r\nimport CardLayout3 from \"../helpers/CardLayout3\";\r\nimport Copyright from \"./Copyright\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { useRecoilState } from \"recoil\";\r\n//import { loginLevelState } from \"./data/atomdata\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\nimport LeaveTableViewManager from \"./LeaveTableViewManager\";\r\nimport LeaveTableManager from \"./LeaveTableManager\";\r\nimport ExpenseTableView from \"./ExpenseTableView\";\r\nimport ExpenseTableManager from \"./ExpenseTableManager\";\r\nimport PayslipTableViewManager from \"./PayslipTableViewManager\";\r\nimport PayslipTableAdmin from \"./PayslipTableAdmin\";\r\nimport DailyAllowancesTableView from \"./DailyAllowancesTableView\";\r\nimport DailyAllowancesTableAdmin from \"./DailyAllowancesTableAdmin\";\r\n//import OnLeavesView from \"./OnLeavesView\";\r\n//import WPExpiryView from \"./WPExpiryView\";\r\nimport { useDailyAllowsStatus } from \"./dailyallows/useDailyAllowsStatus\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst FILTERSTRING = \"Pending\";\r\n\r\nconst EmployeeView = () => {\r\n  const classes = useStyles();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  //const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const [leavesdata, setLeavesdata] = useState([]);\r\n  const [isLeaveDialogOpen, setIsLeaveDialogOpen] = useState(false);\r\n  const [expensesdata, setExpensesdata] = useState([]);\r\n  const [isExpenseDialogOpen, setIsExpenseDialogOpen] = useState(false);\r\n  const [payslipsdata, setPayslipsdata] = useState([]);\r\n  const [isPayslipDialogOpen, setIsPayslipDialogOpen] = useState(false);\r\n  const [dailyallowancesdata, setDailyAllowancesdata] = useState([]);\r\n  const [isDailyAllowancesDialogOpen, setIsDailyAllowancesDialogOpen] =\r\n    useState(false);\r\n  const { dailyallowsstatus, setDailyAllowsStatusId } = useDailyAllowsStatus();\r\n  const { leaves, loadPendingLeaves } = useLeavesContext();\r\n  const { expenses, loadPendingExpenses } = useExpensesContext();\r\n  const {  loadPendingPayslips } = usePayslipsContext();\r\n  const {  loadPendingDailyAllowances } =\r\n    useDailyAllowancesContext();\r\n\r\n  const handleLeaveDialogOpen = () => {\r\n    setLeavesdata([]);\r\n    setLeavesdata([...leaves]);\r\n    setIsLeaveDialogOpen(true);\r\n  };\r\n\r\n  const handleLeaveDialogClose = () => {\r\n    setIsLeaveDialogOpen(false);\r\n    loadPendingLeaves(FILTERSTRING);\r\n  };\r\n\r\n  const handleExpenseDialogOpen = () => {\r\n    setExpensesdata([]);\r\n    setExpensesdata([...expenses]);\r\n    setIsExpenseDialogOpen(true);\r\n  };\r\n\r\n  const handleExpenseDialogClose = () => {\r\n    setIsExpenseDialogOpen(false);\r\n    loadPendingExpenses(FILTERSTRING);\r\n  };\r\n\r\n  const handlePayslipDialogOpen = () => {\r\n    setPayslipsdata([]);\r\n    //setPayslipsdata([...batchpayslips]);\r\n    setIsPayslipDialogOpen(true);\r\n  };\r\n\r\n  const handlePayslipDialogClose = () => {\r\n    setIsPayslipDialogOpen(false);\r\n    loadPendingPayslips(FILTERSTRING);\r\n  };\r\n\r\n  const handleDailyAllowancesDialogOpen = () => {\r\n    setDailyAllowancesdata([]);\r\n    setDailyAllowancesdata([...dailyallowsstatus]);\r\n    setIsDailyAllowancesDialogOpen(true);\r\n  };\r\n\r\n  const handleDailyAllowancesDialogClose = () => {\r\n    setIsDailyAllowancesDialogOpen(false);\r\n    loadPendingDailyAllowances(FILTERSTRING);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setDailyAllowsStatusId(\"Verified\");\r\n  },[])\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.appBarSpacer} />\r\n      <div style={{ paddingLeft: 50 }}>\r\n        {/* <h2>Welcome {loginLevel.loginUser}!</h2>\r\n        <h3>Dashboard</h3> */}\r\n      </div>\r\n      <Container maxWidth=\"lg\" className={classes.container}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={8} lg={12}>\r\n            <CardLayout3\r\n              title=\"Leaves pending for approval\"\r\n              handleClick={handleLeaveDialogOpen}\r\n            >\r\n              <LeaveTableViewManager />\r\n            </CardLayout3>\r\n          </Grid>\r\n          <Grid item xs={12} md={8} lg={12}>\r\n            <CardLayout3\r\n              title=\"Expenses pending for approval\"\r\n              handleClick={handleExpenseDialogOpen}\r\n            >\r\n              <ExpenseTableView />\r\n            </CardLayout3>\r\n          </Grid>\r\n          <Grid item xs={12} md={8} lg={12}>\r\n            <CardLayout3\r\n              title=\"Site Allowances pending for approval\"\r\n              handleClick={handleDailyAllowancesDialogOpen}\r\n            >\r\n              <DailyAllowancesTableView />\r\n            </CardLayout3>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={8} lg={12}>\r\n            <CardLayout3\r\n              title=\"Payroll pending for approval\"\r\n              handleClick={handlePayslipDialogOpen}\r\n            >\r\n              <PayslipTableViewManager />\r\n            </CardLayout3>\r\n          </Grid>\r\n        </Grid>\r\n        <Box pt={4}>\r\n          <Copyright />\r\n        </Box>\r\n        <CustomDialog\r\n          isOpen={isLeaveDialogOpen}\r\n          handleClose={handleLeaveDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <LeaveTableManager\r\n            setLeavesdata={setLeavesdata}\r\n            leavesdata={leavesdata}\r\n            handleDialogClose={handleLeaveDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isExpenseDialogOpen}\r\n          handleClose={handleExpenseDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <ExpenseTableManager\r\n            setExpensesdata={setExpensesdata}\r\n            expensesdata={expensesdata}\r\n            handleDialogClose={handleExpenseDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isPayslipDialogOpen}\r\n          handleClose={handlePayslipDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={true}\r\n          isFullwidth={false}\r\n        >\r\n          <PayslipTableAdmin\r\n            setPayslipsdata={setPayslipsdata}\r\n            payslipsdata={payslipsdata}\r\n            handleDialogClose={handlePayslipDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isDailyAllowancesDialogOpen}\r\n          handleClose={handleDailyAllowancesDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={true}\r\n          isFullwidth={false}\r\n        >\r\n          <DailyAllowancesTableAdmin\r\n            setDailyAllowancesdata={setDailyAllowancesdata}\r\n            dailyallowancesdata={dailyallowancesdata}\r\n            handleDialogClose={handleDailyAllowancesDialogClose}\r\n          />\r\n        </CustomDialog>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default EmployeeView;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\Appbanner.js",["1227"],"import React from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Button, Heading, HStack, Tooltip } from \"@chakra-ui/react\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\n//import Tooltip from \"@material-ui/core/Tooltip\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ExitToApplication from \"@material-ui/icons/ExitToApp\";\r\n//import Badge from \"@material-ui/core/Badge\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\n//import NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useUser } from \"./user/useUser\";\r\nimport App from \"../utils/firebase\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst Appbanner = ({\r\n  handleDrawerOpen,\r\n  handleDrawerClose,\r\n  handleSelect,\r\n  open,\r\n  title,\r\n}) => {\r\n  let navigate = useNavigate()\r\n  const classes = useStyles();\r\n  const { user, clearUser } = useUser();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n\r\n  const handleExit = (e) => {\r\n    e.preventDefault();\r\n    setLoginLevel({ ...loginLevel, login: false });\r\n    clearUser();\r\n    App.auth().signOut();\r\n    navigate(\"/\");\r\n  };\r\n\r\n  return (\r\n    <AppBar\r\n      position=\"absolute\"\r\n      className={clsx(classes.appBar, open && classes.appBarShift)}\r\n    >\r\n      <Toolbar className={classes.toolbar}>\r\n        <IconButton\r\n          edge=\"start\"\r\n          color=\"inherit\"\r\n          aria-label=\"open drawer\"\r\n          onClick={handleDrawerOpen}\r\n          className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n        >\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <Typography\r\n          component=\"h1\"\r\n          variant=\"h6\"\r\n          color=\"inherit\"\r\n          noWrap\r\n          className={classes.title}\r\n        >\r\n          {title}\r\n        </Typography>\r\n        {/* <Heading size=\"md\">\r\n          {title}\r\n        </Heading> */}\r\n        <HStack justifyContent=\"flex-start\" px={2}>\r\n          <Button\r\n            colorScheme=\"white\"\r\n            aria-label=\"Staff\"\r\n            onClick={() => {\r\n              navigate(\"/\");\r\n              handleSelect(\"Staff\");\r\n            }}\r\n          >\r\n            <Heading size=\"sm\">Staff</Heading>\r\n          </Button>\r\n          {(loginLevel.loginRole === 2 ||\r\n            loginLevel.loginUserId === \"admin\") && (\r\n            <Button\r\n              colorScheme=\"white\"\r\n              aria-label=\"Admin\"\r\n              onClick={() => {\r\n                navigate(\"/\");\r\n                handleSelect(\"Admin\");\r\n              }}\r\n            >\r\n              <Heading size=\"sm\">Admin</Heading>\r\n            </Button>\r\n          )}\r\n          {(loginLevel.loginRole === 3 ||\r\n            loginLevel.loginUserId === \"admin\") && (\r\n            <Button\r\n              colorScheme=\"white\"\r\n              aria-label=\"Ops Supervisor\"\r\n              onClick={() => {\r\n                navigate(\"/\");\r\n                handleSelect(\"OpsSpvr\");\r\n              }}\r\n            >\r\n              <Heading size=\"sm\">Ops Supervisor</Heading>\r\n            </Button>\r\n          )}\r\n          {(loginLevel.loginRole === 4 ||\r\n            loginLevel.loginUserId === \"admin\") && (\r\n            <Button\r\n              colorScheme=\"white\"\r\n              aria-label=\"Admin Manager\"\r\n              onClick={() => {\r\n                navigate(\"/\");\r\n                handleSelect(\"AdminManager\");\r\n              }}\r\n            >\r\n              <Heading size=\"sm\">Admin Manager</Heading>\r\n            </Button>\r\n          )}\r\n          {(loginLevel.loginRole === 5 ||\r\n            loginLevel.loginUserId === \"admin\") && (\r\n            <Button\r\n              colorScheme=\"white\"\r\n              aria-label=\"Manager\"\r\n              onClick={() => {\r\n                navigate(\"/\");\r\n                handleSelect(\"Manager\");\r\n              }}\r\n            >\r\n              <Heading size=\"sm\">Manager</Heading>\r\n            </Button>\r\n          )}\r\n          {(loginLevel.loginRole === 6 ||\r\n            loginLevel.loginUserId === \"admin\") && (\r\n            <Button\r\n              colorScheme=\"white\"\r\n              aria-label=\"Director\"\r\n              onClick={() => {\r\n                navigate(\"/\");\r\n                handleSelect(\"Director\");\r\n              }}\r\n            >\r\n              <Heading size=\"sm\">Director</Heading>\r\n            </Button>\r\n          )}\r\n        </HStack>\r\n        <HStack>\r\n          {/* <Text fontSize=\"18\"> */}\r\n          {loginLevel.loginUser && (\r\n            <Heading size=\"sm\">{loginLevel.loginEmail}!</Heading>\r\n          )}\r\n          {/* </Text> */}\r\n        </HStack>\r\n        {/* <IconButton color=\"inherit\">\r\n          <Badge badgeContent={0} color=\"secondary\">\r\n            <NotificationsIcon />\r\n          </Badge>\r\n        </IconButton> */}\r\n\r\n        <Tooltip label=\"Logout\">\r\n          <IconButton color=\"inherit\" onClick={(e) => handleExit(e)}>\r\n            <ExitToApplication />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default Appbanner;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsDirector.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeFormStaff.js",["1228","1229","1230","1231","1232"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  TextField,\r\n  Paper,\r\n  Typography,\r\n  Grid,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport CurrencyTextField from \"@unicef/material-ui-currency-textfield\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\n\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\n//import { useSingleEmployee } from \"./employees/useSingleEmployee\";\r\nimport { useUpdateEmployees } from \"./employees/useUpdateEmployees\";\r\n// import EmpFamilyStaff from \"./EmpFamilyStaff\";\r\n// import EmpEducationsStaff from \"./EmpEducationsStaff\";\r\n// import EmpExperiencesStaff from \"./EmpExperiencesStaff\";\r\nimport EmpFamily from \"./EmpFamily\";\r\nimport EmpEducations from \"./EmpEducations\";\r\nimport EmpExperiences from \"./EmpExperiences\";\r\nimport EmpTrainings from \"./EmpTrainings\";\r\nimport EmpJobhistory from \"./EmpJobhistory\"\r\nimport App from \"../utils/firebase\";\r\n\r\nconst initial_values = {\r\n  name: \"\",\r\n  birthdate: null,\r\n  empno: \"\",\r\n  gender: \"\",\r\n  ic_no: \"\",\r\n  email: \"\",\r\n  age: 0,\r\n  basic_salary: 0,\r\n  salary_currency: \"BND\",\r\n  bank_name: \"\",\r\n  bank_acno: \"\",\r\n  nationality: \"\",\r\n  address: \"\",\r\n  leave_bal: 0,\r\n  leave_bf: 0,\r\n  leave_entitled: 0,\r\n  tap_acno: \"\",\r\n  scp_acno: \"\",\r\n  date_of_join: null,\r\n  date_of_resign: null,\r\n  designation: \"\",\r\n  department: \"\",\r\n  passportno: \"\",\r\n  passport_expirydate: null,\r\n  workpermitno: \"\",\r\n  workpermit_expirydate: null,\r\n  siteallows_fee: 0,\r\n  perdiem_fee: 0,\r\n  reporting_to: \"\",\r\n  reporting_email: \"\",\r\n};\r\n\r\nconst EmployeeForm = () => {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  const { employees,setEmployeeId } = useEmployees();\r\n  //const { singleemployee, setSingleEmployeeId } = useSingleEmployee();\r\n  const updateEmployees = useUpdateEmployees();\r\n  const [empage, setEmpage] = useState(0);\r\n  const [reportemail, setReportEmail] = useState(\"\");\r\n  const { handleSubmit, control, setValue, register } = useForm();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  // const {\r\n  //   isEditing,\r\n  //   single_employee,\r\n  //   editEmployeeID,\r\n  //   getSingleEmployee,\r\n  //   single_employee_loading,\r\n  // } = useEmployeesContext();\r\n  const single_employee = employees\r\n    .filter((r) => r.id === loginLevel.loginUserId)\r\n    .map((r) => {\r\n      return { ...r };\r\n    });\r\n  const {\r\n    name,\r\n    empno,\r\n    birthdate,\r\n    ic_no,\r\n    gender,\r\n    //age,\r\n    email,\r\n    nationality,\r\n    address,\r\n    basic_salary,\r\n    salary_currency,\r\n    bank_name,\r\n    bank_acno,\r\n    tap_acno,\r\n    scp_acno,\r\n    leave_bf,\r\n    leave_entitled,\r\n    date_of_join,\r\n    date_of_resign,\r\n    designation,\r\n    department,\r\n    passportno,\r\n    passport_expirydate,\r\n    workpermitno,\r\n    workpermit_expirydate,\r\n    siteallows_fee,\r\n    perdiem_fee,\r\n    reporting_to,\r\n    reporting_email,\r\n  } = single_employee[0] || initial_values;\r\n\r\n  //console.log(\"single employee\", single_employee);\r\n\r\n  const handleReportingTo = (name) => {\r\n    const emp = employees\r\n      .filter((f) => f.name === name)\r\n      .map((r) => {\r\n        return { ...r };\r\n      });\r\n    setReportEmail(emp[0].email);\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    //console.log(\"Data\",data)\r\n    updateEmployees({ id: loginLevel.loginUserId, ...data });\r\n  };\r\n\r\n  const Reset_PW = () => {\r\n    try {\r\n      App.auth().sendPasswordResetEmail(email);\r\n      toast({\r\n        title: `Reset Password sent to ${email}!`,\r\n        status: \"success\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: `Fail to reset password on ${email}!`,\r\n        status: \"warning\",\r\n      });\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const calculateAge = (dob) => {\r\n    var today = new Date();\r\n    var birthDate = new Date(dob);\r\n    var age = today.getFullYear() - birthDate.getFullYear();\r\n    var m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      age--;\r\n    }\r\n    return age;\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   setEmployeeId(loginLevel.loginUserId);\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    let age = calculateAge(birthdate);\r\n    setEmpage(age);\r\n    setReportEmail(reporting_email);\r\n  }, []);\r\n\r\n  // if (single_employee_loading) {\r\n  //   return (\r\n  //     <div>\r\n  //       <h2>Loading... </h2>\r\n  //     </div>\r\n  //   );\r\n  //}\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <Paper className={classes.root}>\r\n          <Grid container className={classes.root} spacing={15}>\r\n            <div>\r\n              <Typography variant=\"h5\" component=\"h3\">\r\n                EMPLOYEE FORM\r\n              </Typography>\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n              >\r\n                Submit <Icon className={classes.rightIcon}>send</Icon>\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                onClick={Reset_PW}\r\n              >\r\n                Reset PW <Icon className={classes.rightIcon}>send</Icon>\r\n              </Button>\r\n            </div>\r\n          </Grid>\r\n          <Divider className={classes.divider} />\r\n          <Grid item xs={12}>\r\n            <div>\r\n              <div>\r\n                <Controller\r\n                  name=\"name\"\r\n                  control={control}\r\n                  defaultValue={name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Name\"\r\n                        id=\"standard-name\"\r\n                        defaultValue={name}\r\n                        name=\"name\"\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"empno\"\r\n                  control={control}\r\n                  defaultValue={empno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Emp No\"\r\n                        id=\"standard-empno\"\r\n                        name=\"empno\"\r\n                        defaultValue={empno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"email\"\r\n                  control={control}\r\n                  defaultValue={email}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Email\"\r\n                        id=\"standard-email\"\r\n                        name=\"email\"\r\n                        defaultValue={email}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"ic_no\"\r\n                  control={control}\r\n                  defaultValue={ic_no}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"IC No\"\r\n                        id=\"standard-icno\"\r\n                        defaultValue={ic_no}\r\n                        name=\"ic_no\"\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"birthdate\"\r\n                  control={control}\r\n                  defaultValue={birthdate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Birth Date\"\r\n                        id=\"standard-birthdate\"\r\n                        name=\"birthdate\"\r\n                        type=\"date\"\r\n                        defaultValue={birthdate}\r\n                        className={classes.textField}\r\n                        onChange={(e) => {\r\n                          onChange(e.target.value);\r\n                          let age = calculateAge(e.target.value);\r\n                          console.log(\"emp\", birthdate, age);\r\n                          setEmpage(age);\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"age\"\r\n                  control={control}\r\n                  //defaultValue={age}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Age\"\r\n                        type=\"number\"\r\n                        id=\"standard-age\"\r\n                        name=\"age\"\r\n                        value={empage}\r\n                        className={classes.textField}\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(parseInt(e.target.value, 10));\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"passportno\"\r\n                  control={control}\r\n                  defaultValue={passportno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Passport No\"\r\n                        id=\"stanrad-ppno\"\r\n                        name=\"passportno\"\r\n                        defaultValue={passportno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"passport_expirydate\"\r\n                  control={control}\r\n                  defaultValue={passport_expirydate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Passport Expiry Date\"\r\n                        id=\"standard-ppexpiry\"\r\n                        name=\"passport_expirydate\"\r\n                        type=\"date\"\r\n                        defaultValue={passport_expirydate}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"nationality\"\r\n                  control={control}\r\n                  defaultValue={nationality}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Nationality\"\r\n                        id=\"standard-nationality\"\r\n                        name=\"nationality\"\r\n                        defaultValue={nationality}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"gender\"\r\n                  control={control}\r\n                  defaultValue={gender}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Gender\"\r\n                        id=\"standard-gender\"\r\n                        name=\"gender\"\r\n                        defaultValue={gender}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        <MenuItem value=\"Male\">Male</MenuItem>\r\n                        <MenuItem value=\"Female\">Female</MenuItem>\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"address\"\r\n                  control={control}\r\n                  defaultValue={address}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Address\"\r\n                        id=\"standard-address\"\r\n                        name=\"address\"\r\n                        defaultValue={address}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <Divider className={classes.divider} />\r\n            <div>\r\n              <div>\r\n                <Controller\r\n                  name=\"basic_salary\"\r\n                  control={control}\r\n                  defaultValue={basic_salary}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <CurrencyTextField\r\n                        label=\"Basic Salary\"\r\n                        variant=\"standard\"\r\n                        defaultValue={basic_salary}\r\n                        currencySymbol=\"$\"\r\n                        outputFormat=\"number\"\r\n                        decimalCharacter=\".\"\r\n                        digitGroupSeparator=\",\"\r\n                        decimalPlaces=\"2\"\r\n                        className={classes.textField}\r\n                        id=\"standard-basicsalary\"\r\n                        name=\"basic_pay\"\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(parseFloat(e.target.value, 10));\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"salary_currency\"\r\n                  control={control}\r\n                  defaultValue={salary_currency}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Currency\"\r\n                        id=\"standard-currency\"\r\n                        name=\"salary_currency\"\r\n                        defaultValue={salary_currency}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                        select\r\n                      >\r\n                        <MenuItem value=\"BND\">BND</MenuItem>\r\n                        <MenuItem value=\"MYR\">MYR</MenuItem>\r\n                        <MenuItem value=\"USD\">USD</MenuItem>\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"siteallows_fee\"\r\n                  control={control}\r\n                  defaultValue={siteallows_fee}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <CurrencyTextField\r\n                        label=\"Site Allowances Fee\"\r\n                        variant=\"standard\"\r\n                        defaultValue={siteallows_fee}\r\n                        currencySymbol=\"$\"\r\n                        outputFormat=\"number\"\r\n                        decimalCharacter=\".\"\r\n                        digitGroupSeparator=\",\"\r\n                        decimalPlaces=\"2\"\r\n                        className={classes.textField}\r\n                        id=\"standard-siteallowances\"\r\n                        name=\"siteallows_fee\"\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(parseFloat(e.target.value, 10));\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"perdiem_fee\"\r\n                  control={control}\r\n                  defaultValue={perdiem_fee}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <CurrencyTextField\r\n                        label=\"Per Diem Fee\"\r\n                        variant=\"standard\"\r\n                        defaultValue={perdiem_fee}\r\n                        currencySymbol=\"$\"\r\n                        outputFormat=\"number\"\r\n                        decimalCharacter=\".\"\r\n                        digitGroupSeparator=\",\"\r\n                        decimalPlaces=\"2\"\r\n                        className={classes.textField}\r\n                        id=\"standard-perdiem\"\r\n                        name=\"perdiem_fee\"\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(parseFloat(e.target.value, 10));\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"bank_name\"\r\n                  control={control}\r\n                  defaultValue={bank_name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Bank Name\"\r\n                        id=\"standard-bankname\"\r\n                        name=\"bank_name\"\r\n                        defaultValue={bank_name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"bank_acno\"\r\n                  control={control}\r\n                  defaultValue={bank_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Bank Ac No\"\r\n                        id=\"standard-bankacno\"\r\n                        name=\"bank_acno\"\r\n                        defaultValue={bank_acno}\r\n                        value={bank_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  // rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"tap_acno\"\r\n                  control={control}\r\n                  defaultValue={tap_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"TAP Ac No\"\r\n                        id=\"standard-tapacno\"\r\n                        name=\"tap_acno\"\r\n                        defaultValue={tap_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"scp_acno\"\r\n                  control={control}\r\n                  defaultValue={scp_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"SCP Ac No\"\r\n                        id=\"standard-scpacno\"\r\n                        name=\"scp_acno\"\r\n                        defaultValue={scp_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"workpermitno\"\r\n                  control={control}\r\n                  defaultValue={workpermitno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Work Permit No\"\r\n                        id=\"standard-wpno\"\r\n                        name=\"workpermitno\"\r\n                        defaultValue={workpermitno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"workpermit_expirydate\"\r\n                  control={control}\r\n                  defaultValue={workpermit_expirydate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Work Permit Expiry Date\"\r\n                        id=\"standard-wpexpiry\"\r\n                        name=\"workpermit_expirydate\"\r\n                        type=\"date\"\r\n                        defaultValue={workpermit_expirydate}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <Divider className={classes.divider} />\r\n              <div>\r\n                <Controller\r\n                  name=\"date_of_join\"\r\n                  control={control}\r\n                  defaultValue={date_of_join}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Joining Date\"\r\n                        id=\"standard-joindate\"\r\n                        name=\"date_of_join\"\r\n                        type=\"date\"\r\n                        defaultValue={date_of_join}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"date_of_resign\"\r\n                  control={control}\r\n                  defaultValue={date_of_resign}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Resign Date\"\r\n                        id=\"standard-resigndate\"\r\n                        name=\"date_of_resign\"\r\n                        type=\"date\"\r\n                        defaultValue={date_of_resign}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"leave_entitled\"\r\n                  control={control}\r\n                  defaultValue={leave_entitled}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Annual Leaves Entitled\"\r\n                        id=\"standard-annualleave\"\r\n                        name=\"leave_entitled\"\r\n                        type=\"numeric\"\r\n                        defaultValue={leave_entitled}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"leave_bf\"\r\n                  control={control}\r\n                  defaultValue={leave_bf}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Leaves B/F\"\r\n                        id=\"standard-leavebal\"\r\n                        name=\"leave_bf\"\r\n                        type=\"numeric\"\r\n                        defaultValue={leave_bf}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"designation\"\r\n                  control={control}\r\n                  defaultValue={designation}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Designation\"\r\n                        id=\"standard-designation\"\r\n                        name=\"designation\"\r\n                        defaultValue={designation}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"department\"\r\n                  control={control}\r\n                  defaultValue={department}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Department\"\r\n                        id=\"standard-department\"\r\n                        name=\"department\"\r\n                        defaultValue={department}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"reporting_to\"\r\n                  control={control}\r\n                  defaultValue={reporting_to}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Reporting To\"\r\n                        id=\"standard-reportingto\"\r\n                        name=\"reporting_to\"\r\n                        defaultValue={reporting_to}\r\n                        className={classes.textField}\r\n                        onChange={(e) => {\r\n                          onChange(e.target.value);\r\n                          handleReportingTo(e.target.value);\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        <MenuItem value=\"\">None</MenuItem>\r\n                        {employees &&\r\n                          employees.map((r) => {\r\n                            return <MenuItem value={r.name}>{r.name}</MenuItem>;\r\n                          })}\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"reporting_email\"\r\n                  control={control}\r\n                  defaultValue={reportemail}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Reporting Email\"\r\n                        id=\"standard-reportingemail\"\r\n                        name=\"reporting_email\"\r\n                        defaultValue={reportemail}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <Divider className={classes.divider} />\r\n            </div>\r\n          </Grid>\r\n          <Divider />\r\n        </Paper>\r\n      </form>\r\n\r\n      <Grid item xs={12}>\r\n        <EmpJobhistory />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <EmpFamily />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <EmpEducations />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <EmpExperiences />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <EmpTrainings />\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  divider: {\r\n    padding: 4,\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 350,\r\n  },\r\n}));\r\n\r\nexport default EmployeeForm;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveForm.js",["1233","1234"],"import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  TextField,\r\n  Paper,\r\n  Typography,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport * as emailjs from \"emailjs-com\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\n//import { useEmployees } from \"./employees/useEmployees\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\n//import { useLeaves } from \"./leaves/useLeaves\";\r\nimport { useAddLeaves } from \"./leaves/useAddLeaves\";\r\n//import { useDeleteLeaves } from \"./leaves/useDeleteLeaves\";\r\nimport { useUpdateLeaves } from \"./leaves/useUpdateLeaves\";\r\n\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\n\r\n// const initial_state = {\r\n//   name: \"\",\r\n//   to_date: \"\",\r\n//   from_date: \"\",\r\n//   reason: \"\",\r\n//   status: \"Pending\",\r\n//   no_of_days: 0,\r\n//   leave_bal: 0,\r\n//   reporting_email: \"\",\r\n// };\r\n\r\nconst LeaveForm = ({\r\n  formdata,\r\n  leavestate,\r\n  setFormdata,\r\n  handleDialogClose,\r\n}) => {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  //const { employees } = useEmployees();\r\n  //const { leaves, filter, setFilter, setLeaveId } = useLeaves();\r\n  const updateLeaves = useUpdateLeaves();\r\n  const addLeaves = useAddLeaves();\r\n  //const [state, setState] = useState(initial_state);\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { handleSubmit, control } = useForm();\r\n  //const initialValues = Object.values(initial_state).join(\"\");\r\n  const { isLeaveEditing, editLeaveID } = useLeavesContext();\r\n\r\n  const handleSentEmail = (data) => {\r\n    const { from_date, to_date } = data;\r\n    //console.log(\"leave form\", loginLevel);\r\n    var emaildata = {\r\n      to_name: loginLevel.loginUser,\r\n      to_email: loginLevel.loginEmail,\r\n      message: `Your leave application from ${from_date} to ${to_date} has been successfully submitted for approval`,\r\n      cc_to: loginLevel.reporting_email,\r\n    };\r\n\r\n    emailjs.send(SERVICE_ID, TEMPLATE_ID, emaildata, USER_ID).then(\r\n      function (response) {\r\n        console.log(response.status, response.text);\r\n        toast({\r\n          title: `Email has sent successfully to ${emaildata.to_email}!`,\r\n          status: \"success\",\r\n        });\r\n      },\r\n      function (err) {\r\n        console.log(err);\r\n        toast({\r\n          title: `Email has fail to send to ${emaildata.to_email}!`,\r\n          status: \"warning\",\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    console.log(\"leave\", data);\r\n    if (isLeaveEditing) {\r\n      updateLeaves({ id: editLeaveID, ...data });\r\n      toast({\r\n        title: \"Your leave has been updated!\",\r\n        status: \"success\",\r\n      });\r\n    } else {\r\n      addLeaves({\r\n        ...data,\r\n        empid: loginLevel.loginUserId,\r\n        reporting_email: loginLevel.reporting_email,\r\n      });\r\n      handleSentEmail(data);\r\n    }\r\n\r\n    //history.push(\"/leave\");\r\n    handleDialogClose();\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   setState(initial_state);\r\n  //   setState({ ...formdata });\r\n  //   setState({ ...formdata });\r\n  //   console.log(\"laeve form\",state)\r\n  // }, [initialValues]);\r\n\r\n  return (\r\n    <div>\r\n      <Paper className={classes.root}>\r\n        <Typography variant=\"h5\" component=\"h3\">\r\n          LEAVE FORM\r\n        </Typography>\r\n        <Typography component=\"p\">Leave Application</Typography>\r\n        <Divider />\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <div>\r\n            <Controller\r\n              name=\"name\"\r\n              control={control}\r\n              defaultValue={loginLevel.loginUser}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Name\"\r\n                    id=\"margin-normal\"\r\n                    name=\"name\"\r\n                    //value={value}\r\n                    defaultValue={loginLevel.loginUser}\r\n                    className={classes.textField}\r\n                    onChange={(e) => {\r\n                      console.log(e.target.value);\r\n                      onChange(e.target.value);\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    //select\r\n                  >\r\n                    {/* {employees.map((e) => {\r\n                      return (\r\n                        <MenuItem key={e.name} value={e.name}>\r\n                          {e.name}\r\n                        </MenuItem>\r\n                      );\r\n                    })} */}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              // rules={{ required: \"Name required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"from_date\"\r\n              control={control}\r\n              defaultValue={formdata.from_date}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"From Date\"\r\n                    type=\"date\"\r\n                    id=\"margin-normal\"\r\n                    name=\"from_date\"\r\n                    defaultValue={formdata.from_date}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                );\r\n              }}\r\n              rules={{ required: \"From Date is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"to_date\"\r\n              control={control}\r\n              defaultValue={formdata.to_date}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"To Date\"\r\n                    id=\"margin-normal\"\r\n                    type=\"date\"\r\n                    name=\"to_date\"\r\n                    defaultValue={formdata.to_date}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                );\r\n              }}\r\n              rules={{ required: \"To Date is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"leave_bal\"\r\n              control={control}\r\n              defaultValue={leavestate.leave_bal}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    disable\r\n                    label=\"Leave Balance\"\r\n                    type=\"number\"\r\n                    id=\"standard-number\"\r\n                    name=\"leave_bal\"\r\n                    defaultValue={leavestate.leave_bal}\r\n                    className={classes.textField}\r\n                    //onChange={onChange}\r\n                    onChange={(e) => {\r\n                      onChange(parseInt(e.target.value, 10));\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                );\r\n              }}\r\n              //rules={{ required: \"IC No required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"no_of_days\"\r\n              control={control}\r\n              defaultValue={formdata.no_of_days}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"No Of Days\"\r\n                    type=\"number\"\r\n                    id=\"standard-number\"\r\n                    name=\"no_of_days\"\r\n                    defaultValue={formdata.no_of_days}\r\n                    className={classes.textField}\r\n                    //onChange={onChange}\r\n                    onChange={(e) => {\r\n                      onChange(parseInt(e.target.value, 10));\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  />\r\n                );\r\n              }}\r\n              //rules={{ required: \"IC No required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"reason\"\r\n              control={control}\r\n              defaultValue={formdata.reason}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Reason\"\r\n                    id=\"margin-normal\"\r\n                    name=\"reason\"\r\n                    defaultValue={formdata.reason}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  />\r\n                );\r\n              }}\r\n              // rules={{ required: \"Reason is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"status\"\r\n              control={control}\r\n              defaultValue={formdata.status}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Status\"\r\n                    id=\"margin-normal\"\r\n                    name=\"status\"\r\n                    defaultValue={formdata.status}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                    // select\r\n                  >\r\n                    {/* <MenuItem value=\"Pending\">Pending</MenuItem>\r\n                    <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n                    <MenuItem value=\"Approve\">Approve</MenuItem>\r\n                    <MenuItem value=\"Reject\">Reject</MenuItem> */}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              onClick={handleSubmit(onSubmit)}\r\n            >\r\n              Submit <Icon className={classes.rightIcon}>send</Icon>\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 400,\r\n  },\r\n}));\r\n\r\nexport default LeaveForm;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\DaiylAllowanceForm.js",["1235"],"import React, { useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  TextField,\r\n  Paper,\r\n  Typography,\r\n  } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst initial_values = {\r\n  name: \"\",\r\n  period: \"\",\r\n  location: \"\",\r\n  manager_name: \"\",\r\n  status: \"Pending\",\r\n  no_of_days: 0,\r\n  amount: 0,\r\n};\r\n\r\nconst DailyAllowanceForm = () => {\r\n  let navigate = useNavigate();\r\n  const classes = useStyles();\r\n  const {\r\n    isDailyAllowanceEditing,\r\n    single_dailyallowance,\r\n    updateDailyAllowance,\r\n    addDailyAllowance,\r\n    editDailyAllowanceID,\r\n    loadDailyAllowances,\r\n    single_dailyallowance_loading,\r\n    dailyallowance_period,\r\n  } = useDailyAllowancesContext();\r\n  const { loadEmployees, employees } = useEmployeesContext();\r\n  const { name, period, location, manager_name, status, no_of_days, amount } =\r\n    single_dailyallowance || initial_values;\r\n  const { handleSubmit, control } = useForm();\r\n\r\n  useEffect(() => {\r\n    loadEmployees();\r\n  }, []);\r\n\r\n  const onSubmit = (data) => {\r\n    if (isDailyAllowanceEditing) {\r\n      updateDailyAllowance({ id: editDailyAllowanceID, ...data });\r\n    } else {\r\n      addDailyAllowance({ ...data });\r\n    }\r\n    loadDailyAllowances();\r\n    navigate(\"/batchdailyallowances\");\r\n  };\r\n\r\n  if (single_dailyallowance_loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n  return (\r\n    <div>\r\n      <Paper className={classes.root}>\r\n        <Typography variant=\"h5\" component=\"h3\">\r\n          DAILY ALLOWANCES CLAIM FORM\r\n        </Typography>\r\n        <Typography component=\"p\">\r\n          Daily Allowances Claim Application\r\n        </Typography>\r\n\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <div>\r\n            <Controller\r\n              name=\"name\"\r\n              control={control}\r\n              defaultValue={name}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Name\"\r\n                    id=\"margin-normal\"\r\n                    name=\"name\"\r\n                    defaultValue={name}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    {employees.map((e) => {\r\n                      return (\r\n                        <MenuItem key={e.name} value={e.name}>\r\n                          {e.name}\r\n                        </MenuItem>\r\n                      );\r\n                    })}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              rules={{ required: \"Name required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"period\"\r\n              control={control}\r\n              defaultValue={\r\n                isDailyAllowanceEditing ? period : dailyallowance_period\r\n              }\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Period\"\r\n                    id=\"margin-normal\"\r\n                    name=\"period\"\r\n                    defaultValue={\r\n                      isDailyAllowanceEditing ? period : dailyallowance_period\r\n                    }\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                );\r\n              }}\r\n              rules={{ required: \"Period is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"location\"\r\n              control={control}\r\n              defaultValue={location}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Location\"\r\n                    id=\"margin-normal\"\r\n                    name=\"location\"\r\n                    defaultValue={location}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  />\r\n                );\r\n              }}\r\n              rules={{ required: \"Purchased Date is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"manager_name\"\r\n              control={control}\r\n              defaultValue={manager_name}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Manager Name\"\r\n                    id=\"margin-normal\"\r\n                    name=\"manager_name\"\r\n                    defaultValue={manager_name}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  />\r\n                );\r\n              }}\r\n              // rules={{ required: \"Reason is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"no_of_days\"\r\n              control={control}\r\n              defaultValue={no_of_days}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"No Of Days\"\r\n                    type=\"number\"\r\n                    id=\"standard-number\"\r\n                    name=\"no_of_days\"\r\n                    defaultValue={no_of_days}\r\n                    className={classes.textField}\r\n                    //onChange={onChange}\r\n                    onChange={(e) => {\r\n                      onChange(parseInt(e.target.value, 10));\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  />\r\n                );\r\n              }}\r\n              //rules={{ required: \"IC No required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"amount\"\r\n              control={control}\r\n              defaultValue={amount}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Amount\"\r\n                    type=\"number\"\r\n                    id=\"standard-number\"\r\n                    name=\"amount\"\r\n                    defaultValue={amount}\r\n                    className={classes.textField}\r\n                    //onChange={onChange}\r\n                    onChange={(e) => {\r\n                      onChange(parseInt(e.target.value, 10));\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  />\r\n                );\r\n              }}\r\n              //rules={{ required: \"IC No required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"status\"\r\n              control={control}\r\n              defaultValue=\"Pending\"\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Status\"\r\n                    id=\"margin-normal\"\r\n                    name=\"status\"\r\n                    defaultValue={status}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"Pending\">Pending</MenuItem>\r\n                    <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n                    <MenuItem value=\"Approved\">Approved</MenuItem>\r\n                    <MenuItem value=\"Rejected\">Rejected</MenuItem>\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n            >\r\n              Submit <Icon className={classes.rightIcon}>send</Icon>\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 400,\r\n  },\r\n}));\r\n\r\nexport default DailyAllowanceForm;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseForm.js",["1236"],"import React from \"react\";\r\nimport { Button, Icon, TextField, Paper, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport * as emailjs from \"emailjs-com\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\n//import { useExpenses } from \"./expenses/useExpenses\";\r\nimport { useAddExpenses } from \"./expenses/useAddExpenses\";\r\n//import { useDeleteExpenses } from \"./expenses/useDeleteExpenses\";\r\nimport { useUpdateExpenses } from \"./expenses/useUpdateExpenses\";\r\n\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\n\r\n// const initial_values = {\r\n//   name: \"\",\r\n//   date: \"\",\r\n//   purchased_date: \"\",\r\n//   purchased_from: \"\",\r\n//   description: \"\",\r\n//   remark: \"\",\r\n//   status: \"Pending\",\r\n//   amount: 0,\r\n//};\r\n\r\nconst ExpenseForm = ({ formdata, setFormdata, handleDialogClose }) => {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  //const { expenses, filter, setFilter, setExpenseId } = useExpenses();\r\n  const updateExpenses = useUpdateExpenses();\r\n  const addExpenses = useAddExpenses();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { isExpenseEditing, editExpenseID } = useExpensesContext();\r\n\r\n  const { handleSubmit, control } = useForm();\r\n\r\n  const handleSentEmail = (data) => {\r\n    const { date } = data;\r\n    //console.log(\"expense form\", loginLevel);\r\n    var emaildata = {\r\n      to_name: loginLevel.loginUser,\r\n      to_email: loginLevel.loginEmail,\r\n      message: `Your expenses claim application dated on ${date} has been successfully submitted for approval`,\r\n      cc_to: loginLevel.reporting_email,\r\n    };\r\n\r\n    emailjs.send(SERVICE_ID, TEMPLATE_ID, emaildata, USER_ID).then(\r\n      function (response) {\r\n        console.log(response.status, response.text);\r\n        toast({\r\n          title: `Email has sent successfully to ${emaildata.to_email}!`,\r\n          status: \"success\",\r\n        });\r\n      },\r\n      function (err) {\r\n        console.log(err);\r\n        toast({\r\n          title: `Email has fail to send to ${emaildata.to_email}!`,\r\n          status: \"warning\",\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  const onSubmit = (data, e) => {\r\n    e.preventDefault();\r\n    if (isExpenseEditing) {\r\n      updateExpenses({ id: editExpenseID, ...data });\r\n    } else {\r\n      addExpenses({ empid: loginLevel.loginUserId, ...data });\r\n      handleSentEmail(data);\r\n    }\r\n\r\n    handleDialogClose();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Paper className={classes.root}>\r\n        <Typography variant=\"h5\" component=\"h3\">\r\n          EXPENSES CLAIM FORM\r\n        </Typography>\r\n        <Typography component=\"p\">Expense Claim Application</Typography>\r\n\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <div>\r\n            <Controller\r\n              name=\"name\"\r\n              control={control}\r\n              defaultValue={loginLevel.loginUser}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Name\"\r\n                    id=\"margin-normal1\"\r\n                    name=\"name\"\r\n                    defaultValue={loginLevel.loginUser}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  ></TextField>\r\n                );\r\n              }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"date\"\r\n              control={control}\r\n              defaultValue={formdata.date}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Date\"\r\n                    type=\"date\"\r\n                    id=\"margin-normal2\"\r\n                    name=\"formdata.date\"\r\n                    value={value}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                );\r\n              }}\r\n              rules={{ required: \"From Date is required\" }}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <Controller\r\n              name=\"purchased_from\"\r\n              control={control}\r\n              defaultValue={formdata.purchased_from}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Purchased From\"\r\n                    id=\"margin-normal3\"\r\n                    name=\"purchased_from\"\r\n                    defaultValue={formdata.purchased_from}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  />\r\n                );\r\n              }}\r\n              // rules={{ required: \"Reason is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"description\"\r\n              control={control}\r\n              defaultValue={formdata.description}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Description\"\r\n                    id=\"margin-normal4\"\r\n                    name=\"description\"\r\n                    defaultValue={formdata.description}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  />\r\n                );\r\n              }}\r\n              // rules={{ required: \"Reason is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"amount\"\r\n              control={control}\r\n              defaultValue={formdata.amount}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Amount\"\r\n                    type=\"number\"\r\n                    id=\"standard-number1\"\r\n                    name=\"amount\"\r\n                    defaultValue={formdata.amount}\r\n                    className={classes.textField}\r\n                    //onChange={onChange}\r\n                    onChange={(e) => {\r\n                      onChange(parseInt(e.target.value, 10));\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  />\r\n                );\r\n              }}\r\n              //rules={{ required: \"IC No required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"remark\"\r\n              control={control}\r\n              defaultValue={formdata.remark}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Remark\"\r\n                    id=\"margin-normal5\"\r\n                    name=\"remark\"\r\n                    defaultValue={formdata.remark}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  />\r\n                );\r\n              }}\r\n              // rules={{ required: \"Reason is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"status\"\r\n              control={control}\r\n              defaultValue=\"Pending\"\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Status\"\r\n                    id=\"margin-normal6\"\r\n                    name=\"status\"\r\n                    defaultValue=\"Pending\"\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  ></TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              //onClick={() => handleSubmit(onSubmit)()}\r\n            >\r\n              Save <Icon className={classes.rightIcon}>send</Icon>\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 400,\r\n  },\r\n}));\r\n\r\nexport default ExpenseForm;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowsDetlsTableStaff.js",["1237","1238","1239","1240"],"import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport * as emailjs from \"emailjs-com\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import { useIsFetching } from \"react-query\";\r\nimport { TextField, Icon, Grid, Button } from \"@material-ui/core\";\r\n//import { useDisclosure } from \"@chakra-ui/react\";\r\nimport { useRecoilValue, useRecoilState } from \"recoil\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport {\r\n  loginLevelState,\r\n  allowsDataState,\r\n  //allowsDataDetlsState,\r\n  empidState,\r\n  allowsPeriodState,\r\n  //allowsDataIdState,\r\n  //siteallowsTotalsState,\r\n} from \"./data/atomdata\";\r\n//import { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\n//import { useAddDailyAllowsDetls } from \"./dailyallowsdetls/useAddDailyAllowsDetls\";\r\nimport { useUpdateDailyAllowsDetls } from \"./dailyallowsdetls/useUpdateDailyAllowsDetls\";\r\nimport { useDeleteDailyAllowsDetls } from \"./dailyallowsdetls/useDeleteDailyAllowsDetls\";\r\nimport { useDailyAllowsDetlsBatch } from \"./dailyallowsdetls/useDailyAllowsDetlsBatch\";\r\nimport { useDailyAllows } from \"./dailyallows/useDailyAllows\";\r\n//import { useDailyAllowsDetls } from \"./dailyallowsdetls/useDailyAllowsDetls\";\r\nimport { useUpdateDailyAllows } from \"./dailyallows/useUpdateDailyAllows\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\n\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\n\r\nconst initial_totals = [\r\n  {\r\n    totalamount: 0,\r\n    totalbonus: 0,\r\n    totaldiem: 0,\r\n    totaldays: 0,\r\n  },\r\n];\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Date\",\r\n    field: \"date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    // editable: \"never\",\r\n    cellStyle: {\r\n      width: 120,\r\n      maxWidth: 120,\r\n    },\r\n    editComponent: (props) => (\r\n      <TextField\r\n        defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        type=\"date\"\r\n      />\r\n    ),\r\n  },\r\n  // { title: \"District\", field: \"district\" },\r\n  { title: \"Operation Type\", field: \"typeoperation\" },\r\n  { title: \"Client\", field: \"client\" },\r\n  { title: \"Location/Rig\", field: \"location\" },\r\n  { title: \"Ticket No/Job No\", field: \"jobno\" },\r\n  { title: \"Operation Role\", field: \"crewoperation\" },\r\n  {\r\n    title: \"Job Bonus\",\r\n    field: \"jobbonus\",\r\n    type: \"currency\",\r\n    cellStyle: {\r\n      width: 8,\r\n      maxWidth: 8,\r\n    },\r\n    headerStyle: {\r\n      width: 8,\r\n      maxWidth: 8,\r\n    },\r\n  },\r\n  {\r\n    title: \"Per Diem\",\r\n    field: \"perdiem\",\r\n    type: \"currency\",\r\n    cellStyle: {\r\n      width: 8,\r\n      maxWidth: 8,\r\n    },\r\n    headerStyle: {\r\n      width: 8,\r\n      maxWidth: 8,\r\n    },\r\n  },\r\n  // { title: \"Delete\", field: \"isdelete\", type: \"boolean\" },\r\n];\r\n\r\nexport default function DailyAllowsDetlsTableStaff() {\r\n  let navigate = useNavigate();\r\n  const toast = useCustomToast();\r\n  const classes = useStyles();\r\n  //const isFetching = useIsFetching();\r\n  //const { dailyallowsdetls } = useDailyAllowsDetls()\r\n  const { dailyallows,  setDailyAllowsId } = useDailyAllows();\r\n  const {\r\n    dailyallowsdetls,\r\n    setDailyAllowsDetlsId,\r\n    setDailyAllowsDetlsPeriod,\r\n    //isLoading,\r\n  } = useDailyAllowsDetlsBatch();\r\n  //const addDailyAllowsDetls = useAddDailyAllowsDetls();\r\n  const updateDailyAllowsDetls = useUpdateDailyAllowsDetls();\r\n  const deleteDailyAllowsDetls = useDeleteDailyAllowsDetls();\r\n  const updateDailyAllows = useUpdateDailyAllows();\r\n\r\n  // const [allowsDetlsTable, setAllowsDetlsTable] =\r\n  // useRecoilState(allowsDataDetlsState);\r\n  //console.log(\"detlstable\", );\r\n  //const [allowsDetlsdata, setAllowsDetilsdata] = useRecoilStateLoadable(fetchDailyAllowsDetlsSelector);\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  // const [allowsDetlsdata, setAllowsDetlsdata] =\r\n  //   useRecoilState(allowsDataDetlsState);\r\n  const allows_period = useRecoilValue(allowsPeriodState);\r\n  const allows_empid = useRecoilValue(empidState);\r\n  // const [siteallowsTotals, setSiteAllowsTotals] = useRecoilState(\r\n  //   siteallowsTotalsState\r\n  // );\r\n  const [allowsdata, setAllowsdata] = useRecoilState(allowsDataState);\r\n  //const [allowsdataId, setAllowsdataId] = useState(allowsDataIdState);\r\n  //const [tabledeldata, setTableDelData] = useState({});\r\n  //const [isCalc, setIsCalc] = useState(false);\r\n  //const [isBuild, setIsBuild] = useState(false);\r\n  const [totals, setTotals] = useState({ initial_totals });\r\n  const [isSubmitAlertOpen, setIsSubmitAlertOpen] = useState(false);\r\n  const [isExitAlertOpen, setIsExitAlertOpen] = useState(false);\r\n  //const [dailyallowsdata, setDailyAllowsData] = useState({});\r\n  //const totalsValues = Object.values(totals).join(\"\");\r\n  //const [isRowIndex, setIsRowIndex] = useState(\"\");\r\n\r\n  // const {\r\n  //   //dailyallowances,\r\n  //   //dailyallowsdetls,\r\n  //   loadEmpDailyAllowsDetls,\r\n  //   updateDailyAllowance,\r\n  //   //updateDailyAllowsDetl,\r\n  //   //deleteDailyAllowsDetl,\r\n  //   dailyallowsdetl_loading,\r\n  //   dailyallowsdetl_error,\r\n  // } = useDailyAllowancesContext();\r\n\r\n  useEffect(() => {\r\n    setDailyAllowsId(allows_empid);\r\n    setDailyAllowsDetlsId(allows_empid);\r\n    setDailyAllowsDetlsPeriod(allows_period);\r\n    // setTimeout(() => {\r\n    //   setTotals((prevState) => ({\r\n    //     totalamount: dailyallows.amount,\r\n    //     totalbonus: dailyallows.totaljobbonus,\r\n    //     totaldiem: dailyallows.totalperdiem,\r\n    //     totaldays: dailyallows.no_of_days,\r\n    //   }));\r\n    // }, 3000);\r\n  }, [allows_empid, allows_period]);\r\n\r\n  // useEffect(() => {\r\n  //  if (allowsdata) {\r\n  //     handle_tempcalc();\r\n  //     setIsCalc(false);\r\n  //   }\r\n  // }, [isCalc]);\r\n\r\n  const handleSentEmail = (data) => {\r\n    const { period } = data;\r\n    //console.log(\"expense form\", loginLevel);\r\n    var emaildata = {\r\n      to_name: loginLevel.loginUser,\r\n      to_email: loginLevel.loginEmail,\r\n      message: `Your site allowances for the period ${period} has been successfully submitted for approval`,\r\n      cc_to: loginLevel.reporting_email,\r\n    };\r\n\r\n    emailjs.send(SERVICE_ID, TEMPLATE_ID, emaildata, USER_ID).then(\r\n      function (response) {\r\n        console.log(response.status, response.text);\r\n        toast({\r\n          title: `Email has sent successfully to ${emaildata.to_email}!`,\r\n          status: \"success\",\r\n        });\r\n      },\r\n      function (err) {\r\n        console.log(err);\r\n        toast({\r\n          title: `Email has fail to send to ${emaildata.to_email}!`,\r\n          status: \"warning\",\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  // const build_dailyallowsdata = () => {\r\n  //   const { id, jobbonus, perdiem } = dailyallowsdetls;\r\n  //   const data = dailyallowsdetls\r\n  //     .filter((r) => r.period === allows_period && r.empid === allows_empid)\r\n  //     .map((rec) => {\r\n  //       return rec.id, rec.jobbonus, rec.perdiem;\r\n  //     });\r\n  //   setDailyAllowsData(data);\r\n  //   console.log(\"dailydata\", dailyallowsdata);\r\n  // };\r\n\r\n  const update_AllowsDetls = (data, index) => {\r\n    const allowsdata = dailyallowsdetls;\r\n    const { id, rec_id, tableData, ...fields } = data;\r\n    updateDailyAllowsDetls({ id, ...fields });\r\n\r\n    //recalc\r\n    allowsdata[index].jobbonus = data.jobbonus;\r\n    allowsdata[index].perdiem = data.perdiem;\r\n    handle_tempcalc(allowsdata);\r\n    //save_siteallows();\r\n  };\r\n\r\n  // const save_siteallows = () => {\r\n  //   const { id } = allowsdata;\r\n\r\n  //   updateDailyAllows({\r\n  //     id: id,\r\n  //     ...allowsdata,\r\n  //     no_of_days: totals.totaldays,\r\n  //     amount: totals.totalamount,\r\n  //     totaljobbonus: totals.totalbonus,\r\n  //     totalperdiem: totals.totaldiem,\r\n  //   });\r\n  // };\r\n\r\n  // const save_AllowsDetls = (e) => {\r\n  //   e.preventDefault();\r\n  //   // handle calc\r\n  //   //handle_calc();\r\n\r\n  //   //save allows data details\r\n  //   const { id } = allowsdata;\r\n\r\n  //   updateDailyAllows({\r\n  //     id: id,\r\n  //     ...allowsdata,\r\n  //     no_of_days: totals.totaldays,\r\n  //     amount: totals.totalamount,\r\n  //     totaljobbonus: totals.totalbonus,\r\n  //     totalperdiem: totals.totaldiem,\r\n  //   });\r\n  //   toast({\r\n  //     title: \"Site Allowances table being saved!\",\r\n  //     status: \"success\",\r\n  //   });\r\n  // };\r\n\r\n  const submit_AllowsDetls = (e) => {\r\n    e.preventDefault();\r\n    handleSubmitAlertOpen();\r\n  };\r\n\r\n  const exit_AllowsDetls = (e) => {\r\n    e.preventDefault();\r\n    handleExitAlertOpen();\r\n  };\r\n\r\n  const handleOnSubmitConfirm = () => {\r\n    //save allows data details\r\n    const { id } = allowsdata;\r\n    updateDailyAllows({\r\n      id: id,\r\n      ...allowsdata,\r\n      no_of_days: totals.totaldays,\r\n      amount: totals.totalamount,\r\n      totaljobbonus: totals.totalbonus,\r\n      totalperdiem: totals.totaldiem,\r\n      status: \"Submitted\",\r\n    });\r\n    handleSentEmail(allowsdata);\r\n    navigate(\"/dailyallowances\");\r\n    toast({\r\n      title: \"Site Allowances table being submitted!\",\r\n      status: \"success\",\r\n    });\r\n  };\r\n\r\n  const handleOnExitConfirm = () => {\r\n    //save allows data details\r\n    // const { id } = allowsdata;\r\n    // updateDailyAllows({\r\n    //   id: id,\r\n    //   ...allowsdata,\r\n    //   no_of_days: totals.totaldays,\r\n    //   amount: totals.totalamount,\r\n    //   totaljobbonus: totals.totalbonus,\r\n    //   totalperdiem: totals.totaldiem,\r\n    // });\r\n    navigate(\"/dailyallowances\");\r\n    // toast({\r\n    //   title: \"Site Allowances table being submitted!\",\r\n    //   status: \"success\",\r\n    // });\r\n  };\r\n\r\n  const handleSubmitAlertOpen = () => {\r\n    setIsSubmitAlertOpen(true);\r\n  };\r\n\r\n  const handleSubmitAlertClose = () => {\r\n    setIsSubmitAlertOpen(false);\r\n  };\r\n\r\n  const handleExitAlertOpen = () => {\r\n    setIsExitAlertOpen(true);\r\n  };\r\n\r\n  const handleExitAlertClose = () => {\r\n    setIsExitAlertOpen(false);\r\n  };\r\n\r\n  // const handle_calc = () => {\r\n  //   if (dailyallowsdetls) {\r\n  //     const totbonus = dailyallowsdetls\r\n  //       .filter((r) => r.period === allows_period && r.empid === allows_empid)\r\n  //       .reduce((acc, item) => {\r\n  //         if (isNaN(item.jobbonus)) {\r\n  //           return acc;\r\n  //         } else {\r\n  //           return acc + item.jobbonus;\r\n  //         }\r\n  //       }, 0);\r\n  //     const totdiem = dailyallowsdetls\r\n  //       .filter((r) => r.period === allows_period && r.empid === allows_empid)\r\n  //       .reduce((acc, item) => {\r\n  //         if (isNaN(item.perdiem)) {\r\n  //           return acc;\r\n  //         } else {\r\n  //           return acc + item.perdiem;\r\n  //         }\r\n  //       }, 0);\r\n  //     const totdays = dailyallowsdetls\r\n  //       .filter((r) => r.period === allows_period && r.empid === allows_empid)\r\n  //       .reduce((acc, item) => {\r\n  //         let val = 0;\r\n  //         if (item.jobbonus > 0 || item.perdiem > 0) {\r\n  //           val = 1;\r\n  //         } else {\r\n  //           val = 0;\r\n  //         }\r\n  //         return acc + val;\r\n  //       }, 0);\r\n  //     const total = totbonus + totdiem;\r\n\r\n  //     setTimeout(() => {\r\n  //       setTotals({\r\n  //         totalamount: total,\r\n  //         totalbonus: totbonus,\r\n  //         totaldiem: totdiem,\r\n  //         totaldays: totdays,\r\n  //       });\r\n  //     }, 3000);\r\n  //     console.log(\"calc\", totdays, totals);\r\n  //   }\r\n  // };\r\n\r\n  const handle_tempcalc = (allowsdata) => {\r\n    if (allowsdata) {\r\n      const totbonus = allowsdata\r\n        .filter((r) => r.period === allows_period && r.empid === allows_empid)\r\n        .reduce((acc, item) => {\r\n          if (isNaN(item.jobbonus)) {\r\n            return acc;\r\n          } else {\r\n            return acc + item.jobbonus;\r\n          }\r\n        }, 0);\r\n      const totdiem = allowsdata\r\n        .filter((r) => r.period === allows_period && r.empid === allows_empid)\r\n        .reduce((acc, item) => {\r\n          if (isNaN(item.perdiem)) {\r\n            return acc;\r\n          } else {\r\n            return acc + item.perdiem;\r\n          }\r\n        }, 0);\r\n      const totdays = allowsdata\r\n        .filter((r) => r.period === allows_period && r.empid === allows_empid)\r\n        .reduce((acc, item) => {\r\n          let val = 0;\r\n          if (item.jobbonus > 0 || item.perdiem > 0) {\r\n            val = 1;\r\n          } else {\r\n            val = 0;\r\n          }\r\n          return acc + val;\r\n        }, 0);\r\n      const total = totbonus + totdiem;\r\n\r\n      const data = dailyallows\r\n        .filter((r) => r.period === allows_period && r.empid === allows_empid)\r\n        .map((rec) => {\r\n          return { ...rec };\r\n        });\r\n\r\n      updateDailyAllows({\r\n        id: data[0].id,\r\n        no_of_days: totdays,\r\n        amount: total,\r\n        totaljobbonus: totbonus,\r\n        totalperdiem: totdiem,\r\n      });\r\n      // setTimeout(() => {\r\n      //   setTotals({\r\n      //     totalamount: total,\r\n      //     totalbonus: totbonus,\r\n      //     totaldiem: totdiem,\r\n      //     totaldays: totdays,\r\n      //   });\r\n      // }, 3000);\r\n      // console.log(\"tempcalc\", totdays, totals);\r\n    }\r\n  };\r\n\r\n  // const update_SiteAllowsTotals = () => {\r\n  //   setSiteAllowsTotals({\r\n  //     totalamount: totals.totalamount,\r\n  //     totalbonus: dailyallowsdetls.reduce((acc, item) => {\r\n  //       if (isNaN(item.jobbonus)) {\r\n  //         return acc;\r\n  //       } else {\r\n  //         return acc + item.jobbonus;\r\n  //       }\r\n  //     }, 0),\r\n  //     totaldiem: totals.totaldiem,\r\n  //     totaldays: dailyallowsdetls.reduce((acc, item) => {\r\n  //       let val = 0;\r\n  //       if (item.jobbonus > 0 || item.perdiem > 0) {\r\n  //         val = 1;\r\n  //       } else {\r\n  //         val = 0;\r\n  //       }\r\n  //       return acc + val;\r\n  //     }, 0),\r\n  //   });\r\n  //   console.log(\"update\", siteallowsTotals);\r\n  // };\r\n\r\n  // const add_DailyAllowsDetl = async (data) => {\r\n  //   console.log(\"add\", data);\r\n  //   const { description, amount } = data;\r\n  //   addDailyAllowsDetl({\r\n  //     description: description,\r\n  //     amount: amount,\r\n  //     name: single_dailyallowance.name,\r\n  //     empid: single_dailyallowance.empid,\r\n  //     period: dailyallowance_period,\r\n  //   });\r\n  // };\r\n\r\n  const delete_AllowsDetl = (data, index) => {\r\n    const allowsdata = dailyallowsdetls;\r\n    const { id } = data;\r\n    deleteDailyAllowsDetls(id);\r\n    // toast({\r\n    //   title: \"Site Allowances details record being deleted!\",\r\n    //   status: \"warning\",\r\n    // });\r\n    //recalc\r\n    allowsdata.splice(index, 1);\r\n    handle_tempcalc(allowsdata);\r\n  };\r\n\r\n  //  setAllowsDetlsdata(dailyallowsdetls);\r\n\r\n  // console.log(\"load allows detls\", allowsDetlsdata);\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"75%\", paddingTop: \"5px\" }}>\r\n        {/* <h2>Site Allows Detils Table</h2> */}\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={dailyallowsdetls}\r\n          title=\"Daily Allowances Details\"\r\n          editable={{\r\n            // onRowAdd: (newData) =>\r\n            //   new Promise((resolve, reject) => {\r\n            //     // setTimeout(() => {\r\n            //     //   setAllowsdata([...allowsdata, newData]);\r\n            //     //   resolve();\r\n            //     // }, 1000);\r\n            //   }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataUpdate = [...dailyallowsdetls];\r\n                  const index = oldData.tableData.id;\r\n                  dataUpdate[index] = newData;\r\n                  //setDailyAllowsData([...dataUpdate]);\r\n\r\n                  update_AllowsDetls(newData, index);\r\n                  //handle_calc();\r\n                  //setAllowsDetlsTable([...dataUpdate]);\r\n                  //editable = dataUpdate;\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  //const dataDelete = [...allowsDetlsTable];\r\n                  const index = oldData.tableData.id;\r\n                  delete_AllowsDetl(oldData, index);\r\n                  //dataDelete.splice(index, 1);\r\n                  //setAllowsDetlsTable([...dataDelete]);\r\n\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            selection: false,\r\n            pageSize: 10,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  {/* <Button\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                      color=\"secondary\"\r\n                      className={classes.button}\r\n                      onClick={(e) => delete_AllowsDetls(e)}\r\n                    >\r\n                      delete\r\n                    </Button> */}\r\n                  {/* <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={(e) => handle_refresh(e)}\r\n                  >\r\n                    re-fresh\r\n                  </Button> */}\r\n                  {/* <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={(e) => handle_calc(e)}\r\n                  >\r\n                    re-calc\r\n                  </Button>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={(e) => save_AllowsDetls(e)}\r\n                  >\r\n                    Update all\r\n                  </Button> */}\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={(e) => submit_AllowsDetls(e)}\r\n                  >\r\n                    Submit <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={(e) => exit_AllowsDetls(e)}\r\n                  >\r\n                    Exit\r\n                  </Button>\r\n\r\n                  <div>\r\n                    <Grid\r\n                      container\r\n                      spacing={0}\r\n                      direction=\"row\"\r\n                      style={{ border: \"1px solid white\" }}\r\n                    >\r\n                      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                        <TextField\r\n                          label=\"Total Job Bonus\"\r\n                          variant=\"filled\"\r\n                          style={{ width: \"100%\" }}\r\n                          name=\"totalbonus\"\r\n                          value={\r\n                            dailyallows &&\r\n                            dailyallows\r\n                              .filter(\r\n                                (r) =>\r\n                                  r.period === allows_period &&\r\n                                  r.empid === allows_empid\r\n                              )\r\n                              .map((rec) => {\r\n                                return rec.totaljobbonus;\r\n                              })\r\n                          }\r\n                          type=\"currency\"\r\n                          className={classes.textField}\r\n                          InputLabelProps={{\r\n                            shrink: true,\r\n                          }}\r\n                        ></TextField>\r\n                        <TextField\r\n                          label=\"Total Diem\"\r\n                          variant=\"filled\"\r\n                          style={{ width: \"100%\" }}\r\n                          name=\"totaldiem\"\r\n                          value={\r\n                            dailyallows &&\r\n                            dailyallows\r\n                              .filter(\r\n                                (r) =>\r\n                                  r.period === allows_period &&\r\n                                  r.empid === allows_empid\r\n                              )\r\n                              .map((rec) => {\r\n                                return rec.totalperdiem;\r\n                              })\r\n                          }\r\n                          type=\"currency\"\r\n                          className={classes.textField}\r\n                          InputLabelProps={{\r\n                            shrink: true,\r\n                          }}\r\n                        ></TextField>\r\n\r\n                        <TextField\r\n                          label=\"No of Days\"\r\n                          variant=\"filled\"\r\n                          style={{ width: \"100%\" }}\r\n                          name=\"totaldays\"\r\n                          value={\r\n                            dailyallows &&\r\n                            dailyallows\r\n                              .filter(\r\n                                (r) =>\r\n                                  r.period === allows_period &&\r\n                                  r.empid === allows_empid\r\n                              )\r\n                              .map((rec) => {\r\n                                return rec.no_of_days;\r\n                              })\r\n                          }\r\n                          type=\"numeric\"\r\n                          className={classes.textField}\r\n                          InputLabelProps={{\r\n                            shrink: true,\r\n                          }}\r\n                        ></TextField>\r\n                        <TextField\r\n                          label=\"Total Amount\"\r\n                          variant=\"filled\"\r\n                          style={{ width: \"100%\" }}\r\n                          name=\"totalamount\"\r\n                          value={\r\n                            dailyallows &&\r\n                            dailyallows\r\n                              .filter(\r\n                                (r) =>\r\n                                  r.period === allows_period &&\r\n                                  r.empid === allows_empid\r\n                              )\r\n                              .map((rec) => {\r\n                                return rec.amount;\r\n                              })\r\n                          }\r\n                          type=\"currency\"\r\n                          className={classes.textField}\r\n                          InputLabelProps={{\r\n                            shrink: true,\r\n                          }}\r\n                        ></TextField>\r\n                      </div>\r\n                    </Grid>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n      <div>\r\n        <AlertDialogBox\r\n          onClose={handleSubmitAlertClose}\r\n          onConfirm={handleOnSubmitConfirm}\r\n          isOpen={isSubmitAlertOpen}\r\n          title=\"Site Allowances Batch\"\r\n        >\r\n          <h2>After submition for approval, no changes can be made.</h2>\r\n          <h2>Are you sure you want to submit ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n      <div>\r\n        <AlertDialogBox\r\n          onClose={handleExitAlertClose}\r\n          onConfirm={handleOnExitConfirm}\r\n          isOpen={isExitAlertOpen}\r\n          title=\"Site Allowances Batch\"\r\n        >\r\n          <h2>Are you sure you want to exit ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n      {/* <div>\r\n        <AlertDialogBox\r\n          onClose={onAlertDeleteClose}\r\n          onConfirm={handleOnAlertDeleteConfirm}\r\n          isOpen={isAlertDeleteOpen}\r\n          title=\"Site Allowances Batch\"\r\n        >\r\n          <h2>Are you sure you want to delete {isRowIndex} ?</h2>\r\n        </AlertDialogBox>\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n    width: 1500,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableStaff.js",["1241","1242","1243","1244","1245"],"import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\"\r\n//import { Alert } from \"@material-ui/lab\";\r\n//import { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport {\r\n  allowsPeriodState,\r\n  allowsDataState,\r\n  allowsDataDetlsState,\r\n  allowsDataIdState,\r\n  empidState,\r\n  loginLevelState,\r\n} from \"./data/atomdata\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\nimport DailyAllowancesAddPeriod from \"./DailyAllowancesAddPeriod\";\r\nimport DailyAllowsDetlsTableStaff from \"./DailyAllowsDetlsTableStaff\";\r\nimport { useDailyAllows } from \"./dailyallows/useDailyAllows\";\r\n//import { useAddDailyAllows } from \"./dailyallows/useAddDailyAllows\";\r\n//import { useUpdateDailyAllows } from \"./dailyallows/useUpdateDailyAllows\";\r\nimport { useDeleteDailyAllows } from \"./dailyallows/useDeleteDailyAllows\";\r\nimport { useDeleteDailyAllowsDetls } from \"./dailyallowsdetls/useDeleteDailyAllowsDetls\";\r\nimport { useDailyAllowsDetlsBatch } from \"./dailyallowsdetls/useDailyAllowsDetlsBatch\";\r\n\r\nexport default function DailyAllowancesTableStaff() {\r\n  let navigate = useNavigate();\r\n  const toast = useCustomToast()\r\n  const classes = useStyles();\r\n  //const toast = useCustomToast();\r\n  const { dailyallows, dailyAllowsId, setDailyAllowsId } = useDailyAllows();\r\n  const { dailyallowsdetls, setDailyAllowsDetlsId, setDailyAllowsDetlsPeriod } =\r\n    useDailyAllowsDetlsBatch();\r\n  //const addDailyAllows = useAddDailyAllows();\r\n  //const updateDailyAllows = useUpdateDailyAllows();\r\n  const deleteDailyAllows = useDeleteDailyAllows();\r\n  const deleteDailyAllowsDetls = useDeleteDailyAllowsDetls();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const [isAddPeriodDialogOpen, setIsAddPeriodDialogOpen] = useState(false);\r\n  //const [tmpallowsdata, setTmpallowsdata] = useState([]);\r\n  const [allowsdata, setAllowsdata] = useRecoilState(allowsDataState);\r\n  const [isDeleteAlertOpen, setIsDeleteAlertOpen] = useState(false);\r\n  // const [allowsDetlsdata, setAllowsDetlsdata] =\r\n    useRecoilState(allowsDataDetlsState);\r\n  const [allows_period, setAllows_period] = useRecoilState(allowsPeriodState);\r\n  const [allows_empid, setAllows_empid] = useRecoilState(empidState);\r\n  const [allowsdataId, setAllowsdataId] = useState(allowsDataIdState);\r\n  //const [toLoadDetls, setToLoadDetls] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const [deletestate, setDeletestate] = useState({\r\n    id: \"\",\r\n    period: \"\",\r\n    empid: \"\",\r\n  });\r\n  const [isAllowsDetlDialogOpen, setIsAllowsDetlDialogOpen] = useState(false);\r\n  const title = `Site Allowances`;\r\n  const {\r\n    //loadEmpDailyAllowances,\r\n    loadEmpDailyAllowsDetls,\r\n    //dailyallowances_loading,\r\n    //dailyallowances_error,\r\n    //updateDailyAllowance,\r\n    //getSingleBatchDailyAllowsDetl,\r\n  } = useDailyAllowancesContext();\r\n\r\n  useEffect(() => {\r\n    setDailyAllowsId(loginLevel.loginUserId);\r\n  }, [dailyAllowsId]);\r\n\r\n  // useEffect(() => {\r\n  //   loadEmpDailyAllowances(loginLevel.loginUserId);\r\n  // }, [toLoad]);\r\n\r\n  // const myCustomSortingAlgorithm = {\r\n  //   ascending: (a, b) => a.period.length - b.period.length,\r\n  //   descending: (a, b) => b.period.length - a.period.length,\r\n  // };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Name\",\r\n      field: \"name\",\r\n      editable: \"never\",\r\n    },\r\n    {\r\n      title: \"Period\",\r\n      field: \"period\",\r\n      editable: \"never\",\r\n    },\r\n    { title: \"Location\", field: \"location\", editable: \"never\" },\r\n    { title: \"Manager Name\", field: \"manager\", editable: \"never\" },\r\n    {\r\n      title: \"No Of Days\",\r\n      field: \"no_of_days\",\r\n      type: \"numeric\",\r\n      editable: \"never\",\r\n    },\r\n    {\r\n      title: \"Job Bonus\",\r\n      field: \"totaljobbonus\",\r\n      type: \"currency\",\r\n      editable: \"never\",\r\n    },\r\n    {\r\n      title: \"Per Diem\",\r\n      field: \"totalperdiem\",\r\n      type: \"currency\",\r\n      editable: \"never\",\r\n    },\r\n    { title: \"Amount\", field: \"amount\", type: \"currency\", editable: \"never\" },\r\n    { title: \"Status\", field: \"status\", editable: \"never\" },\r\n    // {\r\n    //   title: \"Status\",\r\n    //   field: \"status\",\r\n    //   editComponent: (props) => (\r\n    //     <TextField\r\n    //       //defaultValue={props.value || null}\r\n    //       onChange={(e) => props.onChange(e.target.value)}\r\n    //       style={{ width: 100 }}\r\n    //       value={props.value}\r\n    //       select\r\n    //     >\r\n    //       <MenuItem value=\"Pending\">Pending</MenuItem>\r\n    //       {/* <MenuItem value=\"Approve\">Approve</MenuItem>\r\n    //     <MenuItem value=\"Reject\">Reject</MenuItem>\r\n    //     <MenuItem value=\"Cancel\">Cancel</MenuItem> */}\r\n    //     </TextField>\r\n    //   ),\r\n    // },\r\n  ];\r\n\r\n  // const Save_DailyAllowancesData = () => {\r\n  //   dailyallows.forEach((data) => {\r\n  //     const { id } = data;\r\n  //     if (id) {\r\n  //       const { id, rec_id, tableData, ...fields } = data;\r\n  //       updateDailyAllowance({ id, ...fields });\r\n  //     }\r\n  //   });\r\n  //   //handleDialogClose();\r\n  //};\r\n\r\n  const update_SiteAllowsDetl = (data) => {\r\n    const {\r\n      id,\r\n      empid,\r\n      period,\r\n      no_of_days,\r\n      amount,\r\n      totaljobbonus,\r\n      totalperdiem,\r\n    } = data;\r\n\r\n    loadEmpDailyAllowsDetls(empid, period);\r\n\r\n    setAllows_period(period);\r\n    setAllows_empid(empid);\r\n    setAllowsdataId(id);\r\n    setAllows_period(period);\r\n    setAllows_empid(empid);\r\n    setAllowsdataId(id);\r\n    setAllowsdata({\r\n      ...allowsdata,\r\n      id: id,\r\n      no_of_days: no_of_days,\r\n      totaljobbonus: totaljobbonus,\r\n      totalperdiem: totalperdiem,\r\n      amount: amount,\r\n      period: period,\r\n      empid: empid,\r\n    });\r\n\r\n    //setIsAllowsDetlDialogOpen(true);\r\n    navigate(\"/singledailyallowsdetlstable\");\r\n  };\r\n\r\n  const delete_SiteAllows = (data) => {\r\n    const { id, period, empid } = data;\r\n    setDeletestate((prev) => (prev = { id: id, period: period, empid: empid }));\r\n    setDailyAllowsDetlsId(empid);\r\n    setDailyAllowsDetlsPeriod(period);\r\n    handleDeleteAlertOpen();\r\n  };\r\n\r\n  const handleDeleteAlertOpen = () => {\r\n    setIsDeleteAlertOpen(true);\r\n  };\r\n\r\n  const handleDeleteAlertClose = () => {\r\n    setIsDeleteAlertOpen(false);\r\n  };\r\n\r\n  const handleOnDeleteConfirm = (data) => {\r\n    const { id, period, empid } = deletestate;\r\n\r\n    //delete allows detls\r\n    //console.log(\"allowsdetls\", dailyallowsdetls);\r\n    dailyallowsdetls\r\n      .filter((f) => f.empid === empid)\r\n      .forEach((rec) => {\r\n        if (rec.period === period && rec.empid === empid) {\r\n          //console.log(\"del id\", rec.id);\r\n          deleteDailyAllowsDetls(rec.id);\r\n        }\r\n      });\r\n    //delete daily allows\r\n    deleteDailyAllows(id);\r\n    // toast({\r\n    //   title: `Site Allowances has been successfully deleted!`,\r\n    //   status: \"warning\",\r\n    // });\r\n  };\r\n\r\n  const add_SiteAllowsPeriod = () => {\r\n    handleAddPeriodDialogOpen();\r\n  };\r\n\r\n  const handleAddPeriodDialogOpen = () => {\r\n    setIsAddPeriodDialogOpen(true);\r\n  };\r\n\r\n  const handleAddPeriodDialogClose = () => {\r\n    setIsAddPeriodDialogOpen(false);\r\n  };\r\n\r\n  // const handleAllowsDetlDialogOpen = () => {\r\n  //   setIsAllowsDetlDialogOpen(true);\r\n  // };\r\n\r\n  const handleAllowsDetlDialogClose = () => {\r\n    //settoLoad(true);\r\n    setIsAllowsDetlDialogOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={dailyallows}\r\n          title={title}\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <EditIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          // editable={{\r\n          //   onRowUpdate: (newData, oldData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         // const dataUpdate = [...dailyallowances];\r\n          //         // const index = oldData.tableData.id;\r\n          //         // dataUpdate[index] = newData;\r\n          //         //setDailyAllowances([...dataUpdate]);\r\n          //         //approve_Expense(newData);\r\n          //         update_AllowsDetl();\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          // }}\r\n          actions={[\r\n            {\r\n              icon: \"add\",\r\n              tooltip: \"Add Record\",\r\n              isFreeAction: true,\r\n              onClick: (event, rowData) => {\r\n                add_SiteAllowsPeriod();\r\n              },\r\n            },\r\n            (rowData) => ({\r\n              disabled:\r\n                rowData.status === \"Approved\" || rowData.status === \"Submitted\",\r\n              icon: \"edit\",\r\n              tooltip: \"Edit Record\",\r\n              onClick: (event, rowData) => {\r\n                update_SiteAllowsDetl(rowData);\r\n              },\r\n            }),\r\n            (rowData) => ({\r\n              disabled:\r\n                rowData.status === \"Approved\" || rowData.status === \"Submitted\",\r\n              icon: \"delete\",\r\n              tooltip: \"Delete Record\",\r\n              onClick: (event, rowData) => {\r\n                delete_SiteAllows(rowData);\r\n              },\r\n            }),\r\n          ]}\r\n          options={{\r\n            filtering: true,\r\n            sorting: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  {error &&\r\n                    toast({\r\n                      title: \"Period already existed!\",\r\n                      status: \"warning\",\r\n                    })}\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <div className={classes.dialog}>\r\n          <CustomDialog\r\n            isOpen={isAddPeriodDialogOpen}\r\n            handleClose={handleAddPeriodDialogClose}\r\n            title=\"\"\r\n            showButton={true}\r\n            isFullscreen={false}\r\n            isFullwidth={false}\r\n          >\r\n            <DailyAllowancesAddPeriod\r\n              handleDialogClose={handleAddPeriodDialogClose}\r\n            />\r\n          </CustomDialog>\r\n        </div>\r\n        <div>\r\n          <CustomDialog\r\n            isOpen={isAllowsDetlDialogOpen}\r\n            handleClose={handleAllowsDetlDialogClose}\r\n            title=\"\"\r\n            showButton={true}\r\n            isFullscreen={false}\r\n            isFullwidth={false}\r\n          >\r\n            <DailyAllowsDetlsTableStaff\r\n              allowsdata={allowsdata}\r\n              allowsdataId={allowsdataId}\r\n              handleDialogClose={handleAllowsDetlDialogClose}\r\n            />\r\n          </CustomDialog>\r\n        </div>\r\n        <div>\r\n          <AlertDialogBox\r\n            onClose={handleDeleteAlertClose}\r\n            onConfirm={handleOnDeleteConfirm}\r\n            isOpen={isDeleteAlertOpen}\r\n            title=\"Delete Site Allowances Batch\"\r\n          >\r\n            <h2>Are you sure you want to delete ?</h2>\r\n          </AlertDialogBox>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n  dialog: {\r\n    width: 1000,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipForm.js",["1246","1247","1248","1249","1250"],"import React, { useState,  useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  TextField,\r\n  \r\n  Paper,\r\n  Typography,\r\n  \r\n  Divider,\r\n  Grid,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CardLayout from \"../helpers/CardLayout\";\r\nimport CardLayout2 from \"../helpers/CardLayout2\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport {\r\n  payPeriodState,\r\n  //payPeriodEndMonthState,\r\n  payPeriodEmpIdState,\r\n  //payEarningDataState,\r\n  //payDeductionDataState,\r\n} from \"./data/atomdata\";\r\n\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport Payslip_ViewEarnings from \"./Payslip_ViewEarnings\";\r\nimport Payslip_ViewDeductions from \"./Payslip_ViewDeductions\";\r\nimport Payslip_Earnings from \"./Payslip_Earnings\";\r\nimport Payslip_Deductions from \"./Payslip_Deductions\";\r\n\r\n// const initial_values = {\r\n//   name: \"\",\r\n//   period: \"\",\r\n//   date: \"\",\r\n//   bank_name: \"\",\r\n//   bank_acno: \"\",\r\n//   status: \"Pending\",\r\n//   total_earnings: 0,\r\n//   total_deductions: 0,\r\n//   tap_amount: 0,\r\n//   scp_amount: 0,\r\n//   basic_pay: 0,\r\n//   nett_pay: 0,\r\n//   tap_checkbox: true,\r\n// };\r\n\r\nconst PayslipForm = () => {\r\n  let navigate = useNavigate();\r\n   const classes = useStyles();\r\n  const {\r\n    //isPayslipEditing,\r\n    single_payslip,\r\n    updatePayslip,\r\n    //addPayslip,\r\n    editPayslipID,\r\n    //loadPayslips,\r\n    getSinglePayslip,\r\n    single_payslip_loading,\r\n    single_payslip_error,\r\n    //payslip_period,\r\n    //payslip_earning_amount,\r\n    //payslip_deduction_amount,\r\n    setPayslipEarningAmount,\r\n    setPayslipDeductionAmount,\r\n    payslipearnings,\r\n    payslipdeductions,\r\n    getSingleBatchPayslipEarnings,\r\n    getSingleBatchPayslipDeductions,\r\n  } = usePayslipsContext();\r\n  \r\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\r\n  const payPeriod = useRecoilValue(payPeriodState);\r\n    const [earningsdata, setEarningsdata] = useState([]);\r\n  const [oldEarningsdata, setOldEarningsdata] = useState([]);\r\n  const [deductionsdata, setDeductionsdata] = useState([]);\r\n  const [oldDeductionsdata, setOldDeductionsdata] = useState([]);\r\n  const [isEarningsDialogOpen, setIsEarningsDialogOpen] = useState(false);\r\n  const [isDeductionsDialogOpen, setIsDeductionsDialogOpen] = useState(false);\r\n  //const [state, setState] = useState(single_payslip);\r\n  const { handleSubmit, control } = useForm();\r\n\r\n  const {\r\n    name,\r\n    period,\r\n    date,\r\n    bank_name,\r\n    bank_acno,\r\n    //status,\r\n    total_earnings,\r\n    total_deductions,\r\n    tap_amount,\r\n    scp_amount,\r\n    basic_pay,\r\n    nett_pay,\r\n    tap_checkbox,\r\n  } = single_payslip;\r\n\r\n  useEffect(\r\n    getSinglePayslip(editPayslipID)\r\n  , []);\r\n\r\n  // useEffect(() => {\r\n  //   if (calc) {\r\n  //     setTimeout(() => {\r\n  //       console.log(\"calc\");\r\n  //       calc_totals();\r\n  //       setCalc(false);\r\n  //     }, 10000);\r\n  //   }\r\n  // }, [calc]);\r\n\r\n  const handleChange = (event) => {\r\n    //const { rec_id, ...fields } = single_payslip;\r\n    // const value =\r\n    //   event.target.type === \"number\"\r\n    //     ? parseInt(event.target.value, 10)\r\n    //     : event.target.value;\r\n    // setState({ ...state, [event.target.name]: value });\r\n  };\r\n\r\n  const calc_totals = () => {\r\n    let totalTAP = 0;\r\n    let totalSCP = 0;\r\n    if (tap_checkbox) {\r\n      totalTAP = Math.ceil(basic_pay * 0.05);\r\n      totalSCP = Math.round((basic_pay + Number.EPSILON) * 0.035 * 100) / 100;\r\n    }\r\n    console.log(\"calc\", totalTAP, totalSCP)\r\n    const totalEarnings = payslipearnings.reduce(\r\n      (a, v) => (a = a + v.amount),\r\n      0\r\n    );\r\n    const totalDeductions = payslipdeductions.reduce(\r\n      (a, v) => (a = a + v.amount),\r\n      0\r\n    );\r\n    const nettPay =\r\n      basic_pay + totalEarnings - totalDeductions - totalTAP - totalSCP;\r\n    setPayslipEarningAmount(totalEarnings);\r\n    setPayslipDeductionAmount(totalDeductions);\r\n    updatePayslip({\r\n      id: editPayslipID,\r\n      total_earnings: totalEarnings,\r\n      total_deductions: totalDeductions,\r\n      tap_amount: totalTAP,\r\n      scp_amount: totalSCP,\r\n      nett_pay: nettPay,\r\n    });\r\n    console.log(\r\n      \"total\",\r\n      totalEarnings,\r\n      totalDeductions,\r\n      totalTAP,\r\n      totalSCP,\r\n      nettPay\r\n    );\r\n    getSinglePayslip(editPayslipID);\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    const { rec_id, ...fields } = single_payslip;\r\n    updatePayslip(...fields);\r\n\r\n    // if (isPayslipEditing) {\r\n    //   updatePayslip({ id: editPayslipID, ...data });\r\n    // } else {\r\n    //   addPayslip({ ...data });\r\n    // }\r\n    // loadPayslips();\r\n    // history.push(\"/batchpayslips\");\r\n  };\r\n  const handleEarningsDialogOpen = () => {\r\n    // setPayEarningData([...payslipearnings]);\r\n    setOldEarningsdata([...payslipearnings]);\r\n    setEarningsdata([...payslipearnings]);\r\n    setIsEarningsDialogOpen(true);\r\n  };\r\n\r\n  const handleEarningsDialogClose = () => {\r\n    setIsEarningsDialogOpen(false);\r\n    getSingleBatchPayslipEarnings(payPeriodEmpId, payPeriod);\r\n  };\r\n  const handleDeductionsDialogOpen = () => {\r\n    setOldDeductionsdata([...payslipdeductions]);\r\n    setDeductionsdata([...payslipdeductions]);\r\n    setIsDeductionsDialogOpen(true);\r\n  };\r\n\r\n  const handleDeductionsDialogClose = () => {\r\n    setIsDeductionsDialogOpen(false);\r\n    getSingleBatchPayslipDeductions(payPeriodEmpId, payPeriod);\r\n  };\r\n\r\n  if (single_payslip_loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (single_payslip_error) {\r\n    navigate(\"/error\");\r\n  }\r\n  return (\r\n    <div>\r\n      <Paper className={classes.root}>\r\n        <Grid xs={12} md={8} lg={12}>\r\n          <CardLayout2 title=\"Employee Profile\">\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n              <Grid>\r\n                <div>\r\n                  <Typography variant=\"h5\" component=\"h3\">\r\n                    PAYSLIP FORM\r\n                  </Typography>\r\n                  <Typography component=\"p\">Payslip Preparation</Typography>\r\n\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                  >\r\n                    Submit <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                </div>\r\n              </Grid>\r\n              <Divider className={classes.divider} />\r\n              <Grid item xs={12}>\r\n                <div>\r\n                  <Controller\r\n                    name=\"name\"\r\n                    control={control}\r\n                    defaultValue={name}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Name\"\r\n                          id=\"margin-normal\"\r\n                          name=\"name\"\r\n                          defaultValue={name}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        >\r\n                          {/* {employees.map((e) => {\r\n                  return (\r\n                    <MenuItem key={e.name} value={e.name}>\r\n                      {e.name}\r\n                    </MenuItem>\r\n                  );\r\n                })} */}\r\n                        </TextField>\r\n                      );\r\n                    }}\r\n                    rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Controller\r\n                    name=\"period\"\r\n                    control={control}\r\n                    defaultValue={period}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Period\"\r\n                          id=\"margin-normal\"\r\n                          name=\"period\"\r\n                          defaultValue={period}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                  <Controller\r\n                    name=\"date\"\r\n                    control={control}\r\n                    defaultValue={date}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Date\"\r\n                          type=\"date\"\r\n                          id=\"margin-normal\"\r\n                          name=\"date\"\r\n                          defaultValue={date}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputLabelProps={{\r\n                            shrink: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Controller\r\n                    name=\"bank_name\"\r\n                    control={control}\r\n                    defaultValue={bank_name}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Bank Name\"\r\n                          id=\"margin-normal\"\r\n                          name=\"bank_name\"\r\n                          defaultValue={bank_name}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                  <Controller\r\n                    name=\"bank_acno\"\r\n                    control={control}\r\n                    defaultValue={bank_acno}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Bank AC No\"\r\n                          id=\"margin-normal\"\r\n                          name=\"bank_acno\"\r\n                          value={bank_acno}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Controller\r\n                    name=\"tap_amount\"\r\n                    control={control}\r\n                    defaultValue={tap_amount}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"TAP Contrinution\"\r\n                          type=\"currency\"\r\n                          id=\"standard-number\"\r\n                          name=\"tap_amount\"\r\n                          defaultValue={tap_amount}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            handleChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                  <Controller\r\n                    name=\"scp_amount\"\r\n                    control={control}\r\n                    defaultValue={scp_amount}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"SCP Contribution\"\r\n                          type=\"currency\"\r\n                          id=\"standard-number\"\r\n                          name=\"scp_amount\"\r\n                          defaultValue={scp_amount}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            handleChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Controller\r\n                    name=\"total_earnings\"\r\n                    control={control}\r\n                    defaultValue={total_earnings}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Total Earnings\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"total_earnings\"\r\n                          value={total_earnings}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            handleChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                  <Controller\r\n                    name=\"total_deductions\"\r\n                    control={control}\r\n                    defaultValue={total_deductions}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Total Deductions\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"total_deductions\"\r\n                          value={total_deductions}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            handleChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Controller\r\n                    name=\"basic_pay\"\r\n                    control={control}\r\n                    defaultValue={basic_pay}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Basic Pay\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"basic_pay\"\r\n                          value={basic_pay}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                          // onChange={(e) => {\r\n                          //   handleChange(parseInt(e.target.value, 10));\r\n                          // }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                  <Controller\r\n                    name=\"nett_pay\"\r\n                    control={control}\r\n                    defaultValue={nett_pay}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Nett Pay\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"nett_pay\"\r\n                          value={nett_pay}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            handleChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.button}\r\n                  onClick={calc_totals}\r\n                >\r\n                  Calc <Icon className={classes.rightIcon}>send</Icon>\r\n                </Button>\r\n              </Grid>\r\n              <Divider className={classes.divider} />\r\n            </form>\r\n          </CardLayout2>\r\n        </Grid>\r\n        <div>\r\n          <Grid container alignItems=\"center\" className={classes.grid}>\r\n            <Grid item xs={6} md={8} lg={6}>\r\n              <div>\r\n                <CardLayout\r\n                  title=\"Earnings\"\r\n                  handleClick={handleEarningsDialogOpen}\r\n                >\r\n                  <Payslip_ViewEarnings />\r\n                </CardLayout>\r\n              </div>\r\n            </Grid>\r\n            <Grid item xs={6} md={8} lg={6}>\r\n              <div>\r\n                <CardLayout\r\n                  title=\"Deductions\"\r\n                  handleClick={handleDeductionsDialogOpen}\r\n                >\r\n                  <Payslip_ViewDeductions />\r\n                </CardLayout>\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n        <Divider className={classes.divider} />\r\n        <CustomDialog\r\n          isOpen={isEarningsDialogOpen}\r\n          handleClose={handleEarningsDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <Payslip_Earnings\r\n            setEarningsdata={setEarningsdata}\r\n            earningsdata={earningsdata}\r\n            oldEarningsdata={oldEarningsdata}\r\n            handleDialogClose={handleEarningsDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isDeductionsDialogOpen}\r\n          handleClose={handleDeductionsDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <Payslip_Deductions\r\n            setDeductionsdata={setDeductionsdata}\r\n            deductionsdata={deductionsdata}\r\n            oldDeductionsdata={oldDeductionsdata}\r\n            handleDialogClose={handleDeductionsDialogClose}\r\n          />\r\n        </CustomDialog>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  divider: {\r\n    padding: 4,\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 350,\r\n  },\r\n  grid: {\r\n    padding: theme.spacing(3, 2),\r\n    // justifyContent: \"center\",\r\n  },\r\n  box: {\r\n    height: 100,\r\n    display: \"flex\",\r\n    border: \"1px solid black\",\r\n    padding: 8,\r\n  },\r\n}));\r\n\r\nexport default PayslipForm;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeFormNew.js",["1251","1252","1253","1254","1255","1256"],"import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  TextField,\r\n  Paper,\r\n  Typography,\r\n  Grid,\r\n  Divider,\r\n  Checkbox,\r\n  FormControlLabel,\r\n} from \"@material-ui/core\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { Controller, useForm, setValue } from \"react-hook-form\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\nimport { useAddEmployees } from \"./employees/useAddEmployees\";\r\nimport { useUpdateEmployees } from \"./employees/useUpdateEmployees\";\r\nimport { useDepartments } from \"./departments/useDepartments\";\r\nimport { useDesignations } from \"./designations/useDesignations\";\r\nimport App from \"../utils/firebase\";\r\n\r\n// import EmpFamily from \"./EmpFamily\";\r\n// import EmpEducations from \"./EmpEducations\";\r\n// import EmpExperiences from \"./EmpExperiences\";\r\n// import EmpTrainings from \"./EmpTrainings\";\r\n\r\nconst initial_values = {\r\n  name: \"\",\r\n  empno: \"\",\r\n  gender: \"\",\r\n  ic_no: \"\",\r\n  email: \"\",\r\n  age: 0,\r\n  birthdate: null,\r\n  address: \"\",\r\n  nationality: \"\",\r\n  basic_salary: 0,\r\n  salary_currency: \"BND\",\r\n  bank_name: \"\",\r\n  bank_acno: \"\",\r\n  tap_checkbox: true,\r\n  tap_acno: \"\",\r\n  scp_acno: \"\",\r\n  date_of_join: null,\r\n  date_of_resign: null,\r\n  leave_bal: 0,\r\n  leave_bf: 0,\r\n  leave_entitled: 0,\r\n  leave_cd: 0,\r\n  designation: \"\",\r\n  department: \"\",\r\n  passportno: \"\",\r\n  passport_expirydate: null,\r\n  workpermitno: \"\",\r\n  workpermit_expirydate: null,\r\n  siteallows_fee: 0,\r\n  perdiem_fee: 0,\r\n  role: 1,\r\n  password: \"abc123*\",\r\n  reporting_to: \"\",\r\n  reporting_email: \"\",\r\n};\r\n\r\nconst EmployeeFormNew = () => {\r\n  const classes = useStyles();\r\n  const {\r\n    isEditing,\r\n    single_employee,\r\n    //updateEmployee,\r\n    //addEmployee,\r\n    editEmployeeID,\r\n    single_employee_loading,\r\n  } = useEmployeesContext();\r\n  const {\r\n    name,\r\n    empno,\r\n    ic_no,\r\n    gender,\r\n    //age,\r\n    birthdate,\r\n    email,\r\n    address,\r\n    nationality,\r\n    basic_salary,\r\n    salary_currency,\r\n    bank_name,\r\n    bank_acno,\r\n    tap_checkbox,\r\n    tap_acno,\r\n    scp_acno,\r\n    leave_bal,\r\n    leave_bf,\r\n    leave_cd,\r\n    leave_entitled,\r\n    password,\r\n    date_of_join,\r\n    date_of_resign,\r\n    designation,\r\n    department,\r\n    passportno,\r\n    passport_expirydate,\r\n    workpermitno,\r\n    workpermit_expirydate,\r\n    siteallows_fee,\r\n    perdiem_fee,\r\n    reporting_to,\r\n    reporting_email,\r\n  } = single_employee || initial_values;\r\n  const addEmployees = useAddEmployees();\r\n  const updateEmployees = useUpdateEmployees();\r\n  const { employees } = useEmployees();\r\n  const { designations } = useDesignations();\r\n  const { departments } = useDepartments();\r\n  const [empage, setEmpage] = useState(0);\r\n  const [reportemail, setReportEmail] = useState(\"\");\r\n  //const [checktap, setCheckTap] = useState(false);\r\n  //const [alert, setAlert] = useState(false);\r\n  const { handleSubmit, control } = useForm();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  //console.log(\"emplevel\", loginLevel);\r\n\r\n  const calculateAge = (dob) => {\r\n    var today = new Date();\r\n    var birthDate = new Date(dob);\r\n    var age = today.getFullYear() - birthDate.getFullYear();\r\n    var m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      age--;\r\n    }\r\n    return age;\r\n  };\r\n\r\n  const handleReportingTo = (name) => {\r\n    const emp = employees\r\n      .filter((f) => f.name === name)\r\n      .map((r) => {\r\n        return { ...r };\r\n      });\r\n    setReportEmail(emp[0].email);\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    if (isEditing) {\r\n      updateEmployees({ id: editEmployeeID, ...data });\r\n    } else {\r\n      addEmployees({ password: \"abc123*\", role: 1, ...data });\r\n      try {\r\n        App.auth().createUserWithEmailAndPassword(email, \"abc123*\");\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    // setAlert(true);\r\n    // setTimeout(() => {\r\n    //   setAlert(false);\r\n    // }, 3000);\r\n    //loadEmployees();\r\n    // <Alert severity=\"success\">\r\n    //   <AlertTitle>Success</AlertTitle>\r\n    //   This is a success alert — <strong>check it out!</strong>\r\n    // </Alert>;\r\n    //history.push(\"/allemployees\");\r\n  };\r\n\r\n  if (single_employee_loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <Paper className={classes.root}>\r\n          <Grid container className={classes.root} spacing={15}>\r\n            <div>\r\n              <Typography variant=\"h5\" component=\"h3\">\r\n                EMPLOYEE FORM\r\n              </Typography>\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n              >\r\n                Submit <Icon className={classes.rightIcon}>send</Icon>\r\n              </Button>\r\n            </div>\r\n          </Grid>\r\n          <Divider className={classes.divider} />\r\n          <Grid item xs={12}>\r\n            <div>\r\n              <div>\r\n                <Controller\r\n                  name=\"name\"\r\n                  control={control}\r\n                  defaultValue={name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Name\"\r\n                        id=\"margin-normal\"\r\n                        name=\"name\"\r\n                        defaultValue={name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"empno\"\r\n                  control={control}\r\n                  defaultValue={empno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Emp No\"\r\n                        id=\"standard-empno\"\r\n                        defaultValue={empno}\r\n                        name=\"empno\"\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"email\"\r\n                  control={control}\r\n                  defaultValue={email}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Email\"\r\n                        id=\"margin-normal\"\r\n                        name=\"email\"\r\n                        defaultValue={email}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"ic_no\"\r\n                  control={control}\r\n                  defaultValue={ic_no}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"IC No\"\r\n                        id=\"margin-normal\"\r\n                        name=\"ic_no\"\r\n                        defaultValue={ic_no}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"birthdate\"\r\n                  control={control}\r\n                  defaultValue={birthdate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Birth Date\"\r\n                        id=\"margin-birthdate\"\r\n                        name=\"birthdate\"\r\n                        type=\"date\"\r\n                        defaultValue={birthdate}\r\n                        className={classes.textField}\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(parseInt(e.target.value, 10));\r\n                          let age = calculateAge(e.target.value);\r\n                          console.log(\"emp\", birthdate, age);\r\n                          setEmpage(age);\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"age\"\r\n                  control={control}\r\n                  defaultValue={empage}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Age\"\r\n                        type=\"number\"\r\n                        id=\"standard-number-age\"\r\n                        name=\"empage\"\r\n                        value={empage}\r\n                        className={classes.textField}\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(parseInt(e.target.value, 10));\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"passportno\"\r\n                  control={control}\r\n                  defaultValue={passportno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Passport No\"\r\n                        id=\"margin-normal\"\r\n                        name=\"passportno\"\r\n                        defaultValue={passportno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"passport_expirydate\"\r\n                  control={control}\r\n                  defaultValue={passport_expirydate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Passport Expiry Date\"\r\n                        id=\"margin-normal\"\r\n                        name=\"passport_expirydate\"\r\n                        type=\"date\"\r\n                        defaultValue={passport_expirydate}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"nationality\"\r\n                  control={control}\r\n                  defaultValue={nationality}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Nationality\"\r\n                        id=\"standard-nationality\"\r\n                        name=\"nationality\"\r\n                        defaultValue={nationality}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"gender\"\r\n                  control={control}\r\n                  defaultValue={gender}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Gender\"\r\n                        id=\"margin-normal\"\r\n                        name=\"gender\"\r\n                        defaultValue={gender}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        <MenuItem value=\"Male\">Male</MenuItem>\r\n                        <MenuItem value=\"Female\">Female</MenuItem>\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"address\"\r\n                  control={control}\r\n                  defaultValue={address}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Address\"\r\n                        id=\"standard-address\"\r\n                        name=\"address\"\r\n                        defaultValue={address}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <Divider className={classes.divider} />\r\n            <div>\r\n              <div>\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"basic_salary\"\r\n                    control={control}\r\n                    defaultValue={basic_salary}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Basic Salary\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"basic_pay\"\r\n                          defaultValue={basic_salary}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            onChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                        />\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"salary_currency\"\r\n                    control={control}\r\n                    defaultValue={salary_currency}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Currency\"\r\n                          id=\"standard-currency\"\r\n                          name=\"salary_currency\"\r\n                          defaultValue={salary_currency}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            onChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                          select\r\n                        >\r\n                          <MenuItem value=\"BND\">BND</MenuItem>\r\n                          <MenuItem value=\"USD\">USD</MenuItem>\r\n                          <MenuItem value=\"MYR\">MYR</MenuItem>\r\n                        </TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n              </div>\r\n              <div>\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"siteallows_fee\"\r\n                    control={control}\r\n                    defaultValue={siteallows_fee}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Site Allowances Fee\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"siteallows_fee\"\r\n                          defaultValue={siteallows_fee}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            onChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                        />\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"perdiem_fee\"\r\n                    control={control}\r\n                    defaultValue={perdiem_fee}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Per Diem Fee\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"perdiem_fee\"\r\n                          defaultValue={perdiem_fee}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            onChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                        />\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Controller\r\n                  name=\"tap_checkbox\"\r\n                  control={control}\r\n                  defaultValue={tap_checkbox}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Checkbox\r\n                            checked={tap_checkbox}\r\n                            onChange={onChange}\r\n                            name=\"tap_checkbox\"\r\n                          />\r\n                        }\r\n                        label=\"TAP/SCP Contribution\"\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"tap_acno\"\r\n                  control={control}\r\n                  defaultValue={tap_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"TAP Ac No\"\r\n                        id=\"margin-normal\"\r\n                        name=\"tap_acno\"\r\n                        defaultValue={tap_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"scp_acno\"\r\n                  control={control}\r\n                  defaultValue={scp_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"SCP Ac No\"\r\n                        id=\"margin-normal\"\r\n                        name=\"scp_acno\"\r\n                        defaultValue={scp_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"bank_name\"\r\n                  control={control}\r\n                  defaultValue={bank_name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Bank Name\"\r\n                        id=\"margin-normal\"\r\n                        name=\"bank_name\"\r\n                        defaultValue={bank_name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"bank_acno\"\r\n                  control={control}\r\n                  defaultValue={bank_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Bank Ac No\"\r\n                        id=\"margin-normal\"\r\n                        name=\"bank_acno\"\r\n                        defaultValue={bank_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  // rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"workpermitno\"\r\n                  control={control}\r\n                  defaultValue={workpermitno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Work Permit No\"\r\n                        id=\"margin-normal\"\r\n                        name=\"workpermitno\"\r\n                        defaultValue={workpermitno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"workpermit_expirydate\"\r\n                  control={control}\r\n                  defaultValue={workpermit_expirydate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Work Permit Expiry Date\"\r\n                        id=\"margin-normal\"\r\n                        name=\"workpermit_expirydate\"\r\n                        type=\"date\"\r\n                        defaultValue={workpermit_expirydate}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <Divider className={classes.divider} />\r\n              <div>\r\n                <Controller\r\n                  name=\"date_of_join\"\r\n                  control={control}\r\n                  defaultValue={date_of_join}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Joining Date\"\r\n                        id=\"margin-normal\"\r\n                        name=\"date_of_join\"\r\n                        type=\"date\"\r\n                        defaultValue={date_of_join}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"date_of_resign\"\r\n                  control={control}\r\n                  defaultValue={date_of_resign}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Resign Date\"\r\n                        id=\"margin-normal\"\r\n                        name=\"date_of_resign\"\r\n                        type=\"date\"\r\n                        defaultValue={date_of_resign}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"leave_entitled\"\r\n                  control={control}\r\n                  defaultValue={leave_entitled}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Annual Leaves Entitled\"\r\n                        id=\"standard-annualleave\"\r\n                        name=\"leave_entitled\"\r\n                        type=\"numeric\"\r\n                        defaultValue={leave_entitled}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"leave_bal\"\r\n                  control={control}\r\n                  defaultValue={leave_bal}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Leaves Balance\"\r\n                        id=\"standard-leavebal\"\r\n                        name=\"leave_bal\"\r\n                        type=\"numeric\"\r\n                        defaultValue={leave_bal}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"designation\"\r\n                  control={control}\r\n                  defaultValue={designation}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Designation\"\r\n                        id=\"margin-normal\"\r\n                        name=\"designation\"\r\n                        defaultValue={designation}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        {designations &&\r\n                          designations.map((r) => {\r\n                            return <MenuItem value={r.name}>{r.name}</MenuItem>;\r\n                          })}\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"department\"\r\n                  control={control}\r\n                  defaultValue={department}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Department\"\r\n                        id=\"margin-normal\"\r\n                        name=\"department\"\r\n                        defaultValue={department}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        {departments &&\r\n                          departments.map((r) => {\r\n                            return <MenuItem value={r.name}>{r.name}</MenuItem>;\r\n                          })}\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"reporting_to\"\r\n                  control={control}\r\n                  defaultValue={reporting_to}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Reporting To\"\r\n                        id=\"standard-reportingto\"\r\n                        name=\"reporting_to\"\r\n                        defaultValue={reporting_to}\r\n                        className={classes.textField}\r\n                        onChange={(e) => {\r\n                          onChange(e.target.value);\r\n                          handleReportingTo(e.target.value);\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        <MenuItem value=\"\">None</MenuItem>\r\n                        {employees &&\r\n                          employees.map((r) => {\r\n                            return <MenuItem value={r.name}>{r.name}</MenuItem>;\r\n                          })}\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"reporting_email\"\r\n                  control={control}\r\n                  defaultValue={reportemail}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Reporting Email\"\r\n                        id=\"standard-reportingemail\"\r\n                        name=\"reporting_email\"\r\n                        value={reportemail}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <Divider className={classes.divider} />\r\n            </div>\r\n          </Grid>\r\n          <Divider />\r\n        </Paper>\r\n      </form>\r\n\r\n      {/* <div>\r\n        <Grid xs={12}>\r\n          <EmpFamily />\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <EmpEducations />\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <EmpExperiences />\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <EmpTrainings />\r\n        </Grid>\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  divider: {\r\n    padding: 4,\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 350,\r\n  },\r\n}));\r\n\r\nexport default EmployeeFormNew;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowsDetlsTable.js",["1257","1258","1259","1260","1261","1262"],"import React, { useState, useEffect } from \"react\";\r\n//import { useHistory } from \"react-router-dom\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { TextField, Icon, Button } from \"@material-ui/core\";\r\nimport {\r\n  //selector,\r\n  useRecoilValue,\r\n  //useRecoilState,\r\n  //useRecoilValueLoadable,\r\n  //useRecoilStateLoadable,\r\n} from \"recoil\";\r\nimport {\r\n  //loginLevelState,\r\n  //allowsDataState,\r\n  empidState,\r\n  allowsPeriodState,\r\n} from \"./data/atomdata\";\r\n//import { fetchDailyAllowsDetlsSelector } from \"./data/selectordata\";\r\nimport { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\nimport { useDailyAllowsDetlsBatch } from \"./dailyallowsdetls/useDailyAllowsDetlsBatch\";\r\nimport { useDailyAllows } from \"./dailyallows/useDailyAllows\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Date\",\r\n    field: \"date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    cellStyle: {\r\n      width: 120,\r\n      maxWidth: 120,\r\n    },\r\n    editComponent: (props) => (\r\n      <TextField\r\n        defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        type=\"date\"\r\n      />\r\n    ),\r\n  },\r\n  { title: \"District\", field: \"district\" },\r\n  { title: \"Operation Type\", field: \"typeoperation\" },\r\n  { title: \"Client\", field: \"client\" },\r\n  { title: \"Location/Rig\", field: \"location\" },\r\n  { title: \"Ticket No/Job No\", field: \"jobno\" },\r\n  { title: \"Crew Operation\", field: \"crewoperation\" },\r\n  {\r\n    title: \"Job Bonus\",\r\n    field: \"jobbonus\",\r\n    type: \"currency\",\r\n    cellStyle: {\r\n      width: 8,\r\n      maxWidth: 8,\r\n    },\r\n    headerStyle: {\r\n      width: 8,\r\n      maxWidth: 8,\r\n    },\r\n  },\r\n  {\r\n    title: \"Per Diem\",\r\n    field: \"perdiem\",\r\n    type: \"currency\",\r\n    cellStyle: {\r\n      width: 8,\r\n      maxWidth: 8,\r\n    },\r\n    headerStyle: {\r\n      width: 8,\r\n      maxWidth: 8,\r\n    },\r\n  },\r\n];\r\n\r\nexport default function DailyAllowsDetlsTable() {\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  // const [allowsDetlsTable, setAllowsDetlsTable] =\r\n  // useRecoilState(allowsDataDetlsState);\r\n  //console.log(\"detlstable\", singlebatch_dailyallowsdetl);\r\n  //const [allowsDetlsdata, setAllowsDetilsdata] = useRecoilStateLoadable(fetchDailyAllowsDetlsSelector);\r\n  //const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const allows_period = useRecoilValue(allowsPeriodState);\r\n  const allows_empid = useRecoilValue(empidState);\r\n  const { dailyallows, dailyAllowsId, setDailyAllowsId } = useDailyAllows();\r\n  const {\r\n    useDailyAllowsDetlsBatch,\r\n    setDailyAllowsDetlsId,\r\n    setDailyAllowsDetlsPeriod,\r\n  } = useDailyAllowsDetlsBatch();\r\n  const {\r\n    dailyallowsdetls,\r\n    //addDailyAllowsDetl,\r\n    //dailyallowsdetls_loading,\r\n    //updateDailyAllowsDetl,\r\n    //deleteDailyAllowsDetl,\r\n    //getSingleBatchDailyAllowsDetl,\r\n    //singlebatch_dailyallowsdetl,\r\n    //singlebatch_dailyallowsdetl_loading,\r\n    //dailyallowance_period,\r\n    //single_dailyallowance,\r\n    //editDailyAllowanceID,\r\n  } = useDailyAllowancesContext();\r\n\r\n  // useEffect(() => {\r\n  //   getSingleBatchDailyAllowsDetl(allows_empid, allows_period);\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    setDailyAllowsId(allows_empid);\r\n    setDailyAllowsDetlsPeriod(allows_period);\r\n    setDailyAllowsDetlsId(allows_empid);\r\n  }, [allows_period, allows_empid]);\r\n\r\n  // const add_DailyAllowsDetl = async (data) => {\r\n  //   console.log(\"add\", data);\r\n  //   const { description, amount } = data;\r\n  //   addDailyAllowsDetl({\r\n  //     description: description,\r\n  //     amount: amount,\r\n  //     name: single_dailyallowance.name,\r\n  //     empid: single_dailyallowance.empid,\r\n  //     period: dailyallowance_period,\r\n  //   });\r\n  // };\r\n\r\n  // const delete_DailyAllowance = (data) => {\r\n  //   const { id } = data;\r\n  //   deleteDailyAllowsDetl(id);\r\n  //   //update_Daily Allowances Details;\r\n  //   getSingleBatchDailyAllowsDetl(\r\n  //     single_dailyallowance.empid,\r\n  //     dailyallowance_period\r\n  //   );\r\n  // };\r\n\r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"75%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={dailyallowsdetls}\r\n          title=\"Site Allowances Details\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                // setTimeout(() => {\r\n                //   setAllowsdata([...allowsdata, newData]);\r\n                //   resolve();\r\n                // }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataUpdate = [...dailyallowsdetls];\r\n                  const index = oldData.tableData.id;\r\n                  dataUpdate[index] = newData;\r\n                  //setAllowsDetlsTable([...dataUpdate]);\r\n                  //editable = dataUpdate;\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            // onRowDelete: (oldData) =>\r\n            //   new Promise((resolve, reject) => {\r\n            //     setTimeout(() => {\r\n            //       //const dataDelete = [...allowsDetlsTable];\r\n            //       const index = oldData.tableData.id;\r\n            //       //dataDelete.splice(index, 1);\r\n            //       //setAllowsDetlsTable([...dataDelete]);\r\n\r\n            //       resolve();\r\n            //     }, 1000);\r\n            //   }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    // onClick={Save_Allowsdata}\r\n                  >\r\n                    Update <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n    width: 1500,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\CurrencyTable.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\useUpdateEmployees.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\useEmployees.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payslips\\useUpdatePayslips.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDailyAllowsStatus.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableView.js",["1263","1264"],"import React, { useState, useEffect } from \"react\";\r\n//import { useHistory, Link } from \"react-router-dom\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  //useSetRecoilState,\r\n  useRecoilValue,\r\n  //useRecoilState,\r\n  //useRecoilValueLoadable,\r\n} from \"recoil\";\r\nimport {\r\n  allowsPeriodState,\r\n  //allowsDataState,\r\n  //empidState,\r\n} from \"./data/atomdata\";\r\n//import { fetchDailyAllowancesSelector } from \"./data/selectordata\";\r\n//import AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\n//import DeleteIcon from \"@material-ui/icons/Delete\";\r\n//import CheckIcon from \"@material-ui/icons/Check\";\r\n//import SearchIcon from \"@material-ui/icons/Search\";\r\n//import ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\n//import { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\n//import DailyAllowsDetlsTable from \"./DailyAllowsDetlsTable\";\r\nimport { useDailyAllowsStatus } from \"./dailyallows/useDailyAllowsStatus\";\r\n\r\nconst FILTERSTRING = \"Verified\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n  },\r\n  { title: \"Period\", field: \"period\" },\r\n  { title: \"Location\", field: \"location\" },\r\n  { title: \"Manager\", field: \"manager_name\" },\r\n  { title: \"Days\", field: \"no_of_days\", type: \"numeric\" },\r\n  { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n  { title: \"Status\", field: \"status\" },\r\n];\r\n\r\nexport default function DailyAllowancesTable() {\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  //const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  //const [tmpallowsdata, setTmpallowsdata] = useState([]);\r\n  const allows_period = useRecoilValue(allowsPeriodState);\r\n  //const allows_empid = useRecoilValue(empidState);\r\n  //const [allowsdata, setAllowsdata] = useRecoilState(allowsDataState);\r\n  const { dailyallowsstatus, setDailyAllowsStatusId } = useDailyAllowsStatus();\r\n  //const setEmpID = useSetRecoilState(empidState);\r\n  const title = `Site Allowances (${allows_period})`;\r\n  //const {\r\n    //dailyallowances,\r\n    //loadPendingDailyAllowances,\r\n    //singlebatch_dailyallowance,\r\n    //inglebatch_dailyallowance_loading,\r\n    //deleteDailyAllowance,\r\n    //setEditDailyAllowanceID,\r\n    //setIsDailyAllowanceEditingOn,\r\n    //setIsDailyAllowanceEditingOff,\r\n    //resetSingleDailyAllowance,\r\n    //dailyallowance_period,\r\n    //getSingleBatchDailyAllowance,\r\n  //} = useDailyAllowancesContext();\r\n\r\n  useEffect(() => {\r\n   setDailyAllowsStatusId(FILTERSTRING);\r\n  }, []);\r\n\r\n  //const handleDialogOpen = () => {\r\n    //console.log(\"allowsdetls\", allowsdata, allowsdataRef, singlebatch_dailyallowsdetl);\r\n    //setAllowsdata({ singlebatch_dailyallowsdetl });\r\n    //setIsDialogOpen(true);\r\n  //};\r\n\r\n  //const handleDialogClose = () => {\r\n    //setIsDialogOpen(false);\r\n    //getSingleBatchDailyAllowance(dailyallowance_period);\r\n  //};\r\n\r\n  \r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={dailyallowsstatus}\r\n          title={title}\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"black\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n  dialog: {\r\n    width: 1000,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableAdmin.js",["1265"],"import React, { useState } from \"react\";\r\n//import { useHistory } from \"react-router-dom\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport {\r\n  //useSetRecoilState,\r\n  useRecoilValue,\r\n  useRecoilState,\r\n  //useRecoilValueLoadable,\r\n} from \"recoil\";\r\nimport {\r\n  allowsPeriodState,\r\n  allowsDataState,\r\n  //empidState,\r\n} from \"./data/atomdata\";\r\n//import { fetchDailyAllowancesSelector } from \"./data/selectordata\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n//import ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport DailyAllowsDetlsTable from \"./DailyAllowsDetlsTable\";\r\n\r\n//const FILTERSTRING = \"Submitted\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n    editable: \"never\",\r\n  },\r\n  { title: \"Period\", field: \"period\", editable: \"never\" },\r\n  { title: \"Location\", field: \"location\", editable: \"never\" },\r\n  { title: \"Manager Name\", field: \"manager\", editable: \"never\" },\r\n  {\r\n    title: \"No Of Days\",\r\n    field: \"no_of_days\",\r\n    type: \"numeric\",\r\n    editable: \"never\",\r\n  },\r\n  { title: \"Amount\", field: \"amount\", type: \"currency\", editable: \"never\" },\r\n  {\r\n    title: \"Status\",\r\n    field: \"status\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        //defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        style={{ width: 100 }}\r\n        value={props.value}\r\n        select\r\n      >\r\n        <MenuItem value=\"Pending\">Pending</MenuItem>\r\n        <MenuItem value=\"Approved\">Approved</MenuItem>\r\n        <MenuItem value=\"Rejected\">Rejected</MenuItem>\r\n        <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n      </TextField>\r\n    ),\r\n  },\r\n];\r\n\r\nexport default function DailyAllowancesTable({\r\n  dailyallowancesdata,\r\n  setDailyAllowancesdata,\r\n  update_dailyallowance_error,\r\n  handleDialogClose,\r\n}) {\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  //const [tmpallowsdata, setTmpallowsdata] = useState([]);\r\n  const allows_period = useRecoilValue(allowsPeriodState);\r\n  //const allows_empid = useRecoilValue(empidState);\r\n  const [allowsdata, setAllowsdata] = useRecoilState(allowsDataState);\r\n  //const setEmpID = useSetRecoilState(empidState);\r\n  const title = `Site Allowances (${allows_period})`;\r\n  const {\r\n    //dailyallowances_loading,\r\n    //singlebatch_dailyallowance,\r\n    //singlebatch_dailyallowance_loading,\r\n    //deleteDailyAllowance,\r\n    updateDailyAllowance,\r\n    //setEditDailyAllowanceID,\r\n    //setIsDailyAllowanceEditingOn,\r\n    //setIsDailyAllowanceEditingOff,\r\n    //resetSingleDailyAllowance,\r\n    //dailyallowance_period,\r\n    //getSingleBatchDailyAllowance,\r\n  } = useDailyAllowancesContext();\r\n\r\n  // const Save_DailyAllowancesData = () => {\r\n  //   dailyallowancesdata.forEach((data) => {\r\n  //     const { id } = data;\r\n  //     if (id) {\r\n  //       const { id, rec_id, tableData, ...fields } = data;\r\n  //       updateDailyAllowance({ id, ...fields });\r\n  //     }\r\n  //   });\r\n\r\n  //   handleDialogClose();\r\n  // };\r\n\r\n  const Approve_DailyAllowancesData = () => {\r\n    dailyallowancesdata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        updateDailyAllowance({ id: rec.id, status: \"Approved\" });\r\n        //update leavesdata\r\n        if (!update_dailyallowance_error) {\r\n          const recdata = dailyallowancesdata.filter((r) => r.id === rec.id);\r\n          recdata[0].status = \"Approved\";\r\n        }\r\n      }\r\n    });\r\n    dailyallowancesdata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  const Reject_DailyAllowancesData = () => {\r\n    dailyallowancesdata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        updateDailyAllowance({ id: rec.id, status: \"Rejected\" });\r\n        //update leavesdata\r\n        if (!update_dailyallowance_error) {\r\n          const recdata = dailyallowancesdata.filter((r) => r.id === rec.id);\r\n          recdata[0].status = \"Rejected\";\r\n        }\r\n      }\r\n    });\r\n    dailyallowancesdata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={dailyallowancesdata}\r\n          title={title}\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <EditIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          // editable={{\r\n          //   onRowUpdate: (newData, oldData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         const dataUpdate = [...dailyallowancesdata];\r\n          //         const index = oldData.tableData.id;\r\n          //         dataUpdate[index] = newData;\r\n          //         setDailyAllowancesdata([...dataUpdate]);\r\n          //         //approve_Expense(newData);\r\n\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          // }}\r\n          options={{\r\n            filtering: true,\r\n            selection: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Approve_DailyAllowancesData}\r\n                  >\r\n                    Approve\r\n                  </Button>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Reject_DailyAllowancesData}\r\n                  >\r\n                    Reject\r\n                  </Button>\r\n                  {/* <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Save_DailyAllowancesData}\r\n                  >\r\n                    Update <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button> */}\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <div className={classes.dialog}>\r\n          <CustomDialog\r\n            isOpen={isDialogOpen}\r\n            handleClose={handleDialogClose}\r\n            title=\"\"\r\n            showButton={true}\r\n            isFullscreen={true}\r\n            isFullwidth={true}\r\n          >\r\n            <DailyAllowsDetlsTable\r\n              setAllowsdata={setAllowsdata}\r\n              allowsdata={allowsdata}\r\n              handleDialogClose={handleDialogClose}\r\n            />\r\n          </CustomDialog>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  dialog: {\r\n    width: 1000,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\pages\\index.js",[],"D:\\react-myprojects\\hrms-demo\\src\\helpers\\useCustomToast.ts",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\user\\useUser.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmpJobhistory.js",["1266","1267","1268","1269","1270"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport {\r\n  Heading,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { AiFillEdit, AiFillDelete, AiOutlinePlus } from \"react-icons/ai\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useJobhistory } from \"./jobhistory/useJobhistory\";\r\nimport { useUpdateJobhistory } from \"./jobhistory/useUpdateJobhistory\";\r\nimport { useAddJobhistory } from \"./jobhistory/useAddJobhistory\";\r\nimport { useDeleteJobhistory } from \"./jobhistory/useDeleteJobhistory\";\r\nimport JobhistoryForm from \"./JobhistoryForm\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\n\r\nconst initial_jobhistory = {\r\n  empid: \"\",\r\n  name: \"\",\r\n  designation: \"\",\r\n  department: \"\",\r\n  status: \"\",\r\n  remark: \"\",\r\n  basicsalary: 0,\r\n  siteallows: 0,\r\n  isresign: false,\r\n};\r\n\r\nexport default function Emp_Jobhistory({\r\n  empid,\r\n  staffname,\r\n  basicsalary,\r\n  siteallows,\r\n  department,\r\n  designation,\r\n  jobhistorydata,\r\n  setJobhistorydata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const { jobhistory, filter, setFilter, setJobId } = useJobhistory();\r\n  //const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const updateJobhistory = useUpdateJobhistory();\r\n  const addJobhistory = useAddJobhistory();\r\n  const deleteJobhistory = useDeleteJobhistory();\r\n  const [state, setState] = useState({});\r\n  const [statustype, setStatusType] = useState(\"\");\r\n  const { editEmployeeID } = useEmployeesContext();\r\n  const {\r\n    isOpen: isJobOpen,\r\n    onOpen: onJobOpen,\r\n    onClose: onJobClose,\r\n  } = useDisclosure();\r\n  const {\r\n    isOpen: isAlertDeleteOpen,\r\n    onOpen: onAlertDeleteOpen,\r\n    onClose: onAlertDeleteClose,\r\n  } = useDisclosure();\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Designation\",\r\n      field: \"designation\",\r\n    },\r\n    {\r\n      title: \"Department\",\r\n      field: \"department\",\r\n    },\r\n    {\r\n      title: \"Effective Date\",\r\n      field: \"effectdate\",\r\n      type: \"date\",\r\n      dateSetting: { locale: \"en-GB\" },\r\n      editComponent: (props) => (\r\n        <TextField\r\n          defaultValue={props.value || new Date()}\r\n          onChange={(e) => props.onChange(e.target.value)}\r\n          type=\"date\"\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      title: \"Status\",\r\n      field: \"status\",\r\n    },\r\n    {\r\n      title: \"Remark\",\r\n      field: \"remark\",\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    setJobId(editEmployeeID);\r\n  }, []);\r\n\r\n  const add_Jobhistory = (data) => {\r\n    console.log(\"addjob\", data);\r\n    addJobhistory({\r\n      ...data,\r\n    });\r\n  };\r\n\r\n  const delete_Jobhistory = (id) => {\r\n    deleteJobhistory(id);\r\n  };\r\n\r\n  const update_Jobhistory = (data) => {\r\n    const { id, rec_id, tableData, ...fields } = data;\r\n    updateJobhistory({ id, ...fields });\r\n  };\r\n\r\n  const handleAddJobhistory = () => {\r\n    const data = {\r\n      ...initial_jobhistory,\r\n      name: staffname,\r\n      empid: empid,\r\n      basicsalary: basicsalary,\r\n      siteallows: siteallows,\r\n      department: department,\r\n      designation: designation,\r\n    };\r\n    setState(data);\r\n    onJobOpen(true);\r\n  };\r\n\r\n  const handleUpdateJobhistory = (data) => {\r\n    setState(data);\r\n    onJobOpen(true);\r\n  };\r\n\r\n  const handleDeleteJobhistory = (rowData) => {\r\n    setState((prev) => (prev = { ...rowData }));\r\n    onAlertDeleteOpen();\r\n  };\r\n\r\n  const handleOnDeleteConfirm = () => {\r\n    const { id } = state;\r\n    delete_Jobhistory(id);\r\n    // toast({\r\n    //   title: \"Order being deleted!\",\r\n    //   status: \"warning\",\r\n    // });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={jobhistory}\r\n          title=\"Employment History\"\r\n          actions={[\r\n            {\r\n              icon: () => <AiOutlinePlus size=\"30px\" />,\r\n              tooltip: \"Add Record\",\r\n              isFreeAction: true,\r\n              onClick: (event, rowData) => {\r\n                setStatusType((prev) => (prev = \"add\"));\r\n                handleAddJobhistory(rowData);\r\n              },\r\n            },\r\n            (rowData) => ({\r\n              //disabled: rowData.status !== \"Pending\",\r\n              icon: () => <AiFillEdit size=\"30px\" />,\r\n              tooltip: \"Edit Record\",\r\n              onClick: (event, rowData) => {\r\n                setStatusType((prev) => (prev = \"edit\"));\r\n                handleUpdateJobhistory(rowData);\r\n              },\r\n            }),\r\n            (rowData) => ({\r\n              //disabled: rowData.status !== \"Pending\",\r\n              icon: () => <AiFillDelete />,\r\n              tooltip: \"Delete Record\",\r\n              onClick: (event, rowData) => {\r\n                handleDeleteJobhistory(rowData);\r\n              },\r\n            }),\r\n          ]}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n      <Modal\r\n        closeOnOverlayClick={false}\r\n        isOpen={isJobOpen}\r\n        onClose={onJobClose}\r\n        size=\"lg\"\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          {/* <ModalHeader>Product Form</ModalHeader> */}\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            <JobhistoryForm\r\n              state={state}\r\n              setState={setState}\r\n              statustype={statustype}\r\n              add_Item={add_Jobhistory}\r\n              update_Item={update_Jobhistory}\r\n              onJobClose={onJobClose}\r\n            />\r\n          </ModalBody>\r\n\r\n          {/* <ModalFooter>\r\n            <Button colorScheme=\"blue\" mr={3} onClick={onProductClose}>\r\n              Close\r\n            </Button>\r\n          </ModalFooter> */}\r\n        </ModalContent>\r\n      </Modal>\r\n      <AlertDialogBox\r\n        onClose={onAlertDeleteClose}\r\n        onConfirm={handleOnDeleteConfirm}\r\n        isOpen={isAlertDeleteOpen}\r\n        title=\"Delete Employment History\"\r\n      >\r\n        <Heading size=\"md\">\r\n          Are you sure you want to delete this history record ?\r\n        </Heading>\r\n      </AlertDialogBox>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\helpers\\AlertDialogBox.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\Payslip_Deductions.js",["1271"],"import React, {  useEffect } from \"react\";\r\n\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, Icon, TextField, MenuItem } from \"@material-ui/core\";\r\nimport {  useRecoilValue } from \"recoil\";\r\nimport {\r\n  payPeriodState,\r\n  //payPeriodEndMonthState,\r\n  payPeriodEmpIdState,\r\n  //payEarningDataState,\r\n} from \"./data/atomdata\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\n\r\nexport default function Payslip_Deductions({\r\n  //setCalc,\r\n  deductionsdata,\r\n  oldDeductionsdata,\r\n  setDeductionsdata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\r\n  const payPeriod = useRecoilValue(payPeriodState);\r\n  //const payEarningData = useRecoilValue(payEarningDataState);\r\n  const {\r\n    //payslipdeductions,\r\n    //payslip_deduction_amount,\r\n    //setPayslipDeductionAmount,\r\n    //loadPayslipDeductions,\r\n    addPayslipDeduction,\r\n    payslipdeductions_loading,\r\n    updatePayslipDeduction,\r\n    deletePayslipDeduction,\r\n    //updatePayslip,\r\n    //editPayslipID,\r\n    single_payslip,\r\n    payslip_period,\r\n    getSingleBatchPayslipDeductions,\r\n  } = usePayslipsContext();\r\n  //const { name, amount } = payslipdeductions;\r\n  const { deductions } = useTablesContext();\r\n\r\n  // const calc_Deduction = (data) => {\r\n  //   const sum = data.reduce((a, v) => (a = a + v.amount), 0);\r\n  //   setPayslipDeductionAmount(sum);\r\n  // };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Description\",\r\n      field: \"description\",\r\n      editComponent: (props) => (\r\n        <TextField\r\n          //defaultValue={props.value || null}\r\n          onChange={(e) => props.onChange(e.target.value)}\r\n          style={{ width: 200 }}\r\n          value={props.value}\r\n          select\r\n        >\r\n          {deductions.map((r) => {\r\n            return <MenuItem value={r.name}>{r.name}</MenuItem>;\r\n          })}\r\n        </TextField>\r\n      ),\r\n    },\r\n    { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  }, []);\r\n\r\n  // const update_Payslip = () => {\r\n  //   const { rec_id, id, total_deductions, ...paydata } = single_payslip;\r\n  //   updatePayslip({\r\n  //     id: editPayslipID,\r\n  //     total_deductions: payslip_deduction_amount,\r\n  //     ...paydata,\r\n  //   });\r\n  //};\r\n\r\n  // const update_PayslipDeduction = async (data) => {\r\n  //   const { id, rec_id, empid, ...fields } = data;\r\n  //   updatePayslipDeduction({ id: data.id, empid: empid, ...fields });\r\n  //   update_Payslip();\r\n  //   getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  // const add_PayslipDeduction = (data) => {\r\n  //   const { description, amount } = data;\r\n  //   addPayslipDeduction({\r\n  //     description: description,\r\n  //     amount: amount,\r\n  //     name: single_payslip.name,\r\n  //     empid: single_payslip.empid,\r\n  //     period: single_payslip.period,\r\n  //   });\r\n  //   getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  //};\r\n\r\n  // const delete_PayslipDeduction = (data) => {\r\n  //   const { id } = data;\r\n  //   deletePayslipDeduction(id);\r\n  //   getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  const Save_DeductionsData = () => {\r\n    // delete unwanted data\r\n    console.log(\"update\", deductionsdata, oldDeductionsdata);\r\n    oldDeductionsdata.forEach((row) => {\r\n      const { id, rec_id } = row;\r\n      const res = deductionsdata.find((r) => r.rec_id === rec_id);\r\n      console.log(\"find\", id, res);\r\n      if (!res) {\r\n        deletePayslipDeduction(id);\r\n      }\r\n    });\r\n    //add or update new data\r\n\r\n    deductionsdata.forEach((data) => {\r\n      const { id, description, amount } = data;\r\n      if (id) {\r\n        const { id, rec_id, tableData, ...fields } = data;\r\n        updatePayslipDeduction({ id, ...fields });\r\n      } else {\r\n        addPayslipDeduction({\r\n          description: description,\r\n          amount: amount,\r\n          name: single_payslip.name,\r\n          empid: payPeriodEmpId,\r\n          period: payPeriod,\r\n        });\r\n      }\r\n    });\r\n    handleDialogClose();\r\n  };\r\n\r\n  if (payslipdeductions_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading... Expenses.</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={deductionsdata}\r\n          title=\"Deductions\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  setDeductionsdata([...deductionsdata, newData]);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataUpdate = [...deductionsdata];\r\n                  const index = oldData.tableData.id;\r\n                  dataUpdate[index] = newData;\r\n                  setDeductionsdata([...dataUpdate]);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataDelete = [...deductionsdata];\r\n                  const index = oldData.tableData.id;\r\n                  dataDelete.splice(index, 1);\r\n                  setDeductionsdata([...dataDelete]);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Save_DeductionsData}\r\n                  >\r\n                    Update <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDailyAllows.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useUpdateLeaves.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useUpdateExpenses.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\useDailyAllowsDetlsBatch.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\designations\\useDesignations.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\currency\\useAddCurrency.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\react-query\\constants.js",[],"D:\\react-myprojects\\hrms-demo\\src\\helpers\\CustomDialog.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\ErrorPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\JobhistoryForm.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\useDeleteJobhistory.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\useUpdateJobhistory.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\useAddJobhistory.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\useJobhistory.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\user-storage\\index.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\jobstatus\\useJobstatus.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\departments\\useDepartments.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\jobstatus\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\ClientsPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\PrivateRoute.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\DailyAllowancesPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\DailyAllowancesStaffPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\TablesPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\DesignationPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\DepartmentsPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\AllowancesPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\BatchPayslipsPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\PayslipPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\PayrollPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\PayslipStaffPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\UserAccessPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\TrainingsStaffPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\ExpensesStaffPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\HocPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\ExpensesPage.js",["1272"],"import React, { useEffect } from \"react\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\n//import { headExpenseTableCells } from \"../utils/constants\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\nimport ExpenseTable from \"../components/ExpenseTable\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst ExpensesPage = () => {\r\n  const classes = useStyles();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const { loadExpenses, expenses_loading } = useExpensesContext();\r\n\r\n  useEffect(() => {\r\n    loadExpenses();\r\n  }, []);\r\n\r\n  if (expenses_loading) {\r\n    return (\r\n      <div>\r\n        <Paper className={fixedHeightPaper}>\r\n          \r\n        <h2>Loading...Expenses</h2>\r\n         </Paper>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div>\r\n      <CssBaseline />\r\n      <div className={classes.appBarSpacer}>\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid container spacing={3}>\r\n            {/* <Grid item xs={12} md={8} lg={9}> */}\r\n            <Grid item xs={12}>\r\n              <Paper className={fixedHeightPaper}>\r\n                <div>\r\n                  <ExpenseTable title=\"Expenses Claims\" />\r\n                </div>\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(9),\r\n    paddingBottom: theme.spacing(4),\r\n    border: \"1px solid\",\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    // display: \"flex\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n    border: \"1px solid\",\r\n    width: \"100%\",\r\n  },\r\n  fixedHeight: {\r\n    // height: 240,\r\n    height: \"85vh\",\r\n  },\r\n}));\r\nexport default ExpensesPage;\r\n","D:\\react-myprojects\\hrms-demo\\src\\pages\\LeaveStaffPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\LeavePage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\AllEmployeesPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\DashboardPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\HomePage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesPeriods.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\TablesUpdate.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\Example.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\TableForm.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTable.js",["1273","1274","1275"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport BuildOutlinedIcon from \"@material-ui/icons/BuildOutlined\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { payrunState, payrunIdState, payrunStatusState } from \"./data/atomdata\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\n//import { useExpensesContext } from \"../context/expenses_context\";\r\n//import { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\nimport { usePayrun } from \"./payrun/usePayrun\";\r\nimport { usePayslipsBatch } from \"./payslips/usePayslipsBatch\";\r\nimport { useDeletePayrun } from \"./payrun/useDeletePayrun\";\r\nimport { useExpensesPayrun } from \"./expenses/useExpensesPayrun\";\r\nimport { useUpdateExpenses } from \"./expenses/useUpdateExpenses\";\r\nimport { useDailyAllowsPayrun } from \"./dailyallows/useDailyAllowsPayrun\";\r\nimport { useUpdateDailyAllows } from \"./dailyallows/useUpdateDailyAllows\";\r\n\r\n//const FILTERSTRING = \"Pending\";\r\n\r\nconst columns = [\r\n  // { title: \"Period\", field: \"period\" },\r\n  {\r\n    title: \"Payrun Batch\",\r\n    field: \"payrun\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n  },\r\n  // {\r\n  //   title: \"Pay Date\",\r\n  //   field: \"pay_date\",\r\n  //   type: \"date\",\r\n  //   dateSetting: { locale: \"en-GB\" },\r\n  // },\r\n  { title: \"Total Wages\", field: \"totalwages\", type: \"currency\" },\r\n  { title: \"TAP Amount\", field: \"totaltap\", type: \"currency\" },\r\n  { title: \"SCP Amount\", field: \"totalscp\", type: \"currency\" },\r\n  { title: \"Site Allowances\", field: \"totalsitesallows\", type: \"currency\" },\r\n  { title: \"Expenses Claims\", field: \"totalexpensesclaims\", type: \"currency\" },\r\n  { title: \"Total Allowances\", field: \"totalallows\", type: \"currency\" },\r\n  { title: \"Total Deductions\", field: \"totaldeducts\", type: \"currency\" },\r\n  { title: \"Total Payroll\", field: \"totalpayroll\", type: \"currency\" },\r\n  { title: \"Status\", field: \"status\" },\r\n];\r\n\r\nexport default function PayslipTable() {\r\n  let navigate = useNavigate();\r\n  const toast = useCustomToast();\r\n  const classes = useStyles();\r\n  const { payrun } = usePayrun();\r\n  const { payslipsbatch,  setPSBPayrunId } = usePayslipsBatch();\r\n  const { expensespayrun, setExpPayrunId } = useExpensesPayrun();\r\n  const { dailyallowspayrun, setDailyAllowsPayrunId } = useDailyAllowsPayrun();\r\n  const updateExpenses = useUpdateExpenses();\r\n  const deletePayrun = useDeletePayrun();\r\n  const updateDailyAllows = useUpdateDailyAllows();\r\n  const [input, setInput] = useRecoilState(payrunState);\r\n  //const [isLoadInput, setIsLoadInput] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const [deletestate, setDeletestate] = useState({ id: \"\", payrun: \"\" });\r\n  const [payrunId, setPayrunId] = useRecoilState(payrunIdState);\r\n  const [payrunstatus, setPayrunStatus] = useRecoilState(payrunStatusState);\r\n  // const { loadPeriodExpenses, periodexpenses, updateExpense } =\r\n  //   useExpensesContext();\r\n  // const {\r\n  //   getSingleBatchDailyAllowance,\r\n  //   singlebatchdailyallowance,\r\n  //   updateDailyAllowance,\r\n  //   deleteDailyAllowance,\r\n  // } = useDailyAllowancesContext();\r\n  const {\r\n    //payrun,\r\n    //getPayrun,\r\n    payrun_loading,\r\n    payrun_error,\r\n    getSinglePayslip,\r\n    setEditPayslipID,\r\n    setIsPayslipEditingOn,\r\n    //single_payslip,\r\n    setPayslipPeriod,\r\n    //deletePayrun,\r\n    deletePayslip,\r\n    //pending_payslips,\r\n    //loadPendingPayslips,\r\n  } = usePayslipsContext();\r\n\r\n  useEffect(() => {\r\n    setPSBPayrunId(\"XXX\");\r\n    setDailyAllowsPayrunId(\"XXX\");\r\n  }, []);\r\n  // useEffect(() => {\r\n  //   if (single_payslip.payrun) {\r\n  //     console.log(\"single_payslip\", single_payslip);\r\n  //   }\r\n  // }, [single_payslip]);\r\n\r\n  const handleAlertOpen = () => {\r\n    setIsAlertOpen(true);\r\n  };\r\n\r\n  const handleAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const update_Input = async (data) => {\r\n    console.log(\"input\", data);\r\n\r\n    setInput({\r\n      ...input,\r\n      id: data.id,\r\n      payfreq: data.payfreq,\r\n      fromdate: data.fromdate,\r\n      todate: data.todate,\r\n      paydate: data.paydate,\r\n      period: data.period,\r\n      payrun: data.payrun,\r\n      totalwages: data.totalwages,\r\n      totaltap: data.totaltap,\r\n      totalscp: data.totalscp,\r\n      totalallows: data.totalallows,\r\n      totaldeducts: data.totaldeducts,\r\n      totalpayroll: data.totalpayroll,\r\n      status: data.status,\r\n    });\r\n\r\n    setInput({\r\n      ...input,\r\n      id: data.id,\r\n      payfreq: data.payfreq,\r\n      fromdate: data.fromdate,\r\n      todate: data.todate,\r\n      paydate: data.paydate,\r\n      period: data.period,\r\n      payrun: data.payrun,\r\n      totalwages: data.totalwages,\r\n      totaltap: data.totaltap,\r\n      totalscp: data.totalscp,\r\n      totalallows: data.totalallows,\r\n      totaldeducts: data.totaldeducts,\r\n      totalpayroll: data.totalpayroll,\r\n      status: data.status,\r\n    });\r\n    console.log(\"payrun\", input);\r\n  };\r\n\r\n  const update_Payslip = async (data) => {\r\n    const { id, payrun } = data;\r\n    setPayrunId(id);\r\n    setPayrunStatus(data.status);\r\n    setPayslipPeriod(payrun); //save to recoil\r\n    setEditPayslipID(id);\r\n    setIsPayslipEditingOn();\r\n    getSinglePayslip(id);\r\n    navigate(\"/payrunbatch\");\r\n  };\r\n\r\n  const delete_Payslip = (data) => {\r\n    const { id, payrun } = data;\r\n    setDeletestate({ id: id, payrun: payrun });\r\n    setPSBPayrunId(payrun);\r\n    setExpPayrunId(payrun);\r\n    setDailyAllowsPayrunId(payrun);\r\n    //loadPeriodExpenses(payrun);\r\n    //getSingleBatchDailyAllowance(payrun);\r\n    handleAlertOpen();\r\n  };\r\n\r\n  const handleOnDeleteConfirm = (data) => {\r\n    console.log(\"payslip delete\", deletestate);\r\n    const { id, payrun } = deletestate;\r\n\r\n    //load period expenses\r\n    //loadPeriodExpenses(payrun);\r\n\r\n    //delete allows detls\r\n    payslipsbatch &&\r\n      payslipsbatch.forEach((rec) => {\r\n        if (rec.payrun === payrun) {\r\n          deletePayslip(rec.id);\r\n        }\r\n      });\r\n\r\n    //unpaid expenses\r\n    expensespayrun &&\r\n      expensespayrun.forEach((rec) => {\r\n        if (rec.payrun === payrun) {\r\n          updateExpenses({ id: rec.id, payrun: \"\" });\r\n        }\r\n      });\r\n\r\n    //delete dailyallows\r\n    dailyallowspayrun &&\r\n      dailyallowspayrun.forEach((rec) => {\r\n        if (rec.payrun === payrun) {\r\n          updateDailyAllows({ id: rec.id, payrun: \"\" });\r\n        }\r\n      });\r\n\r\n    //delete payrun\r\n    deletePayrun(id);\r\n    toast({\r\n      title: `Payroll Batch being deleted!`,\r\n      status: \"warning\",\r\n    });\r\n    //getPayrun();\r\n  };\r\n\r\n  if (payrun_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading.....Payslips</h2>\r\n      </div>\r\n    );\r\n  }\r\n  if (payrun_error) {\r\n    return (\r\n      <div>\r\n        <h2>Internet connection problem!</h2>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={payrun}\r\n          title=\"Payroll\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <EditIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n            Build: (props) => <BuildOutlinedIcon />,\r\n          }}\r\n          actions={[\r\n            (rowData) => ({\r\n              //disabled: rowData.status !== \"Pending\",\r\n              icon: \"edit\",\r\n              position: \"row\",\r\n              tooltip: \"Edit Record\",\r\n              onClick: (event, rowData) => {\r\n                update_Input(rowData);\r\n                update_Payslip(rowData);\r\n              },\r\n            }),\r\n            (rowData) => ({\r\n              disabled: rowData.status !== \"Pending\",\r\n              icon: \"delete\",\r\n              tooltip: \"Delete Record\",\r\n              position: \"row\",\r\n              onClick: (event, rowData) => {\r\n                //delete_Payslip(rowData);\r\n                delete_Payslip(rowData);\r\n              },\r\n            }),\r\n\r\n            // {\r\n            //   icon: \"add\",\r\n            //   tooltip: \"Add Record\",\r\n            //   isFreeAction: true,\r\n            //   onClick: (event, rowData) => {\r\n            //     add_Payslip(rowData);\r\n            //   },\r\n            // },\r\n          ]}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"black\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                {/* <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={(e) => handleVerifyPayslipData(e)}\r\n                  >\r\n                    Verify <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                </div> */}\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <AlertDialogBox\r\n          onClose={handleAlertClose}\r\n          onConfirm={handleOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete Payslip Batch\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\currency\\useDeleteCurrency.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTableStaff.js",["1276","1277"],"import React, { useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport PrintIcon from \"@material-ui/icons/Print\";\r\nimport BuildOutlinedIcon from \"@material-ui/icons/BuildOutlined\";\r\n//import { useHistory } from \"react-router-dom\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport {\r\n  //payPeriodState,\r\n  //payPeriodEndMonthState,\r\n  //payPeriodEmpIdState,\r\n  loginLevelState,\r\n} from \"./data/atomdata\";\r\n//import { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { usePayslips } from \"./payslips/usePayslips\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\nimport PrintPayslip from \"./PrintPayslip\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n  },\r\n  { title: \"Period\", field: \"payrun\" },\r\n  // {\r\n  //   title: \"Date\",\r\n  //   field: \"date\",\r\n  //   type: \"date\",\r\n  //   dateSetting: { locale: \"en-GB\" },\r\n  // },\r\n  { title: \"Basic Pay\", field: \"wages_bnd\", type: \"currency\" },\r\n  { title: \"TAP Amount\", field: \"tap_amount_bnd\", type: \"currency\" },\r\n  { title: \"SCP Amount\", field: \"scp_amount_bnd\", type: \"currency\" },\r\n  { title: \"Site Allowances\", field: \"site_allows_bnd\", type: \"currency\" },\r\n  { title: \"Expenses Claims\", field: \"expenses_claims_bnd\", type: \"currency\" },\r\n  { title: \"Allowances\", field: \"total_allowances_bnd\", type: \"currency\" },\r\n  { title: \"Deductions\", field: \"total_deductions_bnd\", type: \"currency\" },\r\n  { title: \"Nett Pay\", field: \"nett_pay_bnd\", type: \"currency\" },\r\n  // { title: \"Bank Name\", field: \"bank_name\" },\r\n  // { title: \"Bank AC No\", field: \"bank_accno\" },\r\n  { title: \"Status\", field: \"status\" },\r\n];\r\n\r\nexport default function PayslipTable() {\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { employees } = useEmployees();\r\n  const { payslips, setFilter } = usePayslips();\r\n\r\n  //const {\r\n  //deletePayslip,\r\n  //loadPayslips,\r\n  //getSinglePayslip,\r\n  //setEditPayslipID,\r\n  //setIsPayslipEditingOn,\r\n  //setIsPayslipEditingOff,\r\n  //resetSinglePayslip,\r\n  //payslip_period,\r\n  //payslip_endmonthdate,\r\n  //} = usePayslipsContext();\r\n  //console.log(\"payslipstable\", payslips)\r\n  const exportPdfTable = ({ data, emp }) => {\r\n    PrintPayslip({ data, emp });\r\n  };\r\n\r\n  const print_Payslip = async (data) => {\r\n    const { empid } = data.rowData;\r\n    const emp = employees\r\n      .filter((f) => f.id === empid)\r\n      .map((r) => {\r\n        return { ...r };\r\n      });\r\n    exportPdfTable({ data, emp });\r\n  };\r\n\r\n  // const update_Payslip = async (data) => {\r\n  //   const { id } = data;\r\n  //   setPayPeriodEmpId(id); //save to recoil\r\n  //   setEditPayslipID(id);\r\n  //   setIsPayslipEditingOn();\r\n  //   getSinglePayslip(id);\r\n  //   history.push(\"/singlepayslip\");\r\n  //};\r\n\r\n  // const add_Payslip = async (data) => {\r\n  //   const { id } = data;\r\n  //   resetSinglePayslip();\r\n  //   setEditPayslipID(\"\");\r\n  //   setIsPayslipEditingOff();\r\n  //   history.push(\"/singlepayslip\");\r\n  // };\r\n\r\n  // const delete_Payslip = (data) => {\r\n  //   const { id } = data;\r\n  //   setEditPayslipID(id);\r\n  //   deletePayslip(id);\r\n  //   loadPayslips();\r\n  //};\r\n\r\n  useEffect(() => {\r\n    setFilter(loginLevel.loginUserId);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          //data={payslips}\r\n          data={payslips.sort((a, b) =>\r\n            a.payrun > b.payrun ? -1 : b.payrun > a.payrun ? 1 : 0\r\n          )}\r\n          title=\"Payslips\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <EditIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n            Build: (props) => <BuildOutlinedIcon />,\r\n            Print: (props) => <PrintIcon />,\r\n          }}\r\n          actions={[\r\n            {\r\n              icon: \"print\",\r\n              tooltip: \"Print Payslip\",\r\n              onClick: (event, rowData) => {\r\n                print_Payslip({ rowData });\r\n              },\r\n            },\r\n            // {\r\n            //   icon: \"delete\",\r\n            //   tooltip: \"Delete Record\",\r\n            //   onClick: (event, rowData) => {\r\n            //     delete_Payslip(rowData);\r\n            //   },\r\n            // },\r\n            // {\r\n            //   icon: \"add\",\r\n            //   tooltip: \"Add Record\",\r\n            //   isFreeAction: true,\r\n            //   onClick: (event, rowData) => {\r\n            //     add_Payslip(rowData);\r\n            //   },\r\n            // },\r\n          ]}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpTrainings.js",["1278","1279","1280"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { TextField, MenuItem } from \"@material-ui/core\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\n//import { useTrainingsContext } from \"../context/trainings_context\";\r\nimport { useTrainings } from \"./trainings/useTrainings\";\r\nimport { useInstitutes } from \"./institutes/useInstitutes\";\r\nimport { useUpdateTrainings } from \"./trainings/useUpdateTrainings\";\r\nimport { useAddTrainings } from \"./trainings/useAddTrainings\";\r\nimport { useDeleteTrainings } from \"./trainings/useDeleteTrainings\";\r\n\r\n\r\nexport default function Emp_Training({\r\n  trainingdata,\r\n  setTrainingdata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const { trainings,  setTrainingId } = useTrainings();\r\n  const { institutes } = useInstitutes();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const updateTrainings = useUpdateTrainings();\r\n  const addTrainings = useAddTrainings();\r\n  const deleteTrainings = useDeleteTrainings();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n  // const {\r\n  //   //getSingleBatchTraining,\r\n  //   //singlebatch_training,\r\n  //   //addTraining,\r\n  //   //deleteTraining,\r\n  //   //updateTraining,\r\n  //   //singlebatch_training_loading,\r\n  // } = useTrainingsContext();\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Institute\",\r\n    field: \"institute\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        //defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        style={{ width: 100 }}\r\n        value={props.value}\r\n        select\r\n      >\r\n        <MenuItem value=\"\">None</MenuItem>\r\n        {institutes &&\r\n          institutes.map((r) => {\r\n            return <MenuItem value={r.name}>{r.name}</MenuItem>;\r\n          })}\r\n      </TextField>\r\n    ),\r\n  },\r\n  {\r\n    title: \"Course\",\r\n    field: \"course\",\r\n  },\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editComponent: (props) => (\r\n      <TextField\r\n        defaultValue={props.value || new Date()}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        type=\"date\"\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editComponent: (props) => (\r\n      <TextField\r\n        defaultValue={props.value || new Date()}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        type=\"date\"\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    title: \"Expiry Date\",\r\n    field: \"expiry_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editComponent: (props) => (\r\n      <TextField\r\n        defaultValue={props.value || new Date()}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        type=\"date\"\r\n      />\r\n    ),\r\n  },\r\n];\r\n\r\n  useEffect(() => {\r\n    setTrainingId(editEmployeeID);\r\n  }, []);\r\n\r\n  const add_Training = (data) => {\r\n    addTrainings({\r\n      ...data,\r\n      name: loginLevel.loginUser,\r\n      empid: editEmployeeID,\r\n    });\r\n  };\r\n\r\n  const delete_Training = (data) => {\r\n    const { id } = data;\r\n    deleteTrainings(id);\r\n  };\r\n\r\n  const update_Training = (data) => {\r\n    const { id, rec_id, tableData, ...fields } = data;\r\n    updateTrainings({ id, ...fields });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={trainings}\r\n          title=\"Training\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  add_Training(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  update_Training(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  delete_Training(oldData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableStaff.js",["1281","1282","1283"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { TextField, MenuItem } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport CheckCircleOutlineOutlinedIcon from \"@material-ui/icons/CheckCircleOutlineOutlined\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\n//import { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\nimport { useExpenses } from \"./expenses/useExpenses\";\r\n//import { useAddExpenses } from \"./expenses/useAddExpenses\";\r\nimport { useDeleteExpenses } from \"./expenses/useDeleteExpenses\";\r\n//import { useUpdateExpenses } from \"./expenses/useUpdateExpenses\";\r\n\r\nconst initial_form = {\r\n  name: \"\",\r\n  date: \"\",\r\n  purchased_from: \"\",\r\n  description: \"\",\r\n  status: \"Pending\",\r\n  amount: 0,\r\n};\r\n\r\nconst columns = [\r\n  { title: \"Name\", field: \"name\", editable: \"never\" },\r\n  {\r\n    title: \"Date\",\r\n    field: \"date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n\r\n  {\r\n    title: \"Description\",\r\n    field: \"description\",\r\n    editable: \"never\",\r\n  },\r\n  { title: \"Amount\", field: \"amount\", type: \"currency\", editable: \"never\" },\r\n  {\r\n    title: \"Status\",\r\n    field: \"status\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        //defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        style={{ width: 100 }}\r\n        value={props.value}\r\n        select\r\n      >\r\n        <MenuItem value=\"Pending\">Pending</MenuItem>\r\n        <MenuItem value=\"Approve\">Approve</MenuItem>\r\n        <MenuItem value=\"Reject\">Reject</MenuItem>\r\n        <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n      </TextField>\r\n    ),\r\n  },\r\n];\r\n\r\nexport default function ExpenseTable() {\r\n  const classes = useStyles();\r\n  //const toast = useCustomToast();\r\n  //const [isLoad, setIsLoad] = useState(false);\r\n  const { expenses, setFilter, setExpenseId } = useExpenses();\r\n  //const updateExpenses = useUpdateExpenses();\r\n  //const addExpenses = useAddExpenses();\r\n  const deleteExpenses = useDeleteExpenses();\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  //const [expensesdata, setExpensesdata] = useState([]);\r\n  //const [alertSuccess, setAlertSuccess] = useState(false);\r\n  const [formdata, setFormdata] = useState(initial_form);\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  //const { editEmployeeID } = useEmployeesContext();\r\n  const {\r\n    //expenses,\r\n    editExpenseID,\r\n    //updateExpense,\r\n    //addExpense,\r\n    //deleteExpense,\r\n    setEditExpenseID,\r\n    setIsExpenseEditingOn,\r\n    setIsExpenseEditingOff,\r\n  } = useExpensesContext();\r\n\r\n  useEffect(() => {\r\n    setFilter(loginLevel.loginUserId);\r\n  }, []);\r\n\r\n  const add_Expense = async (data) => {\r\n    // const { id } = data;\r\n    setFormdata(initial_form);\r\n    setFormdata(initial_form);\r\n    setIsExpenseEditingOff();\r\n    handleDialogOpen();\r\n    // history.push(\"/singleexpense\");\r\n  };\r\n\r\n  const update_Expense = async (data) => {\r\n    const { id } = data;\r\n    setFormdata({ ...data });\r\n    setFormdata({ ...data });\r\n    setEditExpenseID(id);\r\n    setIsExpenseEditingOn();\r\n    handleDialogOpen();\r\n\r\n    // history.push(\"/singleexpense\");\r\n  };\r\n\r\n  const delete_Expense = (data) => {\r\n    const { id } = data;\r\n    setEditExpenseID(id);\r\n    handleAlertOpen();\r\n\r\n    // deleteExpense(id);\r\n    // loadExpenses();\r\n  };\r\n\r\n  const handleDialogOpen = () => {\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n  };\r\n\r\n  const handleAlertOpen = () => {\r\n    setIsAlertOpen(true);\r\n  };\r\n\r\n  const handleAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleOnDeleteConfirm = () => {\r\n    const id = editExpenseID;\r\n    deleteExpenses(id);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={expenses}\r\n          title=\"Expenses Claims Application\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <CheckCircleOutlineOutlinedIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          // editable={{\r\n          //   onRowUpdate: (newData, oldData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         const dataUpdate = [...expensesdata];\r\n          //         const index = oldData.tableData.id;\r\n          //         dataUpdate[index] = newData;\r\n          //         setExpensesdata([...dataUpdate]);\r\n          //         //approve_Expense(newData);\r\n\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          // }}\r\n          actions={[\r\n            (rowData) => ({\r\n              disabled: rowData.status !== \"Pending\",\r\n              icon: \"edit\",\r\n              tooltip: \"Edit Record\",\r\n              onClick: (event, rowData) => {\r\n                update_Expense(rowData);\r\n              },\r\n            }),\r\n            (rowData) => ({\r\n              disabled: rowData.status !== \"Pending\",\r\n              icon: \"delete\",\r\n              tooltip: \"Delete Record\",\r\n              onClick: (event, rowData) => {\r\n                delete_Expense(rowData);\r\n              },\r\n            }),\r\n            {\r\n              icon: \"add\",\r\n              tooltip: \"Add Record\",\r\n              isFreeAction: true,\r\n              onClick: (event, rowData) => {\r\n                add_Expense(rowData);\r\n              },\r\n            },\r\n          ]}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <CustomDialog\r\n          isOpen={isDialogOpen}\r\n          handleClose={handleDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <ExpenseForm\r\n            formdata={formdata}\r\n            setFormdata={setFormdata}\r\n            handleDialogClose={handleDialogClose}\r\n          />\r\n        </CustomDialog>\r\n\r\n        <AlertDialogBox\r\n          onClose={handleAlertClose}\r\n          onConfirm={handleOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete Expenses\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\HocTable.js",["1284","1285"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { format } from \"date-fns\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport CheckCircleOutlineOutlinedIcon from \"@material-ui/icons/CheckCircleOutlineOutlined\";\r\n//import { useCustomToast } from \"../helpers/useCustomToast\";\r\n//import { useExpensesContext } from \"../context/expenses_context\";\r\nimport HocForm from \"./HocForm\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\nimport { useHoc } from \"./hoc/useHoc\";\r\n//import { useAddHoc } from \"./hoc/useAddHoc\";\r\nimport { useDeleteHoc } from \"./hoc/useDeleteHoc\";\r\n//import { useUpdateHoc } from \"./hoc/useUpdateHoc\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Findings\",\r\n    field: \"findings\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      minWidth: 200,\r\n      maxWidth: 200,\r\n    },\r\n  },\r\n  {\r\n    title: \"Risks\",\r\n    field: \"risks\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      minWidth: 150,\r\n      maxWidth: 150,\r\n    },\r\n  },\r\n  {\r\n    title: \"Type/Category\",\r\n    field: \"category\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"What\",\r\n    field: \"what\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"What Details\",\r\n    field: \"what_details\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      minWidth: 150,\r\n      maxWidth: 150,\r\n    },\r\n  },\r\n  {\r\n    title: \"Why\",\r\n    field: \"why\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Why Details\",\r\n    field: \"why_details\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Discussion\",\r\n    field: \"discussion\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Action\",\r\n    field: \"action\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      minWidth: 200,\r\n      maxWidth: 200,\r\n    },\r\n  },\r\n  {\r\n    title: \"Follow-up required?\",\r\n    field: \"isfollowup\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Work Related?\",\r\n    field: \"isworkrelated\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Raised By\",\r\n    field: \"raisedby\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Raised On\",\r\n    field: \"raisedon\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Company\",\r\n    field: \"company\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Location\",\r\n    field: \"location\",\r\n    editable: \"never\",\r\n  },\r\n  // {\r\n  //   title: \"Department\",\r\n  //   field: \"department\",\r\n  //   editable: \"never\",\r\n  // },\r\n];\r\n\r\nconst initial_form = {\r\n  findings: \"\",\r\n  category: \"\",\r\n  what: \"\",\r\n  what_details: \"\",\r\n  why: \"\",\r\n  why_details: \"\",\r\n  discussion: \"No\",\r\n  action: \"\",\r\n  isfollowup: \"No\",\r\n  isworkrelated: \"No\",\r\n  raisedby: \"\",\r\n  email: \"\",\r\n  raisedon: null,\r\n  company: \"APPSMITH SUTERA\",\r\n  location: \" \",\r\n  department: \"\",\r\n};\r\n\r\nexport default function HocTable() {\r\n  const classes = useStyles();\r\n  //const toast = useCustomToast();\r\n  //const [isLoad, setIsLoad] = useState(false);\r\n  const { hoc, setHocId } = useHoc();\r\n  //const updateHoc = useUpdateHoc();\r\n  //const addHoc = useAddHoc();\r\n  const deleteHoc = useDeleteHoc();\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  //const [hocdata, setHocdata] = useState([]);\r\n  //const [alertSuccess, setAlertSuccess] = useState(false);\r\n  const [formdata, setFormdata] = useState(initial_form);\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const [isEditId, setIsEditId] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    //console.log(\"loginid\", loginLevel.loginUserId)\r\n    setHocId(loginLevel.loginUserId);\r\n  }, []);\r\n\r\n  const add_Hoc = async (data) => {\r\n    //const { id } = data;\r\n    let today = format(new Date(), \"yyyy-MM-dd\");\r\n    //console.log(\"today\", today);\r\n    setIsEditId((prev) => (prev = \"\"));\r\n    setFormdata(\r\n      (prev) =>\r\n        (prev = {\r\n          ...data,\r\n          raisedby: loginLevel.loginUser,\r\n          email: loginLevel.loginEmail,\r\n          company: \"APPSMITHS SUTERA\",\r\n          raisedon: today,\r\n        })\r\n    );\r\n    //setFormdata(initial_form);\r\n    //setIsHocEditingOff();\r\n    handleDialogOpen();\r\n    // history.push(\"/singleexpense\");\r\n  };\r\n\r\n  const update_Hoc = async (data) => {\r\n    console.log(\"hoc\", data);\r\n    const { id } = data;\r\n    setIsEditId((prev) => (prev = id));\r\n    setFormdata((prev) => (prev = { ...data }));\r\n    //setFormdata({ ...data });\r\n    //setHocId(prev => prev = id)\r\n    //setEditHocID(id);\r\n    //setIsExpenseEditingOn();\r\n    handleDialogOpen();\r\n\r\n    // history.push(\"/singleexpense\");\r\n  };\r\n\r\n  const delete_Hoc = (data) => {\r\n    const { id } = data;\r\n    setIsEditId((prev) => (prev = id));\r\n    handleAlertOpen();\r\n\r\n    // deleteExpense(id);\r\n    // loadExpenses();\r\n  };\r\n\r\n  const handleDialogOpen = () => {\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n  };\r\n\r\n  const handleAlertOpen = () => {\r\n    setIsAlertOpen(true);\r\n  };\r\n\r\n  const handleAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleOnDeleteConfirm = () => {\r\n    //const id = isEditId;\r\n    deleteHoc(isEditId);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={hoc}\r\n          title=\"HOC Tables\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <CheckCircleOutlineOutlinedIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          // editable={{\r\n          //   onRowUpdate: (newData, oldData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         const dataUpdate = [...expensesdata];\r\n          //         const index = oldData.tableData.id;\r\n          //         dataUpdate[index] = newData;\r\n          //         setExpensesdata([...dataUpdate]);\r\n          //         //approve_Expense(newData);\r\n\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          // }}\r\n          actions={[\r\n            (rowData) => ({\r\n              icon: \"edit\",\r\n              tooltip: \"Edit Record\",\r\n              onClick: (event, rowData) => {\r\n                update_Hoc(rowData);\r\n              },\r\n            }),\r\n            (rowData) => ({\r\n              icon: \"delete\",\r\n              tooltip: \"Delete Record\",\r\n              onClick: (event, rowData) => {\r\n                delete_Hoc(rowData);\r\n              },\r\n            }),\r\n            {\r\n              icon: \"add\",\r\n              tooltip: \"Add Record\",\r\n              isFreeAction: true,\r\n              onClick: (event, rowData) => {\r\n                add_Hoc(rowData);\r\n              },\r\n            },\r\n          ]}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <CustomDialog\r\n          isOpen={isDialogOpen}\r\n          handleClose={handleDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n          isEditId={isEditId}\r\n        >\r\n          <HocForm\r\n            formdata={formdata}\r\n            setFormdata={setFormdata}\r\n            handleDialogClose={handleDialogClose}\r\n          />\r\n        </CustomDialog>\r\n\r\n        <AlertDialogBox\r\n          onClose={handleAlertClose}\r\n          onConfirm={handleOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete HOC\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTable.js",["1286"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { TextField, MenuItem } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport CheckCircleOutlineOutlinedIcon from \"@material-ui/icons/CheckCircleOutlineOutlined\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\n\r\nconst columns = [\r\n  { title: \"Name\", field: \"name\", editable: \"never\" },\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Description\",\r\n    field: \"description\",\r\n    editable: \"never\",\r\n  },\r\n  { title: \"Amount\", field: \"amount\", type: \"currency\", editable: \"never\" },\r\n  {\r\n    title: \"Status\",\r\n    field: \"status\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        //defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        style={{ width: 100 }}\r\n        value={props.value}\r\n        select\r\n      >\r\n        <MenuItem value=\"Pending\">Pending</MenuItem>\r\n        <MenuItem value=\"Approve\">Approve</MenuItem>\r\n        <MenuItem value=\"Reject\">Reject</MenuItem>\r\n        <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n      </TextField>\r\n    ),\r\n  },\r\n];\r\n\r\nexport default function ExpenseTable() {\r\n  const classes = useStyles();\r\n  //const [isLoad, setIsLoad] = useState(false);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const [expensesdata, setExpensesdata] = useState([]);\r\n  //const { loadEmployees } = useEmployeesContext();\r\n  const {\r\n    expenses,\r\n    editExpenseID,\r\n    //updateExpense,\r\n    //expenses_loading,\r\n    deleteExpense,\r\n    loadExpenses,\r\n    getSingleExpense,\r\n    setEditExpenseID,\r\n    setIsExpenseEditingOn,\r\n    setIsExpenseEditingOff,\r\n    resetSingleExpense,\r\n  } = useExpensesContext();\r\n\r\n  useEffect(() => {\r\n    setExpensesdata(expenses);\r\n    //console.log(expensesdata)\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   loadEmployees();\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   if (expenses) {\r\n  //     setExpensesdata(expenses);\r\n  //     console.log(\"expenses\", expenses, expensesdata)\r\n  //   } else {\r\n  //     setIsLoad(!isLoad);\r\n  //   }\r\n  // }, [isLoad]);\r\n\r\n  const add_Expense = async (data) => {\r\n    // const { id } = data;\r\n    resetSingleExpense();\r\n    setEditExpenseID(\"\");\r\n    setIsExpenseEditingOff();\r\n    handleDialogOpen();\r\n    // history.push(\"/singleexpense\");\r\n  };\r\n\r\n  // const approve_Expense = async (data) => {\r\n  //   console.log(\"approve\", data);\r\n  //   const { id, rec_id, ...fields } = data;\r\n  //   updateExpense({ id, ...fields });\r\n  //   // loadExpenses();\r\n  // };\r\n\r\n  const update_Expense = async (data) => {\r\n    const { id } = data;\r\n    setEditExpenseID(id);\r\n    setIsExpenseEditingOn();\r\n    getSingleExpense(id);\r\n    handleDialogOpen();\r\n    // history.push(\"/singleexpense\");\r\n  };\r\n\r\n  const delete_Expense = (data) => {\r\n    const { id } = data;\r\n    setEditExpenseID(id);\r\n    handleAlertOpen();\r\n\r\n    // deleteExpense(id);\r\n    // loadExpenses();\r\n  };\r\n\r\n  const handleDialogOpen = () => {\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n    loadExpenses();\r\n  };\r\n\r\n  const handleAlertOpen = () => {\r\n    setIsAlertOpen(true);\r\n  };\r\n\r\n  const handleAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleOnDeleteConfirm = () => {\r\n    const id = editExpenseID;\r\n    deleteExpense(id);\r\n    loadExpenses();\r\n  };\r\n\r\n  // if (expenses_loading) {\r\n  //   return (\r\n  //     <div>\r\n  //       <h2>Loading...Expenses</h2>\r\n  //     </div>\r\n  //   );\r\n  // }\r\nif (!expensesdata) {\r\n  return (\r\n    <div>\r\n      <h2>Loading...Expenses</h2>\r\n    </div>\r\n  );\r\n}\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={expensesdata}\r\n          title=\"Expenses Claims Application\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <CheckCircleOutlineOutlinedIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          editable={{\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataUpdate = [...expensesdata];\r\n                  const index = oldData.tableData.id;\r\n                  dataUpdate[index] = newData;\r\n                  setExpensesdata([...dataUpdate]);\r\n                  //approve_Expense(newData);\r\n\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          actions={[\r\n            {\r\n              icon: \"edit\",\r\n              tooltip: \"Edit Record\",\r\n              onClick: (event, rowData) => {\r\n                update_Expense(rowData);\r\n              },\r\n            },\r\n            {\r\n              icon: \"delete\",\r\n              tooltip: \"Delete Record\",\r\n              onClick: (event, rowData) => {\r\n                delete_Expense(rowData);\r\n              },\r\n            },\r\n            {\r\n              icon: \"add\",\r\n              tooltip: \"Add Record\",\r\n              isFreeAction: true,\r\n              onClick: (event, rowData) => {\r\n                add_Expense(rowData);\r\n              },\r\n            },\r\n          ]}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n        />\r\n        <CustomDialog\r\n          isOpen={isDialogOpen}\r\n          handleClose={handleDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscree={false}\r\n          isFullwidth={false}\r\n        >\r\n          <ExpenseForm handleDialogClose={handleDialogClose} />\r\n        </CustomDialog>\r\n\r\n        <AlertDialogBox\r\n          onClose={handleAlertClose}\r\n          onConfirm={handleOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete Expenses\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableStaff.js",["1287","1288","1289","1290","1291"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { TextField, MenuItem } from \"@material-ui/core\";\r\nimport {\r\n  Box,\r\n  Heading,\r\n  Grid,\r\n  GridItem,\r\n  HStack,\r\n  Select,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport LeaveForm from \"./LeaveForm\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\n//import CustomAlertDialog from \"../helpers/CustomAlertDialog\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useLeaves } from \"./leaves/useLeaves\";\r\n//import { useAddLeaves } from \"./leaves/useAddLeaves\";\r\nimport { useDeleteLeaves } from \"./leaves/useDeleteLeaves\";\r\n//import { useUpdateLeaves } from \"./leaves/useUpdateLeaves\";\r\n//import { useSingleEmployee } from \"./employees/useSingleEmployee\";\r\n\r\nconst initial_form = {\r\n  name: \"\",\r\n  to_date: \"\",\r\n  from_date: \"\",\r\n  reason: \"\",\r\n  status: \"Pending\",\r\n  no_of_days: 0,\r\n  leave_bal: 0,\r\n};\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Leave Balance\",\r\n    field: \"leave_bal\",\r\n    type: \"numeric\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"No of Days\",\r\n    field: \"no_of_days\",\r\n    type: \"numeric\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Reason\",\r\n    field: \"reason\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    field: \"status\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        //defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        style={{ width: 100 }}\r\n        value={props.value}\r\n        select\r\n      >\r\n        <MenuItem value=\"Pending\">Pending</MenuItem>\r\n        <MenuItem value=\"Approved\">Approved</MenuItem>\r\n        <MenuItem value=\"Rejected\">Rejected</MenuItem>\r\n        <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n      </TextField>\r\n    ),\r\n  },\r\n];\r\n\r\n// const AlertBox = ({ isOpen, onClose, cancelRef, heading, children }) => {\r\n//   return (\r\n//     <AlertDialog\r\n//       isOpen={isOpen}\r\n//       leastDestructiveRef={cancelRef}\r\n//       onClose={onClose}\r\n//     >\r\n//       <AlertDialogOverlay>\r\n//         <AlertDialogContent>\r\n//           <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n//             {heading}\r\n//           </AlertDialogHeader>\r\n\r\n//           <AlertDialogBody>{children}</AlertDialogBody>\r\n\r\n//           <AlertDialogFooter>\r\n//             <Button ref={cancelRef} onClick={onClose}>\r\n//               Cancel\r\n//             </Button>\r\n//             <Button colorScheme=\"red\" onClick={onClose} ml={3}>\r\n//               Delete\r\n//             </Button>\r\n//           </AlertDialogFooter>\r\n//         </AlertDialogContent>\r\n//       </AlertDialogOverlay>\r\n//     </AlertDialog>\r\n//   );\r\n// };\r\n\r\nexport default function LeaveTableStaff() {\r\n  const classes = useStyles();\r\n  //const { singleemployee, setSingleEmployeeId } = useSingleEmployee();\r\n  const { leaves, setLeaveYr, setLeaveId } = useLeaves();\r\n  //const updateLeaves = useUpdateLeaves();\r\n  //const addLeaves = useAddLeaves();\r\n  const deleteLeaves = useDeleteLeaves();\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  //const [alertSuccess, setAlertSuccess] = useState(false);\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const [formdata, setFormdata] = useState(initial_form);\r\n  const [leavestate, setLeaveState] = useState({});\r\n  const [isLoad, setIsLoad] = useState(true);\r\n  //const { editEmployeeID } = useEmployeesContext();\r\n  const {\r\n    editLeaveID,\r\n    setEditLeaveID,\r\n    setIsLeaveEditingOn,\r\n    setIsLeaveEditingOff,\r\n  } = useLeavesContext();\r\n  //const [isOpen, setIsOpen] = React.useState(false);\r\n  //const [isLeaveYear, setLeaveYear] = useState(true);\r\n  //const onClose = () => setIsOpen(false);\r\n  //const cancelRef = React.useRef();\r\n  const [selectleaveyear, setSelectLeaveYear] = useState(\"\");\r\n  const currentyear = new Date().getFullYear();\r\n  //const YEAR = new Date().getFullYear();\r\n\r\n  useEffect(() => {\r\n    setSelectLeaveYear(currentyear);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setLeaveId(loginLevel.loginUserId);\r\n    setLeaveYr(selectleaveyear ? selectleaveyear : currentyear);\r\n    setIsLoad(false);\r\n  }, [isLoad]);\r\n\r\n  useEffect(() => {\r\n    if (leaves) {\r\n      Calc_Leave();\r\n    }\r\n  }, [JSON.stringify(leaves)]);\r\n\r\n  const Calc_Leave = () => {\r\n    // console.log(\r\n    //   \"calc leave\",\r\n    //   selectleaveyear,\r\n    //   typeof selectleaveyear,\r\n    //   typeof currentyear,\r\n    //   currentyear,\r\n    //   selectleaveyear === currentyear\r\n    // );\r\n    const { leave_bf, leave_entitled, leave_cd } = loginLevel;\r\n    const leaveTaken = leaves.reduce((acc, item) => {\r\n      if (item.status === \"Approved\") {\r\n        return acc + item.no_of_days;\r\n      } else {\r\n        return acc;\r\n      }\r\n    }, 0);\r\n    const leavePending = leaves.reduce((acc, item) => {\r\n      if (item.status === \"Pending\") {\r\n        return acc + item.no_of_days;\r\n      } else {\r\n        return acc;\r\n      }\r\n    }, 0);\r\n    const leaveEntitled = isNaN(leave_entitled) ? 0 : leave_entitled;\r\n    const leaveBf = isNaN(leave_bf) ? 0 : leave_bf;\r\n    const leaveCd = isNaN(leave_cd) ? 0 : leave_cd;\r\n    const leaveTotal = leaveBf + leaveEntitled;\r\n    const bal = leaveBf + leaveEntitled - leaveCd - leaveTaken;\r\n    const rec = {\r\n      leave_bf: leaveBf,\r\n      leave_entitled: leaveEntitled,\r\n      leave_total: leaveTotal,\r\n      leave_cd: leaveCd,\r\n      leave_taken: leaveTaken + leaveCd,\r\n      leave_pending: leavePending,\r\n      leave_bal: bal,\r\n    };\r\n    setLeaveState((prev) => (prev = rec));\r\n    //console.log(\"leavestate\", leavestate)\r\n  };\r\n\r\n  const update_Leave = async (data) => {\r\n    const { id } = data;\r\n    setFormdata({ ...data });\r\n    setFormdata({ ...data });\r\n    setEditLeaveID(id);\r\n    setIsLeaveEditingOn();\r\n    handleDialogOpen();\r\n    //history.push(\"/singleleave\");\r\n  };\r\n\r\n  const add_Leave = async (data) => {\r\n    // const { id } = data;\r\n    setEditLeaveID(\"\");\r\n    setFormdata(initial_form);\r\n    setIsLeaveEditingOff();\r\n    handleDialogOpen();\r\n    //history.push(\"/singleleave\");\r\n  };\r\n\r\n  const delete_Leave = (data) => {\r\n    const { id } = data;\r\n\r\n    setEditLeaveID(id);\r\n    setIsAlertOpen(true);\r\n    //handleAlertOpen();\r\n    //deleteLeave(id);\r\n    //loadLeaves();\r\n  };\r\n\r\n  const handleDialogOpen = () => {\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n\r\n    // if (isLeaveEditing) {\r\n    //   loadEmpLeaves(editEmployeeID);\r\n    // }\r\n  };\r\n\r\n  // const handleAlertOpen = () => {\r\n  //   setIsAlertOpen(true);\r\n  // };\r\n\r\n  const handleAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleOnDeleteConfirm = () => {\r\n    const id = editLeaveID;\r\n    deleteLeaves(id);\r\n  };\r\n\r\n  const UpdateLeaveYear = (e) => {\r\n    setSelectLeaveYear((prev) => (prev = parseInt(e.target.value)));\r\n    //Calc_Leave()\r\n    setIsLoad(true);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n      <Box>\r\n        <HStack mb={2}>\r\n          <Box>\r\n            <Heading size=\"md\">YEAR: </Heading>\r\n          </Box>\r\n          <Select\r\n            value={selectleaveyear}\r\n            fontSize={20}\r\n            maxWidth={100}\r\n            onChange={(e) => UpdateLeaveYear(e)}\r\n          >\r\n            <option value={2021}>2021</option>\r\n            <option value={2022}>2022</option>\r\n          </Select>\r\n        </HStack>\r\n      </Box>\r\n      <Box>\r\n        <Grid\r\n          p={1}\r\n          h=\"100px\"\r\n          templateRows=\"repeat(2, 1fr)\"\r\n          templateColumns=\"repeat(12, 1fr)\"\r\n          gap={6}\r\n          border=\"1px solid blue\"\r\n          bg=\"gray.200\"\r\n        >\r\n          <GridItem colSpan={2} align=\"center\">\r\n            <Heading pt={3} size=\"xs\">\r\n              Leave Entitlement\r\n            </Heading>\r\n          </GridItem>\r\n          <GridItem colSpan={2} align=\"center\">\r\n            <Heading pt={3} size=\"xs\">\r\n              Leave Carried Forward\r\n            </Heading>\r\n          </GridItem>\r\n          <GridItem colSpan={2} align=\"center\">\r\n            <Heading pt={3} size=\"xs\">\r\n              Total Leaves Days\r\n            </Heading>\r\n          </GridItem>\r\n          <GridItem colSpan={2} align=\"center\">\r\n            <Heading pt={3} size=\"xs\">\r\n              Leave Taken\r\n            </Heading>\r\n          </GridItem>\r\n          <GridItem colSpan={2} align=\"center\">\r\n            <Heading pt={3} size=\"xs\">\r\n              Leave Pending\r\n            </Heading>\r\n          </GridItem>\r\n          <GridItem colSpan={2} align=\"center\">\r\n            <Heading pt={3} size=\"xs\">\r\n              Balance Leave Days\r\n            </Heading>\r\n          </GridItem>\r\n\r\n          <GridItem colSpan={2} bg=\"white\" align=\"center\">\r\n            <Text fontSize=\"20\">\r\n              {selectleaveyear === currentyear ? leavestate.leave_entitled : 0}\r\n            </Text>\r\n          </GridItem>\r\n          <GridItem colSpan={2} bg=\"white\" align=\"center\">\r\n            <Text fontSize=\"20\">\r\n              {selectleaveyear === currentyear ? leavestate.leave_bf : 0}\r\n            </Text>\r\n          </GridItem>\r\n          <GridItem colSpan={2} bg=\"white\" align=\"center\">\r\n            <Text fontSize=\"20\">\r\n              {selectleaveyear === currentyear ? leavestate.leave_total : 0}\r\n            </Text>\r\n          </GridItem>\r\n          <GridItem colSpan={2} bg=\"white\" align=\"center\">\r\n            <Text fontSize=\"20\">{leavestate.leave_taken}</Text>\r\n          </GridItem>\r\n          <GridItem colSpan={2} bg=\"white\" align=\"center\">\r\n            <Text fontSize=\"20\">{leavestate.leave_pending}</Text>\r\n          </GridItem>\r\n          <GridItem colSpan={2} bg=\"white\" align=\"center\">\r\n            <Text fontSize=\"20\">\r\n              {selectleaveyear === currentyear ? leavestate.leave_bal : 0}\r\n            </Text>\r\n          </GridItem>\r\n        </Grid>\r\n      </Box>\r\n      <Box maxW=\"100%\" pt={5} h={600} overflow=\"scroll\">\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={leaves}\r\n          title=\"Leave Application\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <EditIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          // editable={{\r\n          //   isEditable: (rowData) => rowData.status === \"Pending\",\r\n          //   isDeletable: (rowData) => rowData.status === \"Pending\",\r\n          //   onRowAdd: (newData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         add_Leave(newData);\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          //   onRowUpdate: (newData, oldData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         update_Leave(newData);\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          //   onRowDelete: (oldData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         delete_Leave(oldData);\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          // }}\r\n          actions={[\r\n            (rowData) => ({\r\n              disabled: rowData.status !== \"Pending\",\r\n              icon: \"edit\",\r\n              tooltip: \"Edit Record\",\r\n              onClick: (event, rowData) => {\r\n                update_Leave(rowData);\r\n              },\r\n            }),\r\n            (rowData) => ({\r\n              disabled: rowData.status !== \"Pending\",\r\n              icon: \"delete\",\r\n              tooltip: \"Delete Record\",\r\n              onClick: (event, rowData) => {\r\n                delete_Leave(rowData);\r\n              },\r\n            }),\r\n            {\r\n              icon: \"add\",\r\n              tooltip: \"Add Record\",\r\n              isFreeAction: true,\r\n              onClick: (event, rowData) => {\r\n                add_Leave(rowData);\r\n              },\r\n            },\r\n          ]}\r\n          options={{\r\n            filtering: true,\r\n            paging: false,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <CustomDialog\r\n          isOpen={isDialogOpen}\r\n          handleClose={handleDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <LeaveForm\r\n            formdata={formdata}\r\n            leavestate={leavestate}\r\n            setFormdata={setFormdata}\r\n            handleDialogClose={handleDialogClose}\r\n          />\r\n        </CustomDialog>\r\n\r\n        {/* <CustomAlertDialog\r\n          isOpen={isAlertOpen}\r\n          cancelRef={cancelRef}\r\n          onClose={handleAlertClose}\r\n          onConfirm={handleOnDeleteConfirm}\r\n          title=\"DELETE\"\r\n        >\r\n          <Heading size=\"sm\">Are you sure you want to delete ?</Heading>\r\n        </CustomAlertDialog> */}\r\n        <AlertDialogBox\r\n          onClose={handleAlertClose}\r\n          onConfirm={handleOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete Leave\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n        {/* <AlertBox\r\n          isOpen={isOpen}\r\n          leastDestructiveRef={cancelRef}\r\n          onClose={() => onClose()}\r\n          heading=\"DELETE\"\r\n        >\r\n          <h2>Are you sure you want to delete?</h2>\r\n        </AlertBox> */}\r\n      </Box>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableAdmin.js",["1292","1293"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { TextField, MenuItem } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport LeaveFormAdmin from \"./LeaveFormAdmin\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useLeaves } from \"./leaves/useLeaves\";\r\n//import { useAddLeaves } from \"./leaves/useAddLeaves\";\r\nimport { useDeleteLeaves } from \"./leaves/useDeleteLeaves\";\r\n//import { useUpdateLeaves } from \"./leaves/useUpdateLeaves\";\r\n\r\nconst initial_form = {\r\n  name: \"\",\r\n  to_date: \"\",\r\n  from_date: \"\",\r\n  reason: \"\",\r\n  status: \"Pending\",\r\n  no_of_days: 0,\r\n  leave_bal: 0,\r\n};\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Leave Balance\",\r\n    field: \"leave_bal\",\r\n    type: \"numeric\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"No of Days\",\r\n    field: \"no_of_days\",\r\n    type: \"numeric\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Reason\",\r\n    field: \"reason\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    field: \"status\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        //defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        style={{ width: 100 }}\r\n        value={props.value}\r\n        select\r\n      >\r\n        <MenuItem value=\"Pending\">Pending</MenuItem>\r\n        <MenuItem value=\"Approve\">Approve</MenuItem>\r\n        <MenuItem value=\"Reject\">Reject</MenuItem>\r\n        <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n      </TextField>\r\n    ),\r\n  },\r\n];\r\n\r\nexport default function LeaveTable() {\r\n  const classes = useStyles();\r\n  const { leaves, setLeaveId } = useLeaves();\r\n  //const updateLeaves = useUpdateLeaves();\r\n  //const addLeaves = useAddLeaves();\r\n  const deleteLeaves = useDeleteLeaves();\r\n  const [formdata, setFormdata] = useState(initial_form);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  //const { loadEmployees } = useEmployeesContext();\r\n  const {\r\n    // leaves,\r\n    editLeaveID,\r\n    //leaves_loading,\r\n    //deleteLeave,\r\n    //loadLeaves,\r\n    getSingleLeave,\r\n    setEditLeaveID,\r\n    setIsLeaveEditingOn,\r\n    setIsLeaveEditingOff,\r\n    resetSingleLeave,\r\n  } = useLeavesContext();\r\n\r\n  // useEffect(() => {\r\n  //   setLeaveId(editLeaveID);\r\n  // }, []);\r\n\r\n  const update_Leave = async (data) => {\r\n    const { id } = data;\r\n    setFormdata({ ...data });\r\n    setEditLeaveID(id);\r\n    setIsLeaveEditingOn();\r\n    getSingleLeave(id);\r\n    handleDialogOpen();\r\n    //history.push(\"/singleleave\");\r\n  };\r\n\r\n  const add_Leave = async (data) => {\r\n    // const { id } = data;\r\n    setFormdata({ ...data });\r\n    resetSingleLeave();\r\n    setEditLeaveID(\"\");\r\n    setIsLeaveEditingOff();\r\n    handleDialogOpen();\r\n    //history.push(\"/singleleave\");\r\n  };\r\n\r\n  // const delete_Leave = (data) => {\r\n  //   const { id } = data;\r\n  //   setEditLeaveID(id);\r\n  //   handleAlertOpen();\r\n  //   //deleteLeave(id);\r\n  //   //loadLeaves();\r\n  // };\r\n\r\n  const handleDialogOpen = () => {\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n  };\r\n\r\n  // const handleAlertOpen = () => {\r\n  //   setIsAlertOpen(true);\r\n  // };\r\n\r\n  const handleAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleOnDeleteConfirm = () => {\r\n    const id = editLeaveID;\r\n    deleteLeaves(id);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={leaves}\r\n          title=\"Leave Application\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <AddIcon />,\r\n            View: (props) => <VisibilityIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          actions={[\r\n            {\r\n              icon: () => <VisibilityIcon />,\r\n              tooltip: \"Edit Record\",\r\n              onClick: (event, rowData) => {\r\n                update_Leave(rowData);\r\n              },\r\n            },\r\n            // {\r\n            //   icon: \"delete\",\r\n            //   tooltip: \"Delete Record\",\r\n            //   onClick: (event, rowData) => {\r\n            //     delete_Leave(rowData);\r\n            //   },\r\n            // },\r\n            {\r\n              icon: \"add\",\r\n              tooltip: \"Add Record\",\r\n              isFreeAction: true,\r\n              onClick: (event, rowData) => {\r\n                add_Leave(rowData);\r\n              },\r\n            },\r\n          ]}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n        />\r\n        <CustomDialog\r\n          isOpen={isDialogOpen}\r\n          handleClose={handleDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscree={false}\r\n        >\r\n          <LeaveFormAdmin\r\n            formdata={formdata}\r\n            setFormdata={setFormdata}\r\n            handleDialogClose={handleDialogClose}\r\n          />\r\n        </CustomDialog>\r\n\r\n        <AlertDialogBox\r\n          onClose={handleAlertClose}\r\n          onConfirm={handleOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete Expenses\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\AllEmployeesTable.js",["1294"],"import React, { useState, useMemo } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Heading,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  //ModalHeader,\r\n  //ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Tabs,\r\n  TabList,\r\n  TabPanels,\r\n  Tab,\r\n  TabPanel,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, Icon } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\n//import { useRecoilState } from \"recoil\";\r\n//import { editEmployeeIdState } from \"./data/atomdata\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\nimport EmployeeView from \"./EmployeeView\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\n//import { useTablesContext } from \"../context/tables_context\";\r\n//import { useDepartments } from \"./departments/useDepartments\";\r\n//import { useDesignations } from \"./designations/useDesignations\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\n//import { useAllEmployees } from \"./employees/useAllEmployees\";\r\nimport { useDeleteEmployees } from \"./employees/useDeleteEmployees\";\r\nimport App from \"../utils/firebase\";\r\nimport EmployeeFormAdd from \"./EmployeeFormAdd\";\r\n\r\nexport default function AllEmployeesTable() {\r\n  let navigate = useNavigate();\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  //const { designations } = useDesignations();\r\n  //const { departments } = useDepartments();\r\n  const { employees, setEmployeeId } = useEmployees();\r\n  //const { allemployees, setAllEmpId } = useAllEmployees();\r\n  //const [empId, setEmpId] = useRecoilState(editEmployeeIdState);\r\n  const deleteEmployees = useDeleteEmployees();\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const {\r\n    isOpen: isAddEmpFormOpen,\r\n    onOpen: onAddEmpFormOpen,\r\n    onClose: onAddEmpFormClose,\r\n  } = useDisclosure();\r\n  const columns = useMemo(() => [\r\n    {\r\n      title: \"Name\",\r\n      field: \"name\",\r\n    },\r\n    { title: \"IC No\", field: \"ic_no\" },\r\n    { title: \"Gender\", field: \"gender\" },\r\n    {\r\n      title: \"Birth Date\",\r\n      field: \"birthdate\",\r\n      type: \"date\",\r\n      dateSetting: { locale: \"en-GB\" },\r\n    },\r\n    { title: \"Email\", field: \"email\" },\r\n  ]);\r\n\r\n  const {\r\n    editEmployeeID,\r\n    //employees_loading,\r\n    //deleteEmployee,\r\n    //loadEmployees,\r\n    setEditEmployeeID,\r\n    setIsEditingOn,\r\n    //setIsEditingOff,\r\n    resetSingleEmployee,\r\n    resetEmployees,\r\n    //getSingleEmployee,\r\n  } = useEmployeesContext();\r\n\r\n  //const { loadDepartments, loadDesignations, resetTables } = useTablesContext();\r\n\r\n  // useEffect(() => {\r\n  //   setAllEmpId(\"111\");\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   resetEmployees();\r\n  //   loadEmployees();\r\n  // }, []);\r\n\r\n  const update_Employee = async (data) => {\r\n    const { id } = data;\r\n    resetSingleEmployee();\r\n    resetEmployees();\r\n    setEditEmployeeID(id);\r\n    setIsEditingOn();\r\n    setEmployeeId(id);\r\n\r\n    navigate(\"/singleemployee\");\r\n  };\r\n\r\n  const add_Employee = async (data) => {\r\n    //resetSingleEmployee();\r\n    //setEditEmployeeID(\"\");\r\n    //setIsEditingOff();\r\n    //handleDialogOpen();\r\n    onAddEmpFormOpen()\r\n    //history.push(\"/singleemployee\");\r\n  };\r\n\r\n  const delete_Employee = (data) => {\r\n    const { id } = data;\r\n    setEditEmployeeID(id);\r\n    handleAlertOpen();\r\n    //deleteEmployee(id);\r\n    //loadEmployees();\r\n  };\r\n\r\n  // const handleDialogOpen = () => {\r\n  //   setIsDialogOpen(true);\r\n  // };\r\n\r\n  const handleDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n    //loadEmployees();\r\n  };\r\n\r\n  const handleAlertOpen = () => {\r\n    setIsAlertOpen(true);\r\n  };\r\n\r\n  const handleAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleOnDeleteConfirm = () => {\r\n    const id = editEmployeeID;\r\n    deleteEmployees(id);\r\n    //loadEmployees();\r\n  };\r\n\r\n  // const calculateAge = (dob) => {\r\n  //   var today = new Date();\r\n  //   var birthDate = new Date(dob);\r\n  //   var age = today.getFullYear() - birthDate.getFullYear();\r\n  //   var m = today.getMonth() - birthDate.getMonth();\r\n  //   if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n  //     age--;\r\n  //   }\r\n  //   return age;\r\n  // };\r\n\r\n  const Reset_PW = () => {\r\n    employees.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        try {\r\n          if (rec.password) {\r\n            App.auth().createUserWithEmailAndPassword(rec.email, rec.password);\r\n          } else {\r\n            App.auth().createUserWithEmailAndPassword(rec.email, \"abc123*\");\r\n          }\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n        try {\r\n          App.auth().sendPasswordResetEmail(rec.email);\r\n          toast({\r\n            title: `Reset Password sent to ${rec.email}!`,\r\n            status: \"success\",\r\n          });\r\n        } catch (error) {\r\n          toast({\r\n            title: `Error send to  ${rec.email}!`,\r\n            status: \"warning\",\r\n          });\r\n        }\r\n      }\r\n    });\r\n    employees.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  // if (employees_loading) {\r\n  //   return <div>Loading...</div>;\r\n  // } else {\r\n  //   //console.log(employees);\r\n  // }\r\n  return (\r\n    <div className={classes.root}>\r\n      <Box p={2}>\r\n        <Heading size=\"md\">Employee Listing</Heading>\r\n      </Box>\r\n      <Tabs>\r\n        <TabList>\r\n          <Tab>Current</Tab>\r\n          <Tab>Resigned</Tab>\r\n        </TabList>\r\n        <TabPanels>\r\n          <TabPanel>\r\n            <Box maxW=\"100%\" pt=\"5px\">\r\n              <MaterialTable\r\n                columns={columns}\r\n                data={employees\r\n                  .filter((r) => !r.hasresigned)\r\n                  .sort((a, b) =>\r\n                    a.name > b.name ? 1 : b.name > a.name ? -1 : 0\r\n                  )}\r\n                title=\"Current Employees\"\r\n                icons={{\r\n                  Add: (props) => <AddIcon />,\r\n                  Edit: (props) => <EditIcon />,\r\n                  Delete: (props) => <DeleteIcon />,\r\n                  Clear: (props) => <DeleteIcon />,\r\n                  Check: (props) => <CheckIcon />,\r\n                  Search: (props) => <SearchIcon />,\r\n                  ResetSearch: (props) => <DeleteIcon />,\r\n                }}\r\n                actions={[\r\n                  {\r\n                    icon: \"edit\",\r\n                    tooltip: \"Edit Record\",\r\n                    position: \"row\",\r\n                    onClick: (event, rowData) => {\r\n                      update_Employee(rowData);\r\n                    },\r\n                  },\r\n                  {\r\n                    icon: \"delete\",\r\n                    tooltip: \"Delete Record\",\r\n                    position: \"row\",\r\n                    onClick: (event, rowData) => {\r\n                      delete_Employee(rowData);\r\n                    },\r\n                  },\r\n                  {\r\n                    icon: \"add\",\r\n                    tooltip: \"Add Record\",\r\n                    isFreeAction: true,\r\n                    onClick: (event, rowData) => {\r\n                      add_Employee(rowData);\r\n                    },\r\n                  },\r\n                ]}\r\n                options={{\r\n                  filtering: true,\r\n                  selection: true,\r\n                  paging: false,\r\n                  headerStyle: {\r\n                    //backgroundColor: \"#DAAD86\",\r\n                    backgroundColor: \"#90CDF4\",\r\n                    color: \"secondary\",\r\n                  },\r\n                  showTitle: true,\r\n                }}\r\n                components={{\r\n                  Toolbar: (props) => (\r\n                    <div>\r\n                      <MTableToolbar {...props} />\r\n                      <div style={{ padding: \"5px 10px\" }}>\r\n                        <Button\r\n                          type=\"submit\"\r\n                          variant=\"contained\"\r\n                          color=\"secondary\"\r\n                          className={classes.button}\r\n                          onClick={Reset_PW}\r\n                        >\r\n                          Reset PW{\" \"}\r\n                          <Icon className={classes.rightIcon}>send</Icon>\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  ),\r\n                }}\r\n              />\r\n            </Box>\r\n          </TabPanel>\r\n          <TabPanel>\r\n            <Box maxW=\"100%\" pt=\"5px\">\r\n              <MaterialTable\r\n                columns={columns}\r\n                data={employees\r\n                  .filter((r) => r.hasresigned)\r\n                  .sort((a, b) =>\r\n                    a.name > b.name ? 1 : b.name > a.name ? -1 : 0\r\n                  )}\r\n                title=\"Resigned Employees\"\r\n                icons={{\r\n                  Add: (props) => <AddIcon />,\r\n                  Edit: (props) => <EditIcon />,\r\n                  Delete: (props) => <DeleteIcon />,\r\n                  Clear: (props) => <DeleteIcon />,\r\n                  Check: (props) => <CheckIcon />,\r\n                  Search: (props) => <SearchIcon />,\r\n                  ResetSearch: (props) => <DeleteIcon />,\r\n                }}\r\n                actions={[\r\n                  {\r\n                    icon: \"edit\",\r\n                    tooltip: \"Edit Record\",\r\n                    position: \"row\",\r\n                    onClick: (event, rowData) => {\r\n                      update_Employee(rowData);\r\n                    },\r\n                  },\r\n                  {\r\n                    icon: \"delete\",\r\n                    tooltip: \"Delete Record\",\r\n                    position: \"row\",\r\n                    onClick: (event, rowData) => {\r\n                      delete_Employee(rowData);\r\n                    },\r\n                  },\r\n                  {\r\n                    icon: \"add\",\r\n                    tooltip: \"Add Record\",\r\n                    isFreeAction: true,\r\n                    onClick: (event, rowData) => {\r\n                      add_Employee(rowData);\r\n                    },\r\n                  },\r\n                ]}\r\n                options={{\r\n                  filtering: true,\r\n                  selection: false,\r\n                  paging: false,\r\n                  headerStyle: {\r\n                    //backgroundColor: \"#DAAD86\",\r\n                    backgroundColor: \"#90CDF4\",\r\n                    color: \"secondary\",\r\n                  },\r\n                  showTitle: true,\r\n                }}\r\n                components={{\r\n                  Toolbar: (props) => (\r\n                    <div>\r\n                      <MTableToolbar {...props} />\r\n                      <div style={{ padding: \"5px 10px\" }}>\r\n                        {/* <Button\r\n                          type=\"submit\"\r\n                          variant=\"contained\"\r\n                          color=\"secondary\"\r\n                          className={classes.button}\r\n                          onClick={Reset_PW}\r\n                        >\r\n                          Reset PW{\" \"}\r\n                          <Icon className={classes.rightIcon}>send</Icon>\r\n                        </Button> */}\r\n                      </div>\r\n                    </div>\r\n                  ),\r\n                }}\r\n              />\r\n            </Box>\r\n          </TabPanel>\r\n        </TabPanels>\r\n      </Tabs>\r\n      <Modal\r\n        closeOnOverlayClick={false}\r\n        isOpen={isAddEmpFormOpen}\r\n        onClose={onAddEmpFormClose}\r\n        size=\"md\"\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          {/* <ModalHeader>Product Form</ModalHeader> */}\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            <EmployeeFormAdd onAddEmpFormClose={onAddEmpFormClose} />\r\n          </ModalBody>\r\n\r\n          {/* <ModalFooter>\r\n            <Button colorScheme=\"blue\" mr={3} onClick={onProductClose}>\r\n              Close\r\n            </Button>\r\n          </ModalFooter> */}\r\n        </ModalContent>\r\n      </Modal>\r\n      <CustomDialog\r\n        isOpen={isDialogOpen}\r\n        handleClose={handleDialogClose}\r\n        title=\"\"\r\n        showButton={true}\r\n        isFullscreen={true}\r\n        isFullwidth={true}\r\n      >\r\n        <EmployeeView handleDialogClose={handleDialogClose} />\r\n      </CustomDialog>\r\n\r\n      <AlertDialogBox\r\n        onClose={handleAlertClose}\r\n        onConfirm={handleOnDeleteConfirm}\r\n        isOpen={isAlertOpen}\r\n        title=\"Delete Employee\"\r\n      >\r\n        <h2>Are you sure you want to delete ?</h2>\r\n      </AlertDialogBox>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeDirector.js",["1295","1296","1297","1298"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\n//import dayjs from \"dayjs\";\r\nimport {\r\n  Box,\r\n  Container,\r\n  Divider,\r\n  //Flex,\r\n  //Grid,\r\n  Heading,\r\n  HStack,\r\n  SimpleGrid,\r\n  Select,\r\n  //Stack,\r\n  Tabs,\r\n  TabList,\r\n  TabPanels,\r\n  Tab,\r\n  TabPanel,\r\n} from \"@chakra-ui/react\";\r\n//import CardLayout from \"../helpers/CardLayout\";\r\n//import CardLayout2 from \"../helpers/CardLayout2\";\r\n//import CardLayout4 from \"../helpers/CardLayout4\";\r\n//import Copyright from \"./Copyright\";\r\n//import { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { useRecoilState } from \"recoil\";\r\n//import { loginLevelState } from \"./data/atomdata\";\r\n//import BarChart from \"../helpers/BarChart\";\r\n//import BarChartStack from \"../helpers/BarChartStack\";\r\n\r\nimport EmployeeTableLeaveView from \"./EmployeeTableLeaveView\";\r\nimport ExpensesTableViewSummary from \"./ExpenseTableViewSummary\";\r\n//import ExpenseSummaryTableView from \"./ExpensesSummaryTableView\";\r\nimport LeavesTableViewSummary from \"./LeavesTableViewSummary\";\r\nimport HocTableViewSummary from \"./HocTableViewSummary\";\r\n//import SummaryTableView from \"../helpers/SummaryTableView\";\r\nimport DailyAllowanceTableViewSummary from \"./DailyAllowancesTableViewSummary\";\r\nimport PayslipTableViewSummary from \"./PayslipTableViewSummary\";\r\n//import PayslipSummaryTableView from \"./PayslipSummaryTableView\";\r\nimport LeavesTableApproval from \"./LeaveTableApproval\";\r\n//import { useExpensesPeriod } from \"./expenses/useExpensesPeriod\";\r\n\r\n// const LeavesTableViewSummary = React.lazy(() =>\r\n//   import(\"./LeavesTableViewSummary\")\r\n// );\r\n\r\nconst drawerWidth = 240;\r\n\r\n//const FILTERSTRING = \"Pending\";\r\n\r\n// const months = [\r\n//   \"Jan\",\r\n//   \"Feb\",\r\n//   \"Mar\",\r\n//   \"Apr\",\r\n//   \"May\",\r\n//   \"Jun\",\r\n//   \"Jul\",\r\n//   \"Aug\",\r\n//   \"Sep\",\r\n//   \"Oct\",\r\n//   \"Nov\",\r\n//   \"Dec\",\r\n// ];\r\n// const monthsname = [\r\n//   \"jan\",\r\n//   \"feb\",\r\n//   \"mar\",\r\n//   \"apr\",\r\n//   \"may\",\r\n//   \"jun\",\r\n//   \"jul\",\r\n//   \"aug\",\r\n//   \"sep\",\r\n//   \"oct\",\r\n//   \"nov\",\r\n//   \"dec\",\r\n// ];\r\n\r\n// const expchartdata = {\r\n//   labels: [\r\n//     \"January\",\r\n//     \"February\",\r\n//     \"March\",\r\n//     \"April\",\r\n//     \"May\",\r\n//     \"June\",\r\n//     \"July\",\r\n//     \"August\",\r\n//     \"September\",\r\n//     \"October\",\r\n//     \"November\",\r\n//     \"December\",\r\n//   ],\r\n//   datasets: [\r\n//     {\r\n//       label: \"Expenses\",\r\n//       backgroundColor: \"rgba(75,192,192,1)\",\r\n//       borderColor: \"rgba(0,0,0,1)\",\r\n//       borderWidth: 2,\r\n//       data: [65, 59, 80, 81, 56, 50, 60, 40, 70, 60, 50, 60],\r\n//     },\r\n//   ],\r\n// };\r\n\r\n// const sitechartdata = {\r\n//   labels: [\r\n//     \"January\",\r\n//     \"February\",\r\n//     \"March\",\r\n//     \"April\",\r\n//     \"May\",\r\n//     \"June\",\r\n//     \"July\",\r\n//     \"August\",\r\n//     \"September\",\r\n//     \"October\",\r\n//     \"November\",\r\n//     \"December\",\r\n//   ],\r\n//   datasets: [\r\n//     {\r\n//       label: \"Expenses\",\r\n//       backgroundColor: \"rgba(75,192,192,1)\",\r\n//       borderColor: \"rgba(0,0,0,1)\",\r\n//       borderWidth: 2,\r\n//       data: [\r\n//         25000, 39000, 20000, 21000, 26000, 20000, 20000, 20000, 22000, 20000,\r\n//         25000, 20000,\r\n//       ],\r\n//     },\r\n//   ],\r\n// };\r\n\r\n// const paychartdata = {\r\n//   labels: [\r\n//     \"January\",\r\n//     \"February\",\r\n//     \"March\",\r\n//     \"April\",\r\n//     \"May\",\r\n//     \"June\",\r\n//     \"July\",\r\n//     \"August\",\r\n//     \"September\",\r\n//     \"October\",\r\n//     \"November\",\r\n//     \"December\",\r\n//   ],\r\n//   datasets: [\r\n//     {\r\n//       label: \"Expenses\",\r\n//       backgroundColor: \"rgba(75,192,192,1)\",\r\n//       borderColor: \"rgba(0,0,0,1)\",\r\n//       borderWidth: 2,\r\n//       data: [\r\n//         65000, 59000, 80000, 81000, 56000, 50000, 60000, 70000, 72000, 60000,\r\n//         55000, 60000,\r\n//       ],\r\n//     },\r\n//   ],\r\n// };\r\n\r\n// const columns = [\r\n//   {\r\n//     title: \"January\",\r\n//     field: \"jan\",\r\n//   },\r\n//   {\r\n//     title: \"February\",\r\n//     field: \"feb\",\r\n//   },\r\n//   {\r\n//     title: \"March\",\r\n//     field: \"mar\",\r\n//   },\r\n//   {\r\n//     title: \"April\",\r\n//     field: \"apr\",\r\n//   },\r\n//   {\r\n//     title: \"May\",\r\n//     field: \"may\",\r\n//   },\r\n//   {\r\n//     title: \"June\",\r\n//     field: \"jun\",\r\n//   },\r\n//   {\r\n//     title: \"July\",\r\n//     field: \"jul\",\r\n//   },\r\n//   {\r\n//     title: \"August\",\r\n//     field: \"aug\",\r\n//   },\r\n//   {\r\n//     title: \"September\",\r\n//     field: \"sep\",\r\n//   },\r\n//   {\r\n//     title: \"October\",\r\n//     field: \"oct\",\r\n//   },\r\n//   {\r\n//     title: \"November\",\r\n//     field: \"nov\",\r\n//   },\r\n//   {\r\n//     title: \"December\",\r\n//     field: \"dec\",\r\n//   },\r\n// ];\r\n\r\n// const data = [\r\n//   {\r\n//     jan: 80,\r\n//     feb: 90,\r\n//     mar: 78,\r\n//     apr: 63,\r\n//     may: 55,\r\n//     jun: 60,\r\n//     jul: 55,\r\n//     aug: 65,\r\n//     sep: 70,\r\n//     oct: 58,\r\n//     nov: 60,\r\n//     dec: 62,\r\n//   },\r\n// ];\r\n\r\n// const paysummcolumns = [\r\n//   {\r\n//     title: \"Category\",\r\n//     field: \"category\",\r\n//   },\r\n//   {\r\n//     title: \"Jan\",\r\n//     field: \"jan\",\r\n//   },\r\n//   {\r\n//     title: \"Feb\",\r\n//     field: \"feb\",\r\n//   },\r\n//   {\r\n//     title: \"Mar\",\r\n//     field: \"mar\",\r\n//   },\r\n//   {\r\n//     title: \"Apr\",\r\n//     field: \"apr\",\r\n//   },\r\n//   {\r\n//     title: \"May\",\r\n//     field: \"may\",\r\n//   },\r\n//   {\r\n//     title: \"Jun\",\r\n//     field: \"jun\",\r\n//   },\r\n//   {\r\n//     title: \"Jul\",\r\n//     field: \"jul\",\r\n//   },\r\n//   {\r\n//     title: \"Aug\",\r\n//     field: \"aug\",\r\n//   },\r\n//   {\r\n//     title: \"Sep\",\r\n//     field: \"sep\",\r\n//   },\r\n//   {\r\n//     title: \"Oct\",\r\n//     field: \"oct\",\r\n//   },\r\n//   {\r\n//     title: \"Nov\",\r\n//     field: \"nov\",\r\n//   },\r\n//   {\r\n//     title: \"Dec\",\r\n//     field: \"dec\",\r\n//   },\r\n// ];\r\n\r\n// const paysummdata = [\r\n//   {\r\n//     category: \"Basic Salary\",\r\n//     jan: 80,\r\n//     feb: 90,\r\n//     mar: 78,\r\n//     apr: 63,\r\n//     may: 55,\r\n//     jun: 60,\r\n//     jul: 55,\r\n//     aug: 65,\r\n//     sep: 70,\r\n//     oct: 58,\r\n//     nov: 60,\r\n//     dec: 62,\r\n//   },\r\n//   {\r\n//     category: \"TAP/SCP\",\r\n//     jan: 80,\r\n//     feb: 90,\r\n//     mar: 78,\r\n//     apr: 63,\r\n//     may: 55,\r\n//     jun: 60,\r\n//     jul: 55,\r\n//     aug: 65,\r\n//     sep: 70,\r\n//     oct: 58,\r\n//     nov: 60,\r\n//     dec: 62,\r\n//   },\r\n//   {\r\n//     category: \"Site Allowances\",\r\n//     jan: 80,\r\n//     feb: 90,\r\n//     mar: 78,\r\n//     apr: 63,\r\n//     may: 55,\r\n//     jun: 60,\r\n//     jul: 55,\r\n//     aug: 65,\r\n//     sep: 70,\r\n//     oct: 58,\r\n//     nov: 60,\r\n//     dec: 62,\r\n//   },\r\n//   {\r\n//     category: \"Expenses Claims\",\r\n//     jan: 80,\r\n//     feb: 90,\r\n//     mar: 78,\r\n//     apr: 63,\r\n//     may: 55,\r\n//     jun: 60,\r\n//     jul: 55,\r\n//     aug: 65,\r\n//     sep: 70,\r\n//     oct: 58,\r\n//     nov: 60,\r\n//     dec: 62,\r\n//   },\r\n//   {\r\n//     category: \"Allowances\",\r\n//     jan: 80,\r\n//     feb: 90,\r\n//     mar: 78,\r\n//     apr: 63,\r\n//     may: 55,\r\n//     jun: 60,\r\n//     jul: 55,\r\n//     aug: 65,\r\n//     sep: 70,\r\n//     oct: 58,\r\n//     nov: 60,\r\n//     dec: 62,\r\n//   },\r\n//   {\r\n//     category: \"Deductions\",\r\n//     jan: 80,\r\n//     feb: 90,\r\n//     mar: 78,\r\n//     apr: 63,\r\n//     may: 55,\r\n//     jun: 60,\r\n//     jul: 55,\r\n//     aug: 65,\r\n//     sep: 70,\r\n//     oct: 58,\r\n//     nov: 60,\r\n//     dec: 62,\r\n//   },\r\n//   {\r\n//     category: \"Totals\",\r\n//     jan: 80,\r\n//     feb: 90,\r\n//     mar: 78,\r\n//     apr: 63,\r\n//     may: 55,\r\n//     jun: 60,\r\n//     jul: 55,\r\n//     aug: 65,\r\n//     sep: 70,\r\n//     oct: 58,\r\n//     nov: 60,\r\n//     dec: 62,\r\n//   },\r\n// ];\r\n\r\nconst initial_expdata = [\r\n  {\r\n    jan: 0,\r\n    feb: 0,\r\n    mar: 0,\r\n    apr: 0,\r\n    may: 0,\r\n    jun: 0,\r\n    jul: 0,\r\n    aug: 0,\r\n    sep: 0,\r\n    oct: 0,\r\n    nov: 0,\r\n    dec: 0,\r\n  },\r\n];\r\n\r\nconst HomeManager = () => {\r\n  const classes = useStyles();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  //const { expensesperiod, setExpPeriodId } = useExpensesPeriod();\r\n  //const [expdata, setExpData] = useState(initial_expdata);\r\n   const [selectleaveyear, setSelectLeaveYear] = useState(\"\");\r\n   const [selectexpenseyear, setSelectExpenseYear] = useState(\"\");\r\n   const [selectsiteallowsyear, setSelectSiteAllowsYear] = useState(\"\");\r\n   const [selectpayrollyear, setSelectPayrollYear] = useState(\"\");\r\n   const [selecthocyear, setSelectHocYear] = useState(\"\");\r\n  const currentyear = new Date().getFullYear();\r\n  const currentmonth = new Date().getMonth();\r\n\r\n  // const Build_ExpData = () => {\r\n  //   const currentmonth = new Date().getMonth();\r\n\r\n  //   for (var i = 1; i <= currentmonth; i++) {\r\n  //     expdata[i] = i;\r\n  //   }\r\n  //   console.log(\"date\", currentyear, currentmonth, expdata);\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   Build_ExpData();\r\n  // }, []);\r\n\r\n   useEffect(() => {\r\n     setSelectLeaveYear(currentyear);\r\n     setSelectExpenseYear(currentyear);\r\n     setSelectSiteAllowsYear(currentyear);\r\n     setSelectPayrollYear(currentyear);\r\n     setSelectHocYear(currentyear);\r\n   }, []);\r\n  \r\n  return (\r\n    // <div>\r\n    //   <div className={classes.appBarSpacer} />\r\n    //   <div style={{ paddingLeft: 50 }}>\r\n    //     <h2>Welcome {loginLevel.loginUser}!</h2>\r\n    //     <h3>Dashboard</h3>\r\n    //   </div>\r\n    <Container maxW=\"full\" mt=\"100\">\r\n      <Box\r\n        //minW=\"100%\"\r\n        padding=\"4\"\r\n        width=\"full\"\r\n        height=\"800\"\r\n        borderColor=\"blue.500\"\r\n        borderWidth=\"1px\"\r\n        borderRadius=\"lg\"\r\n        //overflow=\"scroll\"\r\n      >\r\n        <Tabs>\r\n          <TabList>\r\n            <Tab>Employees</Tab>\r\n            <Tab>Leaves</Tab>\r\n            <Tab>Expenses</Tab>\r\n            <Tab>Site Allowances</Tab>\r\n            <Tab>Payroll</Tab>\r\n            <Tab>HOC History</Tab>\r\n            <Tab>Leaves Approval</Tab>\r\n          </TabList>\r\n\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"full\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid>\r\n                  <Box>\r\n                    <Heading as=\"h2\" size=\"lg\">\r\n                      Employees\r\n                    </Heading>\r\n                  </Box>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs isLazy>\r\n                      {/* <TabList>\r\n                        <Tab>Details</Tab>\r\n                      </TabList> */}\r\n                      <TabPanels>\r\n                        <TabPanel>\r\n                          <EmployeeTableLeaveView />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"100%\"\r\n                padding=\"4\"\r\n                width=\"full\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid w=\"168vh\">\r\n                  <HStack>\r\n                    <Box>\r\n                      <Heading as=\"h2\" size=\"lg\">\r\n                        Leaves\r\n                      </Heading>\r\n                    </Box>\r\n                    <Box alignSelf=\"flex-end\">\r\n                      <HStack>\r\n                        <Select\r\n                          value={selectleaveyear}\r\n                          fontSize={20}\r\n                          onChange={(e) => setSelectLeaveYear(e.target.value)}\r\n                        >\r\n                          <option value=\"2021\">2021</option>\r\n                          <option value=\"2022\">2022</option>\r\n                        </Select>\r\n                        {/* <Box size=\"xl\" py={2}>\r\n                          <Text fontSize=\"lg\">\r\n                            <ExportLeave2Excel\r\n                              filename=\"leave\"\r\n                              dataset={dataset}\r\n                              title=\"Leave\"\r\n                            />\r\n                          </Text>\r\n                        </Box> */}\r\n                      </HStack>\r\n                    </Box>\r\n                  </HStack>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs defaultIndex={currentmonth} isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                          <Tab>Summary</Tab> */}\r\n                        <Tab>January</Tab>\r\n                        <Tab>February</Tab>\r\n                        <Tab>March</Tab>\r\n                        <Tab>April</Tab>\r\n                        <Tab>May</Tab>\r\n                        <Tab>June</Tab>\r\n                        <Tab>July</Tab>\r\n                        <Tab>August</Tab>\r\n                        <Tab>September</Tab>\r\n                        <Tab>October</Tab>\r\n                        <Tab>November</Tab>\r\n                        <Tab>December</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Expenses for the Month\"\r\n                    barchartdata={expchartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={1}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={2}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={3}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={4}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={5}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={6}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={7}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={8}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={9}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={10}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={11}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={12}\r\n                          />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"x3\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid w=\"168vh\">\r\n                  <HStack>\r\n                    <Box>\r\n                      <Heading as=\"h2\" size=\"lg\">\r\n                        Expenses Claims\r\n                      </Heading>\r\n                    </Box>\r\n                    <Box alignSelf=\"flex-end\">\r\n                      <HStack>\r\n                        <Select\r\n                          value={selectexpenseyear}\r\n                          fontSize={20}\r\n                          onChange={(e) => setSelectExpenseYear(e.target.value)}\r\n                        >\r\n                          <option value=\"2021\">2021</option>\r\n                          <option value=\"2022\">2022</option>\r\n                        </Select>\r\n                        {/* <Box size=\"xl\" py={2}>\r\n                          <Text fontSize=\"lg\">\r\n                            <ExportLeave2Excel\r\n                              filename=\"leave\"\r\n                              dataset={dataset}\r\n                              title=\"Leave\"\r\n                            />\r\n                          </Text>\r\n                        </Box> */}\r\n                      </HStack>\r\n                    </Box>\r\n                  </HStack>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs defaultIndex={currentmonth} isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                          <Tab>Summary</Tab> */}\r\n                        <Tab>January</Tab>\r\n                        <Tab>February</Tab>\r\n                        <Tab>March</Tab>\r\n                        <Tab>April</Tab>\r\n                        <Tab>May</Tab>\r\n                        <Tab>June</Tab>\r\n                        <Tab>July</Tab>\r\n                        <Tab>August</Tab>\r\n                        <Tab>September</Tab>\r\n                        <Tab>October</Tab>\r\n                        <Tab>November</Tab>\r\n                        <Tab>December</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Expenses for the Month\"\r\n                    barchartdata={expchartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <ExpenseSummaryTableView year={currentyear} />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={1}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={2}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={3}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={4}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={5}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={6}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={7}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={8}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={9}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={10}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={11}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={12}\r\n                          />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"x3\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid w=\"168vh\">\r\n                  <HStack>\r\n                    <Box>\r\n                      <Heading as=\"h2\" size=\"lg\">\r\n                        Site Allowances\r\n                      </Heading>\r\n                    </Box>\r\n                    <Box alignSelf=\"flex-end\">\r\n                      <HStack>\r\n                        <Select\r\n                          value={selectsiteallowsyear}\r\n                          fontSize={20}\r\n                          onChange={(e) =>\r\n                            setSelectSiteAllowsYear(e.target.value)\r\n                          }\r\n                        >\r\n                          <option value=\"2021\">2021</option>\r\n                          <option value=\"2022\">2022</option>\r\n                        </Select>\r\n                        {/* <Box size=\"xl\" py={2}>\r\n                          <Text fontSize=\"lg\">\r\n                            <ExportLeave2Excel\r\n                              filename=\"leave\"\r\n                              dataset={dataset}\r\n                              title=\"Leave\"\r\n                            />\r\n                          </Text>\r\n                        </Box> */}\r\n                      </HStack>\r\n                    </Box>\r\n                  </HStack>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs defaultIndex={currentmonth} isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                <Tab>Summary</Tab> */}\r\n                        <Tab>January</Tab>\r\n                        <Tab>February</Tab>\r\n                        <Tab>March</Tab>\r\n                        <Tab>April</Tab>\r\n                        <Tab>May</Tab>\r\n                        <Tab>June</Tab>\r\n                        <Tab>July</Tab>\r\n                        <Tab>August</Tab>\r\n                        <Tab>September</Tab>\r\n                        <Tab>October</Tab>\r\n                        <Tab>November</Tab>\r\n                        <Tab>December</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Site Allowances for the Month\"\r\n                    barchartdata={paychartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"01\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"02\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"03\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"04\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"05\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"06\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"07\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"08\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"09\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"10\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"11\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"12\"\r\n                          />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"x3\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid>\r\n                  <Box>\r\n                    <Heading as=\"h2\" size=\"lg\">\r\n                      Payroll\r\n                    </Heading>\r\n                  </Box>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                <Tab>Summary</Tab> */}\r\n                        <Tab>Approved</Tab>\r\n                        <Tab>Verified</Tab>\r\n                        <Tab>Pending</Tab>\r\n                        <Tab>Rejected</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Payroll for the Month\"\r\n                    barchartdata={paychartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <PayslipSummaryTableView year={currentyear} status=\"Approved\" />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <PayslipTableViewSummary status=\"Approved\" />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <PayslipTableViewSummary status=\"Verified\" />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <PayslipTableViewSummary status=\"Pending\" />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <PayslipTableViewSummary status=\"Rejected\" />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"100%\"\r\n                padding=\"4\"\r\n                width=\"full\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid w=\"168vh\">\r\n                  <HStack>\r\n                    <Box>\r\n                      <Heading as=\"h2\" size=\"lg\">\r\n                        HOC History\r\n                      </Heading>\r\n                    </Box>\r\n                    <Box alignSelf=\"flex-end\">\r\n                      <HStack>\r\n                        <Select\r\n                          value={selecthocyear}\r\n                          fontSize={20}\r\n                          onChange={(e) => setSelectHocYear(e.target.value)}\r\n                        >\r\n                          <option value=\"2021\">2021</option>\r\n                          <option value=\"2022\">2022</option>\r\n                        </Select>\r\n                        {/* <Box size=\"xl\" py={2}>\r\n                          <Text fontSize=\"lg\">\r\n                            <ExportLeave2Excel\r\n                              filename=\"leave\"\r\n                              dataset={dataset}\r\n                              title=\"Leave\"\r\n                            />\r\n                          </Text>\r\n                        </Box> */}\r\n                      </HStack>\r\n                    </Box>\r\n                  </HStack>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs defaultIndex={currentmonth} isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                          <Tab>Summary</Tab> */}\r\n                        <Tab>January</Tab>\r\n                        <Tab>February</Tab>\r\n                        <Tab>March</Tab>\r\n                        <Tab>April</Tab>\r\n                        <Tab>May</Tab>\r\n                        <Tab>June</Tab>\r\n                        <Tab>July</Tab>\r\n                        <Tab>August</Tab>\r\n                        <Tab>September</Tab>\r\n                        <Tab>October</Tab>\r\n                        <Tab>November</Tab>\r\n                        <Tab>December</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Expenses for the Month\"\r\n                    barchartdata={expchartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={1}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={2}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={3}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={4}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={5}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={6}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={7}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={8}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={9}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={10}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={11}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={12}\r\n                          />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"full\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <LeavesTableApproval />\r\n              </Box>\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n    // </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default HomeManager;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeStaff.js",["1299"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\n//import { useHistory } from \"react-router-dom\";\r\nimport { Box, Stack } from \"@chakra-ui/react\";\r\nimport {  Container } from \"@material-ui/core\";\r\n//import CardLayout from \"../helpers/CardLayout\";\r\nimport CardLayout2 from \"../helpers/CardLayout2\";\r\n//import CardLayout3 from \"../helpers/CardLayout3\";\r\nimport Copyright from \"./Copyright\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\n\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\n//import { useLeavesContext } from \"../context/leaves_context\";\r\n//import { useExpensesContext } from \"../context/expenses_context\";\r\n//import { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\nimport LeaveTableViewStaff from \"./LeaveTableViewStaff\";\r\nimport TrainingsTableViewStaff from \"./TrainingsTableViewStaff\";\r\nimport LeaveTableAdmin from \"./LeaveTableManager\";\r\nimport ExpenseTableViewStaff from \"./ExpenseTableViewStaff\";\r\nimport ExpenseTableAdmin from \"./ExpenseTableAdmin\";\r\n//import PayslipTableViewStaff from \"./PayslipTableViewStaff\";\r\nimport PayslipTableAdmin from \"./PayslipTableAdmin\";\r\n//import DailyAllowancesTableViewStaff from \"./DailyAllowancesTableViewStaff\";\r\nimport DailyAllowancesTableAdmin from \"./DailyAllowancesTableAdmin\";\r\n//import OnLeavesViewStaff from \"./OnLeavesViewStaff\";\r\nimport WPExpiryViewStaff from \"./WPExpiryViewStaff\";\r\n//import { useEmployees } from \"./employees/useEmployees\";\r\n//import { useSingleEmployee } from \"./employees/useSingleEmployee\";\r\n\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst FILTERSTRING = \"Pending\";\r\n\r\nconst HomeStaff = () => {\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const [loginLevel] = useRecoilState(loginLevelState);\r\n  //const { employees, setFilter, setEmployeeId } = useEmployees();\r\n  //const { singleemployee, setSingleEmployeeId } = useSingleEmployee();\r\n  const [leavesdata, setLeavesdata] = useState([]);\r\n  const [isLeaveDialogOpen, setIsLeaveDialogOpen] = useState(false);\r\n  const [expensesdata, setExpensesdata] = useState([]);\r\n  const [isExpenseDialogOpen, setIsExpenseDialogOpen] = useState(false);\r\n  const [payslipsdata, setPayslipsdata] = useState([]);\r\n  const [isPayslipDialogOpen, setIsPayslipDialogOpen] = useState(false);\r\n  const [dailyallowancesdata, setDailyAllowancesdata] = useState([]);\r\n  const [isDailyAllowancesDialogOpen, setIsDailyAllowancesDialogOpen] =\r\n    useState(false);\r\n\r\n  //const { leaves } = useLeavesContext();\r\n  //const { expenses } = useExpensesContext();\r\n  //const { payslips } = usePayslipsContext();\r\n  const {  loadPendingDailyAllowances } =\r\n    useDailyAllowancesContext();\r\n  const {  setEditEmployeeID, setIsEditingOn } =\r\n    useEmployeesContext();\r\n\r\n  // const handleLeaveDialogOpen = () => {\r\n  //   setLeavesdata([]);\r\n  //   setLeavesdata([...leaves]);\r\n  //   setIsLeaveDialogOpen(true);\r\n  // };\r\n\r\n  const handleLeaveDialogClose = () => {\r\n    setIsLeaveDialogOpen(false);\r\n    //loadPendingLeaves(FILTERSTRING);\r\n  };\r\n\r\n  // const handleExpenseDialogOpen = () => {\r\n  //   setExpensesdata([]);\r\n  //   setExpensesdata([...expenses]);\r\n  //   setIsExpenseDialogOpen(true);\r\n  // };\r\n\r\n  const handleExpenseDialogClose = () => {\r\n    setIsExpenseDialogOpen(false);\r\n    //loadPendingExpenses(FILTERSTRING);\r\n  };\r\n\r\n  // const handlePayslipDialogOpen = () => {\r\n  //   setPayslipsdata([]);\r\n  //   setPayslipsdata([...payslips]);\r\n  //   setIsPayslipDialogOpen(true);\r\n  // };\r\n\r\n  const handlePayslipDialogClose = () => {\r\n    setIsPayslipDialogOpen(false);\r\n    //loadPendingPayslips(FILTERSTRING);\r\n  };\r\n\r\n  // const handleDailyAllowancesDialogOpen = () => {\r\n  //   setDailyAllowancesdata([]);\r\n  //   setDailyAllowancesdata([...dailyallowances]);\r\n  //   setIsDailyAllowancesDialogOpen(true);\r\n  // };\r\n\r\n  const handleDailyAllowancesDialogClose = () => {\r\n    setIsDailyAllowancesDialogOpen(false);\r\n    loadPendingDailyAllowances(FILTERSTRING);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setEditEmployeeID(loginLevel.loginUserId);\r\n    setIsEditingOn();\r\n  },[]);\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.appBarSpacer} />\r\n      <div style={{ paddingLeft: 50 }}>\r\n        {/* <h2>Welcome Staff {loginLevel.loginUser}!</h2>\r\n        <h3>Dashboard</h3> */}\r\n      </div>\r\n      <Container maxWidth=\"xl\" className={classes.container}>\r\n        <Stack direction=\"column\">\r\n          <Box>\r\n            <CardLayout2>\r\n              <LeaveTableViewStaff />\r\n            </CardLayout2>\r\n          </Box>\r\n          <Box>\r\n            <CardLayout2>\r\n              <ExpenseTableViewStaff />\r\n            </CardLayout2>\r\n          </Box>\r\n          <Box>\r\n            <CardLayout2>\r\n              <TrainingsTableViewStaff />\r\n            </CardLayout2>\r\n          </Box>\r\n\r\n          <Box>\r\n            <CardLayout2>\r\n              <WPExpiryViewStaff />\r\n            </CardLayout2>\r\n          </Box>\r\n       \r\n        </Stack>\r\n        <Box pt={4}>\r\n          <Copyright />\r\n        </Box>\r\n        <CustomDialog\r\n          isOpen={isLeaveDialogOpen}\r\n          handleClose={handleLeaveDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <LeaveTableAdmin\r\n            setLeavesdata={setLeavesdata}\r\n            leavesdata={leavesdata}\r\n            handleDialogClose={handleLeaveDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isExpenseDialogOpen}\r\n          handleClose={handleExpenseDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <ExpenseTableAdmin\r\n            setExpensesdata={setExpensesdata}\r\n            expensesdata={expensesdata}\r\n            handleDialogClose={handleExpenseDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isPayslipDialogOpen}\r\n          handleClose={handlePayslipDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={true}\r\n          isFullwidth={false}\r\n        >\r\n          <PayslipTableAdmin\r\n            setPayslipsdata={setPayslipsdata}\r\n            payslipsdata={payslipsdata}\r\n            handleDialogClose={handlePayslipDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isDailyAllowancesDialogOpen}\r\n          handleClose={handleDailyAllowancesDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={true}\r\n          isFullwidth={false}\r\n        >\r\n          <DailyAllowancesTableAdmin\r\n            setDailyAllowancesdata={setDailyAllowancesdata}\r\n            dailyallowancesdata={dailyallowancesdata}\r\n            handleDialogClose={handleDailyAllowancesDialogClose}\r\n          />\r\n        </CustomDialog>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default HomeStaff;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeManager.js",["1300","1301","1302","1303"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\n//import dayjs from \"dayjs\";\r\nimport {\r\n  Box,\r\n  Container,\r\n  Divider,\r\n  //Flex,\r\n  //Grid,\r\n  Heading,\r\n  HStack,\r\n  SimpleGrid,\r\n  Select,\r\n  //Stack,\r\n  Tabs,\r\n  TabList,\r\n  TabPanels,\r\n  Tab,\r\n  TabPanel,\r\n} from \"@chakra-ui/react\";\r\n//import CardLayout from \"../helpers/CardLayout\";\r\n//import CardLayout2 from \"../helpers/CardLayout2\";\r\n//import CardLayout4 from \"../helpers/CardLayout4\";\r\n//import Copyright from \"./Copyright\";\r\n//import { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { useRecoilState } from \"recoil\";\r\n//import { loginLevelState } from \"./data/atomdata\";\r\n//import BarChart from \"../helpers/BarChart\";\r\n//import BarChartStack from \"../helpers/BarChartStack\";\r\n\r\nimport EmployeeTableLeaveView from \"./EmployeeTableLeaveView\";\r\nimport ExpensesTableViewSummary from \"./ExpenseTableViewSummary\";\r\n//import ExpenseSummaryTableView from \"./ExpensesSummaryTableView\";\r\nimport LeavesTableViewSummary from \"./LeavesTableViewSummary\";\r\nimport HocTableViewSummary from \"./HocTableViewSummary\";\r\n//import SummaryTableView from \"../helpers/SummaryTableView\";\r\nimport DailyAllowanceTableViewSummary from \"./DailyAllowancesTableViewSummary\";\r\nimport PayslipTableViewSummary from \"./PayslipTableViewSummary\";\r\n//import PayslipSummaryTableView from \"./PayslipSummaryTableView\";\r\n//import { useExpensesPeriod } from \"./expenses/useExpensesPeriod\";\r\n\r\n// const LeavesTableViewSummary = React.lazy(() =>\r\n//   import(\"./LeavesTableViewSummary\")\r\n// );\r\n\r\nconst drawerWidth = 240;\r\n\r\n//const FILTERSTRING = \"Pending\";\r\n\r\n// const months = [\r\n//   \"Jan\",\r\n//   \"Feb\",\r\n//   \"Mar\",\r\n//   \"Apr\",\r\n//   \"May\",\r\n//   \"Jun\",\r\n//   \"Jul\",\r\n//   \"Aug\",\r\n//   \"Sep\",\r\n//   \"Oct\",\r\n//   \"Nov\",\r\n//   \"Dec\",\r\n//];\r\n// const monthsname = [\r\n//   \"jan\",\r\n//   \"feb\",\r\n//   \"mar\",\r\n//   \"apr\",\r\n//   \"may\",\r\n//   \"jun\",\r\n//   \"jul\",\r\n//   \"aug\",\r\n//   \"sep\",\r\n//   \"oct\",\r\n//   \"nov\",\r\n//   \"dec\",\r\n//];\r\n\r\n// const expchartdata = {\r\n//   labels: [\r\n//     \"January\",\r\n//     \"February\",\r\n//     \"March\",\r\n//     \"April\",\r\n//     \"May\",\r\n//     \"June\",\r\n//     \"July\",\r\n//     \"August\",\r\n//     \"September\",\r\n//     \"October\",\r\n//     \"November\",\r\n//     \"December\",\r\n//   ],\r\n//   datasets: [\r\n//     {\r\n//       label: \"Expenses\",\r\n//       backgroundColor: \"rgba(75,192,192,1)\",\r\n//       borderColor: \"rgba(0,0,0,1)\",\r\n//       borderWidth: 2,\r\n//       data: [65, 59, 80, 81, 56, 50, 60, 40, 70, 60, 50, 60],\r\n//     },\r\n//   ],\r\n// };\r\n\r\n// const sitechartdata = {\r\n//   labels: [\r\n//     \"January\",\r\n//     \"February\",\r\n//     \"March\",\r\n//     \"April\",\r\n//     \"May\",\r\n//     \"June\",\r\n//     \"July\",\r\n//     \"August\",\r\n//     \"September\",\r\n//     \"October\",\r\n//     \"November\",\r\n//     \"December\",\r\n//   ],\r\n//   datasets: [\r\n//     {\r\n//       label: \"Expenses\",\r\n//       backgroundColor: \"rgba(75,192,192,1)\",\r\n//       borderColor: \"rgba(0,0,0,1)\",\r\n//       borderWidth: 2,\r\n//       data: [\r\n//         25000, 39000, 20000, 21000, 26000, 20000, 20000, 20000, 22000, 20000,\r\n//         25000, 20000,\r\n//       ],\r\n//     },\r\n//   ],\r\n//};\r\n\r\n// const paychartdata = {\r\n//   labels: [\r\n//     \"January\",\r\n//     \"February\",\r\n//     \"March\",\r\n//     \"April\",\r\n//     \"May\",\r\n//     \"June\",\r\n//     \"July\",\r\n//     \"August\",\r\n//     \"September\",\r\n//     \"October\",\r\n//     \"November\",\r\n//     \"December\",\r\n//   ],\r\n//   datasets: [\r\n//     {\r\n//       label: \"Expenses\",\r\n//       backgroundColor: \"rgba(75,192,192,1)\",\r\n//       borderColor: \"rgba(0,0,0,1)\",\r\n//       borderWidth: 2,\r\n//       data: [\r\n//         65000, 59000, 80000, 81000, 56000, 50000, 60000, 70000, 72000, 60000,\r\n//         55000, 60000,\r\n//       ],\r\n//     },\r\n//   ],\r\n// };\r\n\r\n// const columns = [\r\n//   {\r\n//     title: \"January\",\r\n//     field: \"jan\",\r\n//   },\r\n//   {\r\n//     title: \"February\",\r\n//     field: \"feb\",\r\n//   },\r\n//   {\r\n//     title: \"March\",\r\n//     field: \"mar\",\r\n//   },\r\n//   {\r\n//     title: \"April\",\r\n//     field: \"apr\",\r\n//   },\r\n//   {\r\n//     title: \"May\",\r\n//     field: \"may\",\r\n//   },\r\n//   {\r\n//     title: \"June\",\r\n//     field: \"jun\",\r\n//   },\r\n//   {\r\n//     title: \"July\",\r\n//     field: \"jul\",\r\n//   },\r\n//   {\r\n//     title: \"August\",\r\n//     field: \"aug\",\r\n//   },\r\n//   {\r\n//     title: \"September\",\r\n//     field: \"sep\",\r\n//   },\r\n//   {\r\n//     title: \"October\",\r\n//     field: \"oct\",\r\n//   },\r\n//   {\r\n//     title: \"November\",\r\n//     field: \"nov\",\r\n//   },\r\n//   {\r\n//     title: \"December\",\r\n//     field: \"dec\",\r\n//   },\r\n// ];\r\n\r\n// const data = [\r\n//   {\r\n//     jan: 80,\r\n//     feb: 90,\r\n//     mar: 78,\r\n//     apr: 63,\r\n//     may: 55,\r\n//     jun: 60,\r\n//     jul: 55,\r\n//     aug: 65,\r\n//     sep: 70,\r\n//     oct: 58,\r\n//     nov: 60,\r\n//     dec: 62,\r\n//   },\r\n// ];\r\n\r\n// const paysummcolumns = [\r\n//   {\r\n//     title: \"Category\",\r\n//     field: \"category\",\r\n//   },\r\n//   {\r\n//     title: \"Jan\",\r\n//     field: \"jan\",\r\n//   },\r\n//   {\r\n//     title: \"Feb\",\r\n//     field: \"feb\",\r\n//   },\r\n//   {\r\n//     title: \"Mar\",\r\n//     field: \"mar\",\r\n//   },\r\n//   {\r\n//     title: \"Apr\",\r\n//     field: \"apr\",\r\n//   },\r\n//   {\r\n//     title: \"May\",\r\n//     field: \"may\",\r\n//   },\r\n//   {\r\n//     title: \"Jun\",\r\n//     field: \"jun\",\r\n//   },\r\n//   {\r\n//     title: \"Jul\",\r\n//     field: \"jul\",\r\n//   },\r\n//   {\r\n//     title: \"Aug\",\r\n//     field: \"aug\",\r\n//   },\r\n//   {\r\n//     title: \"Sep\",\r\n//     field: \"sep\",\r\n//   },\r\n//   {\r\n//     title: \"Oct\",\r\n//     field: \"oct\",\r\n//   },\r\n//   {\r\n//     title: \"Nov\",\r\n//     field: \"nov\",\r\n//   },\r\n//   {\r\n//     title: \"Dec\",\r\n//     field: \"dec\",\r\n//   },\r\n// ];\r\n\r\n// const paysummdata = [\r\n//   {\r\n//     category: \"Basic Salary\",\r\n//     jan: 80,\r\n//     feb: 90,\r\n//     mar: 78,\r\n//     apr: 63,\r\n//     may: 55,\r\n//     jun: 60,\r\n//     jul: 55,\r\n//     aug: 65,\r\n//     sep: 70,\r\n//     oct: 58,\r\n//     nov: 60,\r\n//     dec: 62,\r\n//   },\r\n//   {\r\n//     category: \"TAP/SCP\",\r\n//     jan: 80,\r\n//     feb: 90,\r\n//     mar: 78,\r\n//     apr: 63,\r\n//     may: 55,\r\n//     jun: 60,\r\n//     jul: 55,\r\n//     aug: 65,\r\n//     sep: 70,\r\n//     oct: 58,\r\n//     nov: 60,\r\n//     dec: 62,\r\n//   },\r\n//   {\r\n//     category: \"Site Allowances\",\r\n//     jan: 80,\r\n//     feb: 90,\r\n//     mar: 78,\r\n//     apr: 63,\r\n//     may: 55,\r\n//     jun: 60,\r\n//     jul: 55,\r\n//     aug: 65,\r\n//     sep: 70,\r\n//     oct: 58,\r\n//     nov: 60,\r\n//     dec: 62,\r\n//   },\r\n//   {\r\n//     category: \"Expenses Claims\",\r\n//     jan: 80,\r\n//     feb: 90,\r\n//     mar: 78,\r\n//     apr: 63,\r\n//     may: 55,\r\n//     jun: 60,\r\n//     jul: 55,\r\n//     aug: 65,\r\n//     sep: 70,\r\n//     oct: 58,\r\n//     nov: 60,\r\n//     dec: 62,\r\n//   },\r\n//   {\r\n//     category: \"Allowances\",\r\n//     jan: 80,\r\n//     feb: 90,\r\n//     mar: 78,\r\n//     apr: 63,\r\n//     may: 55,\r\n//     jun: 60,\r\n//     jul: 55,\r\n//     aug: 65,\r\n//     sep: 70,\r\n//     oct: 58,\r\n//     nov: 60,\r\n//     dec: 62,\r\n//   },\r\n//   {\r\n//     category: \"Deductions\",\r\n//     jan: 80,\r\n//     feb: 90,\r\n//     mar: 78,\r\n//     apr: 63,\r\n//     may: 55,\r\n//     jun: 60,\r\n//     jul: 55,\r\n//     aug: 65,\r\n//     sep: 70,\r\n//     oct: 58,\r\n//     nov: 60,\r\n//     dec: 62,\r\n//   },\r\n//   {\r\n//     category: \"Totals\",\r\n//     jan: 80,\r\n//     feb: 90,\r\n//     mar: 78,\r\n//     apr: 63,\r\n//     may: 55,\r\n//     jun: 60,\r\n//     jul: 55,\r\n//     aug: 65,\r\n//     sep: 70,\r\n//     oct: 58,\r\n//     nov: 60,\r\n//     dec: 62,\r\n//   },\r\n// ];\r\n\r\nconst initial_expdata = [\r\n  {\r\n    jan: 0,\r\n    feb: 0,\r\n    mar: 0,\r\n    apr: 0,\r\n    may: 0,\r\n    jun: 0,\r\n    jul: 0,\r\n    aug: 0,\r\n    sep: 0,\r\n    oct: 0,\r\n    nov: 0,\r\n    dec: 0,\r\n  },\r\n];\r\n\r\nconst HomeManager = () => {\r\n  const classes = useStyles();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  //const { expensesperiod, setExpPeriodId } = useExpensesPeriod();\r\n  //const [expdata, setExpData] = useState(initial_expdata);\r\n   const [selectleaveyear, setSelectLeaveYear] = useState(\"\");\r\n   const [selectexpenseyear, setSelectExpenseYear] = useState(\"\");\r\n   const [selectsiteallowsyear, setSelectSiteAllowsYear] = useState(\"\");\r\n   const [selectpayrollyear, setSelectPayrollYear] = useState(\"\");\r\n   const [selecthocyear, setSelectHocYear] = useState(\"\");\r\n  const currentyear = new Date().getFullYear();\r\n  const currentmonth = new Date().getMonth();\r\n\r\n  // const Build_ExpData = () => {\r\n  //   const currentmonth = new Date().getMonth();\r\n\r\n  //   for (var i = 1; i <= currentmonth; i++) {\r\n  //     expdata[i] = i;\r\n  //   }\r\n  //   console.log(\"date\", currentyear, currentmonth, expdata);\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   Build_ExpData();\r\n  // }, []);\r\n\r\n   useEffect(() => {\r\n     setSelectLeaveYear(currentyear);\r\n     setSelectExpenseYear(currentyear);\r\n     setSelectSiteAllowsYear(currentyear);\r\n     setSelectPayrollYear(currentyear);\r\n     setSelectHocYear(currentyear);\r\n   }, []);\r\n  \r\n  return (\r\n    // <div>\r\n    //   <div className={classes.appBarSpacer} />\r\n    //   <div style={{ paddingLeft: 50 }}>\r\n    //     <h2>Welcome {loginLevel.loginUser}!</h2>\r\n    //     <h3>Dashboard</h3>\r\n    //   </div>\r\n    <Container maxW=\"full\" mt=\"100\">\r\n      <Box\r\n        //minW=\"100%\"\r\n        padding=\"4\"\r\n        width=\"full\"\r\n        height=\"800\"\r\n        borderColor=\"blue.500\"\r\n        borderWidth=\"1px\"\r\n        borderRadius=\"lg\"\r\n        //overflow=\"scroll\"\r\n      >\r\n        <Tabs>\r\n          <TabList>\r\n            <Tab>Employees</Tab>\r\n            <Tab>Leaves</Tab>\r\n            <Tab>Expenses</Tab>\r\n            <Tab>Site Allowances</Tab>\r\n            <Tab>Payroll</Tab>\r\n            <Tab>HOC History</Tab>\r\n          </TabList>\r\n\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"full\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid>\r\n                  <Box>\r\n                    <Heading as=\"h2\" size=\"lg\">\r\n                      Employees\r\n                    </Heading>\r\n                  </Box>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs isLazy>\r\n                      {/* <TabList>\r\n                        <Tab>Details</Tab>\r\n                      </TabList> */}\r\n                      <TabPanels>\r\n                        <TabPanel>\r\n                          <EmployeeTableLeaveView />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"100%\"\r\n                padding=\"4\"\r\n                width=\"full\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid w=\"168vh\">\r\n                  <HStack>\r\n                    <Box>\r\n                      <Heading as=\"h2\" size=\"lg\">\r\n                        Leaves\r\n                      </Heading>\r\n                    </Box>\r\n                    <Box alignSelf=\"flex-end\">\r\n                      <HStack>\r\n                        <Select\r\n                          value={selectleaveyear}\r\n                          fontSize={20}\r\n                          onChange={(e) => setSelectLeaveYear(e.target.value)}\r\n                        >\r\n                          <option value=\"2021\">2021</option>\r\n                          <option value=\"2022\">2022</option>\r\n                        </Select>\r\n                        {/* <Box size=\"xl\" py={2}>\r\n                          <Text fontSize=\"lg\">\r\n                            <ExportLeave2Excel\r\n                              filename=\"leave\"\r\n                              dataset={dataset}\r\n                              title=\"Leave\"\r\n                            />\r\n                          </Text>\r\n                        </Box> */}\r\n                      </HStack>\r\n                    </Box>\r\n                  </HStack>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs defaultIndex={currentmonth} isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                          <Tab>Summary</Tab> */}\r\n                        <Tab>January</Tab>\r\n                        <Tab>February</Tab>\r\n                        <Tab>March</Tab>\r\n                        <Tab>April</Tab>\r\n                        <Tab>May</Tab>\r\n                        <Tab>June</Tab>\r\n                        <Tab>July</Tab>\r\n                        <Tab>August</Tab>\r\n                        <Tab>September</Tab>\r\n                        <Tab>October</Tab>\r\n                        <Tab>November</Tab>\r\n                        <Tab>December</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Expenses for the Month\"\r\n                    barchartdata={expchartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={1}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={2}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={3}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={4}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={5}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={6}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={7}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={8}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={9}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={10}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={11}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={12}\r\n                          />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"x3\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid w=\"168vh\">\r\n                  <HStack>\r\n                    <Box>\r\n                      <Heading as=\"h2\" size=\"lg\">\r\n                        Expenses Claims\r\n                      </Heading>\r\n                    </Box>\r\n                    <Box alignSelf=\"flex-end\">\r\n                      <HStack>\r\n                        <Select\r\n                          value={selectexpenseyear}\r\n                          fontSize={20}\r\n                          onChange={(e) => setSelectExpenseYear(e.target.value)}\r\n                        >\r\n                          <option value=\"2021\">2021</option>\r\n                          <option value=\"2022\">2022</option>\r\n                        </Select>\r\n                        {/* <Box size=\"xl\" py={2}>\r\n                          <Text fontSize=\"lg\">\r\n                            <ExportLeave2Excel\r\n                              filename=\"leave\"\r\n                              dataset={dataset}\r\n                              title=\"Leave\"\r\n                            />\r\n                          </Text>\r\n                        </Box> */}\r\n                      </HStack>\r\n                    </Box>\r\n                  </HStack>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs defaultIndex={currentmonth} isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                          <Tab>Summary</Tab> */}\r\n                        <Tab>January</Tab>\r\n                        <Tab>February</Tab>\r\n                        <Tab>March</Tab>\r\n                        <Tab>April</Tab>\r\n                        <Tab>May</Tab>\r\n                        <Tab>June</Tab>\r\n                        <Tab>July</Tab>\r\n                        <Tab>August</Tab>\r\n                        <Tab>September</Tab>\r\n                        <Tab>October</Tab>\r\n                        <Tab>November</Tab>\r\n                        <Tab>December</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Expenses for the Month\"\r\n                    barchartdata={expchartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <ExpenseSummaryTableView year={currentyear} />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={1}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={2}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={3}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={4}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={5}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={6}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={7}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={8}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={9}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={10}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={11}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={12}\r\n                          />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"x3\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid w=\"168vh\">\r\n                  <HStack>\r\n                    <Box>\r\n                      <Heading as=\"h2\" size=\"lg\">\r\n                        Site Allowances\r\n                      </Heading>\r\n                    </Box>\r\n                    <Box alignSelf=\"flex-end\">\r\n                      <HStack>\r\n                        <Select\r\n                          value={selectsiteallowsyear}\r\n                          fontSize={20}\r\n                          onChange={(e) =>\r\n                            setSelectSiteAllowsYear(e.target.value)\r\n                          }\r\n                        >\r\n                          <option value=\"2021\">2021</option>\r\n                          <option value=\"2022\">2022</option>\r\n                        </Select>\r\n                        {/* <Box size=\"xl\" py={2}>\r\n                          <Text fontSize=\"lg\">\r\n                            <ExportLeave2Excel\r\n                              filename=\"leave\"\r\n                              dataset={dataset}\r\n                              title=\"Leave\"\r\n                            />\r\n                          </Text>\r\n                        </Box> */}\r\n                      </HStack>\r\n                    </Box>\r\n                  </HStack>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs defaultIndex={currentmonth} isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                <Tab>Summary</Tab> */}\r\n                        <Tab>January</Tab>\r\n                        <Tab>February</Tab>\r\n                        <Tab>March</Tab>\r\n                        <Tab>April</Tab>\r\n                        <Tab>May</Tab>\r\n                        <Tab>June</Tab>\r\n                        <Tab>July</Tab>\r\n                        <Tab>August</Tab>\r\n                        <Tab>September</Tab>\r\n                        <Tab>October</Tab>\r\n                        <Tab>November</Tab>\r\n                        <Tab>December</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Site Allowances for the Month\"\r\n                    barchartdata={paychartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"01\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"02\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"03\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"04\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"05\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"06\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"07\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"08\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"09\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"10\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"11\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"12\"\r\n                          />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"x3\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid>\r\n                  <Box>\r\n                    <Heading as=\"h2\" size=\"lg\">\r\n                      Payroll\r\n                    </Heading>\r\n                  </Box>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                <Tab>Summary</Tab> */}\r\n                        <Tab>Approved</Tab>\r\n                        <Tab>Verified</Tab>\r\n                        <Tab>Pending</Tab>\r\n                        <Tab>Rejected</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Payroll for the Month\"\r\n                    barchartdata={paychartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <PayslipSummaryTableView year={currentyear} status=\"Approved\" />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <PayslipTableViewSummary status=\"Approved\" />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <PayslipTableViewSummary status=\"Verified\" />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <PayslipTableViewSummary status=\"Pending\" />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <PayslipTableViewSummary status=\"Rejected\" />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"100%\"\r\n                padding=\"4\"\r\n                width=\"full\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid w=\"168vh\">\r\n                  <HStack>\r\n                    <Box>\r\n                      <Heading as=\"h2\" size=\"lg\">\r\n                        HOC History\r\n                      </Heading>\r\n                    </Box>\r\n                    <Box alignSelf=\"flex-end\">\r\n                      <HStack>\r\n                        <Select\r\n                          value={selecthocyear}\r\n                          fontSize={20}\r\n                          onChange={(e) => setSelectHocYear(e.target.value)}\r\n                        >\r\n                          <option value=\"2021\">2021</option>\r\n                          <option value=\"2022\">2022</option>\r\n                        </Select>\r\n                        {/* <Box size=\"xl\" py={2}>\r\n                          <Text fontSize=\"lg\">\r\n                            <ExportLeave2Excel\r\n                              filename=\"leave\"\r\n                              dataset={dataset}\r\n                              title=\"Leave\"\r\n                            />\r\n                          </Text>\r\n                        </Box> */}\r\n                      </HStack>\r\n                    </Box>\r\n                  </HStack>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs defaultIndex={currentmonth} isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                          <Tab>Summary</Tab> */}\r\n                        <Tab>January</Tab>\r\n                        <Tab>February</Tab>\r\n                        <Tab>March</Tab>\r\n                        <Tab>April</Tab>\r\n                        <Tab>May</Tab>\r\n                        <Tab>June</Tab>\r\n                        <Tab>July</Tab>\r\n                        <Tab>August</Tab>\r\n                        <Tab>September</Tab>\r\n                        <Tab>October</Tab>\r\n                        <Tab>November</Tab>\r\n                        <Tab>December</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Expenses for the Month\"\r\n                    barchartdata={expchartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={1}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={2}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={3}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={4}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={5}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={6}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={7}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={8}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={9}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={10}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={11}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={12}\r\n                          />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n    // </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default HomeManager;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeOpsSpvr.js",["1304"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\n//import { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Divider,\r\n  Heading,\r\n  HStack,\r\n  Stack,\r\n  Select,\r\n  SimpleGrid,\r\n  Tabs,\r\n  TabList,\r\n  TabPanels,\r\n  Tab,\r\n  TabPanel,\r\n} from \"@chakra-ui/react\";\r\nimport {  Container } from \"@material-ui/core\";\r\n//import CardLayout from \"../helpers/CardLayout\";\r\n//import CardLayout2 from \"../helpers/CardLayout2\";\r\n//import CardLayout3 from \"../helpers/CardLayout3\";\r\nimport Copyright from \"./Copyright\";\r\n//import { useEmployees } from \"./employees/useEmployees\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { useRecoilState } from \"recoil\";\r\n//import { loginLevelState } from \"./data/atomdata\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\n//import LeaveTableViewAdmin from \"./LeaveTableViewAdmin\";\r\nimport LeaveTableAdmin from \"./LeaveTableManager\";\r\n//import ExpenseTableView from \"./ExpenseTableView\";\r\nimport ExpenseTableAdmin from \"./ExpenseTableAdmin\";\r\n//import PayslipTableView from \"./PayslipTableView\";\r\nimport PayslipTableAdmin from \"./PayslipTableAdmin\";\r\n//import DailyAllowancesTableView from \"./DailyAllowancesTableView\";\r\nimport DailyAllowancesTableAdmin from \"./DailyAllowancesTableAdmin\";\r\nimport DailyAllowanceTableViewSummary from \"./DailyAllowancesTableViewSummary\";\r\n//import TrainingsTableViewAdmin from \"./TrainingsTableViewAdmin\";\r\n//import WPExpiryViewAdmin from \"./WPExpiryViewAdmin\";\r\n//import EmployeeTableLeaveView from \"./EmployeeTableLeaveView\";\r\nimport LeavesTableViewSummary from \"./LeavesTableViewSummary\";\r\nimport LeavesTableApproval from \"./LeaveTableApproval\";\r\nimport DailyAllowancesTableApproval from \"./DailyAllowancesTableVeryfy\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst FILTERSTRING = \"Pending\";\r\n\r\nconst EmployeeView = () => {\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  //const { employees } = useEmployees();\r\n  //const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const [leavesdata, setLeavesdata] = useState([]);\r\n  const [isLeaveDialogOpen, setIsLeaveDialogOpen] = useState(false);\r\n  const [expensesdata, setExpensesdata] = useState([]);\r\n  const [isExpenseDialogOpen, setIsExpenseDialogOpen] = useState(false);\r\n  const [payslipsdata, setPayslipsdata] = useState([]);\r\n  const [isPayslipDialogOpen, setIsPayslipDialogOpen] = useState(false);\r\n  const [dailyallowancesdata, setDailyAllowancesdata] = useState([]);\r\n  const [isDailyAllowancesDialogOpen, setIsDailyAllowancesDialogOpen] =\r\n    useState(false);\r\n\r\n  const {  loadPendingLeaves } = useLeavesContext();\r\n  const {  loadPendingExpenses } = useExpensesContext();\r\n  const {  loadPendingPayslips } = usePayslipsContext();\r\n  const {  loadPendingDailyAllowances } =\r\n    useDailyAllowancesContext();\r\n  const [selectleaveyear, setSelectLeaveYear] = useState(\"\");\r\n  const [selectsiteallowsyear, setSelectSiteAllowsYear] = useState(\"\");\r\n  const currentyear = new Date().getFullYear();\r\n  const currentmonth = new Date().getMonth();\r\n\r\n  // const handleLeaveDialogOpen = () => {\r\n  //   setLeavesdata([]);\r\n  //   setLeavesdata([...leaves]);\r\n  //   setIsLeaveDialogOpen(true);\r\n  // };\r\n\r\n  const handleLeaveDialogClose = () => {\r\n    setIsLeaveDialogOpen(false);\r\n    loadPendingLeaves(FILTERSTRING);\r\n  };\r\n\r\n  // const handleExpenseDialogOpen = () => {\r\n  //   setExpensesdata([]);\r\n  //   setExpensesdata([...expenses]);\r\n  //   setIsExpenseDialogOpen(true);\r\n  // };\r\n\r\n  const handleExpenseDialogClose = () => {\r\n    setIsExpenseDialogOpen(false);\r\n    loadPendingExpenses(FILTERSTRING);\r\n  };\r\n\r\n  // const handlePayslipDialogOpen = () => {\r\n  //   setPayslipsdata([]);\r\n  //   setPayslipsdata([...payslips]);\r\n  //   setIsPayslipDialogOpen(true);\r\n  // };\r\n\r\n  const handlePayslipDialogClose = () => {\r\n    setIsPayslipDialogOpen(false);\r\n    loadPendingPayslips(FILTERSTRING);\r\n  };\r\n\r\n  // const handleDailyAllowancesDialogOpen = () => {\r\n  //   setDailyAllowancesdata([]);\r\n  //   setDailyAllowancesdata([...dailyallowances]);\r\n  //   setIsDailyAllowancesDialogOpen(true);\r\n  //};\r\n\r\n  const handleDailyAllowancesDialogClose = () => {\r\n    setIsDailyAllowancesDialogOpen(false);\r\n    loadPendingDailyAllowances(FILTERSTRING);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSelectLeaveYear(currentyear);\r\n    setSelectSiteAllowsYear(currentyear);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.appBarSpacer} />\r\n      <div style={{ paddingLeft: 50 }}>\r\n        {/* <h2>Welcome {loginLevel.loginUser}!</h2>\r\n        <h3>Dashboard</h3> */}\r\n      </div>\r\n      <Container maxWidth=\"full\" className={classes.container}>\r\n        <Stack direction=\"column\">\r\n          {/* <Box>\r\n            <CardLayout2>\r\n              <LeaveTableViewAdmin />\r\n            </CardLayout2>\r\n          </Box> */}\r\n          {/* <Box>\r\n            <CardLayout2>\r\n              <WPExpiryViewAdmin />\r\n            </CardLayout2>\r\n          </Box> */}\r\n          {/* <Box>\r\n            <CardLayout2>\r\n              <TrainingsTableViewAdmin />\r\n            </CardLayout2>\r\n          </Box> */}\r\n          <Box\r\n            maxW=\"x3\"\r\n            padding=\"4\"\r\n            width=\"100%\"\r\n            height=\"750\"\r\n            borderColor=\"blue.500\"\r\n            borderWidth=\"1px\"\r\n            borderRadius=\"lg\"\r\n            overflow=\"scroll\"\r\n          >\r\n            <Tabs>\r\n              <TabList>\r\n                {/* <Tab>Employees</Tab> */}\r\n                <Tab>Leaves</Tab>\r\n                <Tab>Site Allowances</Tab>\r\n                <Tab>Leaves Approval</Tab>\r\n                <Tab>Site Allows Verify</Tab>\r\n              </TabList>\r\n              <TabPanels>\r\n                {/* <TabPanel>\r\n                  <Box\r\n                    maxW=\"full\"\r\n                    padding=\"4\"\r\n                    width=\"100%\"\r\n                    height=\"700\"\r\n                    borderColor=\"blue.500\"\r\n                    borderWidth=\"1px\"\r\n                    borderRadius=\"lg\"\r\n                    overflow=\"scroll\"\r\n                  >\r\n                    <SimpleGrid>\r\n                      <Box>\r\n                        <Heading as=\"h2\" size=\"lg\">\r\n                          Employees\r\n                        </Heading>\r\n                      </Box>\r\n                      <Divider />\r\n                      <Box>\r\n                        <Tabs isLazy>\r\n                          <TabPanels>\r\n                            <TabPanel>\r\n                              <EmployeeTableLeaveView />\r\n                            </TabPanel>\r\n                          </TabPanels>\r\n                        </Tabs>\r\n                      </Box>\r\n                      <Divider />\r\n                    </SimpleGrid>\r\n                  </Box>\r\n                </TabPanel> */}\r\n                <TabPanel>\r\n                  <Box\r\n                    maxW=\"100%\"\r\n                    padding=\"4\"\r\n                    width=\"full\"\r\n                    height=\"700\"\r\n                    borderColor=\"blue.500\"\r\n                    borderWidth=\"1px\"\r\n                    borderRadius=\"lg\"\r\n                    overflow=\"scroll\"\r\n                  >\r\n                    <SimpleGrid w=\"168vh\">\r\n                      <HStack>\r\n                        <Box>\r\n                          <Heading as=\"h2\" size=\"lg\">\r\n                            Leaves\r\n                          </Heading>\r\n                        </Box>\r\n                        <Box alignSelf=\"flex-end\">\r\n                          <HStack>\r\n                            <Select\r\n                              value={selectleaveyear}\r\n                              fontSize={20}\r\n                              onChange={(e) =>\r\n                                setSelectLeaveYear(e.target.value)\r\n                              }\r\n                            >\r\n                              <option value=\"2021\">2021</option>\r\n                              <option value=\"2022\">2022</option>\r\n                            </Select>\r\n                            {/* <Box size=\"xl\" py={2}>\r\n                              <Text fontSize=\"lg\">\r\n                                <ExportLeave2Excel\r\n                                  filename=\"leave\"\r\n                                  dataset={dataset}\r\n                                  title=\"Leave\"\r\n                                />\r\n                              </Text>\r\n                            </Box> */}\r\n                          </HStack>\r\n                        </Box>\r\n                      </HStack>\r\n                      <Divider />\r\n                      <Box>\r\n                        <Tabs defaultIndex={currentmonth} isLazy>\r\n                          <TabList>\r\n                            {/* <Tab>Chart</Tab>\r\n                          <Tab>Summary</Tab> */}\r\n                            <Tab>January</Tab>\r\n                            <Tab>February</Tab>\r\n                            <Tab>March</Tab>\r\n                            <Tab>April</Tab>\r\n                            <Tab>May</Tab>\r\n                            <Tab>June</Tab>\r\n                            <Tab>July</Tab>\r\n                            <Tab>August</Tab>\r\n                            <Tab>September</Tab>\r\n                            <Tab>October</Tab>\r\n                            <Tab>November</Tab>\r\n                            <Tab>December</Tab>\r\n                          </TabList>\r\n                          <TabPanels>\r\n                            {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Expenses for the Month\"\r\n                    barchartdata={expchartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={1}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={2}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={3}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={4}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={5}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={6}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={7}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={8}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={9}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={10}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={11}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={12}\r\n                              />\r\n                            </TabPanel>\r\n                          </TabPanels>\r\n                        </Tabs>\r\n                      </Box>\r\n                      <Divider />\r\n                    </SimpleGrid>\r\n                  </Box>\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <Box\r\n                    maxW=\"x3\"\r\n                    padding=\"4\"\r\n                    width=\"100%\"\r\n                    height=\"700\"\r\n                    borderColor=\"blue.500\"\r\n                    borderWidth=\"1px\"\r\n                    borderRadius=\"lg\"\r\n                    overflow=\"scroll\"\r\n                  >\r\n                    <SimpleGrid w=\"168vh\">\r\n                      <HStack>\r\n                        <Box>\r\n                          <Heading as=\"h2\" size=\"lg\">\r\n                            Site Allowances\r\n                          </Heading>\r\n                        </Box>\r\n                        <Box alignSelf=\"flex-end\">\r\n                          <HStack>\r\n                            <Select\r\n                              value={selectsiteallowsyear}\r\n                              fontSize={20}\r\n                              onChange={(e) =>\r\n                                setSelectSiteAllowsYear(e.target.value)\r\n                              }\r\n                            >\r\n                              <option value=\"2021\">2021</option>\r\n                              <option value=\"2022\">2022</option>\r\n                            </Select>\r\n                            {/* <Box size=\"xl\" py={2}>\r\n                              <Text fontSize=\"lg\">\r\n                                <ExportLeave2Excel\r\n                                  filename=\"leave\"\r\n                                  dataset={dataset}\r\n                                  title=\"Leave\"\r\n                                />\r\n                              </Text>\r\n                            </Box> */}\r\n                          </HStack>\r\n                        </Box>\r\n                      </HStack>\r\n                      <Divider />\r\n                      <Box>\r\n                        <Tabs defaultIndex={currentmonth} isLazy>\r\n                          <TabList>\r\n                            {/* <Tab>Chart</Tab>\r\n                <Tab>Summary</Tab> */}\r\n                            <Tab>January</Tab>\r\n                            <Tab>February</Tab>\r\n                            <Tab>March</Tab>\r\n                            <Tab>April</Tab>\r\n                            <Tab>May</Tab>\r\n                            <Tab>June</Tab>\r\n                            <Tab>July</Tab>\r\n                            <Tab>August</Tab>\r\n                            <Tab>September</Tab>\r\n                            <Tab>October</Tab>\r\n                            <Tab>November</Tab>\r\n                            <Tab>December</Tab>\r\n                          </TabList>\r\n                          <TabPanels>\r\n                            {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Site Allowances for the Month\"\r\n                    barchartdata={paychartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                            <TabPanel>\r\n                              <DailyAllowanceTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"01\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowanceTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"02\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowanceTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"03\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowanceTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"04\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowanceTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"05\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowanceTableViewSummary\r\n                                year={currentyear}\r\n                                month=\"06\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowanceTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"07\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowanceTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"08\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowanceTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"09\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowanceTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"10\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowanceTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"11\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowanceTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"12\"\r\n                              />\r\n                            </TabPanel>\r\n                          </TabPanels>\r\n                        </Tabs>\r\n                      </Box>\r\n                      <Divider />\r\n                    </SimpleGrid>\r\n                  </Box>\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <Box\r\n                    maxW=\"full\"\r\n                    padding=\"4\"\r\n                    width=\"100%\"\r\n                    height=\"700\"\r\n                    borderColor=\"blue.500\"\r\n                    borderWidth=\"1px\"\r\n                    borderRadius=\"lg\"\r\n                    overflow=\"scroll\"\r\n                  >\r\n                    <LeavesTableApproval />\r\n                  </Box>\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <Box\r\n                    maxW=\"full\"\r\n                    padding=\"4\"\r\n                    width=\"100%\"\r\n                    height=\"700\"\r\n                    borderColor=\"blue.500\"\r\n                    borderWidth=\"1px\"\r\n                    borderRadius=\"lg\"\r\n                    overflow=\"scroll\"\r\n                  >\r\n                    <DailyAllowancesTableApproval />\r\n                  </Box>\r\n                </TabPanel>\r\n              </TabPanels>\r\n            </Tabs>\r\n          </Box>\r\n        </Stack>\r\n\r\n        <Box pt={4}>\r\n          <Copyright />\r\n        </Box>\r\n        <CustomDialog\r\n          isOpen={isLeaveDialogOpen}\r\n          handleClose={handleLeaveDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <LeaveTableAdmin\r\n            setLeavesdata={setLeavesdata}\r\n            leavesdata={leavesdata}\r\n            handleDialogClose={handleLeaveDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isExpenseDialogOpen}\r\n          handleClose={handleExpenseDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <ExpenseTableAdmin\r\n            setExpensesdata={setExpensesdata}\r\n            expensesdata={expensesdata}\r\n            handleDialogClose={handleExpenseDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isPayslipDialogOpen}\r\n          handleClose={handlePayslipDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={true}\r\n          isFullwidth={false}\r\n        >\r\n          <PayslipTableAdmin\r\n            setPayslipsdata={setPayslipsdata}\r\n            payslipsdata={payslipsdata}\r\n            handleDialogClose={handlePayslipDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isDailyAllowancesDialogOpen}\r\n          handleClose={handleDailyAllowancesDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={true}\r\n          isFullwidth={false}\r\n        >\r\n          <DailyAllowancesTableAdmin\r\n            setDailyAllowancesdata={setDailyAllowancesdata}\r\n            dailyallowancesdata={dailyallowancesdata}\r\n            handleDialogClose={handleDailyAllowancesDialogClose}\r\n          />\r\n        </CustomDialog>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default EmployeeView;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeAdminManager.js",["1305","1306","1307","1308","1309","1310","1311","1312","1313"],"import React, { useState, useEffect } from \"react\";\r\n//import { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\n//import dayjs from \"dayjs\";\r\nimport moment from \"moment\";\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Divider,\r\n  //Grid,\r\n  Heading,\r\n  HStack,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Select,\r\n  SimpleGrid,\r\n  Tabs,\r\n  TabList,\r\n  TabPanels,\r\n  Tab,\r\n  TabPanel,\r\n  Text,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\n//import CardLayout from \"../helpers/CardLayout\";\r\n//import CardLayout2 from \"../helpers/CardLayout2\";\r\n//import CardLayout4 from \"../helpers/CardLayout4\";\r\n//import Copyright from \"./Copyright\";\r\n//import { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { useRecoilState } from \"recoil\";\r\n//import { loginLevelState } from \"./data/atomdata\";\r\n//import BarChart from \"../helpers/BarChart\";\r\n//import BarChartStack from \"../helpers/BarChartStack\";\r\nimport EmployeeTableLeaveView from \"./EmployeeTableLeaveView\";\r\nimport ExpensesTableViewSummary from \"./ExpenseTableViewSummary\";\r\n//import ExpenseSummaryTableView from \"./ExpensesSummaryTableView\";\r\nimport LeavesTableViewSummary from \"./LeavesTableViewSummary\";\r\nimport HocTableViewSummary from \"./HocTableViewSummary\";\r\n//import SummaryTableView from \"../helpers/SummaryTableView\";\r\nimport DailyAllowanceTableViewSummary from \"./DailyAllowancesTableViewSummary\";\r\nimport PayslipTableViewSummary from \"./PayslipTableViewSummary\";\r\n//import PayslipSummaryTableView from \"./PayslipSummaryTableView\";\r\n//import { useExpensesPeriod } from \"./expenses/useExpensesPeriod\";\r\nimport LeavesTableApproval from \"./LeaveTableApproval\";\r\n//import ExportLeave2Excel from \"./ExportLeave2Excel\";\r\n//import ExportHoc2Excel from \"./ExportHoc2Excel\";\r\n//import Export2ExcelDialog from \"./Export2ExcelDialog\";\r\nimport { useHoc } from \"./hoc/useHoc\";\r\n\r\nconst Export2ExcelDialog = React.lazy(() => import(\"./Export2ExcelDialog\"));\r\n\r\n//const drawerWidth = 240;\r\n\r\n//const FILTERSTRING = \"Pending\";\r\n\r\n// const months = [\r\n//   \"Jan\",\r\n//   \"Feb\",\r\n//   \"Mar\",\r\n//   \"Apr\",\r\n//   \"May\",\r\n//   \"Jun\",\r\n//   \"Jul\",\r\n//   \"Aug\",\r\n//   \"Sep\",\r\n//   \"Oct\",\r\n//   \"Nov\",\r\n//   \"Dec\",\r\n// ];\r\n// const monthsname = [\r\n//   \"jan\",\r\n//   \"feb\",\r\n//   \"mar\",\r\n//   \"apr\",\r\n//   \"may\",\r\n//   \"jun\",\r\n//   \"jul\",\r\n//   \"aug\",\r\n//   \"sep\",\r\n//   \"oct\",\r\n//   \"nov\",\r\n//   \"dec\",\r\n// ];\r\n\r\n// const expchartdata = {\r\n//   labels: [\r\n//     \"January\",\r\n//     \"February\",\r\n//     \"March\",\r\n//     \"April\",\r\n//     \"May\",\r\n//     \"June\",\r\n//     \"July\",\r\n//     \"August\",\r\n//     \"September\",\r\n//     \"October\",\r\n//     \"November\",\r\n//     \"December\",\r\n//   ],\r\n//   datasets: [\r\n//     {\r\n//       label: \"Expenses\",\r\n//       backgroundColor: \"rgba(75,192,192,1)\",\r\n//       borderColor: \"rgba(0,0,0,1)\",\r\n//       borderWidth: 2,\r\n//       data: [65, 59, 80, 81, 56, 50, 60, 40, 70, 60, 50, 60],\r\n//     },\r\n//   ],\r\n// };\r\n\r\n// const sitechartdata = {\r\n//   labels: [\r\n//     \"January\",\r\n//     \"February\",\r\n//     \"March\",\r\n//     \"April\",\r\n//     \"May\",\r\n//     \"June\",\r\n//     \"July\",\r\n//     \"August\",\r\n//     \"September\",\r\n//     \"October\",\r\n//     \"November\",\r\n//     \"December\",\r\n//   ],\r\n//   datasets: [\r\n//     {\r\n//       label: \"Expenses\",\r\n//       backgroundColor: \"rgba(75,192,192,1)\",\r\n//       borderColor: \"rgba(0,0,0,1)\",\r\n//       borderWidth: 2,\r\n//       data: [\r\n//         25000, 39000, 20000, 21000, 26000, 20000, 20000, 20000, 22000, 20000,\r\n//         25000, 20000,\r\n//       ],\r\n//     },\r\n//   ],\r\n// };\r\n\r\n// const paychartdata = {\r\n//   labels: [\r\n//     \"January\",\r\n//     \"February\",\r\n//     \"March\",\r\n//     \"April\",\r\n//     \"May\",\r\n//     \"June\",\r\n//     \"July\",\r\n//     \"August\",\r\n//     \"September\",\r\n//     \"October\",\r\n//     \"November\",\r\n//     \"December\",\r\n//   ],\r\n//   datasets: [\r\n//     {\r\n//       label: \"Expenses\",\r\n//       backgroundColor: \"rgba(75,192,192,1)\",\r\n//       borderColor: \"rgba(0,0,0,1)\",\r\n//       borderWidth: 2,\r\n//       data: [\r\n//         65000, 59000, 80000, 81000, 56000, 50000, 60000, 70000, 72000, 60000,\r\n//         55000, 60000,\r\n//       ],\r\n//     },\r\n//   ],\r\n// };\r\n\r\n// const columns = [\r\n//   {\r\n//     title: \"January\",\r\n//     field: \"jan\",\r\n//   },\r\n//   {\r\n//     title: \"February\",\r\n//     field: \"feb\",\r\n//   },\r\n//   {\r\n//     title: \"March\",\r\n//     field: \"mar\",\r\n//   },\r\n//   {\r\n//     title: \"April\",\r\n//     field: \"apr\",\r\n//   },\r\n//   {\r\n//     title: \"May\",\r\n//     field: \"may\",\r\n//   },\r\n//   {\r\n//     title: \"June\",\r\n//     field: \"jun\",\r\n//   },\r\n//   {\r\n//     title: \"July\",\r\n//     field: \"jul\",\r\n//   },\r\n//   {\r\n//     title: \"August\",\r\n//     field: \"aug\",\r\n//   },\r\n//   {\r\n//     title: \"September\",\r\n//     field: \"sep\",\r\n//   },\r\n//   {\r\n//     title: \"October\",\r\n//     field: \"oct\",\r\n//   },\r\n//   {\r\n//     title: \"November\",\r\n//     field: \"nov\",\r\n//   },\r\n//   {\r\n//     title: \"December\",\r\n//     field: \"dec\",\r\n//   },\r\n// ];\r\n\r\n// const data = [\r\n//   {\r\n//     jan: 80,\r\n//     feb: 90,\r\n//     mar: 78,\r\n//     apr: 63,\r\n//     may: 55,\r\n//     jun: 60,\r\n//     jul: 55,\r\n//     aug: 65,\r\n//     sep: 70,\r\n//     oct: 58,\r\n//     nov: 60,\r\n//     dec: 62,\r\n//   },\r\n// ];\r\n\r\n// const paysummcolumns = [\r\n//   {\r\n//     title: \"Category\",\r\n//     field: \"category\",\r\n//   },\r\n//   {\r\n//     title: \"Jan\",\r\n//     field: \"jan\",\r\n//   },\r\n//   {\r\n//     title: \"Feb\",\r\n//     field: \"feb\",\r\n//   },\r\n//   {\r\n//     title: \"Mar\",\r\n//     field: \"mar\",\r\n//   },\r\n//   {\r\n//     title: \"Apr\",\r\n//     field: \"apr\",\r\n//   },\r\n//   {\r\n//     title: \"May\",\r\n//     field: \"may\",\r\n//   },\r\n//   {\r\n//     title: \"Jun\",\r\n//     field: \"jun\",\r\n//   },\r\n//   {\r\n//     title: \"Jul\",\r\n//     field: \"jul\",\r\n//   },\r\n//   {\r\n//     title: \"Aug\",\r\n//     field: \"aug\",\r\n//   },\r\n//   {\r\n//     title: \"Sep\",\r\n//     field: \"sep\",\r\n//   },\r\n//   {\r\n//     title: \"Oct\",\r\n//     field: \"oct\",\r\n//   },\r\n//   {\r\n//     title: \"Nov\",\r\n//     field: \"nov\",\r\n//   },\r\n//   {\r\n//     title: \"Dec\",\r\n//     field: \"dec\",\r\n//   },\r\n// ];\r\n\r\n// const paysummdata = [\r\n//   {\r\n//     category: \"Basic Salary\",\r\n//     jan: 80,\r\n//     feb: 90,\r\n//     mar: 78,\r\n//     apr: 63,\r\n//     may: 55,\r\n//     jun: 60,\r\n//     jul: 55,\r\n//     aug: 65,\r\n//     sep: 70,\r\n//     oct: 58,\r\n//     nov: 60,\r\n//     dec: 62,\r\n//   },\r\n//   {\r\n//     category: \"TAP/SCP\",\r\n//     jan: 80,\r\n//     feb: 90,\r\n//     mar: 78,\r\n//     apr: 63,\r\n//     may: 55,\r\n//     jun: 60,\r\n//     jul: 55,\r\n//     aug: 65,\r\n//     sep: 70,\r\n//     oct: 58,\r\n//     nov: 60,\r\n//     dec: 62,\r\n//   },\r\n//   {\r\n//     category: \"Site Allowances\",\r\n//     jan: 80,\r\n//     feb: 90,\r\n//     mar: 78,\r\n//     apr: 63,\r\n//     may: 55,\r\n//     jun: 60,\r\n//     jul: 55,\r\n//     aug: 65,\r\n//     sep: 70,\r\n//     oct: 58,\r\n//     nov: 60,\r\n//     dec: 62,\r\n//   },\r\n//   {\r\n//     category: \"Expenses Claims\",\r\n//     jan: 80,\r\n//     feb: 90,\r\n//     mar: 78,\r\n//     apr: 63,\r\n//     may: 55,\r\n//     jun: 60,\r\n//     jul: 55,\r\n//     aug: 65,\r\n//     sep: 70,\r\n//     oct: 58,\r\n//     nov: 60,\r\n//     dec: 62,\r\n//   },\r\n//   {\r\n//     category: \"Allowances\",\r\n//     jan: 80,\r\n//     feb: 90,\r\n//     mar: 78,\r\n//     apr: 63,\r\n//     may: 55,\r\n//     jun: 60,\r\n//     jul: 55,\r\n//     aug: 65,\r\n//     sep: 70,\r\n//     oct: 58,\r\n//     nov: 60,\r\n//     dec: 62,\r\n//   },\r\n//   {\r\n//     category: \"Deductions\",\r\n//     jan: 80,\r\n//     feb: 90,\r\n//     mar: 78,\r\n//     apr: 63,\r\n//     may: 55,\r\n//     jun: 60,\r\n//     jul: 55,\r\n//     aug: 65,\r\n//     sep: 70,\r\n//     oct: 58,\r\n//     nov: 60,\r\n//     dec: 62,\r\n//   },\r\n//   {\r\n//     category: \"Totals\",\r\n//     jan: 80,\r\n//     feb: 90,\r\n//     mar: 78,\r\n//     apr: 63,\r\n//     may: 55,\r\n//     jun: 60,\r\n//     jul: 55,\r\n//     aug: 65,\r\n//     sep: 70,\r\n//     oct: 58,\r\n//     nov: 60,\r\n//     dec: 62,\r\n//   },\r\n// ];\r\n\r\n// const initial_expdata = [\r\n//   {\r\n//     jan: 0,\r\n//     feb: 0,\r\n//     mar: 0,\r\n//     apr: 0,\r\n//     may: 0,\r\n//     jun: 0,\r\n//     jul: 0,\r\n//     aug: 0,\r\n//     sep: 0,\r\n//     oct: 0,\r\n//     nov: 0,\r\n//     dec: 0,\r\n//   },\r\n// ];\r\n\r\n// const dataset = [\r\n//   {\r\n//     name: \"Johson\",\r\n//     from_date: \"2021-12-01\",\r\n//     to_date: \"2021-12-04\",\r\n//     no_of_days: 3,\r\n//     reason: \"Holiday leave\",\r\n//     status: \"Approved\",\r\n//   },\r\n//   {\r\n//     name: \"David\",\r\n//     from_date: \"2021-12-15\",\r\n//     to_date: \"2021-12-16\",\r\n//     no_of_days: 2,\r\n//     reason: \"Annual leave\",\r\n//     status: \"Approved\",\r\n//   },\r\n// ];\r\n\r\nconst initial_exp2excel = {\r\n  year: \"\",\r\n  month: \"\",\r\n   type: \"\",\r\n  title: \"\",\r\n  filename: \"\",\r\n};\r\n\r\nconst HomeAdminManager = () => {\r\n  //const classes = useStyles();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  //const { expensesperiod, setExpPeriodId } = useExpensesPeriod();\r\n  //const [expdata, setExpData] = useState(initial_expdata);\r\n  const [selectleaveyear, setSelectLeaveYear] = useState(\"\");\r\n  const [selectexpenseyear, setSelectExpenseYear] = useState(\"\");\r\n  const [selectsiteallowsyear, setSelectSiteAllowsYear] = useState(\"\");\r\n  const [selectpayrollyear, setSelectPayrollYear] = useState(\"\");\r\n  const [selecthocyear, setSelectHocYear] = useState(\"\");\r\n  const [exp2excelstate, setExp2excelstate] = useState(initial_exp2excel);\r\n  const currentyear = new Date().getFullYear();\r\n  const currentmonth = new Date().getMonth();\r\n  const { hoc, filter, setFilter, setHocId } = useHoc();\r\n  const {\r\n    isOpen: isExport2ExcelOpen,\r\n    onOpen: onExport2ExcelOpen,\r\n    onClose: onExport2ExcelClose,\r\n  } = useDisclosure();\r\n\r\n  const handleExportHoc2Excel = () => {\r\n    setExp2excelstate(\r\n      (prev) =>\r\n        (prev = {\r\n          year: currentyear,\r\n          month: currentmonth,\r\n          type: \"HOC\",\r\n          title: \"Hoc\",\r\n          filename: \"hoc\",\r\n        })\r\n    );\r\n    onExport2ExcelOpen();\r\n  };\r\n  // const Build_ExpData = () => {\r\n  //   const currentmonth = new Date().getMonth();\r\n\r\n  //   for (var i = 1; i <= currentmonth; i++) {\r\n  //     expdata[i] = i;\r\n  //   }\r\n  //   console.log(\"date\", currentyear, currentmonth, expdata);\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   Build_ExpData();\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    setSelectLeaveYear(currentyear);\r\n    setSelectExpenseYear(currentyear);\r\n    setSelectSiteAllowsYear(currentyear);\r\n    setSelectPayrollYear(currentyear);\r\n    setSelectHocYear(currentyear);\r\n  }, []);\r\n\r\n  return (\r\n    <Container maxW=\"full\" mt=\"100\">\r\n      <Box\r\n        //minW=\"100%\"\r\n        padding=\"4\"\r\n        width=\"full\"\r\n        height=\"800\"\r\n        borderColor=\"blue.500\"\r\n        borderWidth=\"1px\"\r\n        borderRadius=\"lg\"\r\n        //overflow=\"scroll\"\r\n      >\r\n        <Tabs>\r\n          <TabList>\r\n            <Tab>Employees</Tab>\r\n            <Tab>Leaves</Tab>\r\n            <Tab>Expenses</Tab>\r\n            <Tab>Site Allowances</Tab>\r\n            <Tab>Payroll</Tab>\r\n            <Tab>HOC History</Tab>\r\n            <Tab>Leaves Approval</Tab>\r\n          </TabList>\r\n\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"full\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid>\r\n                  <Box>\r\n                    <Heading as=\"h2\" size=\"lg\">\r\n                      Employees\r\n                    </Heading>\r\n                  </Box>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs isLazy>\r\n                      {/* <TabList>\r\n                        <Tab>Details</Tab>\r\n                      </TabList> */}\r\n                      <TabPanels>\r\n                        <TabPanel>\r\n                          <EmployeeTableLeaveView />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"100%\"\r\n                padding=\"4\"\r\n                width=\"full\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid w=\"168vh\">\r\n                  <HStack>\r\n                    <Box>\r\n                      <Heading as=\"h2\" size=\"lg\">\r\n                        Leaves\r\n                      </Heading>\r\n                    </Box>\r\n                    <Box alignSelf=\"flex-end\">\r\n                      <HStack>\r\n                        <Select\r\n                          value={selectleaveyear}\r\n                          fontSize={20}\r\n                          onChange={(e) => setSelectLeaveYear(e.target.value)}\r\n                        >\r\n                          <option value=\"2021\">2021</option>\r\n                          <option value=\"2022\">2022</option>\r\n                        </Select>\r\n                        {/* <Box size=\"xl\" py={2}>\r\n                          <Text fontSize=\"lg\">\r\n                            <ExportLeave2Excel\r\n                              filename=\"leave\"\r\n                              dataset={dataset}\r\n                              title=\"Leave\"\r\n                            />\r\n                          </Text>\r\n                        </Box> */}\r\n                      </HStack>\r\n                    </Box>\r\n                  </HStack>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs defaultIndex={currentmonth} isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                          <Tab>Summary</Tab> */}\r\n                        <Tab>January</Tab>\r\n                        <Tab>February</Tab>\r\n                        <Tab>March</Tab>\r\n                        <Tab>April</Tab>\r\n                        <Tab>May</Tab>\r\n                        <Tab>June</Tab>\r\n                        <Tab>July</Tab>\r\n                        <Tab>August</Tab>\r\n                        <Tab>September</Tab>\r\n                        <Tab>October</Tab>\r\n                        <Tab>November</Tab>\r\n                        <Tab>December</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Expenses for the Month\"\r\n                    barchartdata={expchartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={1}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={2}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={3}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={4}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={5}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={6}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={7}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={8}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={9}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={10}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={11}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={12}\r\n                          />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"x3\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid w=\"168vh\">\r\n                  <HStack>\r\n                    <Box>\r\n                      <Heading as=\"h2\" size=\"lg\">\r\n                        Expenses Claims\r\n                      </Heading>\r\n                    </Box>\r\n                    <Box alignSelf=\"flex-end\">\r\n                      <HStack>\r\n                        <Select\r\n                          value={selectexpenseyear}\r\n                          fontSize={20}\r\n                          onChange={(e) => setSelectExpenseYear(e.target.value)}\r\n                        >\r\n                          <option value=\"2021\">2021</option>\r\n                          <option value=\"2022\">2022</option>\r\n                        </Select>\r\n                        {/* <Box size=\"xl\" py={2}>\r\n                          <Text fontSize=\"lg\">\r\n                            <ExportLeave2Excel\r\n                              filename=\"leave\"\r\n                              dataset={dataset}\r\n                              title=\"Leave\"\r\n                            />\r\n                          </Text>\r\n                        </Box> */}\r\n                      </HStack>\r\n                    </Box>\r\n                  </HStack>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs defaultIndex={currentmonth} isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                          <Tab>Summary</Tab> */}\r\n                        <Tab>January</Tab>\r\n                        <Tab>February</Tab>\r\n                        <Tab>March</Tab>\r\n                        <Tab>April</Tab>\r\n                        <Tab>May</Tab>\r\n                        <Tab>June</Tab>\r\n                        <Tab>July</Tab>\r\n                        <Tab>August</Tab>\r\n                        <Tab>September</Tab>\r\n                        <Tab>October</Tab>\r\n                        <Tab>November</Tab>\r\n                        <Tab>December</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Expenses for the Month\"\r\n                    barchartdata={expchartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <ExpenseSummaryTableView year={currentyear} />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={1}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={2}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={3}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={4}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={5}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={6}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={7}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={8}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={9}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={10}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={11}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpensesTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={12}\r\n                          />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"x3\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid w=\"168vh\">\r\n                  <HStack>\r\n                    <Box>\r\n                      <Heading as=\"h2\" size=\"lg\">\r\n                        Site Allowances\r\n                      </Heading>\r\n                    </Box>\r\n                    <Box alignSelf=\"flex-end\">\r\n                      <HStack>\r\n                        <Select\r\n                          value={selectsiteallowsyear}\r\n                          fontSize={20}\r\n                          onChange={(e) =>\r\n                            setSelectSiteAllowsYear(e.target.value)\r\n                          }\r\n                        >\r\n                          <option value=\"2021\">2021</option>\r\n                          <option value=\"2022\">2022</option>\r\n                        </Select>\r\n                        {/* <Box size=\"xl\" py={2}>\r\n                          <Text fontSize=\"lg\">\r\n                            <ExportLeave2Excel\r\n                              filename=\"leave\"\r\n                              dataset={dataset}\r\n                              title=\"Leave\"\r\n                            />\r\n                          </Text>\r\n                        </Box> */}\r\n                      </HStack>\r\n                    </Box>\r\n                  </HStack>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs defaultIndex={currentmonth} isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                <Tab>Summary</Tab> */}\r\n                        <Tab>January</Tab>\r\n                        <Tab>February</Tab>\r\n                        <Tab>March</Tab>\r\n                        <Tab>April</Tab>\r\n                        <Tab>May</Tab>\r\n                        <Tab>June</Tab>\r\n                        <Tab>July</Tab>\r\n                        <Tab>August</Tab>\r\n                        <Tab>September</Tab>\r\n                        <Tab>October</Tab>\r\n                        <Tab>November</Tab>\r\n                        <Tab>December</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Site Allowances for the Month\"\r\n                    barchartdata={paychartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"01\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"02\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"03\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"04\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"05\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"06\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"07\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"08\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"09\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"10\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"11\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowanceTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"12\"\r\n                          />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"x3\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid>\r\n                  <Box>\r\n                    <Heading as=\"h2\" size=\"lg\">\r\n                      Payroll\r\n                    </Heading>\r\n                  </Box>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                <Tab>Summary</Tab> */}\r\n                        <Tab>Approved</Tab>\r\n                        <Tab>Verified</Tab>\r\n                        <Tab>Pending</Tab>\r\n                        <Tab>Rejected</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Payroll for the Month\"\r\n                    barchartdata={paychartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <PayslipSummaryTableView year={currentyear} status=\"Approved\" />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <PayslipTableViewSummary status=\"Approved\" />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <PayslipTableViewSummary status=\"Verified\" />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <PayslipTableViewSummary status=\"Pending\" />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <PayslipTableViewSummary status=\"Rejected\" />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"100%\"\r\n                padding=\"4\"\r\n                width=\"full\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid w=\"168vh\">\r\n                  <HStack>\r\n                    <Box>\r\n                      <Heading as=\"h2\" size=\"lg\">\r\n                        HOC History\r\n                      </Heading>\r\n                    </Box>\r\n                    <Box alignSelf=\"flex-end\">\r\n                      <HStack>\r\n                        <Select\r\n                          value={selecthocyear}\r\n                          fontSize={20}\r\n                          onChange={(e) => setSelectHocYear(e.target.value)}\r\n                        >\r\n                          <option value=\"2021\">2021</option>\r\n                          <option value=\"2022\">2022</option>\r\n                        </Select>\r\n                        <Box size=\"xl\" py={2}>\r\n                          <Button\r\n                            colorScheme=\"teal\"\r\n                            variant=\"solid\"\r\n                            onClick={() => handleExportHoc2Excel()}\r\n                          >\r\n                            Export To Excel\r\n                          </Button>\r\n                        </Box>\r\n                      </HStack>\r\n                    </Box>\r\n                  </HStack>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs defaultIndex={currentmonth} isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                          <Tab>Summary</Tab> */}\r\n                        <Tab>January</Tab>\r\n                        <Tab>February</Tab>\r\n                        <Tab>March</Tab>\r\n                        <Tab>April</Tab>\r\n                        <Tab>May</Tab>\r\n                        <Tab>June</Tab>\r\n                        <Tab>July</Tab>\r\n                        <Tab>August</Tab>\r\n                        <Tab>September</Tab>\r\n                        <Tab>October</Tab>\r\n                        <Tab>November</Tab>\r\n                        <Tab>December</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Expenses for the Month\"\r\n                    barchartdata={expchartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={1}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={2}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={3}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={4}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={5}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary year={currentyear} month={6} />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={7}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={8}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={9}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={10}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={11}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={12}\r\n                          />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"full\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <LeavesTableApproval />\r\n              </Box>\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n        <Modal\r\n          closeOnOverlayClick={false}\r\n          isOpen={isExport2ExcelOpen}\r\n          onClose={onExport2ExcelClose}\r\n          size=\"md\"\r\n        >\r\n          <ModalOverlay />\r\n          <ModalContent>\r\n            \r\n            <ModalCloseButton />\r\n            <ModalBody>\r\n              <Export2ExcelDialog\r\n                state={exp2excelstate}\r\n                setState={setExp2excelstate}\r\n                dataset={hoc}\r\n                onClose={onExport2ExcelClose}\r\n              />\r\n            </ModalBody>\r\n          </ModalContent>\r\n        </Modal>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   root: {\r\n//     display: \"flex\",\r\n//   },\r\n//   toolbar: {\r\n//     paddingRight: 24, // keep right padding when drawer closed\r\n//   },\r\n//   toolbarIcon: {\r\n//     display: \"flex\",\r\n//     alignItems: \"center\",\r\n//     justifyContent: \"flex-end\",\r\n//     padding: \"0 8px\",\r\n//     ...theme.mixins.toolbar,\r\n//   },\r\n//   appBar: {\r\n//     zIndex: theme.zIndex.drawer + 1,\r\n//     transition: theme.transitions.create([\"width\", \"margin\"], {\r\n//       easing: theme.transitions.easing.sharp,\r\n//       duration: theme.transitions.duration.leavingScreen,\r\n//     }),\r\n//   },\r\n//   appBarShift: {\r\n//     marginLeft: drawerWidth,\r\n//     width: `calc(100% - ${drawerWidth}px)`,\r\n//     transition: theme.transitions.create([\"width\", \"margin\"], {\r\n//       easing: theme.transitions.easing.sharp,\r\n//       duration: theme.transitions.duration.enteringScreen,\r\n//     }),\r\n//   },\r\n//   menuButton: {\r\n//     marginRight: 36,\r\n//   },\r\n//   menuButtonHidden: {\r\n//     display: \"none\",\r\n//   },\r\n//   title: {\r\n//     flexGrow: 1,\r\n//   },\r\n//   drawerPaper: {\r\n//     position: \"relative\",\r\n//     whiteSpace: \"nowrap\",\r\n//     width: drawerWidth,\r\n//     transition: theme.transitions.create(\"width\", {\r\n//       easing: theme.transitions.easing.sharp,\r\n//       duration: theme.transitions.duration.enteringScreen,\r\n//     }),\r\n//   },\r\n//   drawerPaperClose: {\r\n//     overflowX: \"hidden\",\r\n//     transition: theme.transitions.create(\"width\", {\r\n//       easing: theme.transitions.easing.sharp,\r\n//       duration: theme.transitions.duration.leavingScreen,\r\n//     }),\r\n//     width: theme.spacing(7),\r\n//     [theme.breakpoints.up(\"sm\")]: {\r\n//       width: theme.spacing(9),\r\n//     },\r\n//   },\r\n//   appBarSpacer: theme.mixins.toolbar,\r\n//   content: {\r\n//     flexGrow: 1,\r\n//     height: \"100vh\",\r\n//     overflow: \"auto\",\r\n//   },\r\n//   container: {\r\n//     paddingTop: theme.spacing(4),\r\n//     paddingBottom: theme.spacing(4),\r\n//   },\r\n//   paper: {\r\n//     padding: theme.spacing(2),\r\n//     display: \"flex\",\r\n//     overflow: \"auto\",\r\n//     flexDirection: \"column\",\r\n//   },\r\n//   fixedHeight: {\r\n//     height: 240,\r\n//   },\r\n// }));\r\n\r\nexport default HomeAdminManager;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeAdmin.js",["1314"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\n//import { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Divider,\r\n  Heading,\r\n  HStack,\r\n  Stack,\r\n  Select,\r\n  SimpleGrid,\r\n  Tabs,\r\n  TabList,\r\n  TabPanels,\r\n  Tab,\r\n  TabPanel,\r\n} from \"@chakra-ui/react\";\r\nimport { Container } from \"@material-ui/core\";\r\n//import { useEmployees } from \"./employees/useEmployees\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { useRecoilState } from \"recoil\";\r\n//import { loginLevelState } from \"./data/atomdata\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\n\r\n//import CardLayout from \"../helpers/CardLayout\";\r\nimport CardLayout2 from \"../helpers/CardLayout2\";\r\n//import CardLayout3 from \"../helpers/CardLayout3\";\r\nimport LeaveTableViewAdmin from \"./LeaveTableViewAdmin\";\r\nimport LeaveTableAdmin from \"./LeaveTableManager\";\r\n//import ExpenseTableView from \"./ExpenseTableView\";\r\nimport ExpenseTableAdmin from \"./ExpenseTableAdmin\";\r\n//import PayslipTableView from \"./PayslipTableView\";\r\nimport PayslipTableAdmin from \"./PayslipTableAdmin\";\r\nimport HocTableViewSummary from \"./HocTableViewSummary\";\r\n//import DailyAllowancesTableView from \"./DailyAllowancesTableView\";\r\nimport DailyAllowancesTableAdmin from \"./DailyAllowancesTableAdmin\";\r\nimport TrainingsTableViewAdmin from \"./TrainingsTableViewAdmin\";\r\nimport WPExpiryViewAdmin from \"./WPExpiryViewAdmin\";\r\nimport EmployeeTableLeaveView from \"./EmployeeTableLeaveView\";\r\nimport LeavesTableViewSummary from \"./LeavesTableViewSummary\";\r\nimport Copyright from \"../components/Copyright\";\r\n\r\n//const Copyright  = React.lazy(()=> import(\"../components/Copyright\"));\r\n//const CardLayout = React.lazy(() => import(\"../helpers/CardLayout\"));\r\n//const CardLayout2 = React.lazy(() => import(\"../helpers/CardLayout2\"));\r\n//const CardLayout3 = React.lazy(() => import(\"../helpers/CardLayout3\"));\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst FILTERSTRING = \"Pending\";\r\n\r\nconst EmployeeView = () => {\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  //const { employees } = useEmployees();\r\n  //const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const [leavesdata, setLeavesdata] = useState([]);\r\n  const [isLeaveDialogOpen, setIsLeaveDialogOpen] = useState(false);\r\n  const [expensesdata, setExpensesdata] = useState([]);\r\n  const [isExpenseDialogOpen, setIsExpenseDialogOpen] = useState(false);\r\n  const [payslipsdata, setPayslipsdata] = useState([]);\r\n  const [isPayslipDialogOpen, setIsPayslipDialogOpen] = useState(false);\r\n  const [dailyallowancesdata, setDailyAllowancesdata] = useState([]);\r\n  const [isDailyAllowancesDialogOpen, setIsDailyAllowancesDialogOpen] =\r\n    useState(false);\r\n\r\n  const {  loadPendingLeaves } = useLeavesContext();\r\n  const {  loadPendingExpenses } = useExpensesContext();\r\n  const {  loadPendingPayslips } = usePayslipsContext();\r\n  const {  loadPendingDailyAllowances } =\r\n    useDailyAllowancesContext();\r\n  const [selectleaveyear, setSelectLeaveYear] = useState(\"\");\r\n  const [selecthocyear, setSelectHocYear] = useState(\"\");\r\n  const currentyear = new Date().getFullYear();\r\n  const currentmonth = new Date().getMonth();\r\n\r\n  // const handleLeaveDialogOpen = () => {\r\n  //   setLeavesdata([]);\r\n  //   setLeavesdata([...leaves]);\r\n  //   setIsLeaveDialogOpen(true);\r\n  // };\r\n\r\n  const handleLeaveDialogClose = () => {\r\n    setIsLeaveDialogOpen(false);\r\n    loadPendingLeaves(FILTERSTRING);\r\n  };\r\n\r\n  // const handleExpenseDialogOpen = () => {\r\n  //   setExpensesdata([]);\r\n  //   setExpensesdata([...expenses]);\r\n  //   setIsExpenseDialogOpen(true);\r\n  // };\r\n\r\n  const handleExpenseDialogClose = () => {\r\n    setIsExpenseDialogOpen(false);\r\n    loadPendingExpenses(FILTERSTRING);\r\n  };\r\n\r\n  // const handlePayslipDialogOpen = () => {\r\n  //   setPayslipsdata([]);\r\n  //   setPayslipsdata([...payslips]);\r\n  //   setIsPayslipDialogOpen(true);\r\n  //};\r\n\r\n  const handlePayslipDialogClose = () => {\r\n    setIsPayslipDialogOpen(false);\r\n    loadPendingPayslips(FILTERSTRING);\r\n  };\r\n\r\n  // const handleDailyAllowancesDialogOpen = () => {\r\n  //   setDailyAllowancesdata([]);\r\n  //   setDailyAllowancesdata([...dailyallowances]);\r\n  //   setIsDailyAllowancesDialogOpen(true);\r\n  // };\r\n\r\n  const handleDailyAllowancesDialogClose = () => {\r\n    setIsDailyAllowancesDialogOpen(false);\r\n    loadPendingDailyAllowances(FILTERSTRING);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSelectLeaveYear(currentyear);\r\n    setSelectHocYear(currentyear);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.appBarSpacer} />\r\n      <div style={{ paddingLeft: 50 }}>\r\n        {/* <h2>Welcome {loginLevel.loginUser}!</h2>\r\n        <h3>Dashboard</h3> */}\r\n      </div>\r\n      <Container maxWidth=\"full\" className={classes.container}>\r\n        <Stack direction=\"column\">\r\n          <Box>\r\n            <CardLayout2>\r\n              <React.Suspense fallback={<div>Loading...</div>}>\r\n                <LeaveTableViewAdmin />\r\n              </React.Suspense>\r\n            </CardLayout2>\r\n          </Box>\r\n          <Box>\r\n            <CardLayout2>\r\n              <WPExpiryViewAdmin />\r\n            </CardLayout2>\r\n          </Box>\r\n          <Box>\r\n            <CardLayout2>\r\n              <TrainingsTableViewAdmin />\r\n            </CardLayout2>\r\n          </Box>\r\n          <Box\r\n            maxW=\"x3\"\r\n            padding=\"4\"\r\n            width=\"100%\"\r\n            height=\"750\"\r\n            borderColor=\"blue.500\"\r\n            borderWidth=\"1px\"\r\n            borderRadius=\"lg\"\r\n            overflow=\"scroll\"\r\n          >\r\n            <Tabs>\r\n              <TabList>\r\n                <Tab>Employees</Tab>\r\n                <Tab>Leaves</Tab>\r\n                <Tab>HOC History</Tab>\r\n              </TabList>\r\n              <TabPanels>\r\n                <TabPanel>\r\n                  <Box\r\n                    maxW=\"full\"\r\n                    padding=\"4\"\r\n                    width=\"100%\"\r\n                    height=\"700\"\r\n                    borderColor=\"blue.500\"\r\n                    borderWidth=\"1px\"\r\n                    borderRadius=\"lg\"\r\n                    overflow=\"scroll\"\r\n                  >\r\n                    <SimpleGrid>\r\n                      <Box>\r\n                        <Heading as=\"h2\" size=\"lg\">\r\n                          Employees\r\n                        </Heading>\r\n                      </Box>\r\n                      <Divider />\r\n                      <Box>\r\n                        <Tabs isLazy>\r\n                          {/* <TabList>\r\n                            <Tab>Details</Tab>\r\n                          </TabList> */}\r\n                          <TabPanels>\r\n                            <TabPanel>\r\n                              <EmployeeTableLeaveView />\r\n                            </TabPanel>\r\n                          </TabPanels>\r\n                        </Tabs>\r\n                      </Box>\r\n                      <Divider />\r\n                    </SimpleGrid>\r\n                  </Box>\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <Box\r\n                    maxW=\"100%\"\r\n                    padding=\"4\"\r\n                    width=\"full\"\r\n                    height=\"700\"\r\n                    borderColor=\"blue.500\"\r\n                    borderWidth=\"1px\"\r\n                    borderRadius=\"lg\"\r\n                    overflow=\"scroll\"\r\n                  >\r\n                    <SimpleGrid w=\"168vh\">\r\n                      <HStack>\r\n                        <Box>\r\n                          <Heading as=\"h2\" size=\"lg\">\r\n                            Leaves\r\n                          </Heading>\r\n                        </Box>\r\n                        <Box alignSelf=\"flex-end\">\r\n                          <HStack>\r\n                            <Select\r\n                              value={selectleaveyear}\r\n                              fontSize={20}\r\n                              onChange={(e) =>\r\n                                setSelectLeaveYear(e.target.value)\r\n                              }\r\n                            >\r\n                              <option value=\"2021\">2021</option>\r\n                              <option value=\"2022\">2022</option>\r\n                            </Select>\r\n                            {/* <Box size=\"xl\" py={2}>\r\n                              <Text fontSize=\"lg\">\r\n                                <ExportLeave2Excel\r\n                                  filename=\"leave\"\r\n                                  dataset={dataset}\r\n                                  title=\"Leave\"\r\n                                />\r\n                              </Text>\r\n                            </Box> */}\r\n                          </HStack>\r\n                        </Box>\r\n                      </HStack>\r\n                      <Divider />\r\n                      <Box>\r\n                        <Tabs defaultIndex={currentmonth} isLazy>\r\n                          <TabList>\r\n                            {/* <Tab>Chart</Tab>\r\n                          <Tab>Summary</Tab> */}\r\n                            <Tab>January</Tab>\r\n                            <Tab>February</Tab>\r\n                            <Tab>March</Tab>\r\n                            <Tab>April</Tab>\r\n                            <Tab>May</Tab>\r\n                            <Tab>June</Tab>\r\n                            <Tab>July</Tab>\r\n                            <Tab>August</Tab>\r\n                            <Tab>September</Tab>\r\n                            <Tab>October</Tab>\r\n                            <Tab>November</Tab>\r\n                            <Tab>December</Tab>\r\n                          </TabList>\r\n                          <TabPanels>\r\n                            {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Expenses for the Month\"\r\n                    barchartdata={expchartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={1}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={2}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={3}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={4}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={5}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={6}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={7}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={8}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={9}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={10}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={11}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={12}\r\n                              />\r\n                            </TabPanel>\r\n                          </TabPanels>\r\n                        </Tabs>\r\n                      </Box>\r\n                      <Divider />\r\n                    </SimpleGrid>\r\n                  </Box>\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <Box\r\n                    maxW=\"100%\"\r\n                    padding=\"4\"\r\n                    width=\"full\"\r\n                    height=\"700\"\r\n                    borderColor=\"blue.500\"\r\n                    borderWidth=\"1px\"\r\n                    borderRadius=\"lg\"\r\n                    overflow=\"scroll\"\r\n                  >\r\n                    <SimpleGrid w=\"168vh\">\r\n                      <HStack>\r\n                        <Box>\r\n                          <Heading as=\"h2\" size=\"lg\">\r\n                            HOC History\r\n                          </Heading>\r\n                        </Box>\r\n                        <Box alignSelf=\"flex-end\">\r\n                          <HStack>\r\n                            <Select\r\n                              value={selecthocyear}\r\n                              fontSize={20}\r\n                              onChange={(e) => setSelectHocYear(e.target.value)}\r\n                            >\r\n                              <option value=\"2021\">2021</option>\r\n                              <option value=\"2022\">2022</option>\r\n                            </Select>\r\n                            {/* <Box size=\"xl\" py={2}>\r\n                              <Text fontSize=\"lg\">\r\n                                <ExportLeave2Excel\r\n                                  filename=\"leave\"\r\n                                  dataset={dataset}\r\n                                  title=\"Leave\"\r\n                                />\r\n                              </Text>\r\n                            </Box> */}\r\n                          </HStack>\r\n                        </Box>\r\n                      </HStack>\r\n                      <Divider />\r\n                      <Box>\r\n                        <Tabs defaultIndex={currentmonth} isLazy>\r\n                          <TabList>\r\n                            {/* <Tab>Chart</Tab>\r\n                          <Tab>Summary</Tab> */}\r\n                            <Tab>January</Tab>\r\n                            <Tab>February</Tab>\r\n                            <Tab>March</Tab>\r\n                            <Tab>April</Tab>\r\n                            <Tab>May</Tab>\r\n                            <Tab>June</Tab>\r\n                            <Tab>July</Tab>\r\n                            <Tab>August</Tab>\r\n                            <Tab>September</Tab>\r\n                            <Tab>October</Tab>\r\n                            <Tab>November</Tab>\r\n                            <Tab>December</Tab>\r\n                          </TabList>\r\n                          <TabPanels>\r\n                            {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Expenses for the Month\"\r\n                    barchartdata={expchartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={1}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={2}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={3}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={4}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={5}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={6}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={7}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={8}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={9}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={10}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={11}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={12}\r\n                              />\r\n                            </TabPanel>\r\n                          </TabPanels>\r\n                        </Tabs>\r\n                      </Box>\r\n                      <Divider />\r\n                    </SimpleGrid>\r\n                  </Box>\r\n                </TabPanel>\r\n              </TabPanels>\r\n            </Tabs>\r\n          </Box>\r\n        </Stack>\r\n\r\n        <Box pt={4}>\r\n          <Copyright />\r\n        </Box>\r\n        <CustomDialog\r\n          isOpen={isLeaveDialogOpen}\r\n          handleClose={handleLeaveDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <LeaveTableAdmin\r\n            setLeavesdata={setLeavesdata}\r\n            leavesdata={leavesdata}\r\n            handleDialogClose={handleLeaveDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isExpenseDialogOpen}\r\n          handleClose={handleExpenseDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <ExpenseTableAdmin\r\n            setExpensesdata={setExpensesdata}\r\n            expensesdata={expensesdata}\r\n            handleDialogClose={handleExpenseDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isPayslipDialogOpen}\r\n          handleClose={handlePayslipDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={true}\r\n          isFullwidth={false}\r\n        >\r\n          <PayslipTableAdmin\r\n            setPayslipsdata={setPayslipsdata}\r\n            payslipsdata={payslipsdata}\r\n            handleDialogClose={handlePayslipDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isDailyAllowancesDialogOpen}\r\n          handleClose={handleDailyAllowancesDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={true}\r\n          isFullwidth={false}\r\n        >\r\n          <DailyAllowancesTableAdmin\r\n            setDailyAllowancesdata={setDailyAllowancesdata}\r\n            dailyallowancesdata={dailyallowancesdata}\r\n            handleDialogClose={handleDailyAllowancesDialogClose}\r\n          />\r\n        </CustomDialog>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default EmployeeView;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\currency\\useUpdateCurrency.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\currency\\useCurrency.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\useAddEmployees.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\Payslip_Earnings.js",["1315"],"import React, {  useEffect } from \"react\";\r\n\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, Icon, TextField, MenuItem } from \"@material-ui/core\";\r\n\r\n//import { useHistory} from \"react-router-dom\";\r\nimport {  useRecoilValue } from \"recoil\";\r\nimport {\r\n  payPeriodState,\r\n  //payPeriodEndMonthState,\r\n  payPeriodEmpIdState,\r\n  //payEarningDataState,\r\n} from \"./data/atomdata\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\n\r\nexport default function Payslip_Earnings({\r\n  //setCalc,\r\n  earningsdata,\r\n  oldEarningsdata,\r\n  setEarningsdata,\r\n  handleDialogClose,\r\n}) {\r\n  //let history = useHistory();\r\n   const classes = useStyles();\r\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\r\n  const payPeriod = useRecoilValue(payPeriodState);\r\n  //const payEarningData = useRecoilValue(payEarningDataState);\r\n  const {\r\n    //payslipearnings,\r\n    //payslip_earning_amount,\r\n    //setPayslipEarningAmount,\r\n    addPayslipEarning,\r\n    payslipearnings_loading,\r\n    updatePayslipEarning,\r\n    deletePayslipEarning,\r\n    //updatePayslip,\r\n    //editPayslipID,\r\n    single_payslip,\r\n    payslip_period,\r\n    getSingleBatchPayslipEarnings,\r\n  } = usePayslipsContext();\r\n\r\n  //const { name, amount } = payslipearnings;\r\n  const { allowances } = useTablesContext();\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Description\",\r\n      field: \"description\",\r\n      editComponent: (props) => (\r\n        <TextField\r\n          //defaultValue={props.value || null}\r\n          onChange={(e) => props.onChange(e.target.value)}\r\n          style={{ width: 200 }}\r\n          value={props.value}\r\n          select\r\n        >\r\n          {allowances.map((r) => {\r\n            return <MenuItem value={r.name}>{r.name}</MenuItem>;\r\n          })}\r\n        </TextField>\r\n      ),\r\n    },\r\n    { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    getSingleBatchPayslipEarnings(single_payslip.empid, payslip_period);\r\n  }, []);\r\n\r\n  // const calc_Earning = (data) => {\r\n  //   const sum = data.reduce((a, v) => (a = a + v.amount), 0);\r\n  //   console.log(\"Earning\", data);\r\n  //   setPayslipEarningAmount(sum);\r\n  // };\r\n\r\n  // const update_Payslip = () => {\r\n  //   const { rec_id, id, total_earnings, ...paydata } = single_payslip;\r\n  //   updatePayslip({\r\n  //     id: editPayslipID,\r\n  //     total_earnings: payslip_earning_amount,\r\n  //     ...paydata,\r\n  //   });\r\n  //   setCalc(true);\r\n  // };\r\n\r\n  // const update_PayslipEarning = async (data) => {\r\n  //   const { id, rec_id, empid, ...fields } = data;\r\n  //   console.log(\"update\", data);\r\n  //   updatePayslipEarning({ id: data.id, empid: empid, ...fields });\r\n\r\n  //   update_Payslip();\r\n  //   getSingleBatchPayslipEarnings(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  // const add_PayslipEarning = (data) => {\r\n  //   console.log(\"add\", data);\r\n  //   const { description, amount } = data;\r\n  //   addPayslipEarning({\r\n  //     description: description,\r\n  //     amount: amount,\r\n  //     name: single_payslip.name,\r\n  //     empid: single_payslip.empid,\r\n  //     period: single_payslip.period,\r\n  //   });\r\n\r\n  //   getSingleBatchPayslipEarnings(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  // const delete_PayslipEarning = (data) => {\r\n  //   const { id } = data;\r\n  //   deletePayslipEarning(id);\r\n  //   getSingleBatchPayslipEarnings(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  const Save_EarningsData = () => {\r\n    // delete unwanted data\r\n    console.log(\"update\", earningsdata, oldEarningsdata);\r\n    oldEarningsdata.forEach((row) => {\r\n      const { id, rec_id } = row;\r\n      const res = earningsdata.find((r) => r.rec_id === rec_id);\r\n      console.log(\"find\", id, res);\r\n      if (!res) {\r\n        deletePayslipEarning(id);\r\n      }\r\n    });\r\n    //add or update new data\r\n\r\n    earningsdata.forEach((data) => {\r\n      const { id, description, amount } = data;\r\n      if (id) {\r\n        const { id, rec_id, tableData, ...fields } = data;\r\n        updatePayslipEarning({ id, ...fields });\r\n      } else {\r\n        addPayslipEarning({\r\n          description: description,\r\n          amount: amount,\r\n          name: single_payslip.name,\r\n          empid: payPeriodEmpId,\r\n          period: payPeriod,\r\n        });\r\n      }\r\n    });\r\n\r\n    handleDialogClose();\r\n  };\r\n\r\n  if (payslipearnings_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading... Incomes.</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={earningsdata}\r\n          title=\"Income\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  setEarningsdata([...earningsdata, newData]);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataUpdate = [...earningsdata];\r\n                  const index = oldData.tableData.id;\r\n                  dataUpdate[index] = newData;\r\n                  setEarningsdata([...dataUpdate]);\r\n\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataDelete = [...earningsdata];\r\n                  const index = oldData.tableData.id;\r\n                  dataDelete.splice(index, 1);\r\n                  setEarningsdata([...dataDelete]);\r\n\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Save_EarningsData}\r\n                  >\r\n                    Update <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\Payslip_ViewDeductions.js",["1316"],"import React, {  useEffect } from \"react\";\r\n\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {  useRecoilValue } from \"recoil\";\r\nimport {\r\n  payPeriodState,\r\n  //payPeriodEndMonthState,\r\n  payPeriodEmpIdState,\r\n} from \"./data/atomdata\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\n//import { useTablesContext } from \"../context/tables_context\";\r\n\r\nexport default function Payslip_ViewDeductions() {\r\n  const classes = useStyles();\r\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\r\n  const payPeriod = useRecoilValue(payPeriodState);\r\n  \r\n  const {\r\n    payslipdeductions,\r\n    //payslip_deduction_amount,\r\n    //setPayslipDeductionAmount,\r\n    //loadPayslipDeductions,\r\n    //addPayslipDeduction,\r\n    payslipdeductions_loading,\r\n    //updatePayslipDeduction,\r\n    //deletePayslipDeduction,\r\n    //updatePayslip,\r\n    //editPayslipID,\r\n    //single_payslip,\r\n    //payslip_period,\r\n    getSingleBatchPayslipDeductions,\r\n  } = usePayslipsContext();\r\n  //const { name, amount } = payslipdeductions;\r\n  //const { deductions } = useTablesContext();\r\n\r\n  // const calc_Deduction = (data) => {\r\n  //   const sum = data.reduce((a, v) => (a = a + v.amount), 0);\r\n  //   setPayslipDeductionAmount(sum);\r\n  // };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Name\",\r\n      field: \"description\",\r\n    },\r\n    { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    getSingleBatchPayslipDeductions(payPeriodEmpId, payPeriod);\r\n  }, []);\r\n\r\n  \r\n  // const update_Payslip = () => {\r\n  //   const { rec_id, id, total_deductions, ...paydata } = single_payslip;\r\n  //   updatePayslip({\r\n  //     id: editPayslipID,\r\n  //     total_deductions: payslip_deduction_amount,\r\n  //     ...paydata,\r\n  //   });\r\n  // };\r\n\r\n  // const update_PayslipDeduction = async (data) => {\r\n  //   const { id, rec_id, empid, ...fields } = data;\r\n  //   updatePayslipDeduction({ id: data.id, empid: empid, ...fields });\r\n  //   update_Payslip();\r\n  //   getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  // const add_PayslipDeduction = (data) => {\r\n  //   const { description, amount } = data;\r\n  //   addPayslipDeduction({\r\n  //     description: description,\r\n  //     amount: amount,\r\n  //     name: single_payslip.name,\r\n  //     empid: single_payslip.empid,\r\n  //     period: single_payslip.period,\r\n  //   });\r\n  //   getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  // const delete_PayslipDeduction = (data) => {\r\n  //   const { id } = data;\r\n  //   deletePayslipDeduction(id);\r\n  //   getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  \r\n  if (payslipdeductions_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading... Expenses.</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={payslipdeductions}\r\n          title=\"Expense\"\r\n          options={{\r\n            search: false,\r\n            toolbar: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\helpers\\CardLayout.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\Payslip_ViewEarnings.js",["1317"],"import React, {  useEffect } from \"react\";\r\n\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {  useRecoilValue } from \"recoil\";\r\nimport {\r\n  payPeriodState,\r\n  //payPeriodEndMonthState,\r\n  payPeriodEmpIdState,\r\n} from \"./data/atomdata\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\n\r\nexport default function Payslip_ViewEarnings({ setCalc }) {\r\n  //let history = useHistory();\r\n  //const [load, setLoad] = useState(true);\r\n  const classes = useStyles();\r\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\r\n  const payPeriod = useRecoilValue(payPeriodState);\r\n  const {\r\n    payslipearnings,\r\n    //payslip_earning_amount,\r\n    //setPayslipEarningAmount,\r\n    //addPayslipEarning,\r\n    payslipearnings_loading,\r\n    //updatePayslipEarning,\r\n    //deletePayslipEarning,\r\n    //updatePayslip,\r\n    //editPayslipID,\r\n    //single_payslip,\r\n    //payslip_period,\r\n    getSingleBatchPayslipEarnings,\r\n  } = usePayslipsContext();\r\n\r\n  //const { description, amount } = payslipearnings;\r\n  //const { allowances } = useTablesContext();\r\n  //console.log(\"recoil\", payPeriod, payPeriodEmpId);\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"description\",\r\n  },\r\n  { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n];\r\n\r\n  useEffect(() => {\r\n    getSingleBatchPayslipEarnings(payPeriodEmpId, payPeriod);\r\n  }, []);\r\n\r\n  // const calc_Earning = (data) => {\r\n  //   const sum = data.reduce((a, v) => (a = a + v.amount), 0);\r\n  //   console.log(\"Earning\", data);\r\n  //   setPayslipEarningAmount(sum);\r\n  // };\r\n\r\n  // const update_Payslip = () => {\r\n  //   const { rec_id, id, total_earnings, ...paydata } = single_payslip;\r\n  //   updatePayslip({\r\n  //     id: editPayslipID,\r\n  //     total_earnings: payslip_earning_amount,\r\n  //     ...paydata,\r\n  //   });\r\n  //   setCalc(true);\r\n  //};\r\n\r\n  if (payslipearnings_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading... Incomes.</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={payslipearnings}\r\n          title=\"Income\"\r\n          options={{\r\n            search: false,\r\n            toolbar: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\useDeleteDailyAllowsDetls.js",[],"D:\\react-myprojects\\hrms-demo\\src\\helpers\\CardLayout2.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDeleteDailyAllows.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesAddPeriod.js",["1318","1319","1320","1321"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { differenceInDays, addDays } from \"date-fns\";\r\nimport { Heading } from \"@chakra-ui/react\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport clsx from \"clsx\";\r\nimport { Button, Paper, Grid, Icon, TextField } from \"@material-ui/core\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { siteallowsState, loginLevelState } from \"./data/atomdata\";\r\n//import { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\nimport { useDailyAllows } from \"./dailyallows/useDailyAllows\";\r\nimport { useAddDailyAllows } from \"./dailyallows/useAddDailyAllows\";\r\n//import { useDailyAllowsDetls } from \"./dailyallowsdetls/useDailyAllowsDetls\";\r\nimport { useAddDailyAllowsDetls } from \"./dailyallowsdetls/useAddDailyAllowsDetls\";\r\n\r\n//const drawerWidth = 240;\r\n//const selectYear = [{ name: \"2021\" }, { name: \"2022\" }];\r\n// const selectMonth = [\r\n//   { name: \"January\" },\r\n//   { name: \"February\" },\r\n//   { name: \"March\" },\r\n//   { name: \"April\" },\r\n//   { name: \"May\" },\r\n//   { name: \"June\" },\r\n// ];\r\n\r\nconst DailyAllowancesAddPeriod = ({ handleDialogClose }) => {\r\n  let date = new Date();\r\n  const toast = useCustomToast()\r\n  //let longMonth = date.toLocaleString(\"en-us\", { month: \"long\" });\r\n  //console.log(\"date\", date, longMonth);\r\n  const classes = useStyles();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const { dailyallows } = useDailyAllows();\r\n  //const { dailyallowsdetls } = useDailyAllowsDetls();\r\n  const addDailyAllows = useAddDailyAllows();\r\n  const addDailyAllowsDetls = useAddDailyAllowsDetls();\r\n  const [input, setInput] = useRecoilState(siteallowsState);\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  //const [allowsPeriod, setAllowsPeriod] = useState(\"\");\r\n  //const [alert, setAlert] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  // const { dailyallowances, addDailyAllowance, addDailyAllowsDetl } =\r\n  //   useDailyAllowancesContext();\r\n  // function daysInMonth(month, year) {\r\n  //   return new Date(year, month, 0).getDate();\r\n  // }\r\n\r\n  useEffect(() => {\r\n    setInput({\r\n      ...input,\r\n      empid: loginLevel.loginUserId,\r\n      name: loginLevel.loginUser,\r\n      jobbonus: loginLevel.siteallows_fee,\r\n      perdiem: loginLevel.perdiem_fee,\r\n      manager: loginLevel.reporting_to,\r\n      client: \"\",\r\n    });\r\n  }, []);\r\n\r\n  const periodExists = (data) => {\r\n    return dailyallows.some(function (el) {\r\n      return el.period === data && el.empid === loginLevel.loginUserId;\r\n    });\r\n  };\r\n\r\n  const buildSiteAllows = () => {\r\n    const period =\r\n      input.fromdate.substring(0, 4) + \"-\" + input.fromdate.substring(5, 7);\r\n\r\n    const isExist = periodExists(period);\r\n    if (isExist) {\r\n      toast({\r\n        title: \"Site Allowance period is existed!\",\r\n        status: \"warning\",\r\n      });\r\n      // setError(true);\r\n      return null;\r\n    }\r\n\r\n    // build siteallowsbatch\r\n\r\n    const diffInDays = differenceInDays(\r\n      new Date(input.todate),\r\n      new Date(input.fromdate)\r\n    );\r\n\r\n    let amount = 0, jobbonus=0, perdiem=0;\r\n    for (let i = 0; i <= diffInDays; i++) {\r\n      jobbonus = jobbonus + Number(input.jobbonus);\r\n      perdiem = perdiem + Number(input.perdiem);\r\n      amount = amount + Number(input.jobbonus) + Number(input.perdiem);\r\n      const data = addDays(new Date(input.fromdate), i);\r\n      addDailyAllowsDetls({\r\n        empid: loginLevel.loginUserId,\r\n        name: loginLevel.loginUser,\r\n        period: period,\r\n        date: data,\r\n        district: input.district,\r\n        typeoperation: input.typeoperation,\r\n        client: input.client,\r\n        location: input.location,\r\n        jobno: input.jobno,\r\n        crewoperation: input.crewoperation,\r\n        jobbonus: input.jobbonus,\r\n        perdiem: input.perdiem,\r\n        status: \"Pending\",\r\n      });\r\n    }\r\n    //add daily allowances batch\r\n    addDailyAllows({\r\n      period: period,\r\n      location: input.location,\r\n      manager: input.manager,\r\n      name: loginLevel.loginUser,\r\n      empid: loginLevel.loginUserId,\r\n      status: \"Pending\",\r\n      no_of_days: diffInDays+1,\r\n      amount: amount,\r\n      totaljobbonus: jobbonus,\r\n      totalperdiem: perdiem,\r\n    });\r\n\r\n    // dailyallowances.push({\r\n    //   period: period,\r\n    //   location: input.location,\r\n    //   manager: input.manager,\r\n    //   name: loginLevel.loginUser,\r\n    //   empid: loginLevel.loginUserId,\r\n    //   status: \"Pending\",\r\n    //   no_of_days: diffInDays,\r\n    //   amount: amount,\r\n    // });\r\n    handleDialogClose();\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    e.preventDefault();\r\n    const { name, type, value } = e.target;\r\n    const val = type === \"number\" ? parseFloat(value) : value;\r\n    setInput({ ...input, [name]: val });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const period =\r\n      input.fromdate.substring(0, 4) + \"-\" + input.fromdate.substring(5, 7);\r\n    setInput({\r\n      ...input,\r\n      period: period,\r\n    });\r\n\r\n    buildSiteAllows();\r\n  };\r\n\r\n  return (\r\n    <Paper\r\n      className={fixedHeightPaper}\r\n      style={{ backgroundColor: \"secondary\" }}\r\n    >\r\n      <form onSubmit={(e) => handleSubmit(e)}>\r\n        <Grid\r\n          container\r\n          spacing={0}\r\n          direction=\"row\"\r\n          alignItems=\"center\"\r\n          justify=\"center\"\r\n          style={{ border: \"1px solid white\" }}\r\n        >\r\n          <Heading as=\"h2\" size=\"lg\" color=\"blue\" p={5}>\r\n            Build Site Allowances\r\n          </Heading>\r\n        </Grid>\r\n        <Grid\r\n          container\r\n          spacing={0}\r\n          direction=\"row\"\r\n          alignItems=\"center\"\r\n          justify=\"center\"\r\n          style={{ border: \"1px solid white\" }}\r\n        >\r\n          <div>\r\n            <Grid\r\n              item\r\n              sm={12}\r\n              style={{ border: \"1px solid white\" }}\r\n              align=\"left\"\r\n            >\r\n              {/* <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                <TextField\r\n                  label=\"Year\"\r\n                  id=\"margin-normal\"\r\n                  name=\"year\"\r\n                  required\r\n                  defaultValue={input.year}\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                  style={{ width: \"100%\", marginTop: 10, marginLeft: 10 }}\r\n                  error={!!error}\r\n                  helperText={error ? error.message : null}\r\n                  select\r\n                >\r\n                  {selectYear.map((item) => {\r\n                    return <MenuItem value={item.name}>{item.name}</MenuItem>;\r\n                  })}\r\n                </TextField>\r\n                <TextField\r\n                  label=\"Month\"\r\n                  id=\"margin-normal\"\r\n                  name=\"month\"\r\n                  required\r\n                  defaultValue={input.month}\r\n                  style={{ width: \"100%\", marginTop: 10, marginLeft: 0 }}\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                  error={!!error}\r\n                  helperText={error ? error.message : null}\r\n                  select\r\n                >\r\n                  {selectMonth.map((item) => {\r\n                    return <MenuItem value={item.name}>{item.name}</MenuItem>;\r\n                  })}\r\n                </TextField>\r\n              </div> */}\r\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                <TextField\r\n                  label=\"From Date\"\r\n                  variant=\"filled\"\r\n                  required\r\n                  style={{ width: \"100%\" }}\r\n                  name=\"fromdate\"\r\n                  value={input.fromdate}\r\n                  type=\"date\"\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                <TextField\r\n                  label=\"To Date\"\r\n                  variant=\"filled\"\r\n                  required\r\n                  style={{ width: \"100%\" }}\r\n                  name=\"todate\"\r\n                  value={input.todate}\r\n                  type=\"date\"\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                {/* <TextField\r\n                  label=\"Period\"\r\n                  variant=\"filled\"\r\n                  required\r\n                  style={{ width: \"100%\" }}\r\n                  name=\"period\"\r\n                  value={input.period}\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                ></TextField> */}\r\n                {/* <Divider className={classes.divider} /> */}\r\n                <TextField\r\n                  label=\"Manager\"\r\n                  variant=\"filled\"\r\n                  required\r\n                  style={{ width: \"100%\" }}\r\n                  name=\"manager\"\r\n                  value={input.manager}\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                ></TextField>\r\n              </div>\r\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                {/* <TextField\r\n                  label=\"District\"\r\n                  variant=\"filled\"\r\n                  //required\r\n                  value={input.district}\r\n                  style={{ width: \"100%\" }}\r\n                  name=\"district\"\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                ></TextField> */}\r\n                <TextField\r\n                  label=\"Location/Rig\"\r\n                  variant=\"filled\"\r\n                  required\r\n                  value={input.location}\r\n                  style={{ width: \"100%\" }}\r\n                  name=\"location\"\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                ></TextField>\r\n              </div>\r\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                <TextField\r\n                  label=\"Operation Type\"\r\n                  variant=\"filled\"\r\n                  required\r\n                  value={input.typeoperation}\r\n                  style={{ width: \"100%\" }}\r\n                  name=\"typeoperation\"\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                ></TextField>\r\n              </div>\r\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                <TextField\r\n                  label=\"Client\"\r\n                  variant=\"filled\"\r\n                  required\r\n                  value={input.client}\r\n                  style={{ width: \"100%\" }}\r\n                  name=\"client\"\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                ></TextField>\r\n              </div>\r\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                <TextField\r\n                  label=\"Ticket No/Job No\"\r\n                  variant=\"filled\"\r\n                  required\r\n                  value={input.jobno}\r\n                  style={{ width: \"100%\" }}\r\n                  name=\"jobno\"\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                ></TextField>\r\n              </div>\r\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                <TextField\r\n                  label=\"Operation Role\"\r\n                  variant=\"filled\"\r\n                  required\r\n                  value={input.creqoperation}\r\n                  style={{ width: \"100%\" }}\r\n                  name=\"crewoperation\"\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                ></TextField>\r\n              </div>\r\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                <TextField\r\n                  label=\"Job Bonus\"\r\n                  variant=\"filled\"\r\n                  required\r\n                  value={input.jobbonus}\r\n                  style={{ width: \"100%\" }}\r\n                  name=\"jobbonus\"\r\n                  type=\"number\"\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n                <TextField\r\n                  label=\"Per Diem\"\r\n                  variant=\"filled\"\r\n                  required\r\n                  value={input.perdiem}\r\n                  style={{ width: \"100%\" }}\r\n                  name=\"perdiem\"\r\n                  type=\"number\"\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n            </Grid>\r\n          </div>\r\n        </Grid>\r\n        <Grid\r\n          container\r\n          spacing={0}\r\n          direction=\"row\"\r\n          alignItems=\"center\"\r\n          justify=\"center\"\r\n          style={{ border: \"1px solid white\" }}\r\n        >\r\n          <div>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n            >\r\n              Build <Icon className={classes.rightIcon}>send</Icon>\r\n            </Button>\r\n          </div>\r\n          <div>\r\n            {error &&\r\n              toast({\r\n                title: \"Period already existed!\",\r\n                status: \"warning\",\r\n              })}\r\n          </div>\r\n        </Grid>\r\n      </form>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  container: {\r\n    margin: 0,\r\n    padding: 0,\r\n    width: \"80vw\",\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"repeat(auto-fill,250px)\",\r\n    gridAutoRows: \"10px\",\r\n    position: \"absolute\",\r\n    left: \"50%\",\r\n    transform: \"translateX(-50%)\",\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"primary\",\r\n  },\r\n  fixedHeight: {\r\n    height: 800,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(0),\r\n    // display: \"flex\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n    border: \"1px solid\",\r\n    width: \"100%\",\r\n    color: \"primary\",\r\n    bcakgroundColor: \"black\",\r\n  },\r\n  card: {\r\n    backgroundColor: \"black\",\r\n  },\r\n  section: {\r\n    width: \"95vw\",\r\n    margin: \"5rem auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n  },\r\n  underline: {\r\n    width: \"5rem\",\r\n    height: \"0.25rem\",\r\n    marginBottom: \"1.25rem\",\r\n    background: \"var(--clr-primary-5)\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n  },\r\n  title: {\r\n    marginbottom: \"4rem\",\r\n    textAlign: \"center\",\r\n  },\r\n  jobscenter: {\r\n    width: \"80vw\",\r\n    margin: \"0 auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n    flexDirection: \"row\",\r\n  },\r\n  btncontainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    marginBottom: \"4rem\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  jobbtn: {\r\n    background: \"transparent\",\r\n    borderColor: \"transparent\",\r\n    textTransform: \"capitalize\",\r\n    fontSize: \"1.25rem\",\r\n    letterSpacing: \"var(--spacing)\",\r\n    margin: \"0 0.5rem\",\r\n    transition: \"var(--transition)\",\r\n    cursor: \"pointer\",\r\n    padding: \"0.25rem 0\",\r\n    lineHeight: \"1\",\r\n    outlineColor: \"var(--clr-primary-10)\",\r\n    \"&:hover\": {\r\n      color: \"var(--clr-primary-5)\",\r\n      boxShadow: \"0 2px var(--clr-primary-5)\",\r\n    },\r\n  },\r\n  activebtn: {\r\n    color: \"var(--clr-primary-5)\",\r\n    boxShadow: \"0 2px var(--clr-primary-5)\",\r\n  },\r\n  jobinfo: {\r\n    fontWeight: \"400\",\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  formLabel: {\r\n    fontSize: 12,\r\n    textAlign: \"left\",\r\n    marginLeft: 8,\r\n    marginTop: 8,\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 200,\r\n  },\r\n}));\r\n\r\nexport default DailyAllowancesAddPeriod;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useUpdateDailyAllows.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\useUpdateDailyAllowsDetls.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useAddExpenses.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useAddLeaves.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\InstitutesTable.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDailyAllowsPayrun.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payslips\\usePayslipsBatch.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useExpensesPayrun.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\DesignationsTable.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\PrintPayslip.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payslips\\usePayslips.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\usePayrun.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\useDeletePayrun.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useDeleteExpenses.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useDeleteLeaves.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\useDeleteTrainings.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeFormAdd.js",["1322","1323"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  TextField,\r\n  Paper,\r\n  Typography,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport { Box, Heading } from \"@chakra-ui/react\";\r\n//import * as emailjs from \"emailjs-com\";\r\n//import { useRecoilState } from \"recoil\";\r\n//import { loginLevelState } from \"./data/atomdata\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\nimport { useAddEmployees } from \"./employees/useAddEmployees\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\n\r\nconst initial_state = {\r\n  name: \"\",\r\n  email: \"\",\r\n};\r\n\r\nconst EmployeeFormAdd = ({ onAddEmpFormClose }) => {\r\n  const classes = useStyles();\r\n  //const toast = useCustomToast();\r\n  const { employees } = useEmployees();\r\n  const addEmployee = useAddEmployees();\r\n  const [state, setState] = useState(initial_state);\r\n  const [isExit, setIsExit] = useState(false);\r\n  //const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { handleSubmit, control } = useForm();\r\n  //const initialValues = Object.values(initial_state).join(\"\");\r\n\r\n  //const {\r\n    //editEmployeeID,\r\n    //employees_loading,\r\n    //deleteEmployee,\r\n    //loadEmployees,\r\n    //setEditEmployeeID,\r\n    //setIsEditingOn,\r\n    //setIsEditingOff,\r\n    //resetSingleEmployee,\r\n    //resetEmployees,\r\n    //getSingleEmployee,\r\n  //} = useEmployeesContext();\r\n\r\n  const onSubmit = (data) => {\r\n    const { email } = data;\r\n    const emp = employees && employees.filter((rec) => rec.email === email);\r\n    console.log(\"exist\", emp);\r\n    if (emp.length) {\r\n      setIsExit(true);\r\n      setTimeout(() => {\r\n        setIsExit(false);\r\n      }, 2000);\r\n    } else {\r\n      setIsExit(false)\r\n      addEmployee({ ...data });\r\n      onAddEmpFormClose();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Paper className={classes.root}>\r\n        <Typography variant=\"h5\" component=\"h3\">\r\n          CREATE NEW EMPLOYEE\r\n        </Typography>\r\n        <Typography component=\"p\">Fill in new employee name and email</Typography>\r\n        <Divider />\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <div>\r\n            <Controller\r\n              name=\"name\"\r\n              control={control}\r\n              defaultValue={state.name}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Name\"\r\n                    id=\"margin-normal\"\r\n                    name=\"name\"\r\n                    //value={value}\r\n                    defaultValue={state.name}\r\n                    className={classes.textField}\r\n                    onChange={(e) => {\r\n                      onChange(e.target.value);\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  ></TextField>\r\n                );\r\n              }}\r\n              rules={{ required: \"Name required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"email\"\r\n              control={control}\r\n              defaultValue={state.email}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Email\"\r\n                    id=\"margin-normal-email\"\r\n                    name=\"email\"\r\n                    defaultValue={state.email}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  />\r\n                );\r\n              }}\r\n              rules={{ required: \"Email is required\" }}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              onClick={handleSubmit(onSubmit)}\r\n            >\r\n              Submit <Icon className={classes.rightIcon}>send</Icon>\r\n            </Button>\r\n          </div>\r\n          {isExit && (\r\n            <Box>\r\n              <Heading size=\"md\" pl={2}>\r\n                Warning! This email already existed!\r\n              </Heading>\r\n            </Box>\r\n          )}\r\n        </form>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 400,\r\n  },\r\n}));\r\n\r\nexport default EmployeeFormAdd;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useHoc.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useDeleteHoc.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\useDeleteEmployees.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeView.js",["1324"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport CardLayout from \"../helpers/CardLayout\";\r\nimport CardLayout2 from \"../helpers/CardLayout2\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\n\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\nimport { useTrainingsContext } from \"../context/trainings_context\";\r\nimport EmpViewFamily from \"./EmpViewFamily\";\r\nimport EmpViewEducations from \"./EmpViewEducations\";\r\nimport EmpViewExperiences from \"./EmpViewExperiences\";\r\nimport EmpViewLeaves from \"./EmpViewLeaves\";\r\nimport EmpViewTrainings from \"./EmpViewTrainings\";\r\nimport EmpPersonal from \"./EmpPersonal\";\r\nimport EmpFamily from \"./EmpFamily\";\r\nimport EmpEducations from \"./EmpEducations\";\r\nimport EmpExperiences from \"./EmpExperiences\";\r\nimport EmpTrainings from \"./EmpTrainings\";\r\n\r\n// const drawerWidth = 240;\r\n\r\n// const CardLayout = ({ title, children }) => {\r\n//   const classes = useStyles();\r\n//   return (\r\n//     <div>\r\n//       <CardLayout title=\"Personal Information\">\r\n//         <h2>details</h2>\r\n//       </CardLayout>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\nconst EmployeeView = () => {\r\n  const classes = useStyles();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const [familydata, setFamilydata] = useState([]);\r\n  const [educationdata, setEducationdata] = useState([]);\r\n  const [experiencedata, setExperiencedata] = useState([]);\r\n  const [trainingdata, setTrainingdata] = useState([]);\r\n  const [isPersonalDialogOpen, setIsPersonalDialogOpen] = useState(false);\r\n  const [isFamilyDialogOpen, setIsFamilyDialogOpen] = useState(false);\r\n  const [isEducationDialogOpen, setIsEducationDialogOpen] = useState(false);\r\n  const [isExperienceDialogOpen, setIsExperienceDialogOpen] = useState(false);\r\n  const [isTrainingDialogOpen, setIsTrainingDialogOpen] = useState(false);\r\n\r\n  const {\r\n    editEmployeeID,\r\n    getSingleEmployee,\r\n    single_employee,\r\n    single_employee_loading,\r\n  } = useEmployeesContext();\r\n  const { singlebatch_training } = useTrainingsContext();\r\n\r\n  const {\r\n    loadDepartments,\r\n    loadDesignations,\r\n    loadSingleBatchFamily,\r\n    loadSingleBatchEducation,\r\n    singlebatchfamily,\r\n    singlebatcheducation,\r\n    singlebatchexperience,\r\n  } = useTablesContext();\r\n\r\n  useEffect(() => {\r\n    getSingleEmployee(editEmployeeID);\r\n    loadDepartments();\r\n    loadDesignations();\r\n  }, []);\r\n\r\n  //useEffect(() => {}, [singlebatchfamily]);\r\n\r\n  if (single_employee_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading...Employee</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const handlePersonalDialogOpen = () => {\r\n    //setFamilydata([...singlebatchfamily]);\r\n    setIsPersonalDialogOpen(true);\r\n  };\r\n\r\n  const handlePersonalDialogClose = () => {\r\n    setIsPersonalDialogOpen(false);\r\n    //loadEmployees();\r\n  };\r\n\r\n  const handleFamilyDialogOpen = () => {\r\n    setFamilydata([]);\r\n    setFamilydata([...singlebatchfamily]);\r\n    setIsFamilyDialogOpen(true);\r\n  };\r\n\r\n  const handleFamilyDialogClose = () => {\r\n    setIsFamilyDialogOpen(false);\r\n    loadSingleBatchFamily(editEmployeeID);\r\n  };\r\n\r\n  const handleEducationDialogOpen = () => {\r\n    setEducationdata([]);\r\n    setEducationdata([...singlebatcheducation]);\r\n    setIsEducationDialogOpen(true);\r\n  };\r\n\r\n  const handleEducationDialogClose = () => {\r\n    setIsEducationDialogOpen(false);\r\n    loadSingleBatchEducation(editEmployeeID);\r\n  };\r\n\r\n  const handleExperienceDialogOpen = () => {\r\n    setExperiencedata([...singlebatchexperience]);\r\n    setIsExperienceDialogOpen(true);\r\n  };\r\n\r\n  const handleExperienceDialogClose = () => {\r\n    setIsExperienceDialogOpen(false);\r\n    //loadEmployees();\r\n  };\r\n\r\n  const handleTrainingDialogOpen = () => {\r\n    setTrainingdata([...singlebatch_training]);\r\n    setIsTrainingDialogOpen(true);\r\n    //loadEmployees();\r\n  };\r\n\r\n  const handleTrainingDialogClose = () => {\r\n    setIsTrainingDialogOpen(false);\r\n    //loadEmployees();\r\n  };\r\n\r\n  return (\r\n    <Paper className={fixedHeightPaper} style={{ backgroundColor: \"black\" }}>\r\n      <div className={classes.root}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={8} lg={12}>\r\n            <CardLayout2 title=\"Employee Profile\">\r\n              <div>\r\n                <form className={classes.form}>\r\n                  <TextField\r\n                    label=\"Name\"\r\n                    name=\"name\"\r\n                    value={single_employee.name}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                  <TextField\r\n                    label=\"Phone\"\r\n                    name=\"phone\"\r\n                    value={single_employee.phone}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                  <TextField\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    value={single_employee.email}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                  <TextField\r\n                    label=\"Birth Date\"\r\n                    name=\"birthdate\"\r\n                    value={single_employee.birhdate}\r\n                    type=\"date\"\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                  <TextField\r\n                    label=\"Gender\"\r\n                    name=\"gender\"\r\n                    value={single_employee.gender}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                  <TextField\r\n                    label=\"Leave Balance\"\r\n                    name=\"leave_bal\"\r\n                    value={single_employee.leave_bal}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                </form>\r\n              </div>\r\n            </CardLayout2>\r\n          </Grid>\r\n          <Grid item xs={6} md={8} lg={6}>\r\n            <div>\r\n              <CardLayout\r\n                title=\"Personal Information\"\r\n                handleClick={handlePersonalDialogOpen}\r\n              >\r\n                <div>\r\n                  <form className={classes.form}>\r\n                    <TextField\r\n                      label=\"I/C No\"\r\n                      name=\"icno\"\r\n                      value={single_employee.ic_no}\r\n                      InputProps={{\r\n                        readOnly: true,\r\n                      }}\r\n                    />\r\n\r\n                    <TextField\r\n                      label=\"I/C Expiry Date\"\r\n                      name=\"ic_expirydate\"\r\n                      value={single_employee.ic_expirydate}\r\n                      type=\"date\"\r\n                      InputProps={{\r\n                        readOnly: true,\r\n                      }}\r\n                      InputLabelProps={{\r\n                        shrink: true,\r\n                      }}\r\n                    />\r\n\r\n                    <TextField\r\n                      label=\"Passport No\"\r\n                      name=\"passportno\"\r\n                      value={single_employee.passportno}\r\n                      InputProps={{\r\n                        readOnly: true,\r\n                      }}\r\n                    />\r\n                    <TextField\r\n                      label=\"Passport Expiry Date\"\r\n                      name=\"passport_expirydate\"\r\n                      value={single_employee.passport_expirydate}\r\n                      type=\"date\"\r\n                      InputLabelProps={{\r\n                        shrink: true,\r\n                      }}\r\n                      InputProps={{\r\n                        readOnly: true,\r\n                      }}\r\n                    />\r\n\r\n                    <TextField\r\n                      label=\"Work Permit No\"\r\n                      name=\"workpermitno\"\r\n                      value={single_employee.workpermitno}\r\n                      InputProps={{\r\n                        readOnly: true,\r\n                      }}\r\n                    />\r\n                    <TextField\r\n                      label=\"W/P Expiry Date\"\r\n                      name=\"workpermit_expirydate\"\r\n                      value={single_employee.workpermit_expirydate}\r\n                      type=\"date\"\r\n                      InputLabelProps={{\r\n                        shrink: true,\r\n                      }}\r\n                      InputProps={{\r\n                        readOnly: true,\r\n                      }}\r\n                    />\r\n\r\n                    <div>\r\n                      <TextField\r\n                        label=\"Nationality\"\r\n                        name=\"nationality\"\r\n                        value={single_employee.nationality}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <TextField\r\n                        label=\"Marital Status\"\r\n                        name=\"marital_status\"\r\n                        value={single_employee.marital_status}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </CardLayout>\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={6} md={8} lg={6}>\r\n            <div>\r\n              <CardLayout2 title=\"Leaves\">\r\n                <div>\r\n                  <EmpViewLeaves />\r\n                </div>\r\n              </CardLayout2>\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={6} md={8} lg={6}>\r\n            <div>\r\n              <CardLayout\r\n                title=\"Training\"\r\n                handleClick={handleTrainingDialogOpen}\r\n              >\r\n                <EmpViewTrainings />\r\n              </CardLayout>\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={6} md={8} lg={6}>\r\n            <div>\r\n              <CardLayout\r\n                title=\"Experiences\"\r\n                handleClick={handleExperienceDialogOpen}\r\n              >\r\n                <div>\r\n                  <EmpViewExperiences />\r\n                </div>\r\n              </CardLayout>\r\n            </div>\r\n          </Grid>\r\n\r\n          <Grid item xs={6} md={8} lg={6}>\r\n            <div>\r\n              <CardLayout\r\n                title=\"Education\"\r\n                handleClick={handleEducationDialogOpen}\r\n              >\r\n                <div>\r\n                  <EmpViewEducations />\r\n                </div>\r\n              </CardLayout>\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={6} md={8} lg={6}>\r\n            <div>\r\n              <CardLayout title=\"Family\" handleClick={handleFamilyDialogOpen}>\r\n                <EmpViewFamily />\r\n              </CardLayout>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n      <CustomDialog\r\n        isOpen={isPersonalDialogOpen}\r\n        handleClose={handlePersonalDialogClose}\r\n        title=\"\"\r\n        showButton={true}\r\n        isFullscreen={false}\r\n        isFullwidth={false}\r\n      >\r\n        <EmpPersonal\r\n          //setPersonaldata={setFamilydata}\r\n          //familydata={familydata}\r\n          handleDialogClose={handlePersonalDialogClose}\r\n        />\r\n      </CustomDialog>\r\n      <CustomDialog\r\n        isOpen={isFamilyDialogOpen}\r\n        handleClose={handleFamilyDialogClose}\r\n        title=\"\"\r\n        showButton={true}\r\n        isFullscreen={false}\r\n        isFullwidth={false}\r\n      >\r\n        <EmpFamily\r\n          setFamilydata={setFamilydata}\r\n          familydata={familydata}\r\n          handleDialogClose={handleFamilyDialogClose}\r\n        />\r\n      </CustomDialog>\r\n      <CustomDialog\r\n        isOpen={isEducationDialogOpen}\r\n        handleClose={handleEducationDialogClose}\r\n        title=\"\"\r\n        showButton={true}\r\n        isFullscreen={false}\r\n        isFullwidth={false}\r\n      >\r\n        <EmpEducations\r\n          setEducationdata={setEducationdata}\r\n          educationdata={educationdata}\r\n          handleDialogClose={handleEducationDialogClose}\r\n        />\r\n      </CustomDialog>\r\n      <CustomDialog\r\n        isOpen={isExperienceDialogOpen}\r\n        handleClose={handleExperienceDialogClose}\r\n        title=\"\"\r\n        showButton={true}\r\n        isFullscreen={false}\r\n        isFullwidth={false}\r\n      >\r\n        <EmpExperiences\r\n          setExperiencedata={setExperiencedata}\r\n          experiencedata={experiencedata}\r\n          handleDialogClose={handleExperienceDialogClose}\r\n        />\r\n      </CustomDialog>\r\n      <CustomDialog\r\n        isOpen={isTrainingDialogOpen}\r\n        handleClose={handleTrainingDialogClose}\r\n        title=\"\"\r\n        showButton={true}\r\n        isFullscreen={false}\r\n        isFullwidth={false}\r\n      >\r\n        <EmpTrainings\r\n          setTrainingdata={setTrainingdata}\r\n          trainingdata={trainingdata}\r\n          handleDialogClose={handleTrainingDialogClose}\r\n        />\r\n      </CustomDialog>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  container: {\r\n    margin: 0,\r\n    padding: 0,\r\n    width: \"80vw\",\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"repeat(auto-fill,250px)\",\r\n    gridAutoRows: \"10px\",\r\n    position: \"absolute\",\r\n    left: \"50%\",\r\n    transform: \"translateX(-50%)\",\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"primary\",\r\n  },\r\n  fixedHeight: {\r\n    height: 800,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(10),\r\n    // display: \"flex\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n    border: \"1px solid\",\r\n    width: \"100%\",\r\n    color: \"primary\",\r\n    bcakgroundColor: \"black\",\r\n  },\r\n  card: {\r\n    backgroundColor: \"black\",\r\n  },\r\n  form: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 350,\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n}));\r\n\r\nexport default EmployeeView;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableApproval.js",["1325","1326","1327"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { TextField, MenuItem } from \"@material-ui/core\";\r\nimport { Button, HStack } from \"@chakra-ui/react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport * as emailjs from \"emailjs-com\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport LeaveFormAdmin from \"./LeaveFormAdmin\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\n//import { useLeaves } from \"./leaves/useLeaves\";\r\nimport { useLeavesStatus } from \"./leaves/useLeavesStatus\";\r\n//import { useAddLeaves } from \"./leaves/useAddLeaves\";\r\nimport { useDeleteLeaves } from \"./leaves/useDeleteLeaves\";\r\nimport { useUpdateLeaves } from \"./leaves/useUpdateLeaves\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\n\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\nconst ADMINMANAGER_EMAIL = process.env.REACT_APP_ADMINMANAGER_EMAIL;\r\n\r\nconst initial_form = {\r\n  name: \"\",\r\n  to_date: \"\",\r\n  from_date: \"\",\r\n  reason: \"\",\r\n  status: \"Pending\",\r\n  no_of_days: 0,\r\n  leave_bal: 0,\r\n};\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Leave Balance\",\r\n    field: \"leave_bal\",\r\n    type: \"numeric\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"No of Days\",\r\n    field: \"no_of_days\",\r\n    type: \"numeric\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Reason\",\r\n    field: \"reason\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    field: \"status\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        //defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        style={{ width: 100 }}\r\n        value={props.value}\r\n        select\r\n      >\r\n        <MenuItem value=\"Pending\">Pending</MenuItem>\r\n        <MenuItem value=\"Approve\">Approve</MenuItem>\r\n        <MenuItem value=\"Reject\">Reject</MenuItem>\r\n        <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n      </TextField>\r\n    ),\r\n  },\r\n];\r\n\r\nexport default function LeaveTableApproval() {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  //const { leaves, filter, setFilter, setLeaveId } = useLeaves();\r\n  const { employees } = useEmployees();\r\n  const { leavesstatus, setLeaveStatusId } = useLeavesStatus();\r\n  const updateLeaves = useUpdateLeaves();\r\n  //const addLeaves = useAddLeaves();\r\n  const deleteLeaves = useDeleteLeaves();\r\n  const [formdata, setFormdata] = useState(initial_form);\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const [isUpdate, setIsUpdate] = useState(true);\r\n  const {\r\n    // leaves,\r\n    editLeaveID,\r\n    //leaves_loading,\r\n    //deleteLeave,\r\n    //loadLeaves,\r\n    //getSingleLeave,\r\n    //setEditLeaveID,\r\n    //setIsLeaveEditingOn,\r\n    //setIsLeaveEditingOff,\r\n    //resetSingleLeave,\r\n  } = useLeavesContext();\r\n\r\n  useEffect(() => {\r\n    setLeaveStatusId(\"Pending\");\r\n  }, []);\r\n\r\n  // const update_Leave = async (data) => {\r\n  //   const { id } = data;\r\n  //   setFormdata({ ...data });\r\n  //   setEditLeaveID(id);\r\n  //   setIsLeaveEditingOn();\r\n  //   getSingleLeave(id);\r\n  //   handleDialogOpen();\r\n  //   //history.push(\"/singleleave\");\r\n  // };\r\n\r\n  // const add_Leave = async (data) => {\r\n  //   // const { id } = data;\r\n  //   setFormdata({ ...data });\r\n  //   resetSingleLeave();\r\n  //   setEditLeaveID(\"\");\r\n  //   setIsLeaveEditingOff();\r\n  //   handleDialogOpen();\r\n  //   //history.push(\"/singleleave\");\r\n  // };\r\n\r\n  // const delete_Leave = (data) => {\r\n  //   const { id } = data;\r\n  //   setEditLeaveID(id);\r\n  //   handleAlertOpen();\r\n  //   //deleteLeave(id);\r\n  //   //loadLeaves();\r\n  // };\r\n\r\n  // const handleDialogOpen = () => {\r\n  //   setIsDialogOpen(true);\r\n  // };\r\n\r\n  const handleDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n  };\r\n\r\n  // const handleAlertOpen = () => {\r\n  //   setIsAlertOpen(true);\r\n  // };\r\n\r\n  const handleAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleOnDeleteConfirm = () => {\r\n    const id = editLeaveID;\r\n    deleteLeaves(id);\r\n  };\r\n\r\n  const handleSentEmail = (data, result) => {\r\n    const { from_date, to_date, name, empid } = data;\r\n    const emp = employees\r\n      .filter((f) => f.id === empid)\r\n      .map((r) => {\r\n        return { ...r };\r\n      });\r\n    console.log(\"leave form\", data, emp);\r\n\r\n    var emaildata = {\r\n      to_name: name,\r\n      to_email: emp[0].email,\r\n      message: `Your leave application from ${from_date} to ${to_date} has been ${result}!`,\r\n      cc_to: ADMINMANAGER_EMAIL,\r\n    };\r\n\r\n    emailjs.send(SERVICE_ID, TEMPLATE_ID, emaildata, USER_ID).then(\r\n      function (response) {\r\n        console.log(response.status, response.text);\r\n        toast({\r\n          title: `Email has sent successfully to ${emaildata.to_email}!`,\r\n          status: \"success\",\r\n        });\r\n      },\r\n      function (err) {\r\n        console.log(err);\r\n        toast({\r\n          title: `Email has fail to send to ${emaildata.to_email}!`,\r\n          status: \"warning\",\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  const Approve_Leave = () => {\r\n    leavesstatus.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        const currentrec = rec;\r\n        currentrec.status = \"Approved\";\r\n        updateLeaves({ id: rec.id, status: \"Approved\" });\r\n\r\n        toast({\r\n          title: \"Leave record being approved!\",\r\n          status: \"success\",\r\n        });\r\n        //sent email\r\n        handleSentEmail(rec, \"Approved\");\r\n      }\r\n    });\r\n    leavesstatus.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  const Reject_Leave = () => {\r\n    leavesstatus.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        const currentrec = rec;\r\n        currentrec.status = \"Rejected\";\r\n        updateLeaves({ id: rec.id, status: \"Rejected\" });\r\n        setIsUpdate(true);\r\n        toast({\r\n          title: \"Leave record being rejected!\",\r\n          status: \"success\",\r\n        });\r\n        //sent email\r\n        handleSentEmail(rec, \"Approved\");\r\n      }\r\n    });\r\n    leavesstatus.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n  //console.log(\"leave\", ADMINMANAGER_EMAIL, USER_ID);\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={leavesstatus.filter(\r\n            (r) => r.reporting_email === loginLevel.loginEmail\r\n          )}\r\n          title=\"Leave Application\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <AddIcon />,\r\n            View: (props) => <VisibilityIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          actions={\r\n            [\r\n              // {\r\n              //   icon: () => <VisibilityIcon />,\r\n              //   tooltip: \"Edit Record\",\r\n              //   onClick: (event, rowData) => {\r\n              //     update_Leave(rowData);\r\n              //   },\r\n              // },\r\n              // {\r\n              //   icon: \"delete\",\r\n              //   tooltip: \"Delete Record\",\r\n              //   onClick: (event, rowData) => {\r\n              //     delete_Leave(rowData);\r\n              //   },\r\n              // },\r\n              // {\r\n              //   icon: \"add\",\r\n              //   tooltip: \"Add Record\",\r\n              //   isFreeAction: true,\r\n              //   onClick: (event, rowData) => {\r\n              //     add_Leave(rowData);\r\n              //   },\r\n              // },\r\n            ]\r\n          }\r\n          options={{\r\n            filtering: true,\r\n            selection: true,\r\n            paging: false,\r\n            headerStyle: {\r\n              backgroundColor: \"rgba(75, 192, 192, 1)\",\r\n              color: \"white\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <HStack p={2}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"solid\"\r\n                    color=\"white\"\r\n                    bgColor=\"red\"\r\n                    //className={classes.button}\r\n                    onClick={Approve_Leave}\r\n                  >\r\n                    Approve\r\n                  </Button>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"solid\"\r\n                    color=\"white\"\r\n                    bgColor=\"red\"\r\n                    //className={classes.button}\r\n                    onClick={Reject_Leave}\r\n                  >\r\n                    Reject\r\n                  </Button>\r\n                </HStack>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <CustomDialog\r\n          isOpen={isDialogOpen}\r\n          handleClose={handleDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscree={false}\r\n        >\r\n          <LeaveFormAdmin\r\n            formdata={formdata}\r\n            setFormdata={setFormdata}\r\n            handleDialogClose={handleDialogClose}\r\n          />\r\n        </CustomDialog>\r\n\r\n        <AlertDialogBox\r\n          onClose={handleAlertClose}\r\n          onConfirm={handleOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete Expenses\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTableViewSummary.js",["1328"],"import React, { useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Box} from \"@chakra-ui/react\"\r\n//import { useHistory } from \"react-router-dom\";\r\n//import { useSetRecoilState } from \"recoil\";\r\nimport {\r\n  //payPeriodState,\r\n  //payPeriodEndMonthState,\r\n  //payPeriodEmpIdState,\r\n} from \"./data/atomdata\";\r\n//import { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { usePayrunStatus} from \"./payrun/usePayrunStatus\"\r\n\r\n//const FILTERSTRING = \"Pending\";\r\n\r\nconst columns = [\r\n  // { title: \"Period\", field: \"period\" },\r\n  {\r\n    title: \"Payrun Batch\",\r\n    field: \"payrun\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n  },\r\n  // {\r\n  //   title: \"Pay Date\",\r\n  //   field: \"pay_date\",\r\n  //   type: \"date\",\r\n  //   dateSetting: { locale: \"en-GB\" },\r\n  // },\r\n  { title: \"Total Wages\", field: \"totalwages\", type: \"currency\" },\r\n  { title: \"TAP Amount\", field: \"totaltap\", type: \"currency\" },\r\n  { title: \"SCP Amount\", field: \"totalscp\", type: \"currency\" },\r\n  { title: \"Site Allowances\", field: \"totalsitesallows\", type: \"currency\" },\r\n  { title: \"Expenses Claims\", field: \"totalexpensesclaims\", type: \"currency\" },\r\n  { title: \"Total Allowances\", field: \"totalallows\", type: \"currency\" },\r\n  { title: \"Total Deductions\", field: \"totaldeducts\", type: \"currency\" },\r\n  { title: \"Total Payroll\", field: \"totalpayroll\", type: \"currency\" },\r\n  { title: \"Status\", field: \"status\" },\r\n];\r\n\r\n\r\nexport default function PayslipTableVIew({status}) {\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  //const setPayPeriodEmpId = useSetRecoilState(payPeriodEmpIdState);\r\n  //const { payrun, getPayrun,payrun_loading, loadPendingPayslips } =\r\n  //  usePayslipsContext();\r\n  //const { loadEmployees, employees } = useEmployeesContext();\r\n  const { payrunstatus, setPayrunStatusId} = usePayrunStatus()\r\n  \r\n  \r\n  useEffect(() => {\r\n    setPayrunStatusId(status);\r\n  }, []);\r\n\r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n    \r\n        <Box maxW=\"100%\" pt=\"5px\" overflow=\"Scroll\">\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={payrunstatus}\r\n          title=\"Payslips\"\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            paging: false,\r\n            headerStyle: {\r\n              backgroundColor: \"rgba(75, 192, 192, 1)\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </Box>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\WPExpiryViewStaff.js",["1329"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\nimport {\r\n  Box,\r\n  Grid,\r\n  GridItem,\r\n  Heading,\r\n  IconButton,\r\n  Spacer,\r\n  Stack,\r\n} from \"@chakra-ui/react\";\r\nimport { EditIcon } from \"@chakra-ui/icons\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { differenceInDays } from \"date-fns\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { List } from \"@material-ui/core\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\n//import { useUser } from \"./user/useUser\";\r\n\r\n//const drawerWidth = 240;\r\n\r\n// const columns = [\r\n//   {\r\n//     title: \"Name\",\r\n//     field: \"name\",\r\n//     editable: \"never\",\r\n//   },\r\n//   {\r\n//     title: \"Work Permit No\",\r\n//     field: \"workpermitno\",\r\n//     editable: \"never\",\r\n//   },\r\n//   {\r\n//     title: \"Work Permit Expiry\",\r\n//     field: \"workpermit_expirydate\",\r\n//     type: \"date\",\r\n//     dateSetting: { locale: \"en-GB\" },\r\n//     editable: \"never\",\r\n//   },\r\n// ];\r\n\r\nconst WPExpiryViewStaff = () => {\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const { employees } = useEmployees();\r\n  //const { user } = useUser();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  //const [userdata, setUserdata] = useState([]);\r\n  const today = Date().toLocaleString();\r\n\r\n  // useEffect(() => {\r\n  //   setFilter(user.id);\r\n  // }, []);\r\n\r\n  return (\r\n    <List className={classes.root}>\r\n      <Grid direction=\"row\">\r\n        <Stack direction=\"row\">\r\n          <Heading as=\"h4\" size=\"md\">\r\n            Work Permit Expiry Within 90 days\r\n          </Heading>\r\n          <Spacer />\r\n          <IconButton\r\n            // variant=\"outline\"\r\n            size=\"md\"\r\n            aria-label=\"Edit\"\r\n            icon={<EditIcon />}\r\n            onClick={() => navigate(\"/singleemployee\")}\r\n          />\r\n        </Stack>\r\n        {employees\r\n          .filter(\r\n            (i) =>\r\n              differenceInDays(\r\n                new Date(i.workpermit_expirydate),\r\n                new Date(today)\r\n              ) < 90 && i.id === loginLevel.loginUserId\r\n          )\r\n          .map((row) => {\r\n            return (\r\n              <Grid key={row.id} templateColumns=\"repeat(6, 1fr)\" gap={3} p={1}>\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.workpermitno}</Box>\r\n                </GridItem>\r\n\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.workpermit_expirydate}</Box>\r\n                </GridItem>\r\n              </Grid>\r\n              // <ListItem key={row.id}>\r\n              //   <Grid item sm={4} align=\"center\">\r\n              //     <ListItemText>{row.workpermitno}</ListItemText>\r\n              //   </Grid>\r\n              //   <Grid item sm={4} align=\"center\">\r\n              //     <ListItemText>{row.workpermit_expirydate}</ListItemText>\r\n              //   </Grid>\r\n              // </ListItem>\r\n            );\r\n          })}\r\n      </Grid>\r\n    </List>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n\r\nexport default WPExpiryViewStaff;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableVeryfy.js",["1330","1331","1332","1333","1334","1335"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { TextField, MenuItem } from \"@material-ui/core\";\r\nimport { Button, HStack } from \"@chakra-ui/react\";\r\nimport {\r\n  useSetRecoilState,\r\n  useRecoilValue,\r\n  useRecoilState,\r\n  ///useRecoilValueLoadable,\r\n} from \"recoil\";\r\nimport {\r\n  allowsPeriodState,\r\n  allowsDataState,\r\n  empidState,\r\n} from \"./data/atomdata\";\r\n//import { fetchDailyAllowancesSelector } from \"./data/selectordata\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n//import ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport DailyAllowsDetlsTable from \"./DailyAllowsDetlsTable\";\r\nimport { useDailyAllowsStatus } from \"./dailyallows/useDailyAllowsStatus\";\r\nimport { useUpdateDailyAllows } from \"./dailyallows/useUpdateDailyAllows\";\r\n\r\n//const FILTERSTRING = \"Submitted\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n    editable: \"never\",\r\n  },\r\n  { title: \"Period\", field: \"period\", editable: \"never\" },\r\n  { title: \"Location\", field: \"location\", editable: \"never\" },\r\n  { title: \"Manager Name\", field: \"manager\", editable: \"never\" },\r\n  {\r\n    title: \"No Of Days\",\r\n    field: \"no_of_days\",\r\n    type: \"numeric\",\r\n    editable: \"never\",\r\n  },\r\n  { title: \"Amount\", field: \"amount\", type: \"currency\", editable: \"never\" },\r\n  {\r\n    title: \"Status\",\r\n    field: \"status\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        //defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        style={{ width: 100 }}\r\n        value={props.value}\r\n        select\r\n      >\r\n        <MenuItem value=\"Pending\">Pending</MenuItem>\r\n        <MenuItem value=\"Approved\">Approved</MenuItem>\r\n        <MenuItem value=\"Rejected\">Rejected</MenuItem>\r\n        <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n      </TextField>\r\n    ),\r\n  },\r\n];\r\n\r\nexport default function DailyAllowancesTable() {\r\n  //let history = useHistory();\r\n  const toast = useCustomToast()\r\n  const classes = useStyles();\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  //const [tmpallowsdata, setTmpallowsdata] = useState([]);\r\n  //const allows_period = useRecoilValue(allowsPeriodState);\r\n  //const allows_empid = useRecoilValue(empidState);\r\n  const [allowsdata, setAllowsdata] = useRecoilState(allowsDataState);\r\n  const { dailyallowsstatus, setDailyAllowsStatusId } = useDailyAllowsStatus();\r\n  const updateDailyAllows = useUpdateDailyAllows();\r\n  //const setEmpID = useSetRecoilState(empidState);\r\n  //const title = `Site Allowances (${allows_period})`;\r\n  \r\n\r\n  useEffect(() => {\r\n    setDailyAllowsStatusId(\"Submitted\");\r\n  }, []);\r\n\r\n  // const Save_DailyAllowancesData = () => {\r\n  //   dailyallowsstatus.forEach((data) => {\r\n  //     const { id } = data;\r\n  //     if (id) {\r\n  //       const { id, rec_id, tableData, ...fields } = data;\r\n  //       updateDailyAllowance({ id, ...fields });\r\n  //     }\r\n  //   });\r\n  // };\r\n\r\n  const Verify_DailyAllowancesData = () => {\r\n    dailyallowsstatus.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        const currentrec = rec;\r\n        currentrec.status = \"Verified\";\r\n        updateDailyAllows({ id: rec.id, status: \"Verified\" });\r\n         toast({\r\n           title: \"Site Allows record being updated!\",\r\n           status: \"success\",\r\n         });\r\n        //update leavesdata\r\n        // if (!update_dailyallowance_error) {\r\n        //   const recdata = dailyallowancesdata.filter((r) => r.id === rec.id);\r\n        //   recdata[0].status = \"Approved\";\r\n        // }\r\n      }\r\n    });\r\n    dailyallowsstatus.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  const Reject_DailyAllowancesData = () => {\r\n    dailyallowsstatus.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        const currentrec = rec;\r\n        currentrec.status = \"Rejected\";\r\n        updateDailyAllows({ id: rec.id, status: \"Rejected\" });\r\n         toast({\r\n           title: \"Site Allows record being rejected!\",\r\n           status: \"warning\",\r\n         });\r\n        //update leavesdata\r\n        // if (!update_dailyallowance_error) {\r\n        //   const recdata = dailyallowancesdata.filter((r) => r.id === rec.id);\r\n        //   recdata[0].status = \"Rejected\";\r\n        // }\r\n      }\r\n    });\r\n    dailyallowsstatus.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={dailyallowsstatus}\r\n          title=\"Site Allows Application\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <EditIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          // editable={{\r\n          //   onRowUpdate: (newData, oldData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         const dataUpdate = [...dailyallowancesdata];\r\n          //         const index = oldData.tableData.id;\r\n          //         dataUpdate[index] = newData;\r\n          //         setDailyAllowancesdata([...dataUpdate]);\r\n          //         //approve_Expense(newData);\r\n\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          // }}\r\n          options={{\r\n            filtering: true,\r\n            selection: true,\r\n            headerStyle: {\r\n              backgroundColor: \"rgba(75, 192, 192, 1)\",\r\n              color: \"white\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <HStack p={2}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"solid\"\r\n                    color=\"white\"\r\n                    bgColor=\"red\"\r\n                    onClick={Verify_DailyAllowancesData}\r\n                  >\r\n                    Verify\r\n                  </Button>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"solid\"\r\n                    color=\"white\"\r\n                    bgColor=\"red\"\r\n                    onClick={Reject_DailyAllowancesData}\r\n                  >\r\n                    Reject\r\n                  </Button>\r\n                </HStack>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <div className={classes.dialog}>\r\n          <CustomDialog\r\n            isOpen={isDialogOpen}\r\n            //handleClose={handleDialogClose}\r\n            title=\"\"\r\n            showButton={true}\r\n            isFullscreen={true}\r\n            isFullwidth={true}\r\n          >\r\n            <DailyAllowsDetlsTable\r\n              setAllowsdata={setAllowsdata}\r\n              allowsdata={allowsdata}\r\n              //handleDialogClose={handleDialogClose}\r\n            />\r\n          </CustomDialog>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  dialog: {\r\n    width: 1000,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\Copyright.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\LeavesTableViewSummary.js",["1336","1337","1338","1339"],"import React, {  useEffect } from \"react\";\r\nimport MaterialTable  from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Box, Button, HStack, Text } from \"@chakra-ui/react\";\r\n//import AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\n//import DeleteIcon from \"@material-ui/icons/Delete\";\r\n//import CheckIcon from \"@material-ui/icons/Check\";\r\n//import SearchIcon from \"@material-ui/icons/Search\";\r\n//import LeaveForm from \"./LeaveForm\";\r\n//import { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { AlertDialog } from \"../helpers/AlertDialogBox\";\r\nimport { useLeavesPeriod } from \"./leaves/useLeavesPeriod\";\r\n\r\n//const FILTERSTRING = \"Pending\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n  },\r\n\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"No of Days\",\r\n    field: \"no_of_days\",\r\n    type: \"numeric\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Reason\",\r\n    field: \"reason\",\r\n    editable: \"never\",\r\n  },\r\n  { title: \"Status\", field: \"status\" },\r\n];\r\n\r\n\r\n\r\n\r\nexport default function LeaveTableViewSummary({ year, month }) {\r\n  const classes = useStyles();\r\n  const { leavesperiod, setLeavePeriodYrId, setLeavePeriodMthId } =\r\n    useLeavesPeriod();\r\n\r\n  useEffect(() => {\r\n    setLeavePeriodYrId(year);\r\n    setLeavePeriodMthId(month);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      {/* <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}> */}\r\n      \r\n      <Box maxW=\"100%\" pt=\"5px\" overflow=\"scroll\">\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={leavesperiod}\r\n          title=\"Leave Application\"\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            paging: false,\r\n            headerStyle: {\r\n              backgroundColor: \"rgba(75, 192, 192, 1)\",\r\n              color: \"white\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </Box>\r\n    </div>\r\n    // </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\Export2ExcelDialog.js",["1340","1341","1342","1343"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  //AspectRatio,\r\n  Box,\r\n  Button,\r\n  //ButtonGroup,\r\n  //Center,\r\n  Checkbox,\r\n  //Container,\r\n  Divider,\r\n  //Flex,\r\n  FormControl,\r\n  //FormLabel,\r\n  //FormErrorMessage,\r\n  //FormHelperText,\r\n  //Grid,\r\n  //GridItem,\r\n  Heading,\r\n  HStack,\r\n  //Icon,\r\n  //IconButton,\r\n  //Image,\r\n  Input,\r\n  InputGroup,\r\n  InputLeftAddon,\r\n  //InputLeftElement,\r\n  //Modal,\r\n  //ModalOverlay,\r\n  //ModalContent,\r\n  //ModalHeader,\r\n  //ModalFooter,\r\n  //ModalBody,\r\n  //ModalCloseButton,\r\n  //Radio,\r\n  //RadioGroup,\r\n  Select,\r\n  //SimpleGrid,\r\n  //Stack,\r\n  //StackDivider,\r\n  //Text,\r\n  //Tabs,\r\n} from \"@chakra-ui/react\";\r\nimport { useHocPeriod } from \"./hoc/useHocPeriod\";\r\nimport Export2Excel from \"./Export2Excel\";\r\n\r\nconst months = [\r\n  { name: \"January\", value: 1 },\r\n  { name: \"February\", value: 2 },\r\n  { name: \"March\", value: 3 },\r\n  { name: \"April\", value: 4 },\r\n  { name: \"May\", value: 5 },\r\n  { name: \"June\", value: 6 },\r\n  { name: \"July\", value: 7 },\r\n  { name: \"August\", value: 8 },\r\n  { name: \"September\", value: 9 },\r\n  { name: \"October\", value: 10 },\r\n  { name: \"November\", value: 11 },\r\n  { name: \"December\", value: 12 },\r\n];\r\n\r\nconst Export2ExcelDialog = ({ state, setState, dataset, onClose }) => {\r\n  const field_width = \"138\";\r\n  const [isLoad, setIsload] = useState(true);\r\n  const { hocperiod, setHocPeriodYrId, setHocPeriodMthId } = useHocPeriod();\r\n  //console.log(\"expstate\", state);\r\n\r\n  const handleChange = (evt) => {\r\n    const value = evt.target.value;\r\n    setState({\r\n      ...state,\r\n      [evt.target.name]: value,\r\n    });\r\n    if (evt.target.name === \"month\") {\r\n      setIsload(true);\r\n    }\r\n    if (evt.target.name === \"year\") {\r\n      setIsload(true);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    onClose();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setHocPeriodYrId(state.year);\r\n    setHocPeriodMthId(state.month);\r\n    setIsload(false);\r\n  }, [isLoad]);\r\n\r\n  // useEffect(() => {\r\n  //   setState(initial_state);\r\n  //   setState({ ...formdata });\r\n  //   setState({ ...formdata });\r\n  //   console.log(\"laeve form\",state)\r\n  // }, [initialValues]);\r\n\r\n  return (\r\n    <Box>\r\n      <Box p={2}>\r\n        <Heading size=\"md\">EXPORT TO EXCEL DIALOG</Heading>\r\n      </Box>\r\n      {/* <Box>\r\n        <Export2Excel filename=\"hoc\" dataset={hoc} title=\"Hoc\" />\r\n      </Box> */}\r\n      <Divider />\r\n\r\n      <div>\r\n        <FormControl>\r\n          <InputGroup>\r\n            <HStack w=\"100%\" py={1}>\r\n              <InputLeftAddon children=\"Type\" minWidth={field_width} />\r\n              <Input\r\n                name=\"type\"\r\n                value={state.type}\r\n                width=\"full\"\r\n                onChange={handleChange}\r\n                borderColor=\"gray.400\"\r\n                isReadOnly\r\n                //textTransform=\"capitalize\"\r\n                //ref={ref}\r\n                placeholder=\"type\"\r\n              />\r\n            </HStack>\r\n          </InputGroup>\r\n        </FormControl>\r\n      </div>\r\n      <div>\r\n        <FormControl>\r\n          <InputGroup>\r\n            <HStack w=\"100%\" py={1}>\r\n              <InputLeftAddon children=\"Month\" minWidth={field_width} />\r\n              <Select\r\n                name=\"month\"\r\n                value={state.month}\r\n                width=\"full\"\r\n                onChange={handleChange}\r\n                borderColor=\"gray.400\"\r\n                //textTransform=\"capitalize\"\r\n                //ref={ref}\r\n                //placeholder=\"category\"\r\n              >\r\n                {months &&\r\n                  months.map((rec, index) => {\r\n                    return (\r\n                      <option key={rec.index} value={rec.value}>\r\n                        {rec.name}\r\n                      </option>\r\n                    );\r\n                  })}\r\n              </Select>\r\n            </HStack>\r\n          </InputGroup>\r\n        </FormControl>\r\n      </div>\r\n      <div>\r\n        <FormControl>\r\n          <InputGroup>\r\n            <HStack w=\"100%\" py={1}>\r\n              <InputLeftAddon children=\"Year\" minWidth={field_width} />\r\n              <Select\r\n                name=\"year\"\r\n                value={state.year}\r\n                width=\"full\"\r\n                onChange={handleChange}\r\n                borderColor=\"gray.400\"\r\n                //textTransform=\"capitalize\"\r\n                //ref={ref}\r\n                //placeholder=\"category\"\r\n              >\r\n                <option value=\"2021\">2021</option>\r\n                <option value=\"2022\">2022</option>\r\n              </Select>\r\n            </HStack>\r\n          </InputGroup>\r\n        </FormControl>\r\n      </div>\r\n      <div>\r\n        <FormControl>\r\n          <InputGroup>\r\n            <HStack w=\"100%\" py={1}>\r\n              <InputLeftAddon children=\"Title\" minWidth={field_width} />\r\n              <Input\r\n                name=\"title\"\r\n                value={state.title}\r\n                width=\"full\"\r\n                onChange={handleChange}\r\n                borderColor=\"gray.400\"\r\n                //ref={ref}\r\n                placeholder=\"title\"\r\n              />\r\n            </HStack>\r\n          </InputGroup>\r\n        </FormControl>\r\n      </div>\r\n      <div>\r\n        <FormControl>\r\n          <InputGroup>\r\n            <HStack w=\"100%\" py={1}>\r\n              <InputLeftAddon children=\"Filename\" minWidth={field_width} />\r\n              <Input\r\n                name=\"filename\"\r\n                value={state.filename}\r\n                width=\"full\"\r\n                onChange={handleChange}\r\n                borderColor=\"gray.400\"\r\n                //ref={ref}\r\n                placeholder=\"filename\"\r\n              />\r\n            </HStack>\r\n          </InputGroup>\r\n        </FormControl>\r\n      </div>\r\n      <Divider />\r\n      <Box p={2}>\r\n       \r\n        <Export2Excel\r\n          filename={state.filename}\r\n          dataset={hocperiod}\r\n          title={state.title}\r\n        />\r\n      </Box>\r\n      {/* <div>\r\n          <Button\r\n            type=\"submit\"\r\n            colorScheme=\"teal\"\r\n            variant=\"solid\"\r\n            onClick={handleSubmit(onSubmit)}\r\n          >\r\n            Download\r\n          </Button>\r\n        </div> */}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Export2ExcelDialog;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeTableLeaveView.js",["1344","1345"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { GrFormView } from \"react-icons/gr\";\r\n//import AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\n//import DeleteIcon from \"@material-ui/icons/Delete\";\r\n//import CheckIcon from \"@material-ui/icons/Check\";\r\n//import SearchIcon from \"@material-ui/icons/Search\";\r\n//import LeaveForm from \"./LeaveForm\";\r\n//import { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { AlertDialog } from \"../helpers/AlertDialogBox\";\r\n//import { useExpensesPeriod } from \"./expenses/useExpensesPeriod\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\nimport { useLeaves } from \"./leaves/useLeaves\";\r\n\r\nconst YEAR = new Date().getFullYear();\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n    cellStyle: {\r\n      width: 250,\r\n      maxWidth: 250,\r\n    },\r\n  },\r\n  // { title: \"IC No\", field: \"ic_no\" },\r\n  // { title: \"Gender\", field: \"gender\" },\r\n  { title: \"Emp No\", field: \"empno\" },\r\n  { title: \"Designation\", field: \"designation\" },\r\n  { title: \"Department\", field: \"department\" },\r\n\r\n  {\r\n    title: \"Leave Entitled\",\r\n    field: \"leave_entitled\",\r\n    type: \"numeric\",\r\n    cellStyle: {\r\n      width: 60,\r\n    },\r\n  },\r\n  {\r\n    title: \"Leave C/F\",\r\n    field: \"leave_bf\",\r\n    type: \"numeric\",\r\n    cellStyle: {\r\n      width: 60,\r\n    },\r\n  },\r\n  {\r\n    title: \"Total Leave\",\r\n    field: \"leave_total\",\r\n    type: \"numeric\",\r\n    cellStyle: {\r\n      width: 60,\r\n    },\r\n  },\r\n  {\r\n    title: \"Leave Taken\",\r\n    field: \"leave_taken\",\r\n    type: \"numeric\",\r\n    cellStyle: {\r\n      width: 60,\r\n    },\r\n  },\r\n  // {\r\n  //   title: \"Leave Pending\",\r\n  //   field: \"leave_pending\",\r\n  //   type: \"numeric\",\r\n  //   cellStyle: {\r\n  //     width: 60,\r\n  //   },\r\n  // },\r\n  {\r\n    title: \"Leave Balance\",\r\n    field: \"leave_bal\",\r\n    type: \"numeric\",\r\n    cellStyle: {\r\n      width: 60,\r\n    },\r\n  },\r\n  // { title: \"Email\", field: \"email\" },\r\n];\r\n\r\nexport default function EmployeeTableLeaveView({ year }) {\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n  const { employees, setEmployeeId } = useEmployees();\r\n  const { leaves } = useLeaves();\r\n  const [empdata, setEmpData] = useState([]);\r\n  //const currentyear = new Date().getFullYear();\r\n  // const { expensesperiod, setExpPeriodYrId, setExpPeriodMthId } =\r\n  //   useExpensesPeriod();\r\n  const emp = employees.map((rec) => {\r\n    return { ...rec, leave_total: 0, leave_taken: 0, leave_pending: 0 };\r\n  });\r\n\r\n  const {\r\n    //editEmployeeID,\r\n    //employees_loading,\r\n    //deleteEmployee,\r\n    //loadEmployees,\r\n    setEditEmployeeID,\r\n    setIsEditingOn,\r\n    //setIsEditingOff,\r\n    resetSingleEmployee,\r\n    resetEmployees,\r\n    //getSingleEmployee,\r\n  } = useEmployeesContext();\r\n\r\n  const update_Employee = (data) => {\r\n    const { id } = data;\r\n    resetSingleEmployee();\r\n    resetEmployees();\r\n    setEditEmployeeID(id);\r\n    setIsEditingOn();\r\n    setEmployeeId(id);\r\n\r\n    navigate(\"/singleemployee\");\r\n  };\r\n\r\n  const Build_EmpData = (YEAR) => {\r\n    // eslint-disable-next-line no-lone-blocks\r\n    {\r\n      emp &&\r\n        emp.forEach((rec, index) => {\r\n          const {\r\n            id,\r\n            //name,\r\n            //icno,\r\n            //gender,\r\n            //designation,\r\n            //department,\r\n            //leave_entitled,\r\n            //leave_bf,\r\n            //leave_cd,\r\n          } = rec;\r\n          // calculate leaves\r\n          const leavedata = leaves\r\n            .filter(\r\n              (r) =>\r\n                r.empid === id && moment(r.from_date).format(\"YYYY\") === YEAR\r\n            )\r\n            .map((rec) => {\r\n              return { ...rec };\r\n            });\r\n          //console.log(\"leavedata\", leavedata);\r\n          const leaveTaken = leavedata.reduce((acc, item) => {\r\n            if (item.status === \"Approved\") {\r\n              return acc + item.no_of_days;\r\n            } else {\r\n              return acc;\r\n            }\r\n          }, 0);\r\n          const leavePending = leavedata.reduce((acc, item) => {\r\n            if (item.status === \"Pending\") {\r\n              return acc + item.no_of_days;\r\n            } else {\r\n              return acc;\r\n            }\r\n          }, 0);\r\n          const leaveEntitled = isNaN(emp[index].leave_entitled)\r\n            ? 0\r\n            : emp[index].leave_entitled;\r\n          const leaveBf = isNaN(emp[index].leave_bf) ? 0 : emp[index].leave_bf;\r\n          //const leaveCd = isNaN(emp[index].leave_cd) ? 0 : emp[index].leave_cd;\r\n          const leaveCd = 0;\r\n          emp[index].leave_cd = leaveCd;\r\n          emp[index].leave_total = leaveEntitled + leaveBf;\r\n          emp[index].leave_taken = leaveTaken + leaveCd;\r\n          emp[index].leave_pending = leavePending;\r\n          emp[index].leave_bal = leaveEntitled + leaveBf - leaveCd - leaveTaken;\r\n          setEmpData(emp);\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    Build_EmpData(YEAR);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={empdata\r\n            .filter((r) => !r.hasresigned)\r\n            .sort((a, b) => (a.name > b.name ? 1 : b.name > a.name ? -1 : 0))}\r\n          title=\"Employee Leave Details\"\r\n          actions={[\r\n            (rowData) => ({\r\n              //disabled: rowData.status !== \"Pending\",\r\n              icon: () => <GrFormView size=\"33px\" />,\r\n              tooltip: \"View\",\r\n              onClick: (event, rowData) => {\r\n                update_Employee(rowData);\r\n              },\r\n            }),\r\n          ]}\r\n          options={{\r\n            filtering: true,\r\n            search: true,\r\n            toolbar: false,\r\n            paging: false,\r\n            headerStyle: {\r\n              backgroundColor: \"rgba(75, 192, 192, 1)\",\r\n              color: \"white\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\TrainingsTableViewAdmin.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\HocTableViewSummary.js",["1346","1347"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Box } from \"@chakra-ui/react\";\r\n//import AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\n//import DeleteIcon from \"@material-ui/icons/Delete\";\r\n//import CheckIcon from \"@material-ui/icons/Check\";\r\n//import SearchIcon from \"@material-ui/icons/Search\";\r\n//import LeaveForm from \"./LeaveForm\";\r\n//import { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { AlertDialog } from \"../helpers/AlertDialogBox\";\r\nimport { useHocPeriod } from \"./hoc/useHocPeriod\";\r\n\r\n//const FILTERSTRING = \"Pending\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Findings\",\r\n    field: \"findings\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      minWidth: 200,\r\n      maxWidth: 200,\r\n    },\r\n  },\r\n  {\r\n    title: \"Risks\",\r\n    field: \"risks\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      minWidth: 150,\r\n      maxWidth: 150,\r\n    },\r\n  },\r\n  {\r\n    title: \"Type/Category\",\r\n    field: \"category\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"What\",\r\n    field: \"what\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"What Details\",\r\n    field: \"what_details\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      minWidth: 150,\r\n      maxWidth: 150,\r\n    },\r\n  },\r\n  {\r\n    title: \"Why\",\r\n    field: \"why\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Why Details\",\r\n    field: \"why_details\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      minWidth: 200,\r\n      maxWidth: 200,\r\n    },\r\n  },\r\n  {\r\n    title: \"Discussion\",\r\n    field: \"discussion\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Action\",\r\n    field: \"action\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Follow-up required?\",\r\n    field: \"isfollowup\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Work Related?\",\r\n    field: \"isworkrelated\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Raised By\",\r\n    field: \"raisedby\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Raised On\",\r\n    field: \"raisedon\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Company\",\r\n    field: \"company\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Location\",\r\n    field: \"location\",\r\n    editable: \"never\",\r\n  },\r\n  // {\r\n  //   title: \"Department\",\r\n  //   field: \"department\",\r\n  //   editable: \"never\",\r\n  // },\r\n];\r\n\r\nexport default function HocTableViewSummary({ year, month }) {\r\n  const classes = useStyles();\r\n  const { hocperiod, setHocPeriodYrId, setHocPeriodMthId } = useHocPeriod();\r\n\r\n  useEffect(() => {\r\n    setHocPeriodYrId(year);\r\n    setHocPeriodMthId(month);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      {/* <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}> */}\r\n      <Box maxW=\"100%\" pt=\"5px\" overflow=\"scroll\">\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={hocperiod}\r\n          title=\"HOC History\"\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            paging: false,\r\n            headerStyle: {\r\n              backgroundColor: \"rgba(75, 192, 192, 1)\",\r\n              color: \"white\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </Box>\r\n    </div>\r\n    // </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableAdmin.js",["1348"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { TextField, MenuItem, Button, Icon } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport CheckCircleOutlineOutlinedIcon from \"@material-ui/icons/CheckCircleOutlineOutlined\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\n\r\nconst FILTERSTRING = \"Pending\";\r\n\r\nconst columns = [\r\n  { title: \"Name\", field: \"name\", editable: \"never\" },\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Description\",\r\n    field: \"description\",\r\n    editable: \"never\",\r\n  },\r\n  { title: \"Amount\", field: \"amount\", type: \"currency\", editable: \"never\" },\r\n  {\r\n    title: \"Status\",\r\n    field: \"status\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        //defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        style={{ width: 100 }}\r\n        value={props.value}\r\n        select\r\n      >\r\n        <MenuItem value=\"Pending\">Pending</MenuItem>\r\n        <MenuItem value=\"Approve\">Approve</MenuItem>\r\n        <MenuItem value=\"Reject\">Reject</MenuItem>\r\n        <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n      </TextField>\r\n    ),\r\n  },\r\n];\r\n\r\nexport default function ExpenseTable({\r\n  expensesdata,\r\n  setExpensesdata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  //const [isLoad, setIsLoad] = useState(false);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  //const { loadEmployees } = useEmployeesContext();\r\n  const {\r\n    editExpenseID,\r\n    updateExpense,\r\n    update_expense_error,\r\n    //expenses_loading,\r\n    deleteExpense,\r\n    loadPendingExpenses,\r\n  } = useExpensesContext();\r\n\r\n  // useEffect(() => {\r\n  //   setExpensesdata(expenses);\r\n  //   console.log(expensesdata)\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   loadEmployees();\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   if (expenses) {\r\n  //     setExpensesdata(expenses);\r\n  //     console.log(\"expenses\", expenses, expensesdata)\r\n  //   } else {\r\n  //     setIsLoad(!isLoad);\r\n  //   }\r\n  // }, [isLoad]);\r\n\r\n  // const handleExpenseFormDialogOpen = () => {\r\n  //   setIsDialogOpen(true);\r\n  // };\r\n\r\n  const handleExpenseFormDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n    loadPendingExpenses(FILTERSTRING);\r\n  };\r\n\r\n  // const handleExpenseFormAlertOpen = () => {\r\n  //   setIsAlertOpen(true);\r\n  // };\r\n\r\n  const handleExpenseFormAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleExpenseFormOnDeleteConfirm = () => {\r\n    const id = editExpenseID;\r\n    deleteExpense(id);\r\n    loadPendingExpenses(FILTERSTRING);\r\n  };\r\n\r\n  // const Save_ExpenseData = () => {\r\n  //   expensesdata.forEach((data) => {\r\n  //     const { id } = data;\r\n  //     if (id) {\r\n  //       const { id, rec_id, tableData, ...fields } = data;\r\n  //       updateExpense({ id, ...fields });\r\n  //     }\r\n  //   });\r\n\r\n  //   handleDialogClose();\r\n  // };\r\n\r\n  const Approve_ExpenseData = () => {\r\n    expensesdata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        updateExpense({ id: rec.id, status: \"Approved\" });\r\n        //update leavesdata\r\n        if (!update_expense_error) {\r\n          const recdata = expensesdata.filter((r) => r.id === rec.id);\r\n          recdata[0].status = \"Approved\";\r\n        }\r\n      }\r\n    });\r\n    expensesdata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  const Reject_ExpenseData = () => {\r\n    expensesdata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        updateExpense({ id: rec.id, status: \"Rejected\" });\r\n        //update leavesdata\r\n        if (!update_expense_error) {\r\n          const recdata = expensesdata.filter((r) => r.id === rec.id);\r\n          recdata[0].status = \"Rejected\";\r\n        }\r\n      }\r\n    });\r\n    expensesdata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  if (!expensesdata) {\r\n    return (\r\n      <div>\r\n        <h2>Loading...Expenses</h2>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={expensesdata}\r\n          title=\"Expenses Claims Application\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <CheckCircleOutlineOutlinedIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          // editable={{\r\n          //   onRowUpdate: (newData, oldData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         const dataUpdate = [...expensesdata];\r\n          //         const index = oldData.tableData.id;\r\n          //         dataUpdate[index] = newData;\r\n          //         setExpensesdata([...dataUpdate]);\r\n          //         //approve_Expense(newData);\r\n\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          // }}\r\n          options={{\r\n            filtering: true,\r\n            selection: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Approve_ExpenseData}\r\n                  >\r\n                    Approve <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Reject_ExpenseData}\r\n                  >\r\n                    Reject <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                  {/* <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Save_ExpenseData}\r\n                  >\r\n                    Update <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button> */}\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <CustomDialog\r\n          isOpen={isDialogOpen}\r\n          handleClose={handleExpenseFormDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscree={false}\r\n        >\r\n          <ExpenseForm handleDialogClose={handleExpenseFormDialogClose} />\r\n        </CustomDialog>\r\n\r\n        <AlertDialogBox\r\n          onClose={handleExpenseFormAlertClose}\r\n          onConfirm={handleExpenseFormOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete Expenses\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\WPExpiryViewAdmin.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTableAdmin.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableViewAdmin.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableManager.js",["1349"],"import React, { useState } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { TextField, MenuItem, Button } from \"@material-ui/core\";\r\nimport * as emailjs from \"emailjs-com\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport LeaveForm from \"./LeaveForm\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\n\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\nconst ADMINMANAGER_EMAIL = process.env.ADMINMANAGER_EMAIL;\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Leave Balance\",\r\n    field: \"leave_bal\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      width: 10,\r\n      maxWidth: 10,\r\n    },\r\n  },\r\n  {\r\n    title: \"Days\",\r\n    field: \"no_of_days\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      width: 10,\r\n      maxWidth: 10,\r\n    },\r\n  },\r\n  {\r\n    title: \"Reason\",\r\n    field: \"reason\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      width: 10,\r\n      maxWidth: 10,\r\n    },\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    field: \"status\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      width: 50,\r\n      maxWidth: 50,\r\n    },\r\n    editComponent: (props) => (\r\n      <TextField\r\n        //defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        style={{ width: 100 }}\r\n        value={props.value}\r\n        select\r\n      >\r\n        <MenuItem value=\"Pending\">Pending</MenuItem>\r\n        <MenuItem value=\"Approve\">Approve</MenuItem>\r\n        <MenuItem value=\"Reject\">Reject</MenuItem>\r\n        <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n      </TextField>\r\n    ),\r\n  },\r\n];\r\n\r\nexport default function LeaveTable({\r\n  leavesdata,\r\n  //setLeavesdata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const { employees } = useEmployees();\r\n  const {\r\n    editLeaveID,\r\n    updateLeave,\r\n    deleteLeave,\r\n    loadLeaves,\r\n    update_leave_error,\r\n  } = useLeavesContext();\r\n\r\n  const { updateEmployee } = useEmployeesContext();\r\n\r\n  // useEffect(() => {\r\n  //   loadLeaves();\r\n  // }, []);\r\n\r\n  // const handleLeaveFormDialogOpen = () => {\r\n  //   setIsDialogOpen(true);\r\n  // };\r\n\r\n  const handleLeaveFormDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n    loadLeaves();\r\n  };\r\n\r\n  // const handleLeaveFormAlertOpen = () => {\r\n  //   setIsAlertOpen(true);\r\n  // };\r\n\r\n  const handleLeaveFormAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleLeaveFormOnDeleteConfirm = () => {\r\n    const id = editLeaveID;\r\n    deleteLeave(id);\r\n    loadLeaves();\r\n  };\r\n\r\n  const handleSentEmail = (data, result) => {\r\n    const { from_date, to_date, name, empid } = data;\r\n    const emp = employees\r\n      .filter((f) => f.id === empid)\r\n      .map((r) => {\r\n        return { ...r };\r\n      });\r\n    //console.log(\"leave form\", data, emp);\r\n\r\n    var emaildata = {\r\n      to_name: name,\r\n      to_email: emp[0].email,\r\n      message: `Your leave application from ${from_date} to ${to_date} has been ${result}!`,\r\n      cc_to: ADMINMANAGER_EMAIL,\r\n    };\r\n\r\n    emailjs.send(SERVICE_ID, TEMPLATE_ID, emaildata, USER_ID).then(\r\n      function (response) {\r\n        console.log(response.status, response.text);\r\n        toast({\r\n          title: `Email has sent successfully to ${emaildata.to_email}!`,\r\n          status: \"success\",\r\n        });\r\n      },\r\n      function (err) {\r\n        console.log(err);\r\n        toast({\r\n          title: `Email has fail to send to ${emaildata.to_email}!`,\r\n          status: \"warning\",\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  const Approve_LeaveData = () => {\r\n    leavesdata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        updateLeave({ id: rec.id, status: \"Approved\" });\r\n        //update leavesdata\r\n        if (!update_leave_error) {\r\n          const recdata = leavesdata.filter((r) => r.id === rec.id);\r\n          recdata[0].status = \"Approved\";\r\n\r\n          // update leave bal\r\n          //console.log(\"leave\", rec.empid, employees);\r\n          const empleavebal = employees\r\n            .filter((r) => r.id === rec.empid)\r\n            .map((item) => {\r\n              return item.leave_bal;\r\n            });\r\n          const leavebal = empleavebal - rec.no_of_days;\r\n          updateEmployee({ id: rec.empid, leave_bal: leavebal });\r\n        }\r\n        //sent email\r\n        handleSentEmail(rec, \"Approved\");\r\n      }\r\n    });\r\n    leavesdata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  const Reject_LeaveData = () => {\r\n    leavesdata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        updateLeave({ id: rec.id, status: \"Rejected\" });\r\n        //update leavesdata\r\n        if (!update_leave_error) {\r\n          const recdata = leavesdata.filter((r) => r.id === rec.id);\r\n          recdata[0].status = \"Rejected\";\r\n        }\r\n        //sent email\r\n        handleSentEmail(rec, \"Rejected\");\r\n      }\r\n    });\r\n    leavesdata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  // const Save_LeaveData = () => {\r\n  //   leavesdata.forEach((data) => {\r\n  //     const { id } = data;\r\n  //     if (id) {\r\n  //       const { id, rec_id, tableData, ...fields } = data;\r\n  //       updateLeave({ id, ...fields });\r\n  //     }\r\n  //   });\r\n\r\n  //   handleDialogClose();\r\n  //};\r\n\r\n  // if (expenses_loading) {\r\n  //   return (\r\n\r\n  // if (leaves_loading) {\r\n  //   return (\r\n  //     <div>\r\n  //       <h2>Loading...Leaves</h2>\r\n  //     </div>\r\n  //   );\r\n  // }\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={leavesdata.filter(\r\n            (r) => r.reporting_email === loginLevel.loginEmail\r\n          )}\r\n          title=\"Leave Application\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <EditIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          // editable={{\r\n          //   onRowUpdate: (newData, oldData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         const dataUpdate = [...leavesdata];\r\n          //         const index = oldData.tableData.id;\r\n          //         dataUpdate[index] = newData;\r\n          //         setLeavesdata([...dataUpdate]);\r\n          //         //approve_Expense(newData);\r\n\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          // }}\r\n          options={{\r\n            filtering: true,\r\n            selection: true,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Approve_LeaveData}\r\n                  >\r\n                    Approve\r\n                  </Button>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Reject_LeaveData}\r\n                  >\r\n                    Reject\r\n                  </Button>\r\n                  {/* <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Save_LeaveData}\r\n                  >\r\n                    Update <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button> */}\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <CustomDialog\r\n          isOpen={isDialogOpen}\r\n          handleClose={handleLeaveFormDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscree={false}\r\n        >\r\n          <LeaveForm handleDialogClose={handleLeaveFormDialogClose} />\r\n        </CustomDialog>\r\n\r\n        <AlertDialogBox\r\n          onClose={handleLeaveFormAlertClose}\r\n          onConfirm={handleLeaveFormOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete Expenses\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableViewSummary.js",["1350","1351","1352"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Box } from \"@chakra-ui/react\";\r\n//import AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\n//import DeleteIcon from \"@material-ui/icons/Delete\";\r\n//import CheckIcon from \"@material-ui/icons/Check\";\r\n//import SearchIcon from \"@material-ui/icons/Search\";\r\n//import LeaveForm from \"./LeaveForm\";\r\n//import { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { AlertDialog } from \"../helpers/AlertDialogBox\";\r\n//import { useExpensesStatus } from \"./expenses/useExpensesStatus\";\r\nimport { useExpensesPeriod } from \"./expenses/useExpensesPeriod\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\n\r\n//const FILTERSTRING = \"Pending\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n  },\r\n  {\r\n    title: \"Date\",\r\n    field: \"date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n  },\r\n\r\n  { title: \"Description\", field: \"description\" },\r\n  { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n  { title: \"Status\", field: \"status\" },\r\n];\r\n\r\nexport default function ExpenseTableView({ year, month }) {\r\n  const classes = useStyles();\r\n  //const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  //const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const [totals, setTotals] = useState(0);\r\n  const [isCalc, setIsCalc] = useState(false);\r\n  //const { loadEmployees } = useEmployeesContext();\r\n  //const { expensesstatus, setExpStatusId } = useExpensesStatus();\r\n  const { expensesperiod, setExpPeriodYrId, setExpPeriodMthId } =\r\n    useExpensesPeriod();\r\n\r\n  useEffect(() => {\r\n    setExpPeriodYrId(year);\r\n    setExpPeriodMthId(month);\r\n    setIsCalc(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (expensesperiod) {\r\n      Calc_Totals();\r\n      setIsCalc(false);\r\n    }\r\n  }, [isCalc]);\r\n\r\n  const Calc_Totals = () => {\r\n    const amount = expensesperiod.reduce((acc, r) => {\r\n      if (r.status === \"Approved\" || r.status === \"Approve\") {\r\n        return acc + r.amount;\r\n      } else {\r\n        return acc;\r\n      }\r\n    }, 0);\r\n    setTotals(amount);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <Box maxW=\"100%\" pt=\"5px\" overflow=\"scroll\">\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={expensesperiod}\r\n          title=\"Leave Application\"\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            paging: false,\r\n            headerStyle: {\r\n              backgroundColor: \"rgba(75, 192, 192, 1)\",\r\n              color: \"white\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </Box>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableViewSummary.js",["1353","1354"],"import React, { useState, useEffect } from \"react\";\r\n//import { useHistory} from \"react-router-dom\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Box } from \"@chakra-ui/react\";\r\nimport {\r\n  //useSetRecoilState,\r\n  useRecoilValue,\r\n  //useRecoilState,\r\n  //useRecoilValueLoadable,\r\n} from \"recoil\";\r\nimport {\r\n  allowsPeriodState,\r\n  //allowsDataState,\r\n  //empidState,\r\n} from \"./data/atomdata\";\r\n//import { fetchDailyAllowancesSelector } from \"./data/selectordata\";\r\n//import AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\n//import DeleteIcon from \"@material-ui/icons/Delete\";\r\n//import CheckIcon from \"@material-ui/icons/Check\";\r\n//import SearchIcon from \"@material-ui/icons/Search\";\r\n//import ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\n//import { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useDailyAllowsPeriod } from \"./dailyallows/useDailyAllowsPeriod\";\r\n\r\n//const FILTERSTRING = \"Submitted\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n  },\r\n  { title: \"Period\", field: \"period\" },\r\n  { title: \"Location\", field: \"location\" },\r\n  { title: \"Manager\", field: \"manager_name\" },\r\n  { title: \"Days\", field: \"no_of_days\", type: \"numeric\" },\r\n  { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n  { title: \"Status\", field: \"status\" },\r\n];\r\n\r\nexport default function DailyAllowancesTable({ month, year }) {\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  const period = `${year}-${month}`;\r\n\r\n  //const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  //const [tmpallowsdata, setTmpallowsdata] = useState([]);\r\n  const allows_period = useRecoilValue(allowsPeriodState);\r\n  //const allows_empid = useRecoilValue(empidState);\r\n  //const [allowsdata, setAllowsdata] = useRecoilState(allowsDataState);\r\n  //const setEmpID = useSetRecoilState(empidState);\r\n  const title = `Site Allowances (${allows_period})`;\r\n  const { dailyallowsperiod, setDailyAllowsPeriodId } = useDailyAllowsPeriod();\r\n  // const {\r\n  //   dailyallowances,\r\n  //   loadPendingDailyAllowances,\r\n  //   singlebatch_dailyallowance,\r\n  //   singlebatch_dailyallowance_loading,\r\n  //   deleteDailyAllowance,\r\n  //   setEditDailyAllowanceID,\r\n  //   setIsDailyAllowanceEditingOn,\r\n  //   setIsDailyAllowanceEditingOff,\r\n  //   resetSingleDailyAllowance,\r\n  //   dailyallowance_period,\r\n  //   getSingleBatchDailyAllowance,\r\n  // } = useDailyAllowancesContext();\r\n\r\n  useEffect(() => {\r\n    setDailyAllowsPeriodId(period);\r\n  }, []);\r\n\r\n  //const handleDialogOpen = () => {\r\n    //console.log(\"allowsdetls\", allowsdata, allowsdataRef, singlebatch_dailyallowsdetl);\r\n    //setAllowsdata({ singlebatch_dailyallowsdetl });\r\n    //setIsDialogOpen(true);\r\n  //};\r\n\r\n  //const handleDialogClose = () => {\r\n    //setIsDialogOpen(false);\r\n    //getSingleBatchDailyAllowance(dailyallowance_period);\r\n  //};\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Box maxW=\"100%\" pt=\"5px\" overflow=\"scroll\">\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={dailyallowsperiod}\r\n          title={title}\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            paging: false,\r\n            headerStyle: {\r\n              backgroundColor: \"rgba(75, 192, 192, 1)\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </Box>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n  dialog: {\r\n    width: 1000,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\Export2Excel.js",["1355"],"import React, { useEffect } from \"react\";\r\nimport ReactExport from \"react-data-export\";\r\nimport { Button } from \"@chakra-ui/react\";\r\n\r\nconst ExcelFile = ReactExport.ExcelFile;\r\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\r\n//const ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\r\n\r\nconst Export2Excel = ({ filename, dataset, title }) => {\r\n  const hoccols = [\r\n    {\r\n      title: \"What is/are the findings?\",\r\n      width: { wch: 34 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"#F5FFFA\" } },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"#F5FFFA\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"What is/are the potential hazard(s)/risk(s)?\",\r\n      width: { wch: 34 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"#F5FFFA\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"Type / Category\",\r\n      width: { wch: 14 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"FF00FF00\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"What\",\r\n      width: { wch: 18 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"FF00FF00\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"What Details\",\r\n      width: { wch: 28 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"FF00FF00\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"Why\",\r\n      width: { wch: 18 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"FF00FF00\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"Why Details\",\r\n      width: { wch: 28 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"FF00FF00\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"Did a conversation take place?\",\r\n      width: { wch: 18 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"FF00FF00\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"Was there an agreed remedial/corrective or preventive action? \",\r\n      width: { wch: 28 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"FF00FF00\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"Follow-up required?\",\r\n      width: { wch: 18 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"FF00FF00\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"Work Related?\",\r\n      width: { wch: 18 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"FF00FF00\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"Raised By\",\r\n      width: { wch: 28 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"FF00FF00\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"Raised On\",\r\n      width: { wch: 18 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"FF00FF00\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"Company\",\r\n      width: { wch: 28 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"FF00FF00\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"Location\",\r\n      width: { wch: 28 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"FF00FF00\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n  ];\r\n\r\n  const hocdata = dataset.map((rec, index) => {\r\n    return [\r\n      {\r\n        value: rec.findings ? rec.findings : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.risks ? rec.risks : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.category ? rec.category : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.what ? rec.what : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.what_details ? rec.what_details : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.why ? rec.why : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.why_details ? rec.why_details : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.discussion ? rec.discussion : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.action ? rec.action : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.isfollowup ? rec.isfollowup : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.isworkrelated ? rec.isworkrelated : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.raisedby ? rec.raisedby : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.raisedon ? rec.raisedon : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.company ? rec.company : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.location ? rec.location : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n    ];\r\n  });\r\n\r\n  const multiDataSet = [\r\n    // {\r\n    //   columns: cols1,\r\n    //   data: [],\r\n    // },\r\n    {\r\n      columns: hoccols,\r\n      data: hocdata,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    // <ExcelFile element={<Button>Export to Excel</Button>} filename={filename}>\r\n    //   <ExcelSheet dataSet={multiDataSet1} name=\"Organization\" />\r\n    // </ExcelFile>\r\n\r\n    <ExcelFile\r\n      element={\r\n        <Button colorScheme=\"teal\" variant=\"solid\">\r\n          Download\r\n        </Button>\r\n      }\r\n      filename={filename}\r\n    >\r\n      <ExcelSheet dataSet={multiDataSet} name={title} />\r\n    </ExcelFile>\r\n\r\n    // <ExcelFile filename={filename}>\r\n    //   <ExcelSheet dataSet={multiDataSet} name=\"HOC\" />\r\n    // </ExcelFile>\r\n\r\n    // <ExcelFile element={<Button>Export to Excel</Button>} filename={filename}>\r\n    //   <ExcelSheet data={dataset} name={title}>\r\n    //     <ExcelColumn label=\"Name\" value=\"name\" />\r\n    //     <ExcelColumn label=\"From Date\" value=\"from_date\" />\r\n    //     <ExcelColumn label=\"To Date\" value=\"to_date\" />\r\n    //     <ExcelColumn label=\"No of Days\" value=\"no_of_days\" />\r\n    //     <ExcelColumn label=\"Reason\" value=\"reason\" />\r\n    //     <ExcelColumn label=\"Status\" value=\"status\" />\r\n    //   </ExcelSheet>\r\n    //</ExcelFile>\r\n  );\r\n};\r\n\r\nexport default Export2Excel;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\useAddDailyAllowsDetls.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useAddDailyAllows.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableViewStaff.js",["1356","1357","1358","1359"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\nimport {\r\n  Box,\r\n  Grid,\r\n  Heading,\r\n  GridItem,\r\n  //Icon,\r\n  IconButton,\r\n  Stack,\r\n  Spacer,\r\n} from \"@chakra-ui/react\";\r\nimport { EditIcon } from \"@chakra-ui/icons\";\r\n//import MaterialTable from \"material-table\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { List } from \"@material-ui/core\";\r\nimport {  useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\n//import { expenses_url } from \"../utils/constants\";\r\nimport { useExpenses } from \"./expenses/useExpenses\";\r\n\r\n//const drawerWidth = 240;\r\n\r\n// const columns = [\r\n//   {\r\n//     title: \"Name\",\r\n//     field: \"name\",\r\n//   },\r\n//   {\r\n//     title: \"Date\",\r\n//     field: \"date\",\r\n//     type: \"date\",\r\n//     dateSetting: { locale: \"en-GB\" },\r\n//   },\r\n\r\n//   { title: \"Description\", field: \"description\" },\r\n//   { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n//   { title: \"Status\", field: \"status\" },\r\n// ];\r\n\r\n// const fetchExpensesDetails = selector({\r\n//   key: \"fetchExpensesDetailsSelector\",\r\n//   get: async ({ get }) => {\r\n//     try {\r\n//       const { data } = await axios.get(expenses_url);\r\n\r\n//       return data;\r\n//     } catch (error) {\r\n//       throw error;\r\n//     }\r\n//   },\r\n// });\r\n\r\nconst ExpenseTableViewStaff = () => {\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { expenses, setFilter, setExpenseId } = useExpenses();\r\n  //const [userdata, setUserdata] = useState([]);\r\n  //const [userdata, setUserdata] = useRecoilState(userdatastate);\r\n  // const ExpensesDetails = useRecoilValueLoadable(fetchExpensesDetails);\r\n  // const { state, contents } = ExpensesDetails;\r\n  // const { expenses_loading, expenses_error, loadEmpExpenses } =\r\n    useExpensesContext();\r\n\r\n  useEffect(() => {\r\n    setFilter(loginLevel.loginUserId);\r\n  }, []);\r\n\r\n  return (\r\n    <List className={classes.root}>\r\n      <Grid direction=\"row\">\r\n        <Stack direction=\"row\">\r\n          <Heading as=\"h4\" size=\"md\">\r\n            Expenses Claims (Pending)\r\n          </Heading>\r\n          <Spacer />\r\n          <IconButton\r\n            // variant=\"outline\"\r\n            size=\"md\"\r\n            aria-label=\"Edit\"\r\n            icon={<EditIcon />}\r\n            onClick={() => navigate(\"/expenses\")}\r\n          />\r\n        </Stack>\r\n        {/* <Heading as=\"h4\" size=\"md\">\r\n          Expenses Claims (Pending)\r\n        </Heading> */}\r\n        {expenses\r\n          .filter((i) => i.status === \"Pending\")\r\n          .map((row) => {\r\n            return (\r\n              <Grid\r\n                key={row.id}\r\n                templateColumns=\"repeat(15, 1fr)\"\r\n                gap={3}\r\n                p={1}\r\n              >\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.name}</Box>\r\n                </GridItem>\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.date}</Box>\r\n                </GridItem>\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.description}</Box>\r\n                </GridItem>\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.amount}</Box>\r\n                </GridItem>\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.status}</Box>\r\n                </GridItem>\r\n              </Grid>\r\n              // <ListItem key={row.id}>\r\n              //   {/* <Grid item sm={2} align=\"center\">\r\n              //     <ListItemText>{row.name}</ListItemText>\r\n              //   </Grid> */}\r\n              //   <Grid item sm={3} align=\"center\">\r\n              //     <ListItemText>{row.date}</ListItemText>\r\n              //   </Grid>\r\n              //   <Grid item sm={3} align=\"center\">\r\n              //     <ListItemText>{row.description}</ListItemText>\r\n              //   </Grid>\r\n              //   <Grid item sm={3} align=\"center\">\r\n              //     <ListItemText>{row.amount}</ListItemText>\r\n              //   </Grid>\r\n              //   <Grid item sm={3} align=\"center\">\r\n              //     <ListItemText>{row.status}</ListItemText>\r\n              //   </Grid>\r\n              // </ListItem>\r\n            );\r\n          })}\r\n      </Grid>\r\n    </List>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n\r\nexport default ExpenseTableViewStaff;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\TrainingsTableViewStaff.js",["1360","1361"],"import React, {  useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\nimport {\r\n  Box,\r\n  Grid,\r\n  GridItem,\r\n  Heading,\r\n  IconButton,\r\n  Spacer,\r\n  Stack,\r\n} from \"@chakra-ui/react\";\r\nimport { EditIcon } from \"@chakra-ui/icons\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { differenceInDays } from \"date-fns\";\r\nimport { List } from \"@material-ui/core\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useTrainings } from \"./trainings/useTrainings\";\r\n\r\n//const drawerWidth = 240;\r\n\r\nconst TrainingsTableViewStaff = () => {\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const { trainings,  setFilter } = useTrainings();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const today = Date().toLocaleString();\r\n\r\n  useEffect(() => {\r\n    setFilter(loginLevel.loginUserId);\r\n  }, []);\r\n\r\n  return (\r\n    <List className={classes.root}>\r\n      <Grid direction=\"row\">\r\n        <Stack direction=\"row\">\r\n          <Heading as=\"h4\" size=\"md\">\r\n            Trainings Schedule Expiry Within 90 days\r\n          </Heading>\r\n          <Spacer />\r\n          <IconButton\r\n            // variant=\"outline\"\r\n            size=\"md\"\r\n            aria-label=\"Edit\"\r\n            icon={<EditIcon />}\r\n            onClick={() => navigate(\"/singleemployee\")}\r\n          />\r\n        </Stack>\r\n        {/* <Heading as=\"h4\" size=\"md\">\r\n          Trainings Schedule Expiry Within 90 days\r\n        </Heading> */}\r\n        {trainings\r\n          .filter(\r\n            (i) =>\r\n              differenceInDays(new Date(i.expiry_date), new Date(today)) < 90 &&\r\n              differenceInDays(new Date(today), new Date(i.expiry_date)) < 0\r\n          )\r\n          .map((row) => {\r\n            return (\r\n              <Grid templateColumns=\"repeat(9, 1fr)\" gap={3} p={1}>\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.institute}</Box>\r\n                </GridItem>\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.course}</Box>\r\n                </GridItem>\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.expiry_date}</Box>\r\n                </GridItem>\r\n              </Grid>\r\n              // <ListItem key={row.id}>\r\n              //   <Grid item sm={3} align=\"center\">\r\n              //     <ListItemText>{row.institute}</ListItemText>\r\n              //   </Grid>\r\n              //   <Grid item sm={3} align=\"center\">\r\n              //     <ListItemText>{row.course}</ListItemText>\r\n              //   </Grid>\r\n              //   <Grid item sm={3} align=\"center\">\r\n              //     <ListItemText>{row.expiry_date}</ListItemText>\r\n              //   </Grid>\r\n              // </ListItem>\r\n            );\r\n          })}\r\n      </Grid>\r\n    </List>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n\r\nexport default TrainingsTableViewStaff;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableViewStaff.js",["1362","1363","1364"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Grid,\r\n  Heading,\r\n  GridItem,\r\n  //Icon,\r\n  IconButton,\r\n  Stack,\r\n  Spacer,\r\n} from \"@chakra-ui/react\";\r\nimport { EditIcon } from \"@chakra-ui/icons\";\r\nimport { List } from \"@material-ui/core\";\r\nimport {  useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\n//import { useLeavesContext } from \"../context/leaves_context\";\r\nimport { useLeaves } from \"./leaves/useLeaves\";\r\n\r\n//const drawerWidth = 240;\r\n\r\n// const fetchExpensesDetails = selector({\r\n//   key: \"fetchExpensesDetailsSelector\",\r\n//   get: async ({ get }) => {\r\n//     try {\r\n//       const { data } = await axios.get(expenses_url);\r\n//       const wpexpirydata = data;\r\n\r\n//       return data;\r\n//     } catch (error) {\r\n//       throw error;\r\n//     }\r\n//   },\r\n// });\r\n\r\nconst LeaveTableViewStaff = () => {\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const { leaves,  setFilter } = useLeaves();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  //const [userdata, setUserdata] = useState([]);\r\n  //const [userdata, setUserdata] = useRecoilState(userdatastate);\r\n  //const ExpensesDetails = useRecoilValueLoadable(fetchExpensesDetails);\r\n  //const { state, contents } = ExpensesDetails;\r\n  //const { editEmployeeID } = useEmployeesContext();\r\n  //const { leaves_loading, leaves_error, loadEmpLeaves } = useLeavesContext();\r\n\r\n  useEffect(() => {\r\n    setFilter(loginLevel.loginUserId);\r\n  }, []);\r\n\r\n  return (\r\n    <List className={classes.root}>\r\n      <Grid direction=\"row\">\r\n        <Stack direction=\"row\">\r\n          <Heading as=\"h4\" size=\"md\">\r\n            Leaves Schedule\r\n          </Heading>\r\n          <Spacer />\r\n          <IconButton\r\n            // variant=\"outline\"\r\n            size=\"md\"\r\n            aria-label=\"Edit\"\r\n            icon={<EditIcon />}\r\n            onClick={() => navigate(\"/leave\")}\r\n          />\r\n        </Stack>\r\n\r\n        {leaves\r\n          .filter((i) => i.status === \"Pending\")\r\n          .map((row) => {\r\n            return (\r\n              <Grid\r\n                key={row.id}\r\n                templateColumns=\"repeat(12, 1fr)\"\r\n                gap={3}\r\n                p={1}\r\n              >\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.from_date}</Box>\r\n                </GridItem>\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.to_date}</Box>\r\n                </GridItem>\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.reason}</Box>\r\n                </GridItem>\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.status}</Box>\r\n                </GridItem>\r\n              </Grid>\r\n            );\r\n          })}\r\n      </Grid>\r\n    </List>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n\r\nexport default LeaveTableViewStaff;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveFormAdmin.js",["1365","1366"],"import React, { useState} from \"react\";\r\nimport {\r\n  //Button,\r\n  //Icon,\r\n  TextField,\r\n  Paper,\r\n  Typography,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\n//import { useLeaves } from \"./leaves/useLeaves\";\r\nimport { useAddLeaves } from \"./leaves/useAddLeaves\";\r\n//import { useDeleteLeaves } from \"./leaves/useDeleteLeaves\";\r\nimport { useUpdateLeaves } from \"./leaves/useUpdateLeaves\";\r\n\r\n// const initial_state = {\r\n//   name: \"\",\r\n//   to_date: \"\",\r\n//   from_date: \"\",\r\n//   reason: \"\",\r\n//   status: \"Pending\",\r\n//   no_of_days: 0,\r\n//   leave_bal: 0,\r\n// };\r\n\r\nconst LeaveForm = ({ formdata, setFormdata, handleDialogClose }) => {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast()\r\n  //const { leaves, filter, setFilter, setLeaveId } = useLeaves();\r\n  const updateLeaves = useUpdateLeaves();\r\n  const addLeaves = useAddLeaves();\r\n  //const [state, setState] = useState(initial_state);\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { handleSubmit, control } = useForm();\r\n  //const initialValues = Object.values(initial_state).join(\"\");\r\n  const { isLeaveEditing, editLeaveID } = useLeavesContext();\r\n\r\n  //console.log(\"leave\", isLeaveEditing, formdata);\r\n  const onSubmit = (data) => {\r\n    console.log(\"leave\", data);\r\n    if (isLeaveEditing) {\r\n      updateLeaves({ id: editLeaveID, ...data });\r\n       toast({\r\n         title: \"Leave record being rejected!\",\r\n         status: \"success\",\r\n       });\r\n    } else {\r\n      addLeaves({\r\n        ...data,\r\n        empid: loginLevel.loginUserId,\r\n        reporting_email: loginLevel.reporting_email,\r\n      });\r\n    }\r\n\r\n    //history.push(\"/leave\");\r\n    handleDialogClose();\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   setState(initial_state);\r\n  //   setState({ ...formdata });\r\n  //   setState({ ...formdata });\r\n  //   console.log(\"laeve form\",state)\r\n  // }, [initialValues]);\r\n\r\n  return (\r\n    <div>\r\n      <Paper className={classes.root}>\r\n        <Typography variant=\"h5\" component=\"h3\">\r\n          LEAVE FORM\r\n        </Typography>\r\n        <Typography component=\"p\">Leave Application</Typography>\r\n        <Divider />\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <div>\r\n            <Controller\r\n              name=\"name\"\r\n              control={control}\r\n              defaultValue={formdata.name}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Name\"\r\n                    id=\"margin-normal\"\r\n                    name=\"name\"\r\n                    defaultValue={formdata.name}\r\n                    //value={value}\r\n                    className={classes.textField}\r\n                    onChange={(e) => {\r\n                      console.log(e.target.value);\r\n                      onChange(e.target.value);\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    //select\r\n                  >\r\n                    {/* {employees.map((e) => {\r\n                      return (\r\n                        <MenuItem key={e.name} value={e.name}>\r\n                          {e.name}\r\n                        </MenuItem>\r\n                      );\r\n                    })} */}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              // rules={{ required: \"Name required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"from_date\"\r\n              control={control}\r\n              defaultValue={formdata.from_date}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"From Date\"\r\n                    type=\"date\"\r\n                    id=\"margin-normal\"\r\n                    name=\"from_date\"\r\n                    defaultValue={formdata.from_date}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                );\r\n              }}\r\n              rules={{ required: \"From Date is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"to_date\"\r\n              control={control}\r\n              defaultValue={formdata.to_date}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"To Date\"\r\n                    id=\"margin-normal\"\r\n                    type=\"date\"\r\n                    name=\"to_date\"\r\n                    defaultValue={formdata.to_date}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                );\r\n              }}\r\n              rules={{ required: \"To Date is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"leave_bal\"\r\n              control={control}\r\n              defaultValue={formdata.leave_bal}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    disable\r\n                    label=\"Leave Balance\"\r\n                    type=\"number\"\r\n                    id=\"standard-number\"\r\n                    name=\"leave_bal\"\r\n                    defaultValue={formdata.leave_bal}\r\n                    className={classes.textField}\r\n                    //onChange={onChange}\r\n                    onChange={(e) => {\r\n                      onChange(parseInt(e.target.value, 10));\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                );\r\n              }}\r\n              //rules={{ required: \"IC No required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"no_of_days\"\r\n              control={control}\r\n              defaultValue={formdata.no_of_days}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"No Of Days\"\r\n                    type=\"number\"\r\n                    id=\"standard-number\"\r\n                    name=\"no_of_days\"\r\n                    defaultValue={formdata.no_of_days}\r\n                    className={classes.textField}\r\n                    //onChange={onChange}\r\n                    onChange={(e) => {\r\n                      onChange(parseInt(e.target.value, 10));\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                     InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                 \r\n                );\r\n              }}\r\n              //rules={{ required: \"IC No required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"reason\"\r\n              control={control}\r\n              defaultValue={formdata.reason}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Reason\"\r\n                    id=\"margin-normal\"\r\n                    name=\"reason\"\r\n                    defaultValue={formdata.reason}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                     InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                  \r\n                );\r\n              }}\r\n              // rules={{ required: \"Reason is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"status\"\r\n              control={control}\r\n              defaultValue={formdata.status}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Status\"\r\n                    id=\"margin-normal\"\r\n                    name=\"status\"\r\n                    defaultValue={formdata.status}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                    // select\r\n                  >\r\n                    {/* <MenuItem value=\"Pending\">Pending</MenuItem>\r\n                    <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n                    <MenuItem value=\"Approve\">Approve</MenuItem>\r\n                    <MenuItem value=\"Reject\">Reject</MenuItem> */}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            {/* <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              onClick={handleSubmit(onSubmit)}\r\n            >\r\n              Submit <Icon className={classes.rightIcon}>send</Icon>\r\n            </Button> */}\r\n          </div>\r\n        </form>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 400,\r\n  },\r\n}));\r\n\r\nexport default LeaveForm;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useLeaves.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\HocForm.js",["1367","1368","1369","1370","1371","1372"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, Icon, TextField, Paper, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport * as emailjs from \"emailjs-com\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\n//import { useExpensesContext } from \"../context/expenses_context\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport { useHoc } from \"./hoc/useHoc\";\r\nimport { useAddHoc } from \"./hoc/useAddHoc\";\r\n//import { useDeleteHoc } from \"./hoc/useDeleteHoc\";\r\nimport { useUpdateHoc } from \"./hoc/useUpdateHoc\";\r\nimport { useHoccategory } from \"./hoccategory/useHoccategory\";\r\nimport { useHocwhat } from \"./hocwhat/useHocwhat\";\r\nimport { useHocwhatdetails } from \"./hocwhatdetails/useHocwhatdetails\";\r\nimport { useHocwhy } from \"./hocwhy/useHocwhy\";\r\nimport { useHocwhydetails } from \"./hocwhydetails/useHocwhydetails\";\r\nimport { useHoclocation } from \"./hoclocation/useHoclocation\";\r\n\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\n\r\nconst HocForm = ({ formdata, setFormdata, handleDialogClose, isEditId }) => {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  //const { hoc, filter, setFilter, setHocId } = useHoc();\r\n  const { hocwhat } = useHocwhat();\r\n  const { hocwhatdetails, setHocwhatdetailsId } = useHocwhatdetails();\r\n  const { hocwhy, setHocwhyId } = useHocwhy();\r\n  const { hocwhydetails, setHocwhydetailsId } = useHocwhydetails();\r\n  const { hoccategory } = useHoccategory();\r\n  const { hoclocation, setHoclocationId } = useHoclocation();\r\n  const updateHoc = useUpdateHoc();\r\n  const addHoc = useAddHoc();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const [category, setCategory] = useState(\"\" || formdata.category);\r\n  const [whatstatus, setWhatstatus] = useState(\"\" || formdata.what);\r\n  const [whystatus, setWhystatus] = useState(\"\" || formdata.why);\r\n\r\n  const { handleSubmit, control } = useForm({\r\n    defaultValues: {\r\n      ...formdata,\r\n    },\r\n  });\r\n\r\n  const handleSentEmail = (data) => {\r\n    const { date } = data;\r\n    //console.log(\"expense form\", loginLevel);\r\n    var emaildata = {\r\n      to_name: loginLevel.loginUser,\r\n      to_email: loginLevel.loginEmail,\r\n      message: `Your expenses claim application dated on ${date} has been successfully submitted for approval`,\r\n      cc_to: loginLevel.reporting_email,\r\n    };\r\n\r\n    emailjs.send(SERVICE_ID, TEMPLATE_ID, emaildata, USER_ID).then(\r\n      function (response) {\r\n        console.log(response.status, response.text);\r\n        toast({\r\n          title: `Email has sent successfully to ${emaildata.to_email}!`,\r\n          status: \"success\",\r\n        });\r\n      },\r\n      function (err) {\r\n        console.log(err);\r\n        toast({\r\n          title: `Email has fail to send to ${emaildata.to_email}!`,\r\n          status: \"warning\",\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  const onSubmit = (data, e) => {\r\n    e.preventDefault();\r\n\r\n    if (data.id) {\r\n      const { id, tableData, ...fields } = data;\r\n      updateHoc({ id, ...fields });\r\n    } else {\r\n      const { tableData, ...fields } = data;\r\n      addHoc({ ...fields, empid: loginLevel.loginUserId });\r\n      //handleSentEmail(data);\r\n    }\r\n\r\n    handleDialogClose();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setHoclocationId(\"C\");\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (whatstatus === \"\") {\r\n      setHocwhatdetailsId((prev) => (prev = \"none\"));\r\n    } else {\r\n      setHocwhatdetailsId((prev) => (prev = whatstatus));\r\n    }\r\n  }, [whatstatus]);\r\n\r\n  useEffect(() => {\r\n    if (category === \"Positive Act\") {\r\n      setHocwhyId((prev) => (prev = \"none\"));\r\n      setHocwhydetailsId((prev) => (prev = \"none\"));\r\n    } else {\r\n      setHocwhydetailsId((prev) => (prev = whystatus));\r\n    }\r\n  }, [whystatus, category]);\r\n\r\n  return (\r\n    <div>\r\n      <Paper className={classes.root}>\r\n        <Typography variant=\"h5\" component=\"h3\">\r\n          HOC FORM\r\n        </Typography>\r\n        <Typography component=\"p\">HOC Form</Typography>\r\n\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <div>\r\n            <Controller\r\n              name=\"findings\"\r\n              control={control}\r\n              defaultValue={formdata.findings}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"What is/are the findings?\"\r\n                    id=\"margin-findings\"\r\n                    name=\"findings\"\r\n                    defaultValue={formdata.findings}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    multiline\r\n                    rows={2}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  ></TextField>\r\n                );\r\n              }}\r\n              rules={{ required: \"Findings is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"risks\"\r\n              control={control}\r\n              defaultValue={formdata.risks}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"What is/are the potential hazard(s)/risk(s)?\"\r\n                    id=\"margin-risks\"\r\n                    name=\"risks\"\r\n                    defaultValue={formdata.risks}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    multiline\r\n                    rows={2}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  ></TextField>\r\n                );\r\n              }}\r\n              rules={{ required: \"Potential hazard/risk is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"category\"\r\n              control={control}\r\n              defaultValue={formdata.category}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Type/Category\"\r\n                    //type=\"date\"\r\n                    id=\"margin-category\"\r\n                    name=\"formdata.category\"\r\n                    value={value}\r\n                    className={classes.textField}\r\n                    onChange={(e) => {\r\n                      onChange(e.target.value);\r\n                      setCategory((prev) => (prev = e.target.value));\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    // InputLabelProps={{\r\n                    //   shrink: true,\r\n                    // }}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"\">None</MenuItem>\r\n                    {hoccategory &&\r\n                      hoccategory.map((rec) => {\r\n                        return (\r\n                          <MenuItem key={rec.id} value={rec.description}>\r\n                            {rec.description}\r\n                          </MenuItem>\r\n                        );\r\n                      })}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              rules={{ required: \"Category is required\" }}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <Controller\r\n              name=\"what\"\r\n              control={control}\r\n              defaultValue={formdata.what}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"What\"\r\n                    id=\"margin-what\"\r\n                    name=\"what\"\r\n                    defaultValue={formdata.what}\r\n                    className={classes.textField}\r\n                    onChange={(e) => {\r\n                      onChange(e.target.value);\r\n                      setWhatstatus((prev) => (prev = e.target.value));\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"\">None</MenuItem>\r\n                    {hocwhat &&\r\n                      hocwhat\r\n                        .filter((r) => {\r\n                          if (category === \"Positive Act\") {\r\n                            return r.positiveact;\r\n                          } else {\r\n                            return r.unsafeact;\r\n                          }\r\n                        })\r\n                        .map((rec) => {\r\n                          return (\r\n                            <MenuItem key={rec.id} value={rec.description}>\r\n                              {rec.description}\r\n                            </MenuItem>\r\n                          );\r\n                        })}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"What is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"what_details\"\r\n              control={control}\r\n              defaultValue={formdata.what_details}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"What Details\"\r\n                    id=\"margin-whatdetails\"\r\n                    name=\"what_details\"\r\n                    defaultValue={formdata.what_details}\r\n                    value={value}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"\">None</MenuItem>\r\n                    {hocwhatdetails &&\r\n                      hocwhatdetails\r\n                        //.filter((r) => r.group === \"What Details\")\r\n                        .map((rec) => {\r\n                          return (\r\n                            <MenuItem key={rec.id} value={rec.description}>\r\n                              {rec.description}\r\n                            </MenuItem>\r\n                          );\r\n                        })}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"What detail is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"why\"\r\n              control={control}\r\n              defaultValue={formdata.why}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Why\"\r\n                    //type=\"number\"\r\n                    id=\"standard-why\"\r\n                    name=\"why\"\r\n                    defaultValue={formdata.why}\r\n                    className={classes.textField}\r\n                    //onChange={onChange}\r\n                    onChange={(e) => {\r\n                      onChange(e.target.value);\r\n                      setWhystatus((prev) => (prev = e.target.value));\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"\">None</MenuItem>\r\n                    {hocwhy &&\r\n                      hocwhy\r\n                        //.filter((r) => category === \"Positive Art\")\r\n                        .map((rec) => {\r\n                          return (\r\n                            <MenuItem key={rec.id} value={rec.description}>\r\n                              {rec.description}\r\n                            </MenuItem>\r\n                          );\r\n                        })}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Why is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"why_details\"\r\n              control={control}\r\n              defaultValue={formdata.why_details}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Why Details\"\r\n                    id=\"margin-whydetails\"\r\n                    name=\"why_details\"\r\n                    defaultValue={formdata.why_details}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"\">None</MenuItem>\r\n                    {hocwhydetails &&\r\n                      hocwhydetails.map((rec) => {\r\n                        return (\r\n                          <MenuItem key={rec.id} value={rec.description}>\r\n                            {rec.description}\r\n                          </MenuItem>\r\n                        );\r\n                      })}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Why detail is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"discussion\"\r\n              control={control}\r\n              defaultValue={formdata.discussion}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Did a conversation take place?\"\r\n                    id=\"margin-discussion\"\r\n                    name=\"discussion\"\r\n                    defaultValue={formdata.discussion}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"Yes\">Yes</MenuItem>\r\n                    <MenuItem value=\"No\">No</MenuItem>\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"action\"\r\n              control={control}\r\n              defaultValue={formdata.action}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Was there an agreed remedial/corrective or preventive action? \"\r\n                    id=\"margin-action\"\r\n                    name=\"action\"\r\n                    defaultValue={formdata.action}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    multiline\r\n                    rows={2}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  ></TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"isfollowup\"\r\n              control={control}\r\n              defaultValue={formdata.isfollowup}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Follow-up required?\"\r\n                    id=\"standard-isfollowup\"\r\n                    name=\"isfollowup\"\r\n                    defaultValue={formdata.isfollowup}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"Yes\">Yes</MenuItem>\r\n                    <MenuItem value=\"No\">No</MenuItem>\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"IC No required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"isworkrelated\"\r\n              control={control}\r\n              defaultValue={formdata.isworkrelated}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Work Related?\"\r\n                    id=\"margin-workrelated\"\r\n                    name=\"isworkrelated\"\r\n                    defaultValue={formdata.isworkrelated}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"Yes\">Yes</MenuItem>\r\n                    <MenuItem value=\"No\">No</MenuItem>\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"raisedby\"\r\n              control={control}\r\n              defaultValue={formdata.raisedby}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Raised By\"\r\n                    id=\"margin-raisedby\"\r\n                    name=\"raisedby\"\r\n                    defaultValue={formdata.raisedby}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    inputProps={{ readOnly: true }}\r\n                  ></TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"raisedon\"\r\n              control={control}\r\n              defaultValue={formdata.raisedon}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Raised On\"\r\n                    id=\"margin-raisedon\"\r\n                    name=\"raisedon\"\r\n                    type=\"date\"\r\n                    defaultValue={formdata.raisedon}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  ></TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"company\"\r\n              control={control}\r\n              defaultValue={formdata.company}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Company\"\r\n                    id=\"margin-company\"\r\n                    name=\"company\"\r\n                    defaultValue={formdata.company}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    inputProps={{ readOnly: true }}\r\n                  ></TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"location\"\r\n              control={control}\r\n              defaultValue={formdata.location}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Location\"\r\n                    id=\"margin-location\"\r\n                    name=\"location\"\r\n                    defaultValue={formdata.location}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"\">None</MenuItem>\r\n                    {hoclocation &&\r\n                      hoclocation.map((rec) => {\r\n                        return (\r\n                          <MenuItem key={rec.id} value={rec.name}>\r\n                            {rec.name}\r\n                          </MenuItem>\r\n                        );\r\n                      })}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n          {/* <div>\r\n            <Controller\r\n              name=\"department\"\r\n              control={control}\r\n              defaultValue={formdata.department}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Department\"\r\n                    id=\"margin-department\"\r\n                    name=\"department\"\r\n                    defaultValue={formdata.department}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  ></TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div> */}\r\n          <div>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              //onClick={() => handleSubmit(onSubmit)()}\r\n            >\r\n              Save <Icon className={classes.rightIcon}>send</Icon>\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 500,\r\n  },\r\n}));\r\n\r\nexport default HocForm;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useExpenses.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\useAddTrainings.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\useUpdateTrainings.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\useTrainings.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\institutes\\useInstitutes.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\institutes\\useUpdateInstitutes.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\DepartmentsTable.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\institutes\\useAddInstitutes.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\institutes\\useDeleteInstitutes.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\DeductionsTable.js",["1373"],"import React, { useEffect} from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport { usePayItems } from \"./payitems/usePayItems\";\r\nimport { useUpdatePayItems } from \"./payitems/useUpdatePayItems\";\r\nimport { useDeletePayItems } from \"./payitems/useDeletePayItems\";\r\nimport { useAddPayItems } from \"./payitems/useAddPayItems\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n  },\r\n];\r\n\r\nexport default function UpdateDeductions() {\r\n  const classes = useStyles();\r\n  const { payitems, setPayItemId } = usePayItems();\r\n  const updatePayItems = useUpdatePayItems();\r\n  const deletePayItems = useDeletePayItems();\r\n  const addPayItems = useAddPayItems();\r\n\r\n    \r\n  const update_Deduction = (data) => {\r\n    const { id, rec_id, ...fields } = data;\r\n    updatePayItems({ id, ...fields });\r\n  };\r\n\r\n  const add_Deduction = (data) => {\r\n    const fields = {...data, pay_type:\"Deductions\"}\r\n    addPayItems(fields);\r\n  };\r\n\r\n  const delete_Deduction = (data) => {\r\n    const { id } = data;\r\n    deletePayItems(id);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setPayItemId(\"Deductions\");\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={payitems}\r\n          title=\"Deductions\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  add_Deduction(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  update_Deduction(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  delete_Deduction(oldData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpEducations.js",["1374"],"import React, { useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useEducations } from \"./educations/useEducations\";\r\nimport { useUpdateEducations } from \"./educations/useUpdateEducations\";\r\nimport { useAddEducations } from \"./educations/useAddEducations\";\r\nimport { useDeleteEducations } from \"./educations/useDeleteEducations\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Institution\",\r\n    field: \"institution\",\r\n  },\r\n  {\r\n    title: \"Course\",\r\n    field: \"course\",\r\n  },\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editComponent: (props) => (\r\n      <TextField\r\n        defaultValue={props.value || new Date()}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        type=\"date\"\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editComponent: (props) => (\r\n      <TextField\r\n        defaultValue={props.value || new Date()}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        type=\"date\"\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    title: \"Archievement\",\r\n    field: \"archievement\",\r\n  },\r\n\r\n  { title: \"Grade\", field: \"grade\" },\r\n  {\r\n    title: \"Remark\",\r\n    field: \"remark\",\r\n  },\r\n];\r\n\r\nexport default function Emp_Educations({\r\n  educationdata,\r\n  setEducationdata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const { educations, setEducationId } = useEducations();\r\n  const updateEducations = useUpdateEducations();\r\n  const addEducations = useAddEducations();\r\n  const deleteEducations = useDeleteEducations();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n\r\n  useEffect(() => {\r\n    setEducationId(editEmployeeID);\r\n  }, []);\r\n\r\n  const update_Education = (data) => {\r\n    const { id, rec_id, tableData, ...fields } = data;\r\n    updateEducations({ id, ...fields });\r\n  };\r\n\r\n  const add_Education = (data) => {\r\n    addEducations({ ...data, empid: editEmployeeID });\r\n  };\r\n\r\n  const delete_Education = (data) => {\r\n    const { id } = data;\r\n    deleteEducations(id);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={educations}\r\n          title=\"Education\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  add_Education(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  update_Education(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  // const dataDelete = [...educationdata];\r\n                  // const index = oldData.tableData.id;\r\n                  // dataDelete.splice(index, 1);\r\n                  delete_Education(oldData);\r\n\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\AllowancesTable.js",["1375"],"import React, { useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { usePayItems } from \"./payitems/usePayItems\";\r\nimport { useUpdatePayItems } from \"./payitems/useUpdatePayItems\";\r\nimport { useDeletePayItems } from \"./payitems/useDeletePayItems\";\r\nimport { useAddPayItems } from \"./payitems/useAddPayItems\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n  },\r\n];\r\n\r\nexport default function UpdateAllowances() {\r\n  const classes = useStyles();\r\n  const { payitems, setPayItemId } = usePayItems();\r\n  const updatePayItems = useUpdatePayItems();\r\n  const deletePayItems = useDeletePayItems();\r\n  const addPayItems = useAddPayItems();\r\n\r\n  const update_Allowance = (data) => {\r\n    const { id, rec_id, ...fields } = data;\r\n    updatePayItems({ id, ...fields });\r\n  };\r\n\r\n  const add_Allowance = async (data) => {\r\n    const fields = { ...data, pay_type: \"Allowances\" };\r\n    addPayItems(fields);\r\n  };\r\n\r\n  const delete_Allowance = (data) => {\r\n    const { id } = data;\r\n    deletePayItems(id);\r\n  };\r\n\r\n  useEffect(() => {\r\n   setPayItemId(\"Allowances\");\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={payitems}\r\n          title=\"Allowances\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  add_Allowance(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  update_Allowance(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  delete_Allowance(oldData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpExperiences.js",["1376","1377"],"import React, { useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\nimport { useExperiences } from \"./experiences/useExperiences\";\r\nimport { useUpdateExperiences } from \"./experiences/useUpdateExperiences\";\r\nimport { useAddExperiences } from \"./experiences/useAddExperiences\";\r\nimport { useDeleteExperiences } from \"./experiences/useDeleteExperiences\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Company\",\r\n    field: \"company\",\r\n  },\r\n  {\r\n    title: \"Location\",\r\n    field: \"location\",\r\n  },\r\n  {\r\n    title: \"Position\",\r\n    field: \"position\",\r\n  },\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        defaultValue={props.value || new Date()}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        type=\"date\"\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        defaultValue={props.value || new Date()}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        type=\"date\"\r\n      />\r\n    ),\r\n  },\r\n  { title: \"Remark\", field: \"remark\" },\r\n];\r\n\r\nexport default function Emp_Experiences({\r\n  experiencedata,\r\n  setExperiencedata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const { experiences, setExperienceId } = useExperiences();\r\n  const updateExperiences = useUpdateExperiences();\r\n  const addExperiences = useAddExperiences();\r\n  const deleteExperiences = useDeleteExperiences();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n\r\n  useEffect(() => {\r\n    setExperienceId(editEmployeeID);\r\n  }, []);\r\n\r\n  const update_Experience = (data) => {\r\n    const { id, rec_id, tableData, ...fields } = data;\r\n    updateExperiences({ id, ...fields });\r\n  };\r\n\r\n  const add_Experience = (data) => {\r\n    addExperiences({ ...data, empid: editEmployeeID });\r\n  };\r\n\r\n  const delete_Experience = (data) => {\r\n    const { id } = data;\r\n    deleteExperiences(id);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={experiences}\r\n          title=\"Experience\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  add_Experience(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  update_Experience(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  delete_Experience(oldData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpFamily.js",["1378","1379"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {  TextField, MenuItem } from \"@material-ui/core\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\n\r\nimport { useFamily } from \"./family/useFamily\";\r\nimport { useUpdateFamily } from \"./family/useUpdateFamily\";\r\nimport { useAddFamily } from \"./family/useAddFamily\";\r\nimport { useDeleteFamily } from \"./family/useDeleteFamily\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n  },\r\n  {\r\n    title: \"Relationship\",\r\n    field: \"relationship\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        //defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        style={{ width: 100 }}\r\n        value={props.value}\r\n        select\r\n      >\r\n        <MenuItem value=\"Father\">Father</MenuItem>\r\n        <MenuItem value=\"Mother\">Mother</MenuItem>\r\n        <MenuItem value=\"Husband\">Husband</MenuItem>\r\n        <MenuItem value=\"Wife\">Wife</MenuItem>\r\n        <MenuItem value=\"Daughter\">Daughter</MenuItem>\r\n        <MenuItem value=\"Son\">Son</MenuItem>\r\n        <MenuItem value=\"Son-in-law\">Son-in-law</MenuItem>\r\n        <MenuItem value=\"Daughter-in-law\">Daughter-in-law</MenuItem>\r\n      </TextField>\r\n    ),\r\n  },\r\n  {\r\n    title: \"BIrth Date\",\r\n    field: \"birth_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editComponent: (props) => (\r\n      <TextField\r\n        defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        type=\"date\"\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    title: \"Phone\",\r\n    field: \"phone\",\r\n  },\r\n  { title: \"Age\", field: \"age\", type: \"numeric\" },\r\n];\r\n\r\nexport default function Emp_Family() {\r\n  const classes = useStyles();\r\n  const { family,  setFamilyId } = useFamily();\r\n  const updateFamily = useUpdateFamily();\r\n  const addFamily = useAddFamily();\r\n  const deleteFamily = useDeleteFamily();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n\r\n  const update_Family = (data) => {\r\n    const { id, rec_id, tableData, ...fields } = data;\r\n    updateFamily({ id, ...fields });\r\n  };\r\n\r\n  const add_Family = (data) => {\r\n    addFamily({ ...data, empid: editEmployeeID });\r\n  };\r\n\r\n  const delete_Family = (data) => {\r\n    const { id } = data;\r\n    deleteFamily(id);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setFamilyId(editEmployeeID);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={family}\r\n          title=\"Family\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  // setFamilydata([...familydata, newData]);\r\n                  add_Family(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  update_Family(newData);\r\n\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  delete_Family(oldData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\payslips\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\designations\\useAddDesignations.js",[],"D:\\react-myprojects\\hrms-demo\\src\\helpers\\Utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\designations\\useDeleteDesignations.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\designations\\useUpdateDesignations.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useLeavesStatus.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\usePayrunStatus.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useHocPeriod.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useLeavesPeriod.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmpPersonal.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewTrainings.js",["1380"],"import React, { useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useTrainingsContext } from \"../context/trainings_context\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Institute\",\r\n    field: \"institute\",\r\n  },\r\n  {\r\n    title: \"Course\",\r\n    field: \"course\",\r\n  },\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    filtering: false,\r\n    dateSetting: { locale: \"en-GB\" },\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    filtering: false,\r\n    dateSetting: { locale: \"en-GB\" },\r\n  },\r\n  {\r\n    title: \"Expiry Date\",\r\n    field: \"expiry_date\",\r\n    type: \"date\",\r\n    filtering: false,\r\n    dateSetting: { locale: \"en-GB\" },\r\n  },\r\n];\r\n\r\nexport default function Emp_ViewFamily() {\r\n  const classes = useStyles();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n  const { singlebatch_training, getSingleBatchTraining } =\r\n    useTrainingsContext();\r\n\r\n  useEffect(() => {\r\n    getSingleBatchTraining(editEmployeeID);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={singlebatch_training}\r\n          title=\"\"\r\n          options={{\r\n            search: false,\r\n            toolbar: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewLeaves.js",["1381"],"import React, { useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    filtering: false,\r\n    dateSetting: { locale: \"en-GB\" },\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    filtering: false,\r\n    dateSetting: { locale: \"en-GB\" },\r\n  },\r\n  {\r\n    title: \"Reason\",\r\n    field: \"Reason\",\r\n  },\r\n  {\r\n    title: \"No of Days\",\r\n    field: \"no_of_days\",\r\n    type: \"numeric\",\r\n    filtering: false,\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    field: \"status\",\r\n  },\r\n];\r\n\r\nexport default function Emp_ViewFamily() {\r\n  const classes = useStyles();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n  const { singlebatch_leave, getSingleBatchLeave } =\r\n    useLeavesContext();\r\n\r\n  useEffect(() => {\r\n    getSingleBatchLeave(editEmployeeID);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={singlebatch_leave}\r\n          title=\"\"\r\n          options={{\r\n            search: false,\r\n            toolbar: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useExpensesPeriod.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDailyAllowsPeriod.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewExperiences.js",["1382"],"import React, { useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Company\",\r\n    field: \"company\",\r\n  },\r\n  {\r\n    title: \"Location\",\r\n    field: \"location\",\r\n  },\r\n  {\r\n    title: \"Position\",\r\n    field: \"position\",\r\n  },\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n  },\r\n];\r\n\r\nexport default function Emp_Experiences({\r\n  experiencedata,\r\n  setExperiencedata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n  const {\r\n    loadSingleBatchExperience,\r\n    singlebatchexperience,\r\n    \r\n  } = useTablesContext();\r\n\r\n  useEffect(() => {\r\n    //console.log(linkid);\r\n    loadSingleBatchExperience(editEmployeeID);\r\n  }, []);\r\n\r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={singlebatchexperience}\r\n          title=\"Experience\"\r\n          options={{\r\n            search: false,\r\n            toolbar: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewEducations.js",["1383"],"import React, { useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Institution\",\r\n    field: \"institution\",\r\n  },\r\n  {\r\n    title: \"Course\",\r\n    field: \"course\",\r\n  },\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n  },\r\n];\r\n\r\nexport default function Emp_Educations() {\r\n  const classes = useStyles();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n\r\n  const {\r\n    loadSingleBatchEducation,\r\n    singlebatcheducation,\r\n    singlebatch_education_loading,\r\n  } = useTablesContext();\r\n\r\n  useEffect(() => {\r\n    loadSingleBatchEducation(editEmployeeID);\r\n  }, []);\r\n\r\n  if (singlebatch_education_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading...Education</h2>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={singlebatcheducation}\r\n          title=\"Experience\"\r\n          options={{\r\n            search: false,\r\n            toolbar: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewFamily.js",["1384"],"import React, { useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n    filtering: false,\r\n  },\r\n  {\r\n    title: \"Relationship\",\r\n    field: \"relationship\",\r\n  },\r\n  {\r\n    title: \"BIrth Date\",\r\n    field: \"birth_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    filtering: false,\r\n  },\r\n  {\r\n    title: \"Phone\",\r\n    field: \"phone\",\r\n  },\r\n];\r\n\r\nexport default function Emp_ViewFamily() {\r\n  const classes = useStyles();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n  const {\r\n    loadSingleBatchFamily,\r\n     singlebatchfamily,\r\n     \r\n  } = useTablesContext();\r\n\r\n  useEffect(() => {\r\n    loadSingleBatchFamily(editEmployeeID);\r\n  }, []);\r\n  \r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={singlebatchfamily}\r\n          title=\"Family\"\r\n          options={{\r\n            search: false,\r\n            toolbar: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\departments\\useAddDepartments.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hoclocation\\useHoclocation.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\useDeletePayItems.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\useAddPayItems.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\useUpdatePayItems.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\usePayItems.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\useDeleteEducations.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\useDeleteExperiences.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\useAddExperiences.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\useUpdateExperiences.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\useExperiences.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\family\\useAddFamily.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\family\\useDeleteFamily.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\family\\useUpdateFamily.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\family\\useFamily.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\useAddEducations.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\useUpdateEducations.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\useEducations.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\departments\\useDeleteDepartments.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\departments\\useUpdateDepartments.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hoclocation\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\family\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useUpdateHoc.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useAddHoc.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhy\\useHocwhy.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhydetails\\useHocwhydetails.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhatdetails\\useHocwhatdetails.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhat\\useHocwhat.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hoccategory\\useHoccategory.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hoccategory\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhat\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhydetails\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhatdetails\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhy\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableManager.js",["1385"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { TextField, MenuItem, Button, Icon } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport * as emailjs from \"emailjs-com\";\r\n//import { useRecoilState } from \"recoil\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport CheckCircleOutlineOutlinedIcon from \"@material-ui/icons/CheckCircleOutlineOutlined\";\r\n//import { loginLevelState } from \"./data/atomdata\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\n\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\nconst ADMINMANAGER_EMAIL = process.env.ADMINMANAGER_EMAIL;\r\nconst FILTERSTRING = \"Pending\";\r\n\r\nconst columns = [\r\n  { title: \"Name\", field: \"name\", editable: \"never\" },\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Description\",\r\n    field: \"description\",\r\n    editable: \"never\",\r\n  },\r\n  { title: \"Amount\", field: \"amount\", type: \"currency\", editable: \"never\" },\r\n  {\r\n    title: \"Status\",\r\n    field: \"status\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        //defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        style={{ width: 100 }}\r\n        value={props.value}\r\n        select\r\n      >\r\n        <MenuItem value=\"Pending\">Pending</MenuItem>\r\n        <MenuItem value=\"Approve\">Approve</MenuItem>\r\n        <MenuItem value=\"Reject\">Reject</MenuItem>\r\n        <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n      </TextField>\r\n    ),\r\n  },\r\n];\r\n\r\nexport default function ExpenseTable({\r\n  expensesdata,\r\n  setExpensesdata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  //const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  //const [isLoad, setIsLoad] = useState(false);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const { employees } = useEmployees();\r\n  const {\r\n    editExpenseID,\r\n    updateExpense,\r\n    update_expense_error,\r\n    //expenses_loading,\r\n    deleteExpense,\r\n    loadPendingExpenses,\r\n  } = useExpensesContext();\r\n\r\n  // useEffect(() => {\r\n  //   setExpensesdata(expenses);\r\n  //   console.log(expensesdata)\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   loadEmployees();\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   if (expenses) {\r\n  //     setExpensesdata(expenses);\r\n  //     console.log(\"expenses\", expenses, expensesdata)\r\n  //   } else {\r\n  //     setIsLoad(!isLoad);\r\n  //   }\r\n  // }, [isLoad]);\r\n\r\n  // const handleExpenseFormDialogOpen = () => {\r\n  //   setIsDialogOpen(true);\r\n  // };\r\n\r\n  const handleExpenseFormDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n    loadPendingExpenses(FILTERSTRING);\r\n  };\r\n\r\n  // const handleExpenseFormAlertOpen = () => {\r\n  //   setIsAlertOpen(true);\r\n  // };\r\n\r\n  const handleExpenseFormAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleExpenseFormOnDeleteConfirm = () => {\r\n    const id = editExpenseID;\r\n    deleteExpense(id);\r\n    loadPendingExpenses(FILTERSTRING);\r\n  };\r\n\r\n  const handleSentEmail = (data, result) => {\r\n    const { date, empid, name } = data;\r\n    const emp = employees\r\n      .filter((f) => f.id === empid)\r\n      .map((r) => {\r\n        return { ...r };\r\n      });\r\n    // console.log(\"leave form\", emp[0].email, data);\r\n    var emaildata = {\r\n      to_name: name,\r\n      to_email: emp[0].email,\r\n      message: `Your expenses claim application dated on ${date} has been ${result}!`,\r\n      cc_to: ADMINMANAGER_EMAIL,\r\n    };\r\n\r\n    emailjs.send(SERVICE_ID, TEMPLATE_ID, emaildata, USER_ID).then(\r\n      function (response) {\r\n        console.log(response.status, response.text);\r\n        toast({\r\n          title: `Email has sent successfully to ${emaildata.to_email}!`,\r\n          status: \"success\",\r\n        });\r\n      },\r\n      function (err) {\r\n        console.log(err);\r\n        toast({\r\n          title: `Email has fail to send to ${emaildata.to_email}!`,\r\n          status: \"warning\",\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  // const Save_ExpenseData = () => {\r\n  //   expensesdata.forEach((data) => {\r\n  //     const { id } = data;\r\n  //     if (id) {\r\n  //       const { id, rec_id, tableData, ...fields } = data;\r\n  //       updateExpense({ id, ...fields });\r\n  //     }\r\n  //   });\r\n\r\n  //   handleDialogClose();\r\n  //};\r\n\r\n  const Approve_ExpenseData = () => {\r\n    expensesdata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        updateExpense({ id: rec.id, status: \"Approved\" });\r\n        //update leavesdata\r\n        if (!update_expense_error) {\r\n          const recdata = expensesdata.filter((r) => r.id === rec.id);\r\n          recdata[0].status = \"Approved\";\r\n        }\r\n        //sent email\r\n        handleSentEmail(rec, \"Approved\");\r\n      }\r\n    });\r\n    expensesdata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  const Reject_ExpenseData = () => {\r\n    expensesdata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        updateExpense({ id: rec.id, status: \"Rejected\" });\r\n        //update leavesdata\r\n        if (!update_expense_error) {\r\n          const recdata = expensesdata.filter((r) => r.id === rec.id);\r\n          recdata[0].status = \"Rejected\";\r\n        }\r\n        //sent email\r\n        handleSentEmail(rec, \"Rejected\");\r\n      }\r\n    });\r\n    expensesdata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  if (!expensesdata) {\r\n    return (\r\n      <div>\r\n        <h2>Loading...Expenses</h2>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={expensesdata}\r\n          title=\"Expenses Claims Application\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <CheckCircleOutlineOutlinedIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          // editable={{\r\n          //   onRowUpdate: (newData, oldData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         const dataUpdate = [...expensesdata];\r\n          //         const index = oldData.tableData.id;\r\n          //         dataUpdate[index] = newData;\r\n          //         setExpensesdata([...dataUpdate]);\r\n          //         //approve_Expense(newData);\r\n\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          // }}\r\n          options={{\r\n            filtering: true,\r\n            selection: true,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Approve_ExpenseData}\r\n                  >\r\n                    Approve <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Reject_ExpenseData}\r\n                  >\r\n                    Reject <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                  {/* <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Save_ExpenseData}\r\n                  >\r\n                    Update <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button> */}\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <CustomDialog\r\n          isOpen={isDialogOpen}\r\n          handleClose={handleExpenseFormDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscree={false}\r\n        >\r\n          <ExpenseForm handleDialogClose={handleExpenseFormDialogClose} />\r\n        </CustomDialog>\r\n\r\n        <AlertDialogBox\r\n          onClose={handleExpenseFormAlertClose}\r\n          onConfirm={handleExpenseFormOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete Expenses\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableView.js",["1386","1387"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\n//import DeleteIcon from \"@material-ui/icons/Delete\";\r\n//import CheckIcon from \"@material-ui/icons/Check\";\r\n//import SearchIcon from \"@material-ui/icons/Search\";\r\n//import LeaveForm from \"./LeaveForm\";\r\n//import { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { AlertDialog } from \"../helpers/AlertDialogBox\";\r\nimport { useExpenses } from \"./expenses/useExpenses\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\n\r\n//const FILTERSTRING = \"Pending\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n  },\r\n  {\r\n    title: \"Date\",\r\n    field: \"date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n  },\r\n\r\n  { title: \"Description\", field: \"description\" },\r\n  { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n  { title: \"Status\", field: \"status\" },\r\n];\r\n\r\nexport default function ExpenseTableView() {\r\n  const classes = useStyles();\r\n  //const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  //const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  //const { loadEmployees } = useEmployeesContext();\r\n  const { expenses} = useExpenses()\r\n  // const {\r\n  //   //expenses,\r\n  //   addExpense,\r\n  //   expenses_loading,\r\n  //   updateExpense,\r\n  //   deleteExpense,\r\n  //   loadPendingExpenses,\r\n  //   getSingleExpense,\r\n  //   setEditExpenseID,\r\n  //   setIsExpenseEditingOn,\r\n  //   setIsExpenseEditingOff,\r\n  //   resetSingleExpense,\r\n  // } = useExpensesContext();\r\n\r\n  // useEffect(() => {\r\n  //   loadPendingExpenses(FILTERSTRING);\r\n  // }, []);\r\n\r\n  // const handleDialogOpen = () => {\r\n  //   setIsDialogOpen(true);\r\n  //};\r\n\r\n  // const handleDialogClose = () => {\r\n  //   setIsDialogOpen(false);\r\n  //   //loadPendingExpenses(FILTERSTRING);\r\n  // };\r\n\r\n  // const handleAlertOpen = () => {\r\n  //   setIsAlertOpen(true);\r\n  // };\r\n\r\n  // const handleAlertClose = () => {\r\n  //   setIsAlertOpen(false);\r\n  // };\r\n\r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={expenses\r\n            .filter((r) => r.status === \"Pending\")\r\n            .map((rec) => { return { ...rec } })\r\n          }\r\n            \r\n          title=\"Leave Application\"\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableViewManager.js",["1388","1389","1390"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { TextField, MenuItem } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\n//import AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\n//import DeleteIcon from \"@material-ui/icons/Delete\";\r\n//import CheckIcon from \"@material-ui/icons/Check\";\r\n//import SearchIcon from \"@material-ui/icons/Search\";\r\n//import LeaveForm from \"./LeaveForm\";\r\n//import { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { AlertDialog } from \"../helpers/AlertDialogBox\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\n\r\nconst FILTERSTRING = \"Pending\"\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"From\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"To\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  { title: \"Days\", field: \"no_of_days\", editable: \"never\" },\r\n  {\r\n    title: \"Status\",\r\n    field: \"status\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        //defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        style={{ width: 100 }}\r\n        value={props.value}\r\n        select\r\n      >\r\n        <MenuItem value=\"Pending\">Pending</MenuItem>\r\n        <MenuItem value=\"Approve\">Approve</MenuItem>\r\n        <MenuItem value=\"Reject\">Reject</MenuItem>\r\n        <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n      </TextField>\r\n    ),\r\n  },\r\n];\r\n\r\n\r\n\r\nexport default function LeaveTableView() {\r\n  const classes = useStyles();\r\n  //const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  //const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n   const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  //const { loadEmployees } = useEmployeesContext();\r\n  const {\r\n    leaves,\r\n    //leaves_error,\r\n    //editLeaveID,\r\n    //leaves_loading,\r\n    //deleteLeave,\r\n    loadPendingLeaves,\r\n    //getSingleLeave,\r\n    //setEditLeaveID,\r\n    //setIsLeaveEditingOn,\r\n    //setIsLeaveEditingOff,\r\n    //resetSingleLeave,\r\n  } = useLeavesContext();\r\n\r\n  useEffect(() => {\r\n    loadPendingLeaves(FILTERSTRING);\r\n  }, []);\r\n \r\n  // const handleDialogOpen = () => {\r\n  //   setIsDialogOpen(true);\r\n  // };\r\n\r\n  // const handleDialogClose = () => {\r\n  //   setIsDialogOpen(false);\r\n  //   loadPendingLeaves(FILTERSTRING);\r\n  //};\r\n\r\n  // const handleAlertOpen = () => {\r\n  //   setIsAlertOpen(true);\r\n  // };\r\n\r\n  // const handleAlertClose = () => {\r\n  //   setIsAlertOpen(false);\r\n  //};\r\n\r\n  // const handleOnDeleteConfirm = () => {\r\n  //   const id = editLeaveID;\r\n  //   deleteLeave(id);\r\n  //   loadPendingLeaves(FILTERSTRING);\r\n  // };\r\n\r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={leaves.filter((r)=>r.reporting_email === loginLevel.loginEmail)}\r\n          title=\"Leave Application\"\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTableViewManager.js",["1391"],"import React, { useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import {\r\n  //payPeriodState,\r\n  //payPeriodEndMonthState,\r\n  //payPeriodEmpIdState,\r\n//} from \"./data/atomdata\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\n\r\nconst FILTERSTRING = \"Verified\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Batch\",\r\n    field: \"payrun\",\r\n    editable: \"never\",\r\n  },\r\n  // { title: \"Period\", field: \"period\", editable: \"never\" },\r\n  // {\r\n  //   title: \"PayDate\",\r\n  //   field: \"pay_date\",\r\n  //   type: \"date\",\r\n  //   dateSetting: { locale: \"en-GB\" },\r\n  //   editable: \"never\",\r\n  // },\r\n  {\r\n    title: \"Wages\",\r\n    field: \"totalwages\",\r\n    type: \"currency\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"TAP Amount\",\r\n    field: \"totaltap\",\r\n    type: \"currency\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"SCP Amount\",\r\n    field: \"totalscp\",\r\n    type: \"currency\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Site Allowances\",\r\n    field: \"totalsitesallows\",\r\n    type: \"currency\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Expenses Claims\",\r\n    field: \"totalexpensesclaims\",\r\n    type: \"currency\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Allowances\",\r\n    field: \"totalallows\",\r\n    type: \"currency\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Deductions\",\r\n    field: \"totaldeducts\",\r\n    type: \"currency\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Payroll\",\r\n    field: \"totalpayroll\",\r\n    type: \"currency\",\r\n    editable: \"never\",\r\n  },\r\n  // { title: \"Bank Name\", field: \"bank_name\" },\r\n  // { title: \"Bank AC No\", field: \"bank_accno\" },\r\n  { title: \"Status\", field: \"status\", editable: \"never\" },\r\n];\r\n\r\nexport default function PayslipTableVIew() {\r\n  //et history = useHistory();\r\n  const classes = useStyles();\r\n  \r\n  const {\r\n    batchpayrun,\r\n    getBatchPayrun,\r\n    //batchpayrun_loading,\r\n    //batchpayrun_error,\r\n    //loadPendingPayslips,\r\n  } = usePayslipsContext();\r\n  //const { loadEmployees, employees } = useEmployeesContext();\r\n\r\n  useEffect(() => {\r\n    getBatchPayrun(FILTERSTRING);\r\n  }, []);\r\n\r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={batchpayrun}\r\n          title=\"Payslips\"\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"black\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\helpers\\CardLayout3.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\PrintPaySummary.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\PaySummary.js",["1392"],"import React, { useState, useEffect } from \"react\";\r\nimport currency from \"currency.js\";\r\n//import PrintPaySummary from \"./PrintPaySummary\";\r\nimport {\r\n  Box,\r\n  //Heading,\r\n  //Text,\r\n  //Table,\r\n  //Thead,\r\n  //Tbody,\r\n  //Tr,\r\n  //Th,\r\n  //Td,\r\n  //chakra,\r\n} from \"@chakra-ui/react\";\r\n//import { TriangleDownIcon, TriangleUpIcon } from \"@chakra-ui/icons\";\r\nimport MaterialTable from \"material-table\";\r\nimport {  Grid, TextField } from \"@material-ui/core\";\r\n//import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\n//import { formatPriceZero } from \"../helpers/Utils\";\r\nimport { payrunState } from \"./data/atomdata\";\r\n//import { usePayslipsContext } from \"../context/payslips_context\";\r\n//import { ComponentToPrint } from \"./ComponentToPrint\";\r\n//import PaySummaryTable from \"./PaySummaryTable\";\r\n\r\n// const initial_state = [\r\n//   {\r\n//     totalwages: 0,\r\n//     totaltap: 0,\r\n//     totalscp: 0,\r\n//     totalallows: 0,\r\n//     totaldeducts: 0,\r\n//     totalpayroll: 0,\r\n//   },\r\n// ];\r\n\r\nconst PaySummary = ({ singlebatchpayslip }) => {\r\n  //const classes = useStyles();\r\n  //const componentRef = useRef();\r\n  //const [state, setState] = useState(initial_state);\r\n  const [payrundata, setPayrundata] = useRecoilState(payrunState);\r\n  //const [payrunstatus, setPayrunStatus] = useRecoilState(payrunStatusState);\r\n  const [isCalc, setIsCalc] = useState(true);\r\n  //const { payrun, updatePayrun, payslip_period } = usePayslipsContext();\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Name\",\r\n      field: \"name\",\r\n      editable: \"never\",\r\n    },\r\n    {\r\n      title: \"Wages\",\r\n      field: \"wages_bnd\",\r\n      editable: \"never\",\r\n      type: \"currency\",\r\n    },\r\n    {\r\n      title: \"TAP Amount\",\r\n      field: \"tap_amount_bnd\",\r\n      editable: \"never\",\r\n      type: \"currency\",\r\n    },\r\n    {\r\n      title: \"SCP Amount\",\r\n      field: \"scp_amount_bnd\",\r\n      editable: \"never\",\r\n      type: \"currency\",\r\n    },\r\n    {\r\n      title: \"Site Allows\",\r\n      field: \"site_allows_bnd\",\r\n      editable: \"never\",\r\n      type: \"currency\",\r\n    },\r\n    {\r\n      title: \"Exps Claims\",\r\n      field: \"expenses_claims_bnd\",\r\n      editable: \"never\",\r\n      type: \"currency\",\r\n    },\r\n    {\r\n      title: \"Allowances\",\r\n      field: \"total_allowances_bnd\",\r\n      editable: \"never\",\r\n      type: \"currency\",\r\n    },\r\n    {\r\n      title: \"Deductions\",\r\n      field: \"total_deductions_bnd\",\r\n      editable: \"never\",\r\n      type: \"currency\",\r\n    },\r\n    {\r\n      title: \"Nett Pay\",\r\n      field: \"nett_pay_bnd\",\r\n      editable: \"never\",\r\n      type: \"currency\",\r\n    },\r\n  ];\r\n\r\n  // const columns1 = [\r\n  //   {\r\n  //     Header: \"Name\",\r\n  //     accessor: \"name\",\r\n  //   },\r\n  //   {\r\n  //     Header: \"Wages\",\r\n  //     accessor: \"wages_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n\r\n  //   {\r\n  //     Header: \"TAP Amount\",\r\n  //     accessor: \"tap_amount_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  //   {\r\n  //     Header: \"SCP Amount\",\r\n  //     accessor: \"scp_amount_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  //   {\r\n  //     Header: \"Site Allows\",\r\n  //     accessor: \"site_allows_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  //   {\r\n  //     Header: \"Exps Claims\",\r\n  //     accessor: \"expenses_claims_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  //   {\r\n  //     Header: \"Allowances\",\r\n  //     accessor: \"total_allowances_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  //   {\r\n  //     Header: \"Deductions\",\r\n  //     accessor: \"total_deductions_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  //   {\r\n  //     Header: \"Nett Pay\",\r\n  //     accessor: \"nett_pay_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  // ];\r\n\r\n  // const exportPdfTable = () => {\r\n  //   PrintPaySummary((singlebatchpayslip = { singlebatchpayslip }));\r\n  // };\r\n\r\n  const handleCalcTotals = () => {\r\n    const data = singlebatchpayslip;\r\n    const totalwages = data.reduce((acc, item) => {\r\n      return acc + item.wages_bnd;\r\n    }, 0);\r\n    const totalsitesallows = data.reduce((acc, item) => {\r\n      return acc + item.site_allows_bnd;\r\n    }, 0);\r\n    const totalexpclaims = data.reduce((acc, item) => {\r\n      return acc + item.expenses_claims_bnd;\r\n    }, 0);\r\n    const totalallows = data.reduce((acc, item) => {\r\n      return acc + item.total_allowances_bnd;\r\n    }, 0);\r\n    const totaldeducts = data.reduce((acc, item) => {\r\n      return acc + item.total_deductions_bnd;\r\n    }, 0);\r\n    const totaltap = data.reduce((acc, item) => {\r\n      return acc + item.tap_amount_bnd;\r\n    }, 0);\r\n    const totalscp = data.reduce((acc, item) => {\r\n      return acc + item.scp_amount_bnd;\r\n    }, 0);\r\n    const totalpayroll = data.reduce((acc, item) => {\r\n      return acc + item.nett_pay_bnd;\r\n    }, 0);\r\n\r\n    setPayrundata({\r\n      ...payrundata,\r\n      totalpayroll: totalpayroll,\r\n      totalwages: totalwages,\r\n      totaltap: totaltap,\r\n      totalscp: totalscp,\r\n      totalallows: totalallows,\r\n      totaldeducts: totaldeducts,\r\n      totalsitesallows: totalsitesallows,\r\n      totalexpensesclaims: totalexpclaims,\r\n    });\r\n    // payrun\r\n    //   .filter((r) => r.payrun === payslip_period)\r\n    //   .map((rec) => {\r\n    //     //update payrun\r\n    //     return updatePayrun({\r\n    //       id: rec.id,\r\n    //       totalpayroll: totalpayroll,\r\n    //       totalwages: totalwages,\r\n    //       totaltap: totaltap,\r\n    //       totalscp: totalscp,\r\n    //       totalallows: totalallows,\r\n    //       totaldeducts: totaldeducts,\r\n    //       totalsitesallows: totalsitesallows,\r\n    //       totalexpensesclaims: totalexpclaims,\r\n    //     });\r\n    //   });\r\n    // console.log(\"payrundata\", payrundata);\r\n    // console.log(\r\n    //   \"totals\",\r\n    //   totalpayroll,\r\n    //   totalwages,\r\n    //   totaltap,\r\n    //   totalscp,\r\n    //   totalallows,\r\n    //   totaldeducts\r\n    // );\r\n  };\r\n\r\n  // const handleSaveCalcTotals = (e) => {\r\n  //   e.preventDefault();\r\n  //   handleCalcTotals();\r\n  //};\r\n\r\n  useEffect(() => {\r\n    handleCalcTotals();\r\n    setIsCalc(false);\r\n  }, [isCalc]);\r\n\r\n  return (\r\n    <div>\r\n      {/* <div style={{ display: \"none\" }}> */}\r\n      <div>\r\n        {/* <div style={{ border: \"1px solid black\" }} align=\"center\">\r\n          <button onClick={() => exportPdfTable()}>\r\n            <Heading size=\"sm\">Print Payroll Summary Report!</Heading>\r\n          </button>\r\n        </div> */}\r\n        {/* <div>\r\n          <div style={{ display: \"none\" }}>\r\n            <ComponentToPrint ref={componentRef} />\r\n          </div>\r\n          <button onClick={handlePrint}>Print this out!</button>\r\n        </div> */}\r\n      </div>\r\n      <form>\r\n        <Grid container direction=\"row\" style={{ border: \"1px solid black\" }}>\r\n          <Grid\r\n          // item\r\n          // sm={12}\r\n          // align=\"center\"\r\n          // style={{ border: \"1px solid black\" }}\r\n          >\r\n            <div>\r\n              {/* <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              style={{ marginLeft: 5 }}\r\n              onClick={(e) => handleSaveCalcTotals(e)}\r\n            >\r\n              Save <Icon className={classes.rightIcon}>send</Icon>\r\n            </Button> */}\r\n              {/* <Heading size=\"sm\">Summary</Heading> */}\r\n              {/* <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                style={{ marginLeft: 5 }}\r\n                onClick={(e) => handle_Print(e)}\r\n              >\r\n                Print <Icon className={classes.rightIcon}>send</Icon>\r\n              </Button> */}\r\n              {/* <div>\r\n                <ReactToPrint\r\n                  trigger={(e) => {\r\n                    handle_Print(e);\r\n                  }}\r\n                  content={() => this.componentRef}\r\n                />\r\n                <ComponentToPrint ref={(el) => (this.componentRef = el)} />\r\n              </div> */}\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container direction=\"row\" style={{ border: \"1px solid white\" }}>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Period\"\r\n                name=\"period\"\r\n                variant=\"filled\"\r\n                type=\"text\"\r\n                value={payrundata.period}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Pay Run Batch\"\r\n                name=\"payrun\"\r\n                variant=\"filled\"\r\n                type=\"text\"\r\n                value={payrundata.payrun}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Status\"\r\n                name=\"status\"\r\n                variant=\"filled\"\r\n                value={payrundata.status}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Payroll Total\"\r\n                name=\"paytotal\"\r\n                variant=\"filled\"\r\n                type=\"number\"\r\n                value={currency(payrundata.totalpayroll)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container direction=\"row\" style={{ border: \"1px solid white\" }}>\r\n          <Grid\r\n            item\r\n            sm={12}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            {/* <Box h=\"400\" overflow=\"scroll\">\r\n              <PaySummaryTable columns={columns} data={singlebatchpayslip} />\r\n            </Box> */}\r\n            <Box h=\"400\" w=\"full\" overflow=\"scroll\">\r\n              <MaterialTable\r\n                columns={columns}\r\n                data={singlebatchpayslip}\r\n                title=\"Payroll\"\r\n                options={{\r\n                  filtering: false,\r\n                  search: false,\r\n                  toolbar: false,\r\n                  paging: false,\r\n                  headerStyle: {\r\n                    backgroundColor: \"lightblue\",\r\n                    color: \"primary\",\r\n                  },\r\n                  showTitle: false,\r\n                }}\r\n              />\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container direction=\"row\" style={{ border: \"1px solid white\" }}>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total Wages\"\r\n                name=\"totalwages\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totalwages)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total TAP\"\r\n                name=\"totaltap\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totaltap)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total SCP\"\r\n                name=\"totalscp\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totalscp)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total Sites Allows\"\r\n                name=\"totalsitesallows\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totalsiteallows)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total Expenses Claims\"\r\n                name=\"totalsitesallows\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totalexpensesclaims)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total Allowances\"\r\n                name=\"totalallows\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totalallows)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total Deductions\"\r\n                name=\"totaldeducts\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totaldeducts)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total Payroll\"\r\n                name=\"totalpayroll\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totalpayroll)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   root: {\r\n//     flexGrow: 1,\r\n//   },\r\n//   button: {\r\n//     margin: theme.spacing(1),\r\n//   },\r\n//   container: {\r\n//     margin: 0,\r\n//     padding: 0,\r\n//     width: \"80vw\",\r\n//     display: \"grid\",\r\n//     gridTemplateColumns: \"repeat(auto-fill,250px)\",\r\n//     gridAutoRows: \"10px\",\r\n//     position: \"absolute\",\r\n//     left: \"50%\",\r\n//     transform: \"translateX(-50%)\",\r\n//     justifyContent: \"center\",\r\n//     backgroundColor: \"primary\",\r\n//   },\r\n//   fixedHeight: {\r\n//     height: 800,\r\n//   },\r\n//   paper: {\r\n//     padding: theme.spacing(10),\r\n//     // display: \"flex\",\r\n//     display: \"flex\",\r\n//     overflow: \"auto\",\r\n//     flexDirection: \"column\",\r\n//     border: \"1px solid\",\r\n//     width: \"100%\",\r\n//     color: \"primary\",\r\n//     bcakgroundColor: \"black\",\r\n//   },\r\n//   card: {\r\n//     backgroundColor: \"black\",\r\n//   },\r\n//   section: {\r\n//     width: \"80vw\",\r\n//     margin: \"1rem auto\",\r\n//     maxWidth: \"var(--max-width)\",\r\n//   },\r\n//   underline: {\r\n//     width: \"5rem\",\r\n//     height: \"0.25rem\",\r\n//     marginBottom: \"1.25rem\",\r\n//     background: \"var(--clr-primary-5)\",\r\n//     marginLeft: \"auto\",\r\n//     marginRight: \"auto\",\r\n//   },\r\n//   title: {\r\n//     marginbottom: \"4rem\",\r\n//     textAlign: \"center\",\r\n//   },\r\n//   jobscenter: {\r\n//     width: \"80vw\",\r\n//     margin: \"0 auto\",\r\n//     maxWidth: \"var(--max-width)\",\r\n//     flexDirection: \"row\",\r\n//   },\r\n//   btncontainer: {\r\n//     display: \"flex\",\r\n//     flexDirection: \"row\",\r\n//     justifyContent: \"center\",\r\n//     marginBottom: \"4rem\",\r\n//     flexWrap: \"wrap\",\r\n//   },\r\n//   jobbtn: {\r\n//     background: \"transparent\",\r\n//     borderColor: \"transparent\",\r\n//     textTransform: \"capitalize\",\r\n//     fontSize: \"1.25rem\",\r\n//     letterSpacing: \"var(--spacing)\",\r\n//     margin: \"0 0.5rem\",\r\n//     transition: \"var(--transition)\",\r\n//     cursor: \"pointer\",\r\n//     padding: \"0.25rem 0\",\r\n//     lineHeight: \"1\",\r\n//     outlineColor: \"var(--clr-primary-10)\",\r\n//     \"&:hover\": {\r\n//       color: \"var(--clr-primary-5)\",\r\n//       boxShadow: \"0 2px var(--clr-primary-5)\",\r\n//     },\r\n//   },\r\n//   activebtn: {\r\n//     color: \"var(--clr-primary-5)\",\r\n//     boxShadow: \"0 2px var(--clr-primary-5)\",\r\n//   },\r\n//   jobinfo: {\r\n//     fontWeight: \"400\",\r\n//   },\r\n//   divider: {\r\n//     // Theme Color, or use css color in quote\r\n//     background: \"white\",\r\n//   },\r\n//   textField: {\r\n//     marginLeft: theme.spacing(1),\r\n//     marginRight: theme.spacing(1),\r\n//     width: 350,\r\n//   },\r\n//   divContainer: {\r\n//     display: \"flex\",\r\n//     flexDirection: \"row\",\r\n//   },\r\n// }));\r\n\r\nexport default PaySummary;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\useUpdatePayrun.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\PayForm.js",["1393","1394"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  //ButtonGroup,\r\n  Grid,\r\n  //GridItem,\r\n  Icon,\r\n  //Input,\r\n  TextField,\r\n  //FormControlLabel,\r\n  Divider,\r\n  //ListSubheader,\r\n  //MenuItem,\r\n  //Select,\r\n  NativeSelect,\r\n  InputLabel,\r\n} from \"@material-ui/core\";\r\nimport { Box, Checkbox, Heading, Text } from \"@chakra-ui/react\";\r\nimport currency from \"currency.js\";\r\n//import CurrencyTextField from \"@unicef/material-ui-currency-textfield\";\r\n//import { Autocomplete } from \"@material-ui/lab\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { usePayslipsBatch } from \"./payslips/usePayslipsBatch\";\r\n//import { useUpdatePayslips } from \"./payslips/useUpdatePayslips\";\r\n//import { usePayslipsContext } from \"../context/payslips_context\";\r\n//import { useAllowances } from \"./allowances/useAllowances\";\r\n\r\nconst initial_state = [\r\n  {\r\n    name: \"\",\r\n    period: \"\",\r\n    date: \"\",\r\n    payrun: \"\",\r\n    bank_name: \"\",\r\n    bank_acno: \"\",\r\n    tap_acno: \"\",\r\n    scp_acno: \"\",\r\n    empid: \"\",\r\n    status: \"\",\r\n    allows_type1: \" \",\r\n    allows_type1amt: 0,\r\n    allows_type2: \" \",\r\n    allows_type2amt: 0,\r\n    allows_type3: \" \",\r\n    allows_type3amt: 0,\r\n    allows_type4: \" \",\r\n    allows_type4amt: 0,\r\n    allows_type5: \" \",\r\n    allows_type5amt: 0,\r\n    allows_type6: \" \",\r\n    allows_type6amt: 0,\r\n    allows_type7: \" \",\r\n    allows_type7amt: 0,\r\n    allows_type8: \" \",\r\n    allows_type8amt: 0,\r\n    deducts_type1: \" \",\r\n    deducts_type1amt: 0,\r\n    deducts_type2: \" \",\r\n    deducts_type2amt: 0,\r\n    deducts_type3: \" \",\r\n    deducts_type3amt: 0,\r\n    deducts_type4: \" \",\r\n    deducts_type4amt: 0,\r\n    deducts_type5: \" \",\r\n    deducts_type5amt: 0,\r\n    deducts_type6: \" \",\r\n    deducts_type6amt: 0,\r\n    deducts_type7: \" \",\r\n    deducts_type7amt: 0,\r\n    deducts_type8: \" \",\r\n    deducts_type8amt: 0,\r\n    tap_checkbox: false,\r\n    salary_currency: \" \",\r\n    currency_rate: 1,\r\n\r\n    wages: 0,\r\n    nett_pay: 0,\r\n    tap_amount: 0,\r\n    scp_amount: 0,\r\n    total_allowances: 0,\r\n    total_deductions: 0,\r\n    site_allows: 0,\r\n    expenses_claims: 0,\r\n\r\n    nett_pay_bnd: 0,\r\n    wages_bnd: 0,\r\n    site_allows_bnd: 0,\r\n    expenses_claims_bnd: 0,\r\n    tap_amount_bnd: 0,\r\n    scp_amount_bnd: 0,\r\n    total_allowances_bnd: 0,\r\n    total_deductions_bnd: 0,\r\n  },\r\n];\r\n\r\nconst PayForm = ({\r\n  formdata,\r\n  setFormdata,\r\n  loadFormdata,\r\n  setLoadFormdata,\r\n  payitems,\r\n  //setLoadUpdatedata,\r\n  rowindex,\r\n  //isCalc,\r\n  isStart,\r\n  //setIsStart,\r\n  //setIsCalc,\r\n  singlebatchpayslip,\r\n}) => {\r\n  const classes = useStyles();\r\n  const [state, setState] = useState(initial_state);\r\n  //const { allowances } = useAllowances();\r\n  //const { payslipsbatch, psbpayrunId, setPSBPayrunId } = usePayslipsBatch();\r\n  //const updatePayslips = useUpdatePayslips();\r\n  //const { singlebatchpayslip } = usePayslipsContext();\r\n  const [isLoad, setIsLoad] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setState((prev) => (prev = { ...formdata }));\r\n    setLoadFormdata(false);\r\n  }, [loadFormdata]);\r\n\r\n  useEffect(() => {\r\n    if (state) {\r\n      handleCalc();\r\n      setIsLoad(false);\r\n    }\r\n  }, [isLoad]);\r\n\r\n  const Update_Empdata = ({ name, value }) => {\r\n    let data = singlebatchpayslip[rowindex];\r\n    data[name] = value;\r\n    data.tableData.checked = true;\r\n    //console.log(\"update data\", data);\r\n    //console.log(\"update payslip\", singlebatchpayslip[rowindex]);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    e.preventDefault();\r\n\r\n    const { name, type, value } = e.target;\r\n    let val =\r\n      type === \"number\"\r\n        ? isNaN(value) || value === undefined\r\n          ? 0\r\n          : parseFloat(value)\r\n        : value;\r\n\r\n    //setFormInput({ [name]: val });\r\n    setState((prev) => (prev = { ...state, [name]: val }));\r\n    Update_Empdata({ name: name, value: val });\r\n    setIsLoad(true);\r\n  };\r\n\r\n  const handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    handleCalc();\r\n  };\r\n\r\n  const handleCalc = (e) => {\r\n    //console.log(\"start\", isStart)\r\n    if (isStart) {\r\n      return;\r\n    }\r\n    if (!usePayslipsBatch) {\r\n      return;\r\n    }\r\n    if (!singlebatchpayslip) {\r\n      return;\r\n    }\r\n    if (!state) {\r\n      return;\r\n    }\r\n    var wages = 0,\r\n      totalTAP = 0,\r\n      totalSCP = 0,\r\n      nettPay = 0.0,\r\n      allows = 0,\r\n      deducts = 0,\r\n      siteallows = 0,\r\n      expsclaims = 0,\r\n      wagesbnd = 0,\r\n      totalTAPbnd = 0,\r\n      totalSCPbnd = 0,\r\n      nettPaybnd = 0,\r\n      allowsbnd = 0,\r\n      deductsbnd = 0,\r\n      siteallowsbnd = 0,\r\n      expsclaimsbnd = 0;\r\n    let data = singlebatchpayslip[rowindex];\r\n    if (!data) {\r\n      return false;\r\n    }\r\n    wages = isNaN(state.wages) || state.wages === undefined ? 0 : state.wages;\r\n    totalTAP = state.tap_checkbox ? Math.ceil(wages * 0.05) : 0;\r\n    totalSCP = state.tap_checkbox\r\n      ? Math.round((wages + Number.EPSILON) * 0.035 * 100) / 100\r\n      : 0;\r\n    if (totalSCP > 98) {\r\n      totalSCP = 98;\r\n    }\r\n    //console.log(\"scp\", totalSCP);\r\n    siteallows = parseFloat(isNaN(state.site_allows) ? 0 : state.site_allows);\r\n    expsclaims = parseFloat(\r\n      isNaN(state.expenses_claims) ? 0 : state.expenses_claims\r\n    );\r\n\r\n    allows =\r\n      parseFloat(isNaN(state.allows_type3amt) ? 0 : state.allows_type3amt) +\r\n      parseFloat(isNaN(state.allows_type4amt) ? 0 : state.allows_type4amt) +\r\n      parseFloat(isNaN(state.allows_type5amt) ? 0 : state.allows_type5amt) +\r\n      parseFloat(isNaN(state.allows_type6amt) ? 0 : state.allows_type6amt) +\r\n      parseFloat(isNaN(state.allows_type7amt) ? 0 : state.allows_type7amt) +\r\n      parseFloat(isNaN(state.allows_type8amt) ? 0 : state.allows_type8amt);\r\n\r\n    deducts =\r\n      parseFloat(isNaN(state.deducts_type1amt) ? 0 : state.deducts_type1amt) +\r\n      parseFloat(isNaN(state.deducts_type2amt) ? 0 : state.deducts_type2amt) +\r\n      parseFloat(isNaN(state.deducts_type3amt) ? 0 : state.deducts_type3amt) +\r\n      parseFloat(isNaN(state.deducts_type4amt) ? 0 : state.deducts_type4amt) +\r\n      parseFloat(isNaN(state.deducts_type5amt) ? 0 : state.deducts_type5amt) +\r\n      parseFloat(isNaN(state.deducts_type6amt) ? 0 : state.deducts_type6amt) +\r\n      parseFloat(isNaN(state.deducts_type7amt) ? 0 : state.deducts_type7amt) +\r\n      parseFloat(isNaN(state.deducts_type8amt) ? 0 : state.deducts_type8amt);\r\n\r\n    allows = isNaN(allows) ? 0 : allows;\r\n    deducts = isNaN(deducts) ? 0 : deducts;\r\n\r\n    nettPay =\r\n      wages + siteallows + expsclaims - totalTAP - totalSCP + allows - deducts;\r\n\r\n    if (state.currency === \"BND\") {\r\n      wagesbnd = wages;\r\n      allowsbnd = allows;\r\n      deductsbnd = deducts;\r\n      totalTAPbnd = totalTAP;\r\n      totalSCPbnd = totalSCP;\r\n      siteallowsbnd = siteallows;\r\n      expsclaimsbnd = expsclaims;\r\n      nettPaybnd = nettPay;\r\n    } else {\r\n      wagesbnd =\r\n        Math.round((wages + Number.EPSILON) * state.currency_rate * 100) / 100;\r\n      allowsbnd =\r\n        Math.round((allows + Number.EPSILON) * state.currency_rate * 100) / 100;\r\n      deductsbnd =\r\n        Math.round((deducts + Number.EPSILON) * state.currency_rate * 100) /\r\n        100;\r\n      totalTAPbnd =\r\n        Math.round((totalTAP + Number.EPSILON) * state.currency_rate * 100) /\r\n        100;\r\n      totalSCPbnd =\r\n        Math.round((totalSCP + Number.EPSILON) * state.currency_rate * 100) /\r\n        100;\r\n      siteallowsbnd =\r\n        Math.round((siteallows + Number.EPSILON) * state.currency_rate * 100) /\r\n        100;\r\n      expsclaimsbnd =\r\n        Math.round((expsclaims + Number.EPSILON) * state.currency_rate * 100) /\r\n        100;\r\n      nettPaybnd =\r\n        Math.round((nettPay + Number.EPSILON) * state.currency_rate * 100) /\r\n        100;\r\n    }\r\n\r\n    setState(\r\n      (prev) =>\r\n        (prev = {\r\n          ...state,\r\n          wages: wages,\r\n          total_allowances: allows,\r\n          total_deductions: deducts,\r\n          tap_amount: totalTAP,\r\n          scp_amount: totalSCP,\r\n          site_allows: siteallows,\r\n          expenses_claims: expsclaims,\r\n          nett_pay: nettPay,\r\n          wages_bnd: wagesbnd,\r\n          total_allowances_bnd: allowsbnd,\r\n          total_deductions_bnd: deductsbnd,\r\n          tap_amount_bnd: totalTAPbnd,\r\n          scp_amount_bnd: totalSCPbnd,\r\n          site_allows_bnd: siteallowsbnd,\r\n          expenses_claims_bnd: expsclaimsbnd,\r\n          nett_pay_bnd: nettPaybnd,\r\n        })\r\n    );\r\n\r\n    //update employee data\r\n    //data.wages = state.wages;\r\n    data.tap_amount = totalTAP;\r\n    data.scp_amount = totalSCP;\r\n    data.total_allowances = allows;\r\n    data.total_deductions = deducts;\r\n    data.site_allows = siteallows;\r\n    data.expenses_claims = expsclaims;\r\n    data.nett_pay = nettPay;\r\n    data.wages_bnd = wagesbnd;\r\n    data.tap_amount_bnd = totalTAPbnd;\r\n    data.scp_amount_bnd = totalSCPbnd;\r\n    data.site_allows_bnd = siteallowsbnd;\r\n    data.expenses_claims_bnd = expsclaimsbnd;\r\n    data.total_allowances_bnd = allowsbnd;\r\n    data.total_deductions_bnd = deductsbnd;\r\n    data.nett_pay_bnd = nettPaybnd;\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleFormSubmit}>\r\n      <Grid container direction=\"row\" style={{ border: \"1px solid white\" }}>\r\n        <Grid item sm={4} align=\"center\" style={{ border: \"1px solid white\" }}>\r\n          <Text as=\"u\" fontSize=\"md\">\r\n            <Heading size=\"sm\">Allowances</Heading>\r\n          </Text>\r\n        </Grid>\r\n\r\n        <Grid item sm={4} align=\"center\" style={{ border: \"1px solid white\" }}>\r\n          <Text as=\"u\" fontSize=\"md\">\r\n            <Heading size=\"sm\">Deductions</Heading>\r\n          </Text>\r\n        </Grid>\r\n        <Grid item sm={4} align=\"center\" style={{ border: \"1px solid white\" }}>\r\n          <Text as=\"u\" fontSize=\"md\">\r\n            <Heading size=\"sm\">Summary</Heading>\r\n            <Heading size=\"sm\">({state.name})</Heading>\r\n          </Text>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container direction=\"row\" style={{ border: \"1px solid white\" }}>\r\n        <Grid item sm={4} align=\"center\" style={{ border: \"1px solid white\" }}>\r\n          <Grid container direction=\"row\" style={{ border: \"1px solid white\" }}>\r\n            <Grid\r\n              item\r\n              sm={8}\r\n              align=\"center\"\r\n              style={{ border: \"1px solid white\" }}\r\n            >\r\n              <Box>\r\n                <Text fontSize=\"sm\">Description</Text>\r\n              </Box>\r\n              <div>\r\n                <TextField\r\n                  label=\"Allowance\"\r\n                  name=\"allows_type1\"\r\n                  variant=\"filled\"\r\n                  type=\"text\"\r\n                  value={state.allows_type1}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Allowance\"\r\n                  name=\"allows_type2\"\r\n                  variant=\"filled\"\r\n                  type=\"text\"\r\n                  displayEmpty\r\n                  defaultValue=\"\"\r\n                  value={state.allows_type2}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Allowance\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"allows_type3\"\r\n                  value={state.allows_type3}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Allowances\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Allowance\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"allows_type4\"\r\n                  value={state.allows_type4}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Allowances\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Allowance\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"allows_type5\"\r\n                  value={state.allows_type5}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Allowances\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Allowance\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"allows_type6\"\r\n                  value={state.allows_type6}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Allowances\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Allowance\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"allows_type7\"\r\n                  value={state.allows_type7}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Allowances\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Allowance\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"allows_type8\"\r\n                  value={state.allows_type8}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Allowances\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <Box p={2}>\r\n                <Checkbox\r\n                  isInvalid={!state.tap_checkbox}\r\n                  isChecked={state.tap_checkbox}\r\n                  colorScheme=\"red\"\r\n                  size=\"md\"\r\n                >\r\n                  <Heading size=\"sm\">TAP/SCP Contribution</Heading>\r\n                </Checkbox>\r\n              </Box>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              sm={4}\r\n              align=\"center\"\r\n              style={{ border: \"1px solid white\" }}\r\n            >\r\n              <Box>\r\n                <Text fontSize=\"sm\">\r\n                  {state.salary_currency ? state.salary_currency : \"BND\"}\r\n                </Text>\r\n              </Box>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"site_allows\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.site_allows}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"expenses_claims\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.expenses_claims}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"allows_type3amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  max=\"9999\"\r\n                  step=\"any\"\r\n                  value={state.allows_type3amt}\r\n                  onChange={(e) => {\r\n                    handleChange(e);\r\n                  }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  errorText={\"\"}\r\n                ></TextField>\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"allows_type4amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.allows_type4amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"allows_type5amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.allows_type5amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"allows_type6amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.allows_type6amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"allows_type7amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.allows_type7amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"allows_type8amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.allows_type8amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item sm={4} align=\"center\" style={{ border: \"1px solid white\" }}>\r\n          <Grid container direction=\"row\" style={{ border: \"1px solid white\" }}>\r\n            <Grid\r\n              item\r\n              sm={8}\r\n              align=\"center\"\r\n              style={{ border: \"1px solid white\" }}\r\n            >\r\n              <Box>\r\n                <Text fontSize=\"sm\">Description</Text>\r\n              </Box>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Deduction\r\n                </InputLabel>\r\n\r\n                <NativeSelect\r\n                  name=\"deducts_type1\"\r\n                  value={state.deducts_type1}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Deductions\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Deduction\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"deducts_type2\"\r\n                  value={state.deducts_type2}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Deductions\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Deduction\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"deducts_type3\"\r\n                  value={state.deducts_type3}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Deductions\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Deduction\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"deducts_type4\"\r\n                  value={state.deducts_type4}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Deductions\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Deduction\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"deducts_type5\"\r\n                  value={state.deducts_type5}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Deductions\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Deduction\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"deducts_type6\"\r\n                  value={state.deducts_type6}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Deductions\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Deduction\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"deducts_type7\"\r\n                  value={state.deducts_type7}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Deductions\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Deduction\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"deducts_type8\"\r\n                  value={state.deducts_type8}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Deductions\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              {state.salary_currency !== \"BND\" && (\r\n                <Box p={2}>\r\n                  <Text fontSize=\"md\">\r\n                    <Heading size=\"sm\">\r\n                      Exchange Rate: {state.currency_rate}\r\n                    </Heading>\r\n                  </Text>\r\n                </Box>\r\n              )}\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              sm={4}\r\n              align=\"center\"\r\n              style={{ border: \"1px solid white\" }}\r\n            >\r\n              <Box>\r\n                <Text fontSize=\"sm\">\r\n                  {state.salary_currency ? state.salary_currency : \"BND\"}\r\n                </Text>\r\n              </Box>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"deducts_type1amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  inputProps={{ minLength: 0 }}\r\n                  value={state.deducts_type1amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"deducts_type2amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.deducts_type2amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"deducts_type3amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.deducts_type3amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"deducts_type4amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.deducts_type4amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"deducts_type5amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.deducts_type5amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"deducts_type6amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.deducts_type6amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"deducts_type7amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.deducts_type7amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"deducts_type8amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.deducts_type8amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item sm={4} align=\"center\" style={{ border: \"1px solid white\" }}>\r\n          <Grid container direction=\"row\" style={{ border: \"1px solid white\" }}>\r\n            {/* <div>\r\n            <h3>{state.name}</h3>\r\n          </div> */}\r\n            <Grid\r\n              item\r\n              sm={\r\n                !state.salary_currency || state.salary_currency === \"BND\"\r\n                  ? 12\r\n                  : 6\r\n              }\r\n              align=\"center\"\r\n              style={{ border: \"1px solid white\" }}\r\n            >\r\n              <Box>\r\n                <Text fontSize=\"sm\">\r\n                  {state.salary_currency ? state.salary_currency : \"BND\"}\r\n                </Text>\r\n              </Box>\r\n              <Divider variant=\"fullWidth\" className={classes.divider} />\r\n              <div>\r\n                <TextField\r\n                  label=\"Wages\"\r\n                  name=\"wages\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.wages}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  // InputProps={{\r\n                  //   readOnly: true,\r\n                  //   min: 0,\r\n                  // }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"TAP Amount\"\r\n                  name=\"tap_amount\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  value={currency(state.tap_amount)}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"SCP Amount\"\r\n                  name=\"scp_amount\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  value={currency(state.scp_amount)}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Site Allowances\"\r\n                  name=\"siteallows\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  value={currency(state.site_allows)}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Expenses Claims\"\r\n                  name=\"expclaims\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  value={currency(state.expenses_claims)}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Total Allowances\"\r\n                  name=\"total_allowances\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  value={currency(state.total_allowances)}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Total Deductions\"\r\n                  name=\"total_deductions\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  value={currency(state.total_deductions)}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Nett Pay\"\r\n                  name=\"nett_pay\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  value={currency(state.nett_pay)}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              {/* <div>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={state.tap_checkbox}\r\n                  onChange={handleChange}\r\n                  name=\"tap_checkbox\"\r\n                />\r\n              }\r\n              label=\"TAP/SCP Contribution\"\r\n            />\r\n          </div> */}\r\n              <div>\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.button}\r\n                  style={{ marginLeft: 10 }}\r\n                  onClick={handleCalc}\r\n                >\r\n                  Calc <Icon className={classes.rightIcon}>send</Icon>\r\n                </Button>\r\n              </div>\r\n            </Grid>\r\n\r\n            {state.salary_currency && state.salary_currency !== \"BND\" && (\r\n              <Grid\r\n                item\r\n                sm={6}\r\n                align=\"center\"\r\n                style={{ border: \"1px solid white\" }}\r\n              >\r\n                <Divider variant=\"fullWidth\" className={classes.divider} />\r\n                <Box>\r\n                  <Text fontSize=\"sm\">\r\n                    {\" \"}\r\n                    {state.salary_currency ? \"BND\" : \"BND\"}\r\n                  </Text>\r\n                </Box>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Wages\"\r\n                    name=\"wages\"\r\n                    variant=\"filled\"\r\n                    type=\"number\"\r\n                    value={currency(state.wages_bnd)}\r\n                    onChange={handleChange}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n\r\n                <div>\r\n                  <TextField\r\n                    label=\"TAP Amount\"\r\n                    name=\"tap_amount\"\r\n                    variant=\"filled\"\r\n                    type=\"number\"\r\n                    value={currency(state.tap_amount_bnd)}\r\n                    onChange={handleChange}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"SCP Amount\"\r\n                    name=\"scp_amount\"\r\n                    variant=\"filled\"\r\n                    type=\"number\"\r\n                    value={currency(state.scp_amount_bnd)}\r\n                    onChange={handleChange}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Site Allowances\"\r\n                    name=\"siteallows\"\r\n                    variant=\"filled\"\r\n                    type=\"number\"\r\n                    value={currency(state.site_allows_bnd)}\r\n                    onChange={handleChange}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Expenses Claims\"\r\n                    name=\"expclaims\"\r\n                    variant=\"filled\"\r\n                    type=\"number\"\r\n                    value={currency(state.expenses_claims_bnd)}\r\n                    onChange={handleChange}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Total Allowances\"\r\n                    name=\"total_allowances\"\r\n                    variant=\"filled\"\r\n                    type=\"number\"\r\n                    value={currency(state.total_allowances_bnd)}\r\n                    onChange={handleChange}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Total Deductions\"\r\n                    name=\"total_deductions\"\r\n                    variant=\"filled\"\r\n                    type=\"number\"\r\n                    value={currency(state.total_deductions_bnd)}\r\n                    onChange={handleChange}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Nett Pay\"\r\n                    name=\"nett_pay\"\r\n                    variant=\"filled\"\r\n                    type=\"number\"\r\n                    value={currency(state.nett_pay_bnd)}\r\n                    onChange={handleChange}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n        {/* <button>Submit</button> */}\r\n      </Grid>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  container: {\r\n    margin: 0,\r\n    padding: 0,\r\n    width: \"80vw\",\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"repeat(auto-fill,250px)\",\r\n    gridAutoRows: \"10px\",\r\n    position: \"absolute\",\r\n    left: \"50%\",\r\n    transform: \"translateX(-50%)\",\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"primary\",\r\n  },\r\n  fixedHeight: {\r\n    height: 800,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(10),\r\n    // display: \"flex\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n    border: \"1px solid\",\r\n    width: \"100%\",\r\n    color: \"primary\",\r\n    bcakgroundColor: \"black\",\r\n  },\r\n  card: {\r\n    backgroundColor: \"black\",\r\n  },\r\n  section: {\r\n    width: \"80vw\",\r\n    margin: \"1rem auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n  },\r\n  underline: {\r\n    width: \"5rem\",\r\n    height: \"0.25rem\",\r\n    marginBottom: \"1.25rem\",\r\n    background: \"var(--clr-primary-5)\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n  },\r\n  title: {\r\n    marginbottom: \"4rem\",\r\n    textAlign: \"center\",\r\n  },\r\n  jobscenter: {\r\n    width: \"80vw\",\r\n    margin: \"0 auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n    flexDirection: \"row\",\r\n  },\r\n  btncontainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    marginBottom: \"4rem\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  jobbtn: {\r\n    background: \"transparent\",\r\n    borderColor: \"transparent\",\r\n    textTransform: \"capitalize\",\r\n    fontSize: \"1.25rem\",\r\n    letterSpacing: \"var(--spacing)\",\r\n    margin: \"0 0.5rem\",\r\n    transition: \"var(--transition)\",\r\n    cursor: \"pointer\",\r\n    padding: \"0.25rem 0\",\r\n    lineHeight: \"1\",\r\n    outlineColor: \"var(--clr-primary-10)\",\r\n    \"&:hover\": {\r\n      color: \"var(--clr-primary-5)\",\r\n      boxShadow: \"0 2px var(--clr-primary-5)\",\r\n    },\r\n  },\r\n  activebtn: {\r\n    color: \"var(--clr-primary-5)\",\r\n    boxShadow: \"0 2px var(--clr-primary-5)\",\r\n  },\r\n  jobinfo: {\r\n    fontWeight: \"400\",\r\n  },\r\n  divider: {\r\n    // Theme Color, or use css color in quote\r\n    background: \"white\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 350,\r\n  },\r\n  divContainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n  },\r\n  formLabel: {\r\n    fontSize: 12,\r\n    textAlign: \"left\",\r\n    marginLeft: 8,\r\n    marginTop: 5,\r\n  },\r\n}));\r\n\r\nexport default PayForm;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeForm.js",["1395","1396","1397","1398","1399","1400","1401","1402","1403"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  TextField,\r\n  Paper,\r\n  Typography,\r\n  Grid,\r\n  Divider,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport currency from \"currency.js\";\r\nimport CurrencyTextField from \"@unicef/material-ui-currency-textfield\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\n//import { editEmployeeIdState } from \"./data/atomdata\";\r\n//import { useAllEmployees } from \"./employees/useAllEmployees\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\nimport { useAddEmployees } from \"./employees/useAddEmployees\";\r\nimport { useUpdateEmployees } from \"./employees/useUpdateEmployees\";\r\nimport { useDepartments } from \"./departments/useDepartments\";\r\nimport { useDesignations } from \"./designations/useDesignations\";\r\n//import { useCurrency } from \"./currency/useCurrency\";\r\nimport EmpFamily from \"./EmpFamily\";\r\nimport EmpEducations from \"./EmpEducations\";\r\nimport EmpExperiences from \"./EmpExperiences\";\r\nimport EmpTrainings from \"./EmpTrainings\";\r\nimport EmpJobhistory from \"./EmpJobhistory\";\r\n\r\nconst initial_values = {\r\n  name: \"\",\r\n  gender: \"\",\r\n  ic_no: \"\",\r\n  email: \"\",\r\n  birthdate: null,\r\n  age: 0,\r\n  nationality: \"\",\r\n  address: \"\",\r\n  leave_bal: 0,\r\n  leave_bf: 0,\r\n  leave_entitled: 0,\r\n  basic_salary: 0,\r\n  salary_currency: \"BND\",\r\n  bank_name: \"\",\r\n  bank_acno: \"\",\r\n  tap_checkbox: true,\r\n  tap_acno: \"\",\r\n  scp_acno: \"\",\r\n  date_of_join: null,\r\n  date_of_resign: null,\r\n  hasresigned: false,\r\n  designation: \"\",\r\n  department: \"\",\r\n  passportno: \"\",\r\n  passport_expirydate: null,\r\n  workpermitno: \"\",\r\n  workpermit_expirydate: null,\r\n  siteallows_fee: 0,\r\n  perdiem_fee: 0,\r\n  empno: \"\",\r\n  reporting_to: \"\",\r\n  reporting_email: \"\",\r\n};\r\n\r\nconst EmployeeForm = () => {\r\n  const classes = useStyles();\r\n  const { employees, employeeId, setEmployeeId } = useEmployees();\r\n  //const { allemployees, setAllEmpId } = useAllEmployees();\r\n  const addEmployees = useAddEmployees();\r\n  const updateEmployees = useUpdateEmployees();\r\n  //const currencyRate = useCurrency()\r\n  const { designations } = useDesignations();\r\n  const { departments } = useDepartments();\r\n  const [reportemail, setReportEmail] = useState(\"\");\r\n  const [empage, setEmpage] = useState(0);\r\n  const [checktap, setCheckTap] = useState(false);\r\n  const [isresigned, setIsresigned] = useState(false);\r\n  //const [empId, setEmpId] = useRecoilState(editEmployeeIdState);\r\n  const { handleSubmit, control, setValue, register } = useForm();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { isEditing, editEmployeeID } = useEmployeesContext();\r\n  const single_employee = employees\r\n    .filter((r) => r.id === editEmployeeID)\r\n    .map((r) => {\r\n      return { ...r };\r\n    });\r\n  const {\r\n    name,\r\n    ic_no,\r\n    gender,\r\n    birthdate,\r\n    age,\r\n    email,\r\n    nationality,\r\n    address,\r\n    leave_bal,\r\n    leave_entitled,\r\n    leave_bf,\r\n    basic_salary,\r\n    salary_currency,\r\n    bank_name,\r\n    bank_acno,\r\n    tap_checkbox,\r\n    tap_acno,\r\n    scp_acno,\r\n    date_of_join,\r\n    date_of_resign,\r\n    hasresigned,\r\n    designation,\r\n    department,\r\n    passportno,\r\n    passport_expirydate,\r\n    workpermitno,\r\n    workpermit_expirydate,\r\n    siteallows_fee,\r\n    perdiem_fee,\r\n    empno,\r\n    reporting_to,\r\n    reporting_email,\r\n  } = single_employee[0] || initial_values;\r\n\r\n  const calculateAge = (dob) => {\r\n    var today = new Date();\r\n    var birthDate = new Date(dob);\r\n    var age = today.getFullYear() - birthDate.getFullYear();\r\n    var m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      age--;\r\n    }\r\n    return age;\r\n  };\r\n\r\n  const handleReportingTo = (name) => {\r\n    const emp = employees\r\n      .filter((f) => f.name === name)\r\n      .map((r) => {\r\n        return { ...r };\r\n      });\r\n    setReportEmail(emp[0].email);\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    if (isEditing) {\r\n      updateEmployees({\r\n        id: editEmployeeID,\r\n        ...data,\r\n        reporting_email: reportemail,\r\n      });\r\n    } else {\r\n      addEmployees({ ...data, reporting_email: reportemail });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let age = calculateAge(birthdate);\r\n    setEmpage(age);\r\n    setCheckTap(tap_checkbox);\r\n    setIsresigned(hasresigned);\r\n    setReportEmail(reporting_email);\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   setAllEmpId(\"111\");\r\n  // }, []);\r\n\r\n  if (!employees) {\r\n    return <h2>Loading ...</h2>;\r\n  }\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <Paper className={classes.root}>\r\n          <Grid container className={classes.root} spacing={15}>\r\n            <div>\r\n              <Typography variant=\"h5\" component=\"h3\">\r\n                EMPLOYEE FORM\r\n              </Typography>\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n              >\r\n                Submit <Icon className={classes.rightIcon}>send</Icon>\r\n              </Button>\r\n            </div>\r\n          </Grid>\r\n          <Divider className={classes.divider} />\r\n          <Grid item xs={12}>\r\n            <div>\r\n              <div>\r\n                <Controller\r\n                  name=\"name\"\r\n                  control={control}\r\n                  defaultValue={name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Name\"\r\n                        id=\"standard-name\"\r\n                        name=\"name\"\r\n                        defaultValue={name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"empno\"\r\n                  control={control}\r\n                  defaultValue={empno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Emp No\"\r\n                        id=\"standard-empno\"\r\n                        defaultValue={empno}\r\n                        name=\"empno\"\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"email\"\r\n                  control={control}\r\n                  defaultValue={email}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Email\"\r\n                        id=\"standard-email\"\r\n                        name=\"email\"\r\n                        defaultValue={email}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        inputProps={{ readOnly: true }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"ic_no\"\r\n                  control={control}\r\n                  defaultValue={ic_no}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"IC No\"\r\n                        id=\"standard-icno\"\r\n                        defaultValue={ic_no}\r\n                        name=\"ic_no\"\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"birthdate\"\r\n                  control={control}\r\n                  defaultValue={birthdate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Birth Date\"\r\n                        id=\"standard-birthdate\"\r\n                        name=\"birthdate\"\r\n                        type=\"date\"\r\n                        defaultValue={birthdate}\r\n                        className={classes.textField}\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(e.target.value);\r\n                          let age = calculateAge(e.target.value);\r\n                          console.log(\"emp\", birthdate, age);\r\n                          setEmpage(age);\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"age\"\r\n                  control={control}\r\n                  defaultValue={empage}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Age\"\r\n                        type=\"number\"\r\n                        id=\"standard-age\"\r\n                        name=\"empage\"\r\n                        //defaultValue={age}\r\n                        value={empage}\r\n                        className={classes.textField}\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(parseInt(e.target.value, 10));\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"passportno\"\r\n                  control={control}\r\n                  defaultValue={passportno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Passport No\"\r\n                        id=\"standard-passportno\"\r\n                        name=\"passportno\"\r\n                        defaultValue={passportno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"passport_expirydate\"\r\n                  control={control}\r\n                  defaultValue={passport_expirydate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Passport Expiry Date\"\r\n                        id=\"standard-ppexpiry\"\r\n                        name=\"passport_expirydate\"\r\n                        type=\"date\"\r\n                        defaultValue={passport_expirydate}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"nationality\"\r\n                  control={control}\r\n                  defaultValue={nationality}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Nationality\"\r\n                        id=\"standard-nationality\"\r\n                        name=\"nationality\"\r\n                        defaultValue={nationality}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"gender\"\r\n                  control={control}\r\n                  defaultValue={gender}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Gender\"\r\n                        id=\"standard-gender\"\r\n                        name=\"gender\"\r\n                        defaultValue={gender}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        <MenuItem value=\"Male\">Male</MenuItem>\r\n                        <MenuItem value=\"Female\">Female</MenuItem>\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"address\"\r\n                  control={control}\r\n                  defaultValue={address}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Address\"\r\n                        id=\"standard-address\"\r\n                        name=\"address\"\r\n                        defaultValue={address}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <Divider className={classes.divider} />\r\n            <div>\r\n              <div>\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"basic_salary\"\r\n                    control={control}\r\n                    defaultValue={basic_salary}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <CurrencyTextField\r\n                          label=\"Basic Salary\"\r\n                          variant=\"standard\"\r\n                          value={basic_salary}\r\n                          currencySymbol=\"$\"\r\n                          outputFormat=\"string\"\r\n                          decimalCharacter=\".\"\r\n                          digitGroupSeparator=\",\"\r\n                          decimalPlaces=\"2\"\r\n                          className={classes.textField}\r\n                          id=\"standard-basicsalary\"\r\n                          name=\"basic_salary\"\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            onChange(parseFloat(currency(e.target.value), 10));\r\n                          }}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                        />\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"salary_currency\"\r\n                    control={control}\r\n                    defaultValue={salary_currency}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Currency\"\r\n                          id=\"standard-currency\"\r\n                          name=\"salary_currency\"\r\n                          defaultValue={salary_currency}\r\n                          className={classes.textField}\r\n                          onChange={onChange}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                          select\r\n                        >\r\n                          <MenuItem value=\"BND\">BND</MenuItem>\r\n                          <MenuItem value=\"USD\">USD</MenuItem>\r\n                          <MenuItem value=\"MYR\">MYR</MenuItem>\r\n                        </TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n              </div>\r\n              <div>\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"siteallows_fee\"\r\n                    control={control}\r\n                    defaultValue={siteallows_fee}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <CurrencyTextField\r\n                          label=\"Site Allowances Fee\"\r\n                          variant=\"standard\"\r\n                          value={siteallows_fee}\r\n                          currencySymbol=\"$\"\r\n                          outputFormat=\"number\"\r\n                          decimalCharacter=\".\"\r\n                          digitGroupSeparator=\",\"\r\n                          decimalPlaces=\"2\"\r\n                          className={classes.textField}\r\n                          id=\"standard-siteallowances\"\r\n                          name=\"siteallows_fee\"\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            onChange(parseFloat(currency(e.target.value), 10));\r\n                          }}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                        />\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"perdiem_fee\"\r\n                    control={control}\r\n                    defaultValue={perdiem_fee}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <CurrencyTextField\r\n                          label=\"Per Diem Fee\"\r\n                          variant=\"standard\"\r\n                          value={perdiem_fee}\r\n                          currencySymbol=\"$\"\r\n                          outputFormat=\"number\"\r\n                          decimalCharacter=\".\"\r\n                          digitGroupSeparator=\",\"\r\n                          decimalPlaces=\"2\"\r\n                          className={classes.textField}\r\n                          id=\"standard-perdiem\"\r\n                          name=\"perdiem_fee\"\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            onChange(parseFloat(currency(e.target.value), 10));\r\n                          }}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                        />\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"tap_checkbox\"\r\n                  control={control}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Checkbox\r\n                            name=\"tap_checkbox\"\r\n                            defaultValue={tap_checkbox}\r\n                            checked={checktap}\r\n                            type=\"checkbox\"\r\n                            onChange={(e) => {\r\n                              onChange(e.target.checked);\r\n                              setCheckTap(e.target.checked);\r\n                            }}\r\n                          />\r\n                        }\r\n                        label=\"TAP/SCP Contribution\"\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"tap_acno\"\r\n                  control={control}\r\n                  defaultValue={tap_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"TAP Ac No\"\r\n                        id=\"standard-tapno\"\r\n                        name=\"tap_acno\"\r\n                        defaultValue={tap_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"scp_acno\"\r\n                  control={control}\r\n                  defaultValue={scp_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"SCP Ac No\"\r\n                        id=\"standard-scpno\"\r\n                        name=\"scp_acno\"\r\n                        defaultValue={scp_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"bank_name\"\r\n                  control={control}\r\n                  defaultValue={bank_name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Bank Name\"\r\n                        id=\"standard-bankname\"\r\n                        name=\"bank_name\"\r\n                        defaultValue={bank_name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"bank_acno\"\r\n                  control={control}\r\n                  defaultValue={bank_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Bank Ac No\"\r\n                        id=\"standard-backacno\"\r\n                        name=\"bank_acno\"\r\n                        defaultValue={bank_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  // rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"workpermitno\"\r\n                  control={control}\r\n                  defaultValue={workpermitno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Work Permit No\"\r\n                        id=\"standard-workpermitno\"\r\n                        name=\"workpermitno\"\r\n                        defaultValue={workpermitno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"workpermit_expirydate\"\r\n                  control={control}\r\n                  defaultValue={workpermit_expirydate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Work Permit Expiry Date\"\r\n                        id=\"standard-workpermitexpiry\"\r\n                        name=\"workpermit_expirydate\"\r\n                        type=\"date\"\r\n                        defaultValue={workpermit_expirydate}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <Divider className={classes.divider} />\r\n              <div>\r\n                <Controller\r\n                  name=\"date_of_join\"\r\n                  control={control}\r\n                  defaultValue={date_of_join}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Joining Date\"\r\n                        id=\"standard-joiningdate\"\r\n                        name=\"date_of_join\"\r\n                        type=\"date\"\r\n                        defaultValue={date_of_join}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <div>\r\n                  <Controller\r\n                    name=\"date_of_resign\"\r\n                    control={control}\r\n                    defaultValue={date_of_resign}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Resign Date\"\r\n                          id=\"standard-resindate\"\r\n                          name=\"date_of_resign\"\r\n                          type=\"date\"\r\n                          defaultValue={date_of_resign}\r\n                          className={classes.textField}\r\n                          onChange={onChange}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                          InputLabelProps={{\r\n                            shrink: true,\r\n                          }}\r\n                        />\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Email is required\" }}\r\n                  />\r\n\r\n                  <Controller\r\n                    name=\"hasresigned\"\r\n                    control={control}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <FormControlLabel\r\n                          control={\r\n                            <Checkbox\r\n                              name=\"hasresigned\"\r\n                              defaultValue={hasresigned}\r\n                              checked={isresigned}\r\n                              type=\"checkbox\"\r\n                              onChange={(e) => {\r\n                                onChange(e.target.checked);\r\n                                setIsresigned(e.target.checked);\r\n                              }}\r\n                            />\r\n                          }\r\n                          label=\"Resigned\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"leave_entitled\"\r\n                  control={control}\r\n                  defaultValue={leave_entitled}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Annual Leaves Entitled\"\r\n                        id=\"standard-annualleave\"\r\n                        name=\"leave_entitled\"\r\n                        type=\"numeric\"\r\n                        defaultValue={leave_entitled}\r\n                        className={classes.textField}\r\n                        onChange={(e) =>\r\n                          onChange(parseFloat(e.target.value, 10))\r\n                        }\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"leave_bf\"\r\n                  control={control}\r\n                  defaultValue={leave_bf}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Leaves B/F\"\r\n                        id=\"standard-leavebal\"\r\n                        name=\"leave_bf\"\r\n                        type=\"numeric\"\r\n                        defaultValue={leave_bf}\r\n                        className={classes.textField}\r\n                        onChange={(e) =>\r\n                          onChange(parseFloat(e.target.value, 10))\r\n                        }\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"designation\"\r\n                  control={control}\r\n                  defaultValue={designation}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Designation\"\r\n                        id=\"standard-designation\"\r\n                        name=\"designation\"\r\n                        defaultValue={designation}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        <MenuItem value=\"\">None</MenuItem>\r\n                        {designations &&\r\n                          designations.map((r) => {\r\n                            return (\r\n                              <MenuItem key={r.id} value={r.name}>\r\n                                {r.name}\r\n                              </MenuItem>\r\n                            );\r\n                          })}\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"department\"\r\n                  control={control}\r\n                  defaultValue={department}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Department\"\r\n                        id=\"standard-department\"\r\n                        name=\"department\"\r\n                        defaultValue={department}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        <MenuItem value=\"\">None</MenuItem>\r\n                        {departments &&\r\n                          departments.map((r) => {\r\n                            return (\r\n                              <MenuItem key={r.id} value={r.name}>\r\n                                {r.name}\r\n                              </MenuItem>\r\n                            );\r\n                          })}\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"reporting_to\"\r\n                  control={control}\r\n                  defaultValue={reporting_to}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Reporting To\"\r\n                        id=\"standard-reportingto\"\r\n                        name=\"reporting_to\"\r\n                        defaultValue={reporting_to}\r\n                        className={classes.textField}\r\n                        onChange={(e) => {\r\n                          onChange(e.target.value);\r\n                          handleReportingTo(e.target.value);\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        <MenuItem value=\"\">None</MenuItem>\r\n                        {employees &&\r\n                          employees.map((r) => {\r\n                            return (\r\n                              <MenuItem key={r.id} value={r.name}>\r\n                                {r.name}\r\n                              </MenuItem>\r\n                            );\r\n                          })}\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"reporting_email\"\r\n                  control={control}\r\n                  defaultValue={reportemail}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Reporting Email\"\r\n                        id=\"standard-reportingemail\"\r\n                        name=\"reporting_email\"\r\n                        value={reportemail}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <Divider className={classes.divider} />\r\n            </div>\r\n          </Grid>\r\n          <Divider />\r\n        </Paper>\r\n      </form>\r\n\r\n      <div>\r\n        {/* <Grid xs={12}>\r\n          <EmpJobhistory\r\n            staffname={name}\r\n            empid={editEmployeeID}\r\n            basicsalary={basic_salary}\r\n            siteallows={siteallows_fee}\r\n            department={department}\r\n            designaton={designation}\r\n          />\r\n        </Grid> */}\r\n        <Grid xs={12}>\r\n          <EmpFamily />\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <EmpEducations />\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <EmpExperiences />\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <EmpTrainings />\r\n        </Grid>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  divider: {\r\n    padding: 4,\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 350,\r\n  },\r\n}));\r\n\r\nexport default EmployeeForm;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\allowances\\useAllowances.js",[],["1404","1405"],"D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsManager.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsAdminManager.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsOpsSpvr.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsAdmin.js",["1406"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Text} from \"@chakra-ui/react\"\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\r\nimport FlightIcon from \"@material-ui/icons/Flight\";\r\nimport PeopleIcon from \"@material-ui/icons/People\";\r\nimport LayersIcon from \"@material-ui/icons/Layers\";\r\n//import MonetizationOnIcon from \"@material-ui/icons/MonetizationOn\";\r\n//import ShoppingCartIcon from \"@material-ui/icons/ShoppingCart\";\r\n//import MoneyIcon from \"@material-ui/icons/Money\";\r\n// import Collapse from \"@material-ui/core/Collapse\";\r\n// import ExpandLess from \"@material-ui/icons/ExpandLess\";\r\n// import ExpandMore from \"@material-ui/icons/ExpandMore\";\r\n\r\nconst MenuListItems = () => {\r\n  const classes = useStyles();\r\n  //const [openPay, setOpenPay] = useState(false);\r\n  //const [openTable, setOpenTable] = useState(false);\r\n\r\n  // const handleClickPay = () => {\r\n  //   setOpenPay(!openPay);\r\n  // };\r\n\r\n  // const handleClickTable = () => {\r\n  //   setOpenTable(!openTable);\r\n  // };\r\n\r\n  return (\r\n    <div className={classes.content}>\r\n      <ListSubheader align=\"center\" className={classes.itemIcon}>\r\n        <Text color=\"blue\" fontSize=\"21\" fontWeight=\"bold\">\r\n          Admin\r\n        </Text>\r\n      </ListSubheader>\r\n\r\n      <Link to=\"/\">\r\n        <ListItem button>\r\n          <ListItemIcon className={classes.itemIcon}>\r\n            <DashboardIcon />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            primary=\"Dashboard\"\r\n            className={classes.categoryHeaderPrimary}\r\n          />\r\n        </ListItem>\r\n      </Link>\r\n\r\n      <Link to=\"/allemployees\">\r\n        <ListItem button>\r\n          <ListItemIcon className={classes.itemIcon}>\r\n            <PeopleIcon />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            primary=\"All Employees\"\r\n            className={classes.categoryHeaderPrimary}\r\n          />\r\n        </ListItem>\r\n      </Link>\r\n\r\n      {/* <Link to=\"/leave\">\r\n        <ListItem button>\r\n          <ListItemIcon className={classes.itemIcon}>\r\n            <FlightIcon />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            primary=\"Leave\"\r\n            className={classes.categoryHeaderPrimary}\r\n          />\r\n        </ListItem>\r\n      </Link> */}\r\n\r\n      {/* <Link to=\"/expenses\">\r\n        <ListItem button>\r\n          <ListItemIcon className={classes.itemIcon}>\r\n            <ShoppingCartIcon />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            primary=\"Expenses\"\r\n            className={classes.categoryHeaderPrimary}\r\n          />\r\n        </ListItem>\r\n      </Link> */}\r\n\r\n      <Link to=\"/tables\">\r\n        <ListItem button>\r\n          <ListItemIcon className={classes.itemIcon}>\r\n            <LayersIcon />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            primary=\"Tables\"\r\n            className={classes.categoryHeaderPrimary}\r\n          />\r\n        </ListItem>\r\n      </Link>\r\n\r\n      {/* <Link to=\"/example\">\r\n        <ListItem button>\r\n          <ListItemIcon className={classes.itemIcon}>\r\n            <LayersIcon />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            primary=\"Example\"\r\n            className={classes.categoryHeaderPrimary}\r\n          />\r\n        </ListItem>\r\n      </Link> */}\r\n\r\n      {/* <ListItem button onClick={handleClickTable}>\r\n        <ListItemIcon className={classes.itemIcon}>\r\n          <LayersIcon />\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Tables\" className={classes.item} />\r\n        {openTable ? <ExpandLess /> : <ExpandMore />}\r\n      </ListItem>\r\n      <Collapse in={openTable} timeout=\"auto\" unmountOnExit>\r\n        <List component=\"div\" disablePadding>\r\n          <Link to=\"/clients\">\r\n            <ListItem button className={classes.nested}>\r\n              <ListItemIcon></ListItemIcon>\r\n              <ListItemText primary=\"Clients\" className={classes.item} />\r\n            </ListItem>\r\n          </Link>\r\n\r\n          <Link to=\"/departments\">\r\n            <ListItem button className={classes.nested}>\r\n              <ListItemIcon></ListItemIcon>\r\n              <ListItemText primary=\"Departments\" className={classes.item} />\r\n            </ListItem>\r\n          </Link>\r\n\r\n          <Link to=\"/designation\">\r\n            <ListItem button className={classes.nested}>\r\n              <ListItemIcon></ListItemIcon>\r\n              <ListItemText primary=\"Designation\" className={classes.item} />\r\n            </ListItem>\r\n          </Link>\r\n\r\n          <Link to=\"/allowances\">\r\n            <ListItem button className={classes.nested}>\r\n              <ListItemIcon></ListItemIcon>\r\n              <ListItemText primary=\"Allowances\" className={classes.item} />\r\n            </ListItem>\r\n          </Link>\r\n        </List>\r\n      </Collapse> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  mainHeader: {\r\n    fontSize: 24,\r\n    color: \"primary\",\r\n  },\r\n  categoryHeader: {\r\n    paddingTop: theme.spacing(2),\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  categoryHeaderPrimary: {\r\n    color: \"primary\",\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  item: {\r\n    paddingTop: 1,\r\n    paddingBottom: 1,\r\n    color: \"primary\",\r\n    \"&:hover,&:focus\": {\r\n      backgroundColor: \"rgba(255, 255, 255, 0.08)\",\r\n    },\r\n  },\r\n  itemCategory: {\r\n    backgroundColor: \"#232f3e\",\r\n    boxShadow: \"0 -1px 0 #404854 inset\",\r\n    paddingTop: theme.spacing(2),\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  firebase: {\r\n    fontSize: 24,\r\n    color: theme.palette.common.orange,\r\n  },\r\n  itemActiveItem: {\r\n    color: \"primary\",\r\n  },\r\n  itemPrimary: {\r\n    fontSize: \"inherit\",\r\n  },\r\n  itemIcon: {\r\n    minWidth: \"auto\",\r\n    marginRight: theme.spacing(2),\r\n    color: \"primary\",\r\n  },\r\n  divider: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default MenuListItems;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsStaff.js",[],{"ruleId":"1407","replacedBy":"1408"},{"ruleId":"1409","replacedBy":"1410"},{"ruleId":"1411","severity":1,"message":"1412","line":15,"column":8,"nodeType":"1413","messageId":"1414","endLine":15,"endColumn":12},{"ruleId":"1411","severity":1,"message":"1415","line":13,"column":22,"nodeType":"1413","messageId":"1414","endLine":13,"endColumn":35},{"ruleId":"1411","severity":1,"message":"1415","line":13,"column":22,"nodeType":"1413","messageId":"1414","endLine":13,"endColumn":35},{"ruleId":"1411","severity":1,"message":"1416","line":16,"column":9,"nodeType":"1413","messageId":"1414","endLine":16,"endColumn":19},{"ruleId":"1407","replacedBy":"1408"},{"ruleId":"1409","replacedBy":"1410"},{"ruleId":"1411","severity":1,"message":"1417","line":5,"column":25,"nodeType":"1413","messageId":"1414","endLine":5,"endColumn":29},{"ruleId":"1411","severity":1,"message":"1418","line":47,"column":3,"nodeType":"1413","messageId":"1414","endLine":47,"endColumn":15},{"ruleId":"1411","severity":1,"message":"1419","line":86,"column":10,"nodeType":"1413","messageId":"1414","endLine":86,"endColumn":16},{"ruleId":"1411","severity":1,"message":"1420","line":8,"column":10,"nodeType":"1413","messageId":"1414","endLine":8,"endColumn":13},{"ruleId":"1411","severity":1,"message":"1421","line":42,"column":10,"nodeType":"1413","messageId":"1414","endLine":42,"endColumn":14},{"ruleId":"1411","severity":1,"message":"1422","line":76,"column":9,"nodeType":"1413","messageId":"1414","endLine":76,"endColumn":16},{"ruleId":"1423","severity":1,"message":"1424","line":76,"column":19,"nodeType":"1413","endLine":76,"endColumn":26},{"ruleId":"1411","severity":1,"message":"1415","line":32,"column":22,"nodeType":"1413","messageId":"1414","endLine":32,"endColumn":35},{"ruleId":"1411","severity":1,"message":"1425","line":107,"column":10,"nodeType":"1413","messageId":"1414","endLine":107,"endColumn":18},{"ruleId":"1423","severity":1,"message":"1426","line":121,"column":6,"nodeType":"1427","endLine":121,"endColumn":20,"suggestions":"1428"},{"ruleId":"1423","severity":1,"message":"1429","line":411,"column":6,"nodeType":"1427","endLine":411,"endColumn":8,"suggestions":"1430"},{"ruleId":"1411","severity":1,"message":"1431","line":192,"column":10,"nodeType":"1413","messageId":"1414","endLine":192,"endColumn":22},{"ruleId":"1423","severity":1,"message":"1432","line":211,"column":6,"nodeType":"1427","endLine":211,"endColumn":8,"suggestions":"1433"},{"ruleId":"1423","severity":1,"message":"1434","line":226,"column":6,"nodeType":"1427","endLine":226,"endColumn":19,"suggestions":"1435"},{"ruleId":"1423","severity":1,"message":"1436","line":231,"column":6,"nodeType":"1427","endLine":231,"endColumn":14,"suggestions":"1437"},{"ruleId":"1423","severity":1,"message":"1438","line":236,"column":5,"nodeType":"1427","endLine":236,"endColumn":19,"suggestions":"1439"},{"ruleId":"1411","severity":1,"message":"1440","line":257,"column":9,"nodeType":"1413","messageId":"1414","endLine":257,"endColumn":14},{"ruleId":"1423","severity":1,"message":"1441","line":98,"column":5,"nodeType":"1427","endLine":98,"endColumn":7,"suggestions":"1442"},{"ruleId":"1411","severity":1,"message":"1443","line":31,"column":11,"nodeType":"1413","messageId":"1414","endLine":31,"endColumn":15},{"ruleId":"1411","severity":1,"message":"1444","line":69,"column":21,"nodeType":"1413","messageId":"1414","endLine":69,"endColumn":34},{"ruleId":"1411","severity":1,"message":"1445","line":74,"column":34,"nodeType":"1413","messageId":"1414","endLine":74,"endColumn":42},{"ruleId":"1411","severity":1,"message":"1446","line":74,"column":44,"nodeType":"1413","messageId":"1414","endLine":74,"endColumn":52},{"ruleId":"1411","severity":1,"message":"1415","line":75,"column":22,"nodeType":"1413","messageId":"1414","endLine":75,"endColumn":35},{"ruleId":"1423","severity":1,"message":"1447","line":171,"column":6,"nodeType":"1427","endLine":171,"endColumn":8,"suggestions":"1448"},{"ruleId":"1411","severity":1,"message":"1449","line":1,"column":17,"nodeType":"1413","messageId":"1414","endLine":1,"endColumn":25},{"ruleId":"1411","severity":1,"message":"1415","line":51,"column":22,"nodeType":"1413","messageId":"1414","endLine":51,"endColumn":35},{"ruleId":"1423","severity":1,"message":"1450","line":46,"column":6,"nodeType":"1427","endLine":46,"endColumn":8,"suggestions":"1451"},{"ruleId":"1411","severity":1,"message":"1415","line":36,"column":22,"nodeType":"1413","messageId":"1414","endLine":36,"endColumn":35},{"ruleId":"1411","severity":1,"message":"1415","line":119,"column":22,"nodeType":"1413","messageId":"1414","endLine":119,"endColumn":35},{"ruleId":"1411","severity":1,"message":"1452","line":127,"column":22,"nodeType":"1413","messageId":"1414","endLine":127,"endColumn":35},{"ruleId":"1411","severity":1,"message":"1453","line":132,"column":18,"nodeType":"1413","messageId":"1414","endLine":132,"endColumn":27},{"ruleId":"1423","severity":1,"message":"1454","line":162,"column":6,"nodeType":"1427","endLine":162,"endColumn":35,"suggestions":"1455"},{"ruleId":"1411","severity":1,"message":"1415","line":46,"column":22,"nodeType":"1413","messageId":"1414","endLine":46,"endColumn":35},{"ruleId":"1411","severity":1,"message":"1456","line":53,"column":10,"nodeType":"1413","messageId":"1414","endLine":53,"endColumn":23},{"ruleId":"1411","severity":1,"message":"1457","line":54,"column":10,"nodeType":"1413","messageId":"1414","endLine":54,"endColumn":22},{"ruleId":"1411","severity":1,"message":"1458","line":57,"column":17,"nodeType":"1413","messageId":"1414","endLine":57,"endColumn":25},{"ruleId":"1423","severity":1,"message":"1459","line":76,"column":6,"nodeType":"1427","endLine":76,"endColumn":21,"suggestions":"1460"},{"ruleId":"1423","severity":1,"message":"1461","line":102,"column":3,"nodeType":"1413","endLine":102,"endColumn":12},{"ruleId":"1462","severity":1,"message":"1463","line":562,"column":19,"nodeType":"1464","endLine":562,"endColumn":43},{"ruleId":"1462","severity":1,"message":"1465","line":572,"column":19,"nodeType":"1464","endLine":572,"endColumn":45},{"ruleId":"1462","severity":1,"message":"1466","line":587,"column":11,"nodeType":"1464","endLine":592,"endColumn":13},{"ruleId":"1462","severity":1,"message":"1467","line":602,"column":11,"nodeType":"1464","endLine":607,"endColumn":13},{"ruleId":"1411","severity":1,"message":"1468","line":17,"column":31,"nodeType":"1413","messageId":"1414","endLine":17,"endColumn":39},{"ruleId":"1411","severity":1,"message":"1469","line":97,"column":5,"nodeType":"1413","messageId":"1414","endLine":97,"endColumn":13},{"ruleId":"1411","severity":1,"message":"1470","line":98,"column":5,"nodeType":"1413","messageId":"1414","endLine":98,"endColumn":13},{"ruleId":"1411","severity":1,"message":"1471","line":100,"column":5,"nodeType":"1413","messageId":"1414","endLine":100,"endColumn":13},{"ruleId":"1411","severity":1,"message":"1472","line":112,"column":5,"nodeType":"1413","messageId":"1414","endLine":112,"endColumn":20},{"ruleId":"1411","severity":1,"message":"1415","line":124,"column":22,"nodeType":"1413","messageId":"1414","endLine":124,"endColumn":35},{"ruleId":"1411","severity":1,"message":"1449","line":1,"column":17,"nodeType":"1413","messageId":"1414","endLine":1,"endColumn":25},{"ruleId":"1411","severity":1,"message":"1473","line":21,"column":10,"nodeType":"1413","messageId":"1414","endLine":21,"endColumn":34},{"ruleId":"1411","severity":1,"message":"1474","line":86,"column":11,"nodeType":"1413","messageId":"1414","endLine":86,"endColumn":22},{"ruleId":"1411","severity":1,"message":"1475","line":86,"column":24,"nodeType":"1413","messageId":"1414","endLine":86,"endColumn":37},{"ruleId":"1476","severity":1,"message":"1477","line":91,"column":7,"nodeType":"1413","messageId":"1478","endLine":91,"endColumn":31},{"ruleId":"1423","severity":1,"message":"1454","line":114,"column":6,"nodeType":"1427","endLine":114,"endColumn":35,"suggestions":"1479"},{"ruleId":"1411","severity":1,"message":"1449","line":1,"column":17,"nodeType":"1413","messageId":"1414","endLine":1,"endColumn":25},{"ruleId":"1423","severity":1,"message":"1441","line":71,"column":6,"nodeType":"1427","endLine":71,"endColumn":8,"suggestions":"1480"},{"ruleId":"1411","severity":1,"message":"1481","line":75,"column":24,"nodeType":"1413","messageId":"1414","endLine":75,"endColumn":39},{"ruleId":"1411","severity":1,"message":"1482","line":15,"column":10,"nodeType":"1413","messageId":"1414","endLine":15,"endColumn":24},{"ruleId":"1411","severity":1,"message":"1483","line":16,"column":10,"nodeType":"1413","messageId":"1414","endLine":16,"endColumn":25},{"ruleId":"1411","severity":1,"message":"1484","line":49,"column":23,"nodeType":"1413","messageId":"1414","endLine":49,"endColumn":29},{"ruleId":"1411","severity":1,"message":"1485","line":49,"column":31,"nodeType":"1413","messageId":"1414","endLine":49,"endColumn":40},{"ruleId":"1423","severity":1,"message":"1486","line":102,"column":6,"nodeType":"1427","endLine":102,"endColumn":8,"suggestions":"1487"},{"ruleId":"1423","severity":1,"message":"1488","line":73,"column":6,"nodeType":"1427","endLine":73,"endColumn":8,"suggestions":"1489"},{"ruleId":"1423","severity":1,"message":"1490","line":22,"column":6,"nodeType":"1427","endLine":22,"endColumn":8,"suggestions":"1491"},{"ruleId":"1411","severity":1,"message":"1492","line":68,"column":10,"nodeType":"1413","messageId":"1414","endLine":68,"endColumn":18},{"ruleId":"1411","severity":1,"message":"1431","line":69,"column":10,"nodeType":"1413","messageId":"1414","endLine":69,"endColumn":22},{"ruleId":"1423","severity":1,"message":"1493","line":97,"column":6,"nodeType":"1427","endLine":97,"endColumn":8,"suggestions":"1494"},{"ruleId":"1411","severity":1,"message":"1415","line":52,"column":22,"nodeType":"1413","messageId":"1414","endLine":52,"endColumn":35},{"ruleId":"1423","severity":1,"message":"1495","line":108,"column":6,"nodeType":"1427","endLine":108,"endColumn":8,"suggestions":"1496"},{"ruleId":"1411","severity":1,"message":"1449","line":1,"column":17,"nodeType":"1413","messageId":"1414","endLine":1,"endColumn":25},{"ruleId":"1411","severity":1,"message":"1415","line":24,"column":22,"nodeType":"1413","messageId":"1414","endLine":24,"endColumn":35},{"ruleId":"1423","severity":1,"message":"1497","line":105,"column":6,"nodeType":"1427","endLine":105,"endColumn":8,"suggestions":"1498"},{"ruleId":"1411","severity":1,"message":"1499","line":73,"column":32,"nodeType":"1413","messageId":"1414","endLine":73,"endColumn":44},{"ruleId":"1411","severity":1,"message":"1415","line":82,"column":22,"nodeType":"1413","messageId":"1414","endLine":82,"endColumn":35},{"ruleId":"1423","severity":1,"message":"1495","line":97,"column":6,"nodeType":"1427","endLine":97,"endColumn":8,"suggestions":"1500"},{"ruleId":"1411","severity":1,"message":"1415","line":157,"column":22,"nodeType":"1413","messageId":"1414","endLine":157,"endColumn":35},{"ruleId":"1423","severity":1,"message":"1501","line":163,"column":6,"nodeType":"1427","endLine":163,"endColumn":8,"suggestions":"1502"},{"ruleId":"1423","severity":1,"message":"1503","line":83,"column":6,"nodeType":"1427","endLine":83,"endColumn":8,"suggestions":"1504"},{"ruleId":"1411","severity":1,"message":"1415","line":139,"column":22,"nodeType":"1413","messageId":"1414","endLine":139,"endColumn":35},{"ruleId":"1423","severity":1,"message":"1505","line":160,"column":6,"nodeType":"1427","endLine":160,"endColumn":8,"suggestions":"1506"},{"ruleId":"1423","severity":1,"message":"1507","line":166,"column":6,"nodeType":"1427","endLine":166,"endColumn":14,"suggestions":"1508"},{"ruleId":"1423","severity":1,"message":"1509","line":172,"column":6,"nodeType":"1427","endLine":172,"endColumn":30,"suggestions":"1510"},{"ruleId":"1423","severity":1,"message":"1511","line":172,"column":7,"nodeType":"1512","endLine":172,"endColumn":29},{"ruleId":"1411","severity":1,"message":"1513","line":1,"column":27,"nodeType":"1413","messageId":"1414","endLine":1,"endColumn":36},{"ruleId":"1411","severity":1,"message":"1514","line":90,"column":19,"nodeType":"1413","messageId":"1414","endLine":90,"endColumn":29},{"ruleId":"1423","severity":1,"message":"1424","line":61,"column":19,"nodeType":"1413","endLine":61,"endColumn":26},{"ruleId":"1411","severity":1,"message":"1515","line":396,"column":7,"nodeType":"1413","messageId":"1414","endLine":396,"endColumn":22},{"ruleId":"1411","severity":1,"message":"1516","line":414,"column":9,"nodeType":"1413","messageId":"1414","endLine":414,"endColumn":16},{"ruleId":"1411","severity":1,"message":"1517","line":421,"column":11,"nodeType":"1413","messageId":"1414","endLine":421,"endColumn":28},{"ruleId":"1423","severity":1,"message":"1505","line":445,"column":7,"nodeType":"1427","endLine":445,"endColumn":9,"suggestions":"1518"},{"ruleId":"1423","severity":1,"message":"1519","line":112,"column":5,"nodeType":"1427","endLine":112,"endColumn":7,"suggestions":"1520"},{"ruleId":"1411","severity":1,"message":"1515","line":395,"column":7,"nodeType":"1413","messageId":"1414","endLine":395,"endColumn":22},{"ruleId":"1411","severity":1,"message":"1516","line":413,"column":9,"nodeType":"1413","messageId":"1414","endLine":413,"endColumn":16},{"ruleId":"1411","severity":1,"message":"1517","line":420,"column":11,"nodeType":"1413","messageId":"1414","endLine":420,"endColumn":28},{"ruleId":"1423","severity":1,"message":"1505","line":444,"column":7,"nodeType":"1427","endLine":444,"endColumn":9,"suggestions":"1521"},{"ruleId":"1423","severity":1,"message":"1505","line":125,"column":6,"nodeType":"1427","endLine":125,"endColumn":8,"suggestions":"1522"},{"ruleId":"1411","severity":1,"message":"1523","line":5,"column":8,"nodeType":"1413","messageId":"1414","endLine":5,"endColumn":14},{"ruleId":"1411","severity":1,"message":"1524","line":18,"column":3,"nodeType":"1413","messageId":"1414","endLine":18,"endColumn":14},{"ruleId":"1411","severity":1,"message":"1525","line":19,"column":3,"nodeType":"1413","messageId":"1414","endLine":19,"endColumn":14},{"ruleId":"1411","severity":1,"message":"1526","line":29,"column":3,"nodeType":"1413","messageId":"1414","endLine":29,"endColumn":7},{"ruleId":"1411","severity":1,"message":"1517","line":459,"column":10,"nodeType":"1413","messageId":"1414","endLine":459,"endColumn":27},{"ruleId":"1411","severity":1,"message":"1484","line":464,"column":16,"nodeType":"1413","messageId":"1414","endLine":464,"endColumn":22},{"ruleId":"1411","severity":1,"message":"1485","line":464,"column":24,"nodeType":"1413","messageId":"1414","endLine":464,"endColumn":33},{"ruleId":"1411","severity":1,"message":"1527","line":464,"column":35,"nodeType":"1413","messageId":"1414","endLine":464,"endColumn":43},{"ruleId":"1423","severity":1,"message":"1505","line":503,"column":6,"nodeType":"1427","endLine":503,"endColumn":8,"suggestions":"1528"},{"ruleId":"1423","severity":1,"message":"1505","line":129,"column":6,"nodeType":"1427","endLine":129,"endColumn":8,"suggestions":"1529"},{"ruleId":"1423","severity":1,"message":"1530","line":71,"column":6,"nodeType":"1427","endLine":71,"endColumn":8,"suggestions":"1531"},{"ruleId":"1423","severity":1,"message":"1532","line":52,"column":6,"nodeType":"1427","endLine":52,"endColumn":8,"suggestions":"1533"},{"ruleId":"1423","severity":1,"message":"1534","line":48,"column":6,"nodeType":"1427","endLine":48,"endColumn":8,"suggestions":"1535"},{"ruleId":"1411","severity":1,"message":"1536","line":28,"column":7,"nodeType":"1413","messageId":"1414","endLine":28,"endColumn":11},{"ruleId":"1411","severity":1,"message":"1415","line":39,"column":22,"nodeType":"1413","messageId":"1414","endLine":39,"endColumn":35},{"ruleId":"1411","severity":1,"message":"1458","line":42,"column":17,"nodeType":"1413","messageId":"1414","endLine":42,"endColumn":25},{"ruleId":"1423","severity":1,"message":"1537","line":59,"column":6,"nodeType":"1427","endLine":59,"endColumn":8,"suggestions":"1538"},{"ruleId":"1411","severity":1,"message":"1513","line":1,"column":27,"nodeType":"1413","messageId":"1414","endLine":1,"endColumn":36},{"ruleId":"1411","severity":1,"message":"1539","line":31,"column":17,"nodeType":"1413","messageId":"1414","endLine":31,"endColumn":25},{"ruleId":"1423","severity":1,"message":"1540","line":73,"column":6,"nodeType":"1427","endLine":73,"endColumn":8,"suggestions":"1541"},{"ruleId":"1411","severity":1,"message":"1415","line":110,"column":22,"nodeType":"1413","messageId":"1414","endLine":110,"endColumn":35},{"ruleId":"1411","severity":1,"message":"1542","line":113,"column":10,"nodeType":"1413","messageId":"1414","endLine":113,"endColumn":18},{"ruleId":"1423","severity":1,"message":"1543","line":129,"column":6,"nodeType":"1427","endLine":129,"endColumn":8,"suggestions":"1544"},{"ruleId":"1423","severity":1,"message":"1545","line":55,"column":6,"nodeType":"1427","endLine":55,"endColumn":8,"suggestions":"1546"},{"ruleId":"1411","severity":1,"message":"1415","line":50,"column":22,"nodeType":"1413","messageId":"1414","endLine":50,"endColumn":35},{"ruleId":"1411","severity":1,"message":"1547","line":7,"column":3,"nodeType":"1413","messageId":"1414","endLine":7,"endColumn":20},{"ruleId":"1411","severity":1,"message":"1548","line":8,"column":3,"nodeType":"1413","messageId":"1414","endLine":8,"endColumn":17},{"ruleId":"1411","severity":1,"message":"1549","line":13,"column":3,"nodeType":"1413","messageId":"1414","endLine":13,"endColumn":20},{"ruleId":"1411","severity":1,"message":"1550","line":15,"column":3,"nodeType":"1413","messageId":"1414","endLine":15,"endColumn":13},{"ruleId":"1411","severity":1,"message":"1481","line":73,"column":24,"nodeType":"1413","messageId":"1414","endLine":73,"endColumn":39},{"ruleId":"1423","severity":1,"message":"1441","line":86,"column":6,"nodeType":"1427","endLine":86,"endColumn":8,"suggestions":"1551"},{"ruleId":"1411","severity":1,"message":"1552","line":4,"column":15,"nodeType":"1413","messageId":"1414","endLine":4,"endColumn":21},{"ruleId":"1411","severity":1,"message":"1553","line":4,"column":23,"nodeType":"1413","messageId":"1414","endLine":4,"endColumn":29},{"ruleId":"1411","severity":1,"message":"1526","line":4,"column":31,"nodeType":"1413","messageId":"1414","endLine":4,"endColumn":35},{"ruleId":"1423","severity":1,"message":"1554","line":62,"column":6,"nodeType":"1427","endLine":62,"endColumn":8,"suggestions":"1555"},{"ruleId":"1411","severity":1,"message":"1552","line":5,"column":3,"nodeType":"1413","messageId":"1414","endLine":5,"endColumn":9},{"ruleId":"1411","severity":1,"message":"1556","line":8,"column":3,"nodeType":"1413","messageId":"1414","endLine":8,"endColumn":11},{"ruleId":"1411","severity":1,"message":"1557","line":81,"column":9,"nodeType":"1413","messageId":"1414","endLine":81,"endColumn":20},{"ruleId":"1423","severity":1,"message":"1558","line":89,"column":6,"nodeType":"1427","endLine":89,"endColumn":14,"suggestions":"1559"},{"ruleId":"1411","severity":1,"message":"1560","line":1,"column":38,"nodeType":"1413","messageId":"1414","endLine":1,"endColumn":45},{"ruleId":"1423","severity":1,"message":"1561","line":183,"column":6,"nodeType":"1427","endLine":183,"endColumn":8,"suggestions":"1562"},{"ruleId":"1411","severity":1,"message":"1449","line":1,"column":17,"nodeType":"1413","messageId":"1414","endLine":1,"endColumn":25},{"ruleId":"1423","severity":1,"message":"1563","line":125,"column":6,"nodeType":"1427","endLine":125,"endColumn":8,"suggestions":"1564"},{"ruleId":"1411","severity":1,"message":"1513","line":1,"column":27,"nodeType":"1413","messageId":"1414","endLine":1,"endColumn":36},{"ruleId":"1411","severity":1,"message":"1415","line":105,"column":22,"nodeType":"1413","messageId":"1414","endLine":105,"endColumn":35},{"ruleId":"1411","severity":1,"message":"1565","line":40,"column":10,"nodeType":"1413","messageId":"1414","endLine":40,"endColumn":16},{"ruleId":"1423","severity":1,"message":"1566","line":51,"column":6,"nodeType":"1427","endLine":51,"endColumn":8,"suggestions":"1567"},{"ruleId":"1423","severity":1,"message":"1568","line":58,"column":6,"nodeType":"1427","endLine":58,"endColumn":14,"suggestions":"1569"},{"ruleId":"1411","severity":1,"message":"1449","line":1,"column":17,"nodeType":"1413","messageId":"1414","endLine":1,"endColumn":25},{"ruleId":"1423","severity":1,"message":"1570","line":73,"column":6,"nodeType":"1427","endLine":73,"endColumn":8,"suggestions":"1571"},{"ruleId":"1411","severity":1,"message":"1513","line":1,"column":17,"nodeType":"1413","messageId":"1414","endLine":1,"endColumn":26},{"ruleId":"1411","severity":1,"message":"1449","line":1,"column":17,"nodeType":"1413","messageId":"1414","endLine":1,"endColumn":25},{"ruleId":"1411","severity":1,"message":"1415","line":60,"column":22,"nodeType":"1413","messageId":"1414","endLine":60,"endColumn":35},{"ruleId":"1411","severity":1,"message":"1499","line":61,"column":32,"nodeType":"1413","messageId":"1414","endLine":61,"endColumn":44},{"ruleId":"1423","severity":1,"message":"1495","line":71,"column":6,"nodeType":"1427","endLine":71,"endColumn":8,"suggestions":"1572"},{"ruleId":"1411","severity":1,"message":"1415","line":28,"column":22,"nodeType":"1413","messageId":"1414","endLine":28,"endColumn":35},{"ruleId":"1423","severity":1,"message":"1495","line":33,"column":6,"nodeType":"1427","endLine":33,"endColumn":8,"suggestions":"1573"},{"ruleId":"1411","severity":1,"message":"1449","line":1,"column":17,"nodeType":"1413","messageId":"1414","endLine":1,"endColumn":25},{"ruleId":"1411","severity":1,"message":"1415","line":44,"column":22,"nodeType":"1413","messageId":"1414","endLine":44,"endColumn":35},{"ruleId":"1423","severity":1,"message":"1495","line":54,"column":6,"nodeType":"1427","endLine":54,"endColumn":8,"suggestions":"1574"},{"ruleId":"1411","severity":1,"message":"1449","line":1,"column":17,"nodeType":"1413","messageId":"1414","endLine":1,"endColumn":25},{"ruleId":"1411","severity":1,"message":"1415","line":38,"column":22,"nodeType":"1413","messageId":"1414","endLine":38,"endColumn":35},{"ruleId":"1411","severity":1,"message":"1575","line":12,"column":10,"nodeType":"1413","messageId":"1414","endLine":12,"endColumn":16},{"ruleId":"1411","severity":1,"message":"1415","line":39,"column":22,"nodeType":"1413","messageId":"1414","endLine":39,"endColumn":35},{"ruleId":"1411","severity":1,"message":"1576","line":50,"column":9,"nodeType":"1413","messageId":"1414","endLine":50,"endColumn":24},{"ruleId":"1423","severity":1,"message":"1577","line":95,"column":6,"nodeType":"1427","endLine":95,"endColumn":8,"suggestions":"1578"},{"ruleId":"1423","severity":1,"message":"1579","line":103,"column":6,"nodeType":"1427","endLine":103,"endColumn":18,"suggestions":"1580"},{"ruleId":"1423","severity":1,"message":"1581","line":112,"column":6,"nodeType":"1427","endLine":112,"endColumn":27,"suggestions":"1582"},{"ruleId":"1423","severity":1,"message":"1583","line":42,"column":6,"nodeType":"1427","endLine":42,"endColumn":8,"suggestions":"1584"},{"ruleId":"1423","severity":1,"message":"1585","line":72,"column":6,"nodeType":"1427","endLine":72,"endColumn":8,"suggestions":"1586"},{"ruleId":"1423","severity":1,"message":"1583","line":40,"column":6,"nodeType":"1427","endLine":40,"endColumn":8,"suggestions":"1587"},{"ruleId":"1411","severity":1,"message":"1588","line":6,"column":10,"nodeType":"1413","messageId":"1414","endLine":6,"endColumn":26},{"ruleId":"1423","severity":1,"message":"1589","line":66,"column":6,"nodeType":"1427","endLine":66,"endColumn":8,"suggestions":"1590"},{"ruleId":"1411","severity":1,"message":"1449","line":1,"column":17,"nodeType":"1413","messageId":"1414","endLine":1,"endColumn":25},{"ruleId":"1423","severity":1,"message":"1591","line":83,"column":6,"nodeType":"1427","endLine":83,"endColumn":8,"suggestions":"1592"},{"ruleId":"1423","severity":1,"message":"1593","line":47,"column":6,"nodeType":"1427","endLine":47,"endColumn":8,"suggestions":"1594"},{"ruleId":"1423","severity":1,"message":"1595","line":46,"column":6,"nodeType":"1427","endLine":46,"endColumn":8,"suggestions":"1596"},{"ruleId":"1423","severity":1,"message":"1597","line":50,"column":6,"nodeType":"1427","endLine":50,"endColumn":8,"suggestions":"1598"},{"ruleId":"1423","severity":1,"message":"1599","line":41,"column":6,"nodeType":"1427","endLine":41,"endColumn":8,"suggestions":"1600"},{"ruleId":"1423","severity":1,"message":"1601","line":41,"column":6,"nodeType":"1427","endLine":41,"endColumn":8,"suggestions":"1602"},{"ruleId":"1411","severity":1,"message":"1513","line":1,"column":27,"nodeType":"1413","messageId":"1414","endLine":1,"endColumn":36},{"ruleId":"1411","severity":1,"message":"1449","line":1,"column":17,"nodeType":"1413","messageId":"1414","endLine":1,"endColumn":25},{"ruleId":"1411","severity":1,"message":"1513","line":1,"column":27,"nodeType":"1413","messageId":"1414","endLine":1,"endColumn":36},{"ruleId":"1411","severity":1,"message":"1449","line":1,"column":17,"nodeType":"1413","messageId":"1414","endLine":1,"endColumn":25},{"ruleId":"1411","severity":1,"message":"1415","line":67,"column":23,"nodeType":"1413","messageId":"1414","endLine":67,"endColumn":36},{"ruleId":"1423","severity":1,"message":"1603","line":85,"column":6,"nodeType":"1427","endLine":85,"endColumn":8,"suggestions":"1604"},{"ruleId":"1423","severity":1,"message":"1605","line":95,"column":6,"nodeType":"1427","endLine":95,"endColumn":8,"suggestions":"1606"},{"ruleId":"1423","severity":1,"message":"1607","line":237,"column":6,"nodeType":"1427","endLine":237,"endColumn":14,"suggestions":"1608"},{"ruleId":"1423","severity":1,"message":"1609","line":121,"column":6,"nodeType":"1427","endLine":121,"endColumn":20,"suggestions":"1610"},{"ruleId":"1423","severity":1,"message":"1611","line":128,"column":6,"nodeType":"1427","endLine":128,"endColumn":14,"suggestions":"1612"},{"ruleId":"1411","severity":1,"message":"1613","line":33,"column":8,"nodeType":"1413","messageId":"1414","endLine":33,"endColumn":21},{"ruleId":"1411","severity":1,"message":"1614","line":72,"column":22,"nodeType":"1413","messageId":"1414","endLine":72,"endColumn":32},{"ruleId":"1411","severity":1,"message":"1444","line":72,"column":34,"nodeType":"1413","messageId":"1414","endLine":72,"endColumn":47},{"ruleId":"1411","severity":1,"message":"1445","line":84,"column":34,"nodeType":"1413","messageId":"1414","endLine":84,"endColumn":42},{"ruleId":"1411","severity":1,"message":"1446","line":84,"column":44,"nodeType":"1413","messageId":"1414","endLine":84,"endColumn":52},{"ruleId":"1411","severity":1,"message":"1415","line":85,"column":22,"nodeType":"1413","messageId":"1414","endLine":85,"endColumn":35},{"ruleId":"1411","severity":1,"message":"1615","line":97,"column":5,"nodeType":"1413","messageId":"1414","endLine":97,"endColumn":8},{"ruleId":"1411","severity":1,"message":"1616","line":101,"column":5,"nodeType":"1413","messageId":"1414","endLine":101,"endColumn":14},{"ruleId":"1423","severity":1,"message":"1617","line":165,"column":6,"nodeType":"1427","endLine":165,"endColumn":8,"suggestions":"1618"},{"ruleId":"1407","replacedBy":"1619"},{"ruleId":"1409","replacedBy":"1620"},{"ruleId":"1411","severity":1,"message":"1621","line":10,"column":8,"nodeType":"1413","messageId":"1414","endLine":10,"endColumn":18},"no-native-reassign",["1622"],"no-negated-in-lhs",["1623"],"no-unused-vars","'Main' is defined but never used.","Identifier","unusedVar","'setLoginLevel' is assigned a value but never used.","'SwitchCase' is assigned a value but never used.","'Link' is defined but never used.","'PrivateRoute' is defined but never used.","'select' is assigned a value but never used.","'Box' is defined but never used.","'data' is assigned a value but never used.","'columns' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'payrunid' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'payrun_loading'. Either include it or remove the dependency array.","ArrayExpression",["1624"],"React Hook useEffect has missing dependencies: 'getPayrun', 'loadEmployees', 'loadUnpaidDailyAllows', and 'loadUnpaidExpenses'. Either include them or remove the dependency array.",["1625"],"'payrunstatus' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadPayitems'. Either include it or remove the dependency array.",["1626"],"React Hook useEffect has missing dependencies: 'payslip_period' and 'setPSBPayrunId'. Either include them or remove the dependency array.",["1627"],"React Hook useEffect has a missing dependency: 'calcPayrunTotals'. Either include it or remove the dependency array.",["1628"],"React Hook useEffect has a missing dependency: 'saveIndividualPayslips'. Either include it or remove the dependency array.",["1629"],"'sleep' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setDailyAllowsStatusId'. Either include it or remove the dependency array.",["1630"],"'user' is assigned a value but never used.","'setEmployeeId' is assigned a value but never used.","'setValue' is assigned a value but never used.","'register' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'birthdate' and 'reporting_email'. Either include them or remove the dependency array.",["1631"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'loadEmployees'. Either include it or remove the dependency array.",["1632"],"'setAllowsdata' is assigned a value but never used.","'setTotals' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setDailyAllowsDetlsId', 'setDailyAllowsDetlsPeriod', and 'setDailyAllowsId'. Either include them or remove the dependency array.",["1633"],"'allows_period' is assigned a value but never used.","'allows_empid' is assigned a value but never used.","'setError' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'loginLevel.loginUserId' and 'setDailyAllowsId'. Either include them or remove the dependency array.",["1634"],"React Hook useEffect received a function whose dependencies are unknown. Pass an inline function instead.","react/jsx-pascal-case","Imported JSX component Payslip_ViewEarnings must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component Payslip_ViewDeductions must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Payslip_Earnings must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Payslip_Deductions must be in PascalCase or SCREAMING_SNAKE_CASE","'setValue' is defined but never used.","'leave_bf' is assigned a value but never used.","'leave_cd' is assigned a value but never used.","'password' is assigned a value but never used.","'reporting_email' is assigned a value but never used.","'useDailyAllowsDetlsBatch' is defined but never used.","'dailyallows' is assigned a value but never used.","'dailyAllowsId' is assigned a value but never used.","no-use-before-define","'useDailyAllowsDetlsBatch' was used before it was defined.","usedBeforeDefined",["1635"],["1636"],"'setIsDialogOpen' is assigned a value but never used.","'useRecoilState' is defined but never used.","'loginLevelState' is defined but never used.","'filter' is assigned a value but never used.","'setFilter' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'editEmployeeID' and 'setJobId'. Either include them or remove the dependency array.",["1637"],"React Hook useEffect has missing dependencies: 'getSingleBatchPayslipDeductions', 'payslip_period', and 'single_payslip.empid'. Either include them or remove the dependency array.",["1638"],"React Hook useEffect has a missing dependency: 'loadExpenses'. Either include it or remove the dependency array.",["1639"],"'payrunId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setDailyAllowsPayrunId' and 'setPSBPayrunId'. Either include them or remove the dependency array.",["1640"],"React Hook useEffect has missing dependencies: 'loginLevel.loginUserId' and 'setFilter'. Either include them or remove the dependency array.",["1641"],"React Hook useEffect has missing dependencies: 'editEmployeeID' and 'setTrainingId'. Either include them or remove the dependency array.",["1642"],"'setExpenseId' is assigned a value but never used.",["1643"],"React Hook useEffect has missing dependencies: 'loginLevel.loginUserId' and 'setHocId'. Either include them or remove the dependency array.",["1644"],"React Hook useEffect has a missing dependency: 'expenses'. Either include it or remove the dependency array.",["1645"],"React Hook useEffect has a missing dependency: 'currentyear'. Either include it or remove the dependency array.",["1646"],"React Hook useEffect has missing dependencies: 'currentyear', 'loginLevel.loginUserId', 'selectleaveyear', 'setLeaveId', and 'setLeaveYr'. Either include them or remove the dependency array.",["1647"],"React Hook useEffect has missing dependencies: 'Calc_Leave' and 'leaves'. Either include them or remove the dependency array.",["1648"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","'useEffect' is defined but never used.","'setLeaveId' is assigned a value but never used.","'initial_expdata' is assigned a value but never used.","'classes' is assigned a value but never used.","'selectpayrollyear' is assigned a value but never used.",["1649"],"React Hook useEffect has missing dependencies: 'loginLevel.loginUserId', 'setEditEmployeeID', and 'setIsEditingOn'. Either include them or remove the dependency array.",["1650"],["1651"],["1652"],"'moment' is defined but never used.","'ModalHeader' is defined but never used.","'ModalFooter' is defined but never used.","'Text' is defined but never used.","'setHocId' is assigned a value but never used.",["1653"],["1654"],"React Hook useEffect has missing dependencies: 'getSingleBatchPayslipEarnings', 'payslip_period', and 'single_payslip.empid'. Either include them or remove the dependency array.",["1655"],"React Hook useEffect has missing dependencies: 'getSingleBatchPayslipDeductions', 'payPeriod', and 'payPeriodEmpId'. Either include them or remove the dependency array.",["1656"],"React Hook useEffect has missing dependencies: 'getSingleBatchPayslipEarnings', 'payPeriod', and 'payPeriodEmpId'. Either include them or remove the dependency array.",["1657"],"'date' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'input', 'loginLevel.loginUser', 'loginLevel.loginUserId', 'loginLevel.perdiem_fee', 'loginLevel.reporting_to', 'loginLevel.siteallows_fee', and 'setInput'. Either include them or remove the dependency array.",["1658"],"'setState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'editEmployeeID', 'getSingleEmployee', 'loadDepartments', and 'loadDesignations'. Either include them or remove the dependency array.",["1659"],"'isUpdate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setLeaveStatusId'. Either include it or remove the dependency array.",["1660"],"React Hook useEffect has missing dependencies: 'setPayrunStatusId' and 'status'. Either include them or remove the dependency array.",["1661"],"'useSetRecoilState' is defined but never used.","'useRecoilValue' is defined but never used.","'allowsPeriodState' is defined but never used.","'empidState' is defined but never used.",["1662"],"'Button' is defined but never used.","'HStack' is defined but never used.","React Hook useEffect has missing dependencies: 'month', 'setLeavePeriodMthId', 'setLeavePeriodYrId', and 'year'. Either include them or remove the dependency array.",["1663"],"'Checkbox' is defined but never used.","'handleClose' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setHocPeriodMthId', 'setHocPeriodYrId', 'state.month', and 'state.year'. Either include them or remove the dependency array.",["1664"],"'useMemo' is defined but never used.","React Hook useEffect has a missing dependency: 'Build_EmpData'. Either include it or remove the dependency array.",["1665"],"React Hook useEffect has missing dependencies: 'month', 'setHocPeriodMthId', 'setHocPeriodYrId', and 'year'. Either include them or remove the dependency array.",["1666"],"'totals' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'month', 'setExpPeriodMthId', 'setExpPeriodYrId', and 'year'. Either include them or remove the dependency array.",["1667"],"React Hook useEffect has missing dependencies: 'Calc_Totals' and 'expensesperiod'. Either include them or remove the dependency array.",["1668"],"React Hook useEffect has missing dependencies: 'period' and 'setDailyAllowsPeriodId'. Either include them or remove the dependency array.",["1669"],["1670"],["1671"],["1672"],"'useHoc' is defined but never used.","'handleSentEmail' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setHoclocationId'. Either include it or remove the dependency array.",["1673"],"React Hook useEffect has a missing dependency: 'setHocwhatdetailsId'. Either include it or remove the dependency array.",["1674"],"React Hook useEffect has missing dependencies: 'setHocwhyId' and 'setHocwhydetailsId'. Either include them or remove the dependency array.",["1675"],"React Hook useEffect has a missing dependency: 'setPayItemId'. Either include it or remove the dependency array.",["1676"],"React Hook useEffect has missing dependencies: 'editEmployeeID' and 'setEducationId'. Either include them or remove the dependency array.",["1677"],["1678"],"'useTablesContext' is defined but never used.","React Hook useEffect has missing dependencies: 'editEmployeeID' and 'setExperienceId'. Either include them or remove the dependency array.",["1679"],"React Hook useEffect has missing dependencies: 'editEmployeeID' and 'setFamilyId'. Either include them or remove the dependency array.",["1680"],"React Hook useEffect has missing dependencies: 'editEmployeeID' and 'getSingleBatchTraining'. Either include them or remove the dependency array.",["1681"],"React Hook useEffect has missing dependencies: 'editEmployeeID' and 'getSingleBatchLeave'. Either include them or remove the dependency array.",["1682"],"React Hook useEffect has missing dependencies: 'editEmployeeID' and 'loadSingleBatchExperience'. Either include them or remove the dependency array.",["1683"],"React Hook useEffect has missing dependencies: 'editEmployeeID' and 'loadSingleBatchEducation'. Either include them or remove the dependency array.",["1684"],"React Hook useEffect has missing dependencies: 'editEmployeeID' and 'loadSingleBatchFamily'. Either include them or remove the dependency array.",["1685"],"React Hook useEffect has a missing dependency: 'loadPendingLeaves'. Either include it or remove the dependency array.",["1686"],"React Hook useEffect has a missing dependency: 'getBatchPayrun'. Either include it or remove the dependency array.",["1687"],"React Hook useEffect has a missing dependency: 'handleCalcTotals'. Either include it or remove the dependency array.",["1688"],"React Hook useEffect has missing dependencies: 'formdata' and 'setLoadFormdata'. Either include them or remove the dependency array. If 'setLoadFormdata' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1689"],"React Hook useEffect has missing dependencies: 'handleCalc' and 'state'. Either include them or remove the dependency array.",["1690"],"'EmpJobhistory' is defined but never used.","'employeeId' is assigned a value but never used.","'age' is assigned a value but never used.","'leave_bal' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'birthdate', 'hasresigned', 'reporting_email', and 'tap_checkbox'. Either include them or remove the dependency array.",["1691"],["1622"],["1623"],"'FlightIcon' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"1692","fix":"1693"},{"desc":"1694","fix":"1695"},{"desc":"1696","fix":"1697"},{"desc":"1698","fix":"1699"},{"desc":"1700","fix":"1701"},{"desc":"1702","fix":"1703"},{"desc":"1704","fix":"1705"},{"desc":"1706","fix":"1707"},{"desc":"1708","fix":"1709"},{"desc":"1710","fix":"1711"},{"desc":"1712","fix":"1713"},{"desc":"1714","fix":"1715"},{"desc":"1704","fix":"1716"},{"desc":"1717","fix":"1718"},{"desc":"1719","fix":"1720"},{"desc":"1721","fix":"1722"},{"desc":"1723","fix":"1724"},{"desc":"1725","fix":"1726"},{"desc":"1727","fix":"1728"},{"desc":"1725","fix":"1729"},{"desc":"1730","fix":"1731"},{"desc":"1732","fix":"1733"},{"desc":"1734","fix":"1735"},{"desc":"1736","fix":"1737"},{"desc":"1738","fix":"1739"},{"desc":"1734","fix":"1740"},{"desc":"1741","fix":"1742"},{"desc":"1734","fix":"1743"},{"desc":"1734","fix":"1744"},{"desc":"1734","fix":"1745"},{"desc":"1734","fix":"1746"},{"desc":"1747","fix":"1748"},{"desc":"1749","fix":"1750"},{"desc":"1751","fix":"1752"},{"desc":"1753","fix":"1754"},{"desc":"1755","fix":"1756"},{"desc":"1757","fix":"1758"},{"desc":"1759","fix":"1760"},{"desc":"1704","fix":"1761"},{"desc":"1762","fix":"1763"},{"desc":"1764","fix":"1765"},{"desc":"1766","fix":"1767"},{"desc":"1768","fix":"1769"},{"desc":"1770","fix":"1771"},{"desc":"1772","fix":"1773"},{"desc":"1774","fix":"1775"},{"desc":"1725","fix":"1776"},{"desc":"1725","fix":"1777"},{"desc":"1725","fix":"1778"},{"desc":"1779","fix":"1780"},{"desc":"1781","fix":"1782"},{"desc":"1783","fix":"1784"},{"desc":"1785","fix":"1786"},{"desc":"1787","fix":"1788"},{"desc":"1785","fix":"1789"},{"desc":"1790","fix":"1791"},{"desc":"1792","fix":"1793"},{"desc":"1794","fix":"1795"},{"desc":"1796","fix":"1797"},{"desc":"1798","fix":"1799"},{"desc":"1800","fix":"1801"},{"desc":"1802","fix":"1803"},{"desc":"1804","fix":"1805"},{"desc":"1806","fix":"1807"},{"desc":"1808","fix":"1809"},{"desc":"1810","fix":"1811"},{"desc":"1812","fix":"1813"},{"desc":"1814","fix":"1815"},"Update the dependencies array to be: [loadPaybatch, payrun_loading]",{"range":"1816","text":"1817"},"Update the dependencies array to be: [getPayrun, loadEmployees, loadUnpaidDailyAllows, loadUnpaidExpenses]",{"range":"1818","text":"1819"},"Update the dependencies array to be: [loadPayitems]",{"range":"1820","text":"1821"},"Update the dependencies array to be: [payslip_period, psbpayrunId, setPSBPayrunId]",{"range":"1822","text":"1823"},"Update the dependencies array to be: [calcPayrunTotals, isCalc]",{"range":"1824","text":"1825"},"Update the dependencies array to be: [isUpdPayslip, saveIndividualPayslips]",{"range":"1826","text":"1827"},"Update the dependencies array to be: [setDailyAllowsStatusId]",{"range":"1828","text":"1829"},"Update the dependencies array to be: [birthdate, reporting_email]",{"range":"1830","text":"1831"},"Update the dependencies array to be: [loadEmployees]",{"range":"1832","text":"1833"},"Update the dependencies array to be: [allows_empid, allows_period, setDailyAllowsDetlsId, setDailyAllowsDetlsPeriod, setDailyAllowsId]",{"range":"1834","text":"1835"},"Update the dependencies array to be: [dailyAllowsId, loginLevel.loginUserId, setDailyAllowsId]",{"range":"1836","text":"1837"},"Update the dependencies array to be: [allows_period, allows_empid, setDailyAllowsId, setDailyAllowsDetlsPeriod, setDailyAllowsDetlsId]",{"range":"1838","text":"1839"},{"range":"1840","text":"1829"},"Update the dependencies array to be: [editEmployeeID, setJobId]",{"range":"1841","text":"1842"},"Update the dependencies array to be: [getSingleBatchPayslipDeductions, payslip_period, single_payslip.empid]",{"range":"1843","text":"1844"},"Update the dependencies array to be: [loadExpenses]",{"range":"1845","text":"1846"},"Update the dependencies array to be: [setDailyAllowsPayrunId, setPSBPayrunId]",{"range":"1847","text":"1848"},"Update the dependencies array to be: [loginLevel.loginUserId, setFilter]",{"range":"1849","text":"1850"},"Update the dependencies array to be: [editEmployeeID, setTrainingId]",{"range":"1851","text":"1852"},{"range":"1853","text":"1850"},"Update the dependencies array to be: [loginLevel.loginUserId, setHocId]",{"range":"1854","text":"1855"},"Update the dependencies array to be: [expenses]",{"range":"1856","text":"1857"},"Update the dependencies array to be: [currentyear]",{"range":"1858","text":"1859"},"Update the dependencies array to be: [currentyear, isLoad, loginLevel.loginUserId, selectleaveyear, setLeaveId, setLeaveYr]",{"range":"1860","text":"1861"},"Update the dependencies array to be: [Calc_Leave, leaves]",{"range":"1862","text":"1863"},{"range":"1864","text":"1859"},"Update the dependencies array to be: [loginLevel.loginUserId, setEditEmployeeID, setIsEditingOn]",{"range":"1865","text":"1866"},{"range":"1867","text":"1859"},{"range":"1868","text":"1859"},{"range":"1869","text":"1859"},{"range":"1870","text":"1859"},"Update the dependencies array to be: [getSingleBatchPayslipEarnings, payslip_period, single_payslip.empid]",{"range":"1871","text":"1872"},"Update the dependencies array to be: [getSingleBatchPayslipDeductions, payPeriod, payPeriodEmpId]",{"range":"1873","text":"1874"},"Update the dependencies array to be: [getSingleBatchPayslipEarnings, payPeriod, payPeriodEmpId]",{"range":"1875","text":"1876"},"Update the dependencies array to be: [input, loginLevel.loginUser, loginLevel.loginUserId, loginLevel.perdiem_fee, loginLevel.reporting_to, loginLevel.siteallows_fee, setInput]",{"range":"1877","text":"1878"},"Update the dependencies array to be: [editEmployeeID, getSingleEmployee, loadDepartments, loadDesignations]",{"range":"1879","text":"1880"},"Update the dependencies array to be: [setLeaveStatusId]",{"range":"1881","text":"1882"},"Update the dependencies array to be: [setPayrunStatusId, status]",{"range":"1883","text":"1884"},{"range":"1885","text":"1829"},"Update the dependencies array to be: [month, setLeavePeriodMthId, setLeavePeriodYrId, year]",{"range":"1886","text":"1887"},"Update the dependencies array to be: [isLoad, setHocPeriodMthId, setHocPeriodYrId, state.month, state.year]",{"range":"1888","text":"1889"},"Update the dependencies array to be: [Build_EmpData]",{"range":"1890","text":"1891"},"Update the dependencies array to be: [month, setHocPeriodMthId, setHocPeriodYrId, year]",{"range":"1892","text":"1893"},"Update the dependencies array to be: [month, setExpPeriodMthId, setExpPeriodYrId, year]",{"range":"1894","text":"1895"},"Update the dependencies array to be: [Calc_Totals, expensesperiod, isCalc]",{"range":"1896","text":"1897"},"Update the dependencies array to be: [period, setDailyAllowsPeriodId]",{"range":"1898","text":"1899"},{"range":"1900","text":"1850"},{"range":"1901","text":"1850"},{"range":"1902","text":"1850"},"Update the dependencies array to be: [setHoclocationId]",{"range":"1903","text":"1904"},"Update the dependencies array to be: [setHocwhatdetailsId, whatstatus]",{"range":"1905","text":"1906"},"Update the dependencies array to be: [whystatus, category, setHocwhyId, setHocwhydetailsId]",{"range":"1907","text":"1908"},"Update the dependencies array to be: [setPayItemId]",{"range":"1909","text":"1910"},"Update the dependencies array to be: [editEmployeeID, setEducationId]",{"range":"1911","text":"1912"},{"range":"1913","text":"1910"},"Update the dependencies array to be: [editEmployeeID, setExperienceId]",{"range":"1914","text":"1915"},"Update the dependencies array to be: [editEmployeeID, setFamilyId]",{"range":"1916","text":"1917"},"Update the dependencies array to be: [editEmployeeID, getSingleBatchTraining]",{"range":"1918","text":"1919"},"Update the dependencies array to be: [editEmployeeID, getSingleBatchLeave]",{"range":"1920","text":"1921"},"Update the dependencies array to be: [editEmployeeID, loadSingleBatchExperience]",{"range":"1922","text":"1923"},"Update the dependencies array to be: [editEmployeeID, loadSingleBatchEducation]",{"range":"1924","text":"1925"},"Update the dependencies array to be: [editEmployeeID, loadSingleBatchFamily]",{"range":"1926","text":"1927"},"Update the dependencies array to be: [loadPendingLeaves]",{"range":"1928","text":"1929"},"Update the dependencies array to be: [getBatchPayrun]",{"range":"1930","text":"1931"},"Update the dependencies array to be: [handleCalcTotals, isCalc]",{"range":"1932","text":"1933"},"Update the dependencies array to be: [formdata, loadFormdata, setLoadFormdata]",{"range":"1934","text":"1935"},"Update the dependencies array to be: [handleCalc, isLoad, state]",{"range":"1936","text":"1937"},"Update the dependencies array to be: [birthdate, hasresigned, reporting_email, tap_checkbox]",{"range":"1938","text":"1939"},[3615,3629],"[loadPaybatch, payrun_loading]",[12203,12205],"[getPayrun, loadEmployees, loadUnpaidDailyAllows, loadUnpaidExpenses]",[5524,5526],"[loadPayitems]",[5821,5834],"[payslip_period, psbpayrunId, setPSBPayrunId]",[5914,5922],"[calcPayrunTotals, isCalc]",[6011,6025],"[isUpdPayslip, saveIndividualPayslips]",[3872,3874],"[setDailyAllowsStatusId]",[4589,4591],"[birthdate, reporting_email]",[1321,1323],"[loadEmployees]",[5716,5745],"[allows_empid, allows_period, setDailyAllowsDetlsId, setDailyAllowsDetlsPeriod, setDailyAllowsId]",[3568,3583],"[dailyAllowsId, loginLevel.loginUserId, setDailyAllowsId]",[3404,3433],"[allows_period, allows_empid, setDailyAllowsId, setDailyAllowsDetlsPeriod, setDailyAllowsDetlsId]",[2694,2696],[2800,2802],"[editEmployeeID, setJobId]",[2241,2243],"[getSingleBatchPayslipDeductions, payslip_period, single_payslip.empid]",[794,796],"[loadExpenses]",[4081,4083],"[setDailyAllowsPayrunId, setPSBPayrunId]",[3583,3585],"[loginLevel.loginUserId, setFilter]",[3132,3134],"[editEmployeeID, setTrainingId]",[3421,3423],[4094,4096],"[loginLevel.loginUserId, setHocId]",[2661,2663],"[expenses]",[4950,4952],"[currentyear]",[5114,5122],"[currentyear, isLoad, loginLevel.loginUserId, selectleaveyear, setLeaveId, setLeaveYr]",[5201,5225],"[Calc_Leave, leaves]",[9010,9012],[4380,4382],"[loginLevel.loginUserId, setEditEmployeeID, setIsEditingOn]",[8950,8952],[4732,4734],[10474,10476],[4859,4861],[2112,2114],"[getSingleBatchPayslipEarnings, payslip_period, single_payslip.empid]",[1552,1554],"[getSingleBatchPayslipDeductions, payPeriod, payPeriodEmpId]",[1412,1414],"[getSingleBatchPayslipEarnings, payPeriod, payPeriodEmpId]",[2471,2473],"[input, loginLevel.loginUser, loginLevel.loginUserId, loginLevel.perdiem_fee, loginLevel.reporting_to, loginLevel.siteallows_fee, setInput]",[2678,2680],"[editEmployeeID, getSingleEmployee, loadDepartments, loadDesignations]",[4079,4081],"[setLeaveStatusId]",[1989,1991],"[setPayrunStatusId, status]",[3120,3122],[1609,1611],"[month, setLeavePeriodMthId, setLeavePeriodYrId, year]",[1940,1948],"[isLoad, setHocPeriodMthId, setHocPeriodYrId, state.month, state.year]",[5215,5217],"[Build_EmpData]",[2698,2700],"[month, setHocPeriodMthId, setHocPeriodYrId, year]",[1834,1836],"[month, setExpPeriodMthId, setExpPeriodYrId, year]",[1949,1957],"[Calc_Totals, expensesperiod, isCalc]",[2731,2733],"[period, setDailyAllowsPeriodId]",[2152,2154],[1027,1029],[1788,1790],[3657,3659],"[setHoclocationId]",[3856,3868],"[setHocwhatdetailsId, whatstatus]",[4119,4140],"[whystatus, category, setHocwhyId, setHocwhydetailsId]",[1162,1164],"[setPayItemId]",[1959,1961],"[editEmployeeID, setEducationId]",[1164,1166],[1902,1904],"[editEmployeeID, setExperienceId]",[2485,2487],"[editEmployeeID, setFamilyId]",[1141,1143],"[editEmployeeID, getSingleBatchTraining]",[1079,1081],"[editEmployeeID, getSingleBatchLeave]",[1117,1119],"[editEmployeeID, loadSingleBatchExperience]",[956,958],"[editEmployeeID, loadSingleBatchEducation]",[940,942],"[editEmployeeID, loadSingleBatchFamily]",[2550,2552],"[loadPendingLeaves]",[2156,2158],"[getBatchPayrun]",[6494,6502],"[handleCalcTotals, isCalc]",[3020,3034],"[formdata, loadFormdata, setLoadFormdata]",[3137,3145],"[handleCalc, isLoad, state]",[4637,4639],"[birthdate, hasresigned, reporting_email, tap_checkbox]"]