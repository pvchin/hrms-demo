[{"D:\\react-myprojects\\hrms-demo\\src\\index.js":"1","D:\\react-myprojects\\hrms-demo\\src\\reportWebVitals.js":"2","D:\\react-myprojects\\hrms-demo\\src\\App.js":"3","D:\\react-myprojects\\hrms-demo\\src\\context\\employees_context.js":"4","D:\\react-myprojects\\hrms-demo\\src\\context\\dailyallowances_context.js":"5","D:\\react-myprojects\\hrms-demo\\src\\context\\leaves_context.js":"6","D:\\react-myprojects\\hrms-demo\\src\\context\\expenses_context.js":"7","D:\\react-myprojects\\hrms-demo\\src\\context\\tables_context.js":"8","D:\\react-myprojects\\hrms-demo\\src\\context\\payslips_context.js":"9","D:\\react-myprojects\\hrms-demo\\src\\context\\trainings_context.js":"10","D:\\react-myprojects\\hrms-demo\\src\\context\\auth_context.js":"11","D:\\react-myprojects\\hrms-demo\\src\\actions.js":"12","D:\\react-myprojects\\hrms-demo\\src\\components\\Main.js":"13","D:\\react-myprojects\\hrms-demo\\src\\components\\MainMenu.js":"14","D:\\react-myprojects\\hrms-demo\\src\\utils\\firebase.js":"15","D:\\react-myprojects\\hrms-demo\\src\\utils\\constants.js":"16","D:\\react-myprojects\\hrms-demo\\src\\reducers\\employees_reducer.js":"17","D:\\react-myprojects\\hrms-demo\\src\\reducers\\dailyallowances_reducer.js":"18","D:\\react-myprojects\\hrms-demo\\src\\reducers\\expenses_reducer.js":"19","D:\\react-myprojects\\hrms-demo\\src\\reducers\\leaves_reducer.js":"20","D:\\react-myprojects\\hrms-demo\\src\\reducers\\tables_reducer.js":"21","D:\\react-myprojects\\hrms-demo\\src\\reducers\\trainings_reducer.js":"22","D:\\react-myprojects\\hrms-demo\\src\\reducers\\payslips_reducer.js":"23","D:\\react-myprojects\\hrms-demo\\src\\components\\app\\Loading.tsx":"24","D:\\react-myprojects\\hrms-demo\\src\\components\\LoginForm.js":"25","D:\\react-myprojects\\hrms-demo\\src\\components\\DashboardMain.js":"26","D:\\react-myprojects\\hrms-demo\\src\\components\\data\\atomdata.js":"27","D:\\react-myprojects\\hrms-demo\\src\\components\\theme\\index.js":"28","D:\\react-myprojects\\hrms-demo\\src\\components\\SigninForm.js":"29","D:\\react-myprojects\\hrms-demo\\src\\components\\Example6.js":"30","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleEmployeeStaff.js":"31","D:\\react-myprojects\\hrms-demo\\src\\components\\SideDrawer.js":"32","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleLeave.js":"33","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleDailyAllowance.js":"34","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleExpense.js":"35","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleDailyAllowsDetlsStaff.js":"36","D:\\react-myprojects\\hrms-demo\\src\\components\\BatchDailyAllowances.js":"37","D:\\react-myprojects\\hrms-demo\\src\\components\\SinglePayslip.js":"38","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleEmployee.js":"39","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleDailyAllowsDetls.js":"40","D:\\react-myprojects\\hrms-demo\\src\\components\\Payrun.js":"41","D:\\react-myprojects\\hrms-demo\\src\\components\\UserAccessTable.js":"42","D:\\react-myprojects\\hrms-demo\\src\\components\\Payrunbatch.js":"43","D:\\react-myprojects\\hrms-demo\\src\\components\\ApprovalManager.js":"44","D:\\react-myprojects\\hrms-demo\\src\\components\\Appbanner.js":"45","D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsDirector.js":"46","D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeFormStaff.js":"47","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveForm.js":"48","D:\\react-myprojects\\hrms-demo\\src\\components\\DaiylAllowanceForm.js":"49","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseForm.js":"50","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowsDetlsTableStaff.js":"51","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableStaff.js":"52","D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipForm.js":"53","D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeFormNew.js":"54","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowsDetlsTable.js":"55","D:\\react-myprojects\\hrms-demo\\src\\components\\CurrencyTable.js":"56","D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\useUpdateEmployees.js":"57","D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\useEmployees.js":"58","D:\\react-myprojects\\hrms-demo\\src\\components\\payslips\\useUpdatePayslips.js":"59","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDailyAllowsStatus.js":"60","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableView.js":"61","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableAdmin.js":"62","D:\\react-myprojects\\hrms-demo\\src\\pages\\index.js":"63","D:\\react-myprojects\\hrms-demo\\src\\helpers\\useCustomToast.ts":"64","D:\\react-myprojects\\hrms-demo\\src\\components\\user\\useUser.js":"65","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpJobhistory.js":"66","D:\\react-myprojects\\hrms-demo\\src\\helpers\\AlertDialogBox.js":"67","D:\\react-myprojects\\hrms-demo\\src\\components\\Payslip_Deductions.js":"68","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDailyAllows.js":"69","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useUpdateLeaves.js":"70","D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useUpdateExpenses.js":"71","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\useDailyAllowsDetlsBatch.js":"72","D:\\react-myprojects\\hrms-demo\\src\\components\\designations\\useDesignations.js":"73","D:\\react-myprojects\\hrms-demo\\src\\components\\currency\\useAddCurrency.js":"74","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\utils.js":"75","D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\utils.js":"76","D:\\react-myprojects\\hrms-demo\\src\\components\\react-query\\constants.js":"77","D:\\react-myprojects\\hrms-demo\\src\\helpers\\CustomDialog.js":"78","D:\\react-myprojects\\hrms-demo\\src\\pages\\ErrorPage.js":"79","D:\\react-myprojects\\hrms-demo\\src\\components\\JobhistoryForm.js":"80","D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\useDeleteJobhistory.js":"81","D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\useUpdateJobhistory.js":"82","D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\useAddJobhistory.js":"83","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\utils.js":"84","D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\useJobhistory.js":"85","D:\\react-myprojects\\hrms-demo\\src\\components\\user-storage\\index.js":"86","D:\\react-myprojects\\hrms-demo\\src\\components\\jobstatus\\useJobstatus.js":"87","D:\\react-myprojects\\hrms-demo\\src\\components\\departments\\useDepartments.js":"88","D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\utils.js":"89","D:\\react-myprojects\\hrms-demo\\src\\components\\jobstatus\\utils.js":"90","D:\\react-myprojects\\hrms-demo\\src\\pages\\ClientsPage.js":"91","D:\\react-myprojects\\hrms-demo\\src\\pages\\PrivateRoute.js":"92","D:\\react-myprojects\\hrms-demo\\src\\pages\\DailyAllowancesPage.js":"93","D:\\react-myprojects\\hrms-demo\\src\\pages\\DailyAllowancesStaffPage.js":"94","D:\\react-myprojects\\hrms-demo\\src\\pages\\TablesPage.js":"95","D:\\react-myprojects\\hrms-demo\\src\\pages\\DesignationPage.js":"96","D:\\react-myprojects\\hrms-demo\\src\\pages\\DepartmentsPage.js":"97","D:\\react-myprojects\\hrms-demo\\src\\pages\\AllowancesPage.js":"98","D:\\react-myprojects\\hrms-demo\\src\\pages\\BatchPayslipsPage.js":"99","D:\\react-myprojects\\hrms-demo\\src\\pages\\PayslipPage.js":"100","D:\\react-myprojects\\hrms-demo\\src\\pages\\PayrollPage.js":"101","D:\\react-myprojects\\hrms-demo\\src\\pages\\PayslipStaffPage.js":"102","D:\\react-myprojects\\hrms-demo\\src\\pages\\UserAccessPage.js":"103","D:\\react-myprojects\\hrms-demo\\src\\pages\\TrainingsStaffPage.js":"104","D:\\react-myprojects\\hrms-demo\\src\\pages\\ExpensesStaffPage.js":"105","D:\\react-myprojects\\hrms-demo\\src\\pages\\HocPage.js":"106","D:\\react-myprojects\\hrms-demo\\src\\pages\\ExpensesPage.js":"107","D:\\react-myprojects\\hrms-demo\\src\\pages\\LeaveStaffPage.js":"108","D:\\react-myprojects\\hrms-demo\\src\\pages\\LeavePage.js":"109","D:\\react-myprojects\\hrms-demo\\src\\pages\\AllEmployeesPage.js":"110","D:\\react-myprojects\\hrms-demo\\src\\pages\\DashboardPage.js":"111","D:\\react-myprojects\\hrms-demo\\src\\pages\\HomePage.js":"112","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesPeriods.js":"113","D:\\react-myprojects\\hrms-demo\\src\\components\\TablesUpdate.js":"114","D:\\react-myprojects\\hrms-demo\\src\\components\\Example.js":"115","D:\\react-myprojects\\hrms-demo\\src\\components\\TableForm.js":"116","D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTable.js":"117","D:\\react-myprojects\\hrms-demo\\src\\components\\currency\\useDeleteCurrency.js":"118","D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTableStaff.js":"119","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpTrainings.js":"120","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableStaff.js":"121","D:\\react-myprojects\\hrms-demo\\src\\components\\HocTable.js":"122","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTable.js":"123","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableStaff.js":"124","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableAdmin.js":"125","D:\\react-myprojects\\hrms-demo\\src\\components\\AllEmployeesTable.js":"126","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeDirector.js":"127","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeStaff.js":"128","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeManager.js":"129","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeOpsSpvr.js":"130","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeAdminManager.js":"131","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeAdmin.js":"132","D:\\react-myprojects\\hrms-demo\\src\\components\\currency\\useUpdateCurrency.js":"133","D:\\react-myprojects\\hrms-demo\\src\\components\\currency\\useCurrency.js":"134","D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\useAddEmployees.js":"135","D:\\react-myprojects\\hrms-demo\\src\\components\\Payslip_Earnings.js":"136","D:\\react-myprojects\\hrms-demo\\src\\components\\Payslip_ViewDeductions.js":"137","D:\\react-myprojects\\hrms-demo\\src\\helpers\\CardLayout.js":"138","D:\\react-myprojects\\hrms-demo\\src\\components\\Payslip_ViewEarnings.js":"139","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\useDeleteDailyAllowsDetls.js":"140","D:\\react-myprojects\\hrms-demo\\src\\helpers\\CardLayout2.js":"141","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDeleteDailyAllows.js":"142","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesAddPeriod.js":"143","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useUpdateDailyAllows.js":"144","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\useUpdateDailyAllowsDetls.js":"145","D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useAddExpenses.js":"146","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useAddLeaves.js":"147","D:\\react-myprojects\\hrms-demo\\src\\components\\InstitutesTable.js":"148","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDailyAllowsPayrun.js":"149","D:\\react-myprojects\\hrms-demo\\src\\components\\payslips\\usePayslipsBatch.js":"150","D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useExpensesPayrun.js":"151","D:\\react-myprojects\\hrms-demo\\src\\components\\DesignationsTable.js":"152","D:\\react-myprojects\\hrms-demo\\src\\components\\PrintPayslip.js":"153","D:\\react-myprojects\\hrms-demo\\src\\components\\payslips\\usePayslips.js":"154","D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\usePayrun.js":"155","D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\useDeletePayrun.js":"156","D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useDeleteExpenses.js":"157","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useDeleteLeaves.js":"158","D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\useDeleteTrainings.js":"159","D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeFormAdd.js":"160","D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useHoc.js":"161","D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useDeleteHoc.js":"162","D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\useDeleteEmployees.js":"163","D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeView.js":"164","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableApproval.js":"165","D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTableViewSummary.js":"166","D:\\react-myprojects\\hrms-demo\\src\\components\\WPExpiryViewStaff.js":"167","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableVeryfy.js":"168","D:\\react-myprojects\\hrms-demo\\src\\components\\Copyright.js":"169","D:\\react-myprojects\\hrms-demo\\src\\components\\LeavesTableViewSummary.js":"170","D:\\react-myprojects\\hrms-demo\\src\\components\\Export2ExcelDialog.js":"171","D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeTableLeaveView.js":"172","D:\\react-myprojects\\hrms-demo\\src\\components\\TrainingsTableViewAdmin.js":"173","D:\\react-myprojects\\hrms-demo\\src\\components\\HocTableViewSummary.js":"174","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableAdmin.js":"175","D:\\react-myprojects\\hrms-demo\\src\\components\\WPExpiryViewAdmin.js":"176","D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTableAdmin.js":"177","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableViewAdmin.js":"178","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableManager.js":"179","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableViewSummary.js":"180","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableViewSummary.js":"181","D:\\react-myprojects\\hrms-demo\\src\\components\\Export2Excel.js":"182","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\useAddDailyAllowsDetls.js":"183","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useAddDailyAllows.js":"184","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableViewStaff.js":"185","D:\\react-myprojects\\hrms-demo\\src\\components\\TrainingsTableViewStaff.js":"186","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableViewStaff.js":"187","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveFormAdmin.js":"188","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useLeaves.js":"189","D:\\react-myprojects\\hrms-demo\\src\\components\\HocForm.js":"190","D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useExpenses.js":"191","D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\useAddTrainings.js":"192","D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\useUpdateTrainings.js":"193","D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\useTrainings.js":"194","D:\\react-myprojects\\hrms-demo\\src\\components\\institutes\\useInstitutes.js":"195","D:\\react-myprojects\\hrms-demo\\src\\components\\institutes\\useUpdateInstitutes.js":"196","D:\\react-myprojects\\hrms-demo\\src\\components\\DepartmentsTable.js":"197","D:\\react-myprojects\\hrms-demo\\src\\components\\institutes\\useAddInstitutes.js":"198","D:\\react-myprojects\\hrms-demo\\src\\components\\institutes\\useDeleteInstitutes.js":"199","D:\\react-myprojects\\hrms-demo\\src\\components\\DeductionsTable.js":"200","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpEducations.js":"201","D:\\react-myprojects\\hrms-demo\\src\\components\\AllowancesTable.js":"202","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpExperiences.js":"203","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpFamily.js":"204","D:\\react-myprojects\\hrms-demo\\src\\components\\payslips\\utils.js":"205","D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\utils.js":"206","D:\\react-myprojects\\hrms-demo\\src\\components\\designations\\useAddDesignations.js":"207","D:\\react-myprojects\\hrms-demo\\src\\helpers\\Utils.js":"208","D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\utils.js":"209","D:\\react-myprojects\\hrms-demo\\src\\components\\designations\\useDeleteDesignations.js":"210","D:\\react-myprojects\\hrms-demo\\src\\components\\designations\\useUpdateDesignations.js":"211","D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\utils.js":"212","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useLeavesStatus.js":"213","D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\usePayrunStatus.js":"214","D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useHocPeriod.js":"215","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useLeavesPeriod.js":"216","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpPersonal.js":"217","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewTrainings.js":"218","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewLeaves.js":"219","D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useExpensesPeriod.js":"220","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDailyAllowsPeriod.js":"221","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewExperiences.js":"222","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewEducations.js":"223","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewFamily.js":"224","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\utils.js":"225","D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\utils.js":"226","D:\\react-myprojects\\hrms-demo\\src\\components\\departments\\useAddDepartments.js":"227","D:\\react-myprojects\\hrms-demo\\src\\components\\hoclocation\\useHoclocation.js":"228","D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\useDeletePayItems.js":"229","D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\useAddPayItems.js":"230","D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\useUpdatePayItems.js":"231","D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\usePayItems.js":"232","D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\useDeleteEducations.js":"233","D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\useDeleteExperiences.js":"234","D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\useAddExperiences.js":"235","D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\useUpdateExperiences.js":"236","D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\useExperiences.js":"237","D:\\react-myprojects\\hrms-demo\\src\\components\\family\\useAddFamily.js":"238","D:\\react-myprojects\\hrms-demo\\src\\components\\family\\useDeleteFamily.js":"239","D:\\react-myprojects\\hrms-demo\\src\\components\\family\\useUpdateFamily.js":"240","D:\\react-myprojects\\hrms-demo\\src\\components\\family\\useFamily.js":"241","D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\useAddEducations.js":"242","D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\useUpdateEducations.js":"243","D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\useEducations.js":"244","D:\\react-myprojects\\hrms-demo\\src\\components\\departments\\useDeleteDepartments.js":"245","D:\\react-myprojects\\hrms-demo\\src\\components\\departments\\useUpdateDepartments.js":"246","D:\\react-myprojects\\hrms-demo\\src\\components\\hoclocation\\utils.js":"247","D:\\react-myprojects\\hrms-demo\\src\\components\\family\\utils.js":"248","D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\utils.js":"249","D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\utils.js":"250","D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\utils.js":"251","D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useUpdateHoc.js":"252","D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useAddHoc.js":"253","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhy\\useHocwhy.js":"254","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhydetails\\useHocwhydetails.js":"255","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhatdetails\\useHocwhatdetails.js":"256","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhat\\useHocwhat.js":"257","D:\\react-myprojects\\hrms-demo\\src\\components\\hoccategory\\useHoccategory.js":"258","D:\\react-myprojects\\hrms-demo\\src\\components\\hoccategory\\utils.js":"259","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhat\\utils.js":"260","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhydetails\\utils.js":"261","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhatdetails\\utils.js":"262","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhy\\utils.js":"263","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableManager.js":"264","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableView.js":"265","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableViewManager.js":"266","D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTableViewManager.js":"267","D:\\react-myprojects\\hrms-demo\\src\\helpers\\CardLayout3.js":"268","D:\\react-myprojects\\hrms-demo\\src\\components\\PrintPaySummary.js":"269","D:\\react-myprojects\\hrms-demo\\src\\components\\PaySummary.js":"270","D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\useUpdatePayrun.js":"271","D:\\react-myprojects\\hrms-demo\\src\\components\\PayForm.js":"272","D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeForm.js":"273","D:\\react-myprojects\\hrms-demo\\src\\components\\allowances\\useAllowances.js":"274","D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsManager.js":"275","D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsAdminManager.js":"276","D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsOpsSpvr.js":"277","D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsAdmin.js":"278","D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsStaff.js":"279"},{"size":2711,"mtime":1647343475371,"results":"280","hashOfConfig":"281"},{"size":362,"mtime":1612573013334,"results":"282","hashOfConfig":"281"},{"size":1797,"mtime":1634484908980,"results":"283","hashOfConfig":"281"},{"size":5101,"mtime":1645969744657,"results":"284","hashOfConfig":"281"},{"size":14583,"mtime":1645969843302,"results":"285","hashOfConfig":"281"},{"size":6098,"mtime":1645969677496,"results":"286","hashOfConfig":"281"},{"size":6798,"mtime":1645969712169,"results":"287","hashOfConfig":"281"},{"size":20798,"mtime":1645969557550,"results":"288","hashOfConfig":"281"},{"size":21513,"mtime":1645969640874,"results":"289","hashOfConfig":"281"},{"size":5422,"mtime":1645969469803,"results":"290","hashOfConfig":"281"},{"size":549,"mtime":1645969860100,"results":"291","hashOfConfig":"281"},{"size":24202,"mtime":1624975052616,"results":"292","hashOfConfig":"281"},{"size":1737,"mtime":1647345328475,"results":"293","hashOfConfig":"281"},{"size":1398,"mtime":1647345988232,"results":"294","hashOfConfig":"281"},{"size":783,"mtime":1626360373349,"results":"295","hashOfConfig":"281"},{"size":9966,"mtime":1644158469829,"results":"296","hashOfConfig":"281"},{"size":3564,"mtime":1623643063828,"results":"297","hashOfConfig":"281"},{"size":10817,"mtime":1645968575917,"results":"298","hashOfConfig":"281"},{"size":4605,"mtime":1645968550334,"results":"299","hashOfConfig":"281"},{"size":3957,"mtime":1645968544100,"results":"300","hashOfConfig":"281"},{"size":20287,"mtime":1623596884027,"results":"301","hashOfConfig":"281"},{"size":4247,"mtime":1645968509522,"results":"302","hashOfConfig":"281"},{"size":17440,"mtime":1645968527670,"results":"303","hashOfConfig":"281"},{"size":646,"mtime":1626924860523,"results":"304","hashOfConfig":"281"},{"size":4458,"mtime":1645976297077,"results":"305","hashOfConfig":"281"},{"size":15083,"mtime":1647356948651,"results":"306","hashOfConfig":"281"},{"size":3130,"mtime":1647162228963,"results":"307","hashOfConfig":"281"},{"size":856,"mtime":1645969912967,"results":"308","hashOfConfig":"281"},{"size":10338,"mtime":1646314456955,"results":"309","hashOfConfig":"281"},{"size":7904,"mtime":1645980015642,"results":"310","hashOfConfig":"281"},{"size":4931,"mtime":1645971611735,"results":"311","hashOfConfig":"281"},{"size":4513,"mtime":1646019270551,"results":"312","hashOfConfig":"281"},{"size":3910,"mtime":1645971447824,"results":"313","hashOfConfig":"281"},{"size":3571,"mtime":1645971865063,"results":"314","hashOfConfig":"281"},{"size":3922,"mtime":1645971537597,"results":"315","hashOfConfig":"281"},{"size":3531,"mtime":1645971743093,"results":"316","hashOfConfig":"281"},{"size":3276,"mtime":1624400993741,"results":"317","hashOfConfig":"281"},{"size":4603,"mtime":1645971364259,"results":"318","hashOfConfig":"281"},{"size":4933,"mtime":1645971681300,"results":"319","hashOfConfig":"281"},{"size":3598,"mtime":1645971810406,"results":"320","hashOfConfig":"281"},{"size":24012,"mtime":1647344696918,"results":"321","hashOfConfig":"281"},{"size":4569,"mtime":1645970863486,"results":"322","hashOfConfig":"281"},{"size":27637,"mtime":1647344743823,"results":"323","hashOfConfig":"281"},{"size":9301,"mtime":1645982574946,"results":"324","hashOfConfig":"281"},{"size":7233,"mtime":1647343833804,"results":"325","hashOfConfig":"281"},{"size":8104,"mtime":1645975955863,"results":"326","hashOfConfig":"281"},{"size":38768,"mtime":1647428146351,"results":"327","hashOfConfig":"281"},{"size":12406,"mtime":1646018359449,"results":"328","hashOfConfig":"281"},{"size":10012,"mtime":1647344111745,"results":"329","hashOfConfig":"281"},{"size":10448,"mtime":1645979976591,"results":"330","hashOfConfig":"281"},{"size":24821,"mtime":1647359097928,"results":"331","hashOfConfig":"281"},{"size":12264,"mtime":1647358642706,"results":"332","hashOfConfig":"281"},{"size":22029,"mtime":1647344799251,"results":"333","hashOfConfig":"281"},{"size":38752,"mtime":1645980487274,"results":"334","hashOfConfig":"281"},{"size":6584,"mtime":1647344029760,"results":"335","hashOfConfig":"281"},{"size":2587,"mtime":1634559156672,"results":"336","hashOfConfig":"281"},{"size":785,"mtime":1625802942098,"results":"337","hashOfConfig":"281"},{"size":995,"mtime":1639703740352,"results":"338","hashOfConfig":"281"},{"size":782,"mtime":1647264002041,"results":"339","hashOfConfig":"281"},{"size":1145,"mtime":1631841429724,"results":"340","hashOfConfig":"281"},{"size":3682,"mtime":1647344002702,"results":"341","hashOfConfig":"281"},{"size":8030,"mtime":1647343938321,"results":"342","hashOfConfig":"281"},{"size":1351,"mtime":1638065354430,"results":"343","hashOfConfig":"281"},{"size":646,"mtime":1625798737997,"results":"344","hashOfConfig":"281"},{"size":1524,"mtime":1631151422337,"results":"345","hashOfConfig":"281"},{"size":6854,"mtime":1645980766214,"results":"346","hashOfConfig":"281"},{"size":3129,"mtime":1645969398295,"results":"347","hashOfConfig":"281"},{"size":6869,"mtime":1645973465936,"results":"348","hashOfConfig":"281"},{"size":1133,"mtime":1631197215977,"results":"349","hashOfConfig":"281"},{"size":772,"mtime":1645969974454,"results":"350","hashOfConfig":"281"},{"size":770,"mtime":1630322149187,"results":"351","hashOfConfig":"281"},{"size":1511,"mtime":1631234568295,"results":"352","hashOfConfig":"281"},{"size":547,"mtime":1625758222838,"results":"353","hashOfConfig":"281"},{"size":716,"mtime":1628652117726,"results":"354","hashOfConfig":"281"},{"size":228,"mtime":1626012237438,"results":"355","hashOfConfig":"281"},{"size":224,"mtime":1626004799326,"results":"356","hashOfConfig":"281"},{"size":1335,"mtime":1646051804752,"results":"357","hashOfConfig":"281"},{"size":1497,"mtime":1624329676645,"results":"358","hashOfConfig":"281"},{"size":743,"mtime":1645969038875,"results":"359","hashOfConfig":"281"},{"size":14087,"mtime":1646018338773,"results":"360","hashOfConfig":"281"},{"size":743,"mtime":1643767446853,"results":"361","hashOfConfig":"281"},{"size":796,"mtime":1645969992819,"results":"362","hashOfConfig":"281"},{"size":733,"mtime":1643767355276,"results":"363","hashOfConfig":"281"},{"size":238,"mtime":1626013581220,"results":"364","hashOfConfig":"281"},{"size":1012,"mtime":1643767702539,"results":"365","hashOfConfig":"281"},{"size":453,"mtime":1625889377868,"results":"366","hashOfConfig":"281"},{"size":1034,"mtime":1644158820394,"results":"367","hashOfConfig":"281"},{"size":501,"mtime":1625800533121,"results":"368","hashOfConfig":"281"},{"size":226,"mtime":1643767532301,"results":"369","hashOfConfig":"281"},{"size":0,"mtime":1644158542469,"results":"370","hashOfConfig":"281"},{"size":3116,"mtime":1620536608782,"results":"371","hashOfConfig":"281"},{"size":594,"mtime":1645968672135,"results":"372","hashOfConfig":"281"},{"size":3421,"mtime":1621866966445,"results":"373","hashOfConfig":"281"},{"size":3432,"mtime":1624282741154,"results":"374","hashOfConfig":"281"},{"size":3190,"mtime":1645965290297,"results":"375","hashOfConfig":"281"},{"size":3129,"mtime":1620537502474,"results":"376","hashOfConfig":"281"},{"size":3214,"mtime":1621176394282,"results":"377","hashOfConfig":"281"},{"size":3189,"mtime":1621005948632,"results":"378","hashOfConfig":"281"},{"size":3206,"mtime":1621344267720,"results":"379","hashOfConfig":"281"},{"size":3271,"mtime":1645968693211,"results":"380","hashOfConfig":"281"},{"size":3183,"mtime":1645968724692,"results":"381","hashOfConfig":"281"},{"size":3203,"mtime":1626019204916,"results":"382","hashOfConfig":"281"},{"size":3198,"mtime":1645968606178,"results":"383","hashOfConfig":"281"},{"size":3316,"mtime":1645968628748,"results":"384","hashOfConfig":"281"},{"size":3247,"mtime":1645968941503,"results":"385","hashOfConfig":"281"},{"size":3361,"mtime":1645968762827,"results":"386","hashOfConfig":"281"},{"size":3683,"mtime":1623172638593,"results":"387","hashOfConfig":"281"},{"size":3315,"mtime":1623942108178,"results":"388","hashOfConfig":"281"},{"size":3366,"mtime":1629622148918,"results":"389","hashOfConfig":"281"},{"size":3158,"mtime":1646013496086,"results":"390","hashOfConfig":"281"},{"size":222,"mtime":1647346180766,"results":"391","hashOfConfig":"281"},{"size":1284,"mtime":1646107288797,"results":"392","hashOfConfig":"281"},{"size":2023,"mtime":1647343896927,"results":"393","hashOfConfig":"281"},{"size":2351,"mtime":1645971233648,"results":"394","hashOfConfig":"281"},{"size":4085,"mtime":1622901629555,"results":"395","hashOfConfig":"281"},{"size":2343,"mtime":1622902246334,"results":"396","hashOfConfig":"281"},{"size":10223,"mtime":1647345630965,"results":"397","hashOfConfig":"281"},{"size":726,"mtime":1628652185180,"results":"398","hashOfConfig":"281"},{"size":5677,"mtime":1646019009918,"results":"399","hashOfConfig":"281"},{"size":5060,"mtime":1646017386881,"results":"400","hashOfConfig":"281"},{"size":7748,"mtime":1645979788885,"results":"401","hashOfConfig":"281"},{"size":8768,"mtime":1646018226709,"results":"402","hashOfConfig":"281"},{"size":7272,"mtime":1646017513705,"results":"403","hashOfConfig":"281"},{"size":15032,"mtime":1646408145794,"results":"404","hashOfConfig":"281"},{"size":6712,"mtime":1646270056924,"results":"405","hashOfConfig":"281"},{"size":13149,"mtime":1647343741893,"results":"406","hashOfConfig":"281"},{"size":45226,"mtime":1647429959770,"results":"407","hashOfConfig":"281"},{"size":9203,"mtime":1646107233630,"results":"408","hashOfConfig":"281"},{"size":39905,"mtime":1647430810140,"results":"409","hashOfConfig":"281"},{"size":29341,"mtime":1645977961443,"results":"410","hashOfConfig":"281"},{"size":40354,"mtime":1647430653236,"results":"411","hashOfConfig":"281"},{"size":27534,"mtime":1645978900635,"results":"412","hashOfConfig":"281"},{"size":769,"mtime":1628652247996,"results":"413","hashOfConfig":"281"},{"size":477,"mtime":1632542575544,"results":"414","hashOfConfig":"281"},{"size":724,"mtime":1625802698233,"results":"415","hashOfConfig":"281"},{"size":6973,"mtime":1645973272923,"results":"416","hashOfConfig":"281"},{"size":3380,"mtime":1645973139523,"results":"417","hashOfConfig":"281"},{"size":1171,"mtime":1645969263513,"results":"418","hashOfConfig":"281"},{"size":2524,"mtime":1645972877915,"results":"419","hashOfConfig":"281"},{"size":812,"mtime":1645970078681,"results":"420","hashOfConfig":"281"},{"size":913,"mtime":1645969221169,"results":"421","hashOfConfig":"281"},{"size":760,"mtime":1626012143637,"results":"422","hashOfConfig":"281"},{"size":16762,"mtime":1646998379342,"results":"423","hashOfConfig":"281"},{"size":803,"mtime":1630322171248,"results":"424","hashOfConfig":"281"},{"size":839,"mtime":1629643605781,"results":"425","hashOfConfig":"281"},{"size":717,"mtime":1626000835564,"results":"426","hashOfConfig":"281"},{"size":703,"mtime":1625839094668,"results":"427","hashOfConfig":"281"},{"size":2409,"mtime":1634559139097,"results":"428","hashOfConfig":"281"},{"size":1104,"mtime":1632152172173,"results":"429","hashOfConfig":"281"},{"size":1055,"mtime":1630040562812,"results":"430","hashOfConfig":"281"},{"size":1099,"mtime":1630230678288,"results":"431","hashOfConfig":"281"},{"size":2475,"mtime":1634559121280,"results":"432","hashOfConfig":"281"},{"size":12982,"mtime":1645972084122,"results":"433","hashOfConfig":"281"},{"size":1024,"mtime":1645441459882,"results":"434","hashOfConfig":"281"},{"size":998,"mtime":1626013831261,"results":"435","hashOfConfig":"281"},{"size":713,"mtime":1626014110639,"results":"436","hashOfConfig":"281"},{"size":727,"mtime":1626000997584,"results":"437","hashOfConfig":"281"},{"size":713,"mtime":1625839833770,"results":"438","hashOfConfig":"281"},{"size":734,"mtime":1625837998174,"results":"439","hashOfConfig":"281"},{"size":5208,"mtime":1645980569795,"results":"440","hashOfConfig":"281"},{"size":879,"mtime":1638064176425,"results":"441","hashOfConfig":"281"},{"size":693,"mtime":1638064051891,"results":"442","hashOfConfig":"281"},{"size":734,"mtime":1625802828834,"results":"443","hashOfConfig":"281"},{"size":14524,"mtime":1624364976073,"results":"444","hashOfConfig":"281"},{"size":11120,"mtime":1647360805596,"results":"445","hashOfConfig":"281"},{"size":2668,"mtime":1645973592769,"results":"446","hashOfConfig":"281"},{"size":3257,"mtime":1647345772758,"results":"447","hashOfConfig":"281"},{"size":7885,"mtime":1647343993863,"results":"448","hashOfConfig":"281"},{"size":468,"mtime":1634881547580,"results":"449","hashOfConfig":"281"},{"size":2432,"mtime":1646095308344,"results":"450","hashOfConfig":"281"},{"size":6361,"mtime":1646055723093,"results":"451","hashOfConfig":"281"},{"size":6355,"mtime":1647344249910,"results":"452","hashOfConfig":"281"},{"size":4272,"mtime":1647345732187,"results":"453","hashOfConfig":"281"},{"size":3504,"mtime":1645978948579,"results":"454","hashOfConfig":"281"},{"size":8478,"mtime":1645979859556,"results":"455","hashOfConfig":"281"},{"size":5871,"mtime":1647344952590,"results":"456","hashOfConfig":"281"},{"size":7353,"mtime":1645974116939,"results":"457","hashOfConfig":"281"},{"size":5547,"mtime":1647344571481,"results":"458","hashOfConfig":"281"},{"size":10325,"mtime":1646018543447,"results":"459","hashOfConfig":"281"},{"size":2961,"mtime":1645979271164,"results":"460","hashOfConfig":"281"},{"size":3752,"mtime":1647344018658,"results":"461","hashOfConfig":"281"},{"size":10941,"mtime":1646056338923,"results":"462","hashOfConfig":"281"},{"size":802,"mtime":1645970093177,"results":"463","hashOfConfig":"281"},{"size":750,"mtime":1626012044446,"results":"464","hashOfConfig":"281"},{"size":4644,"mtime":1647344423336,"results":"465","hashOfConfig":"281"},{"size":3095,"mtime":1647345682010,"results":"466","hashOfConfig":"281"},{"size":3234,"mtime":1647344607858,"results":"467","hashOfConfig":"281"},{"size":11600,"mtime":1646018373818,"results":"468","hashOfConfig":"281"},{"size":1093,"mtime":1635268047989,"results":"469","hashOfConfig":"281"},{"size":24244,"mtime":1646018202774,"results":"470","hashOfConfig":"281"},{"size":1018,"mtime":1626000648360,"results":"471","hashOfConfig":"281"},{"size":724,"mtime":1625838060126,"results":"472","hashOfConfig":"281"},{"size":777,"mtime":1625837935113,"results":"473","hashOfConfig":"281"},{"size":952,"mtime":1625837870028,"results":"474","hashOfConfig":"281"},{"size":493,"mtime":1627306271324,"results":"475","hashOfConfig":"281"},{"size":782,"mtime":1627306338795,"results":"476","hashOfConfig":"281"},{"size":2441,"mtime":1634559105876,"results":"477","hashOfConfig":"281"},{"size":729,"mtime":1627307060429,"results":"478","hashOfConfig":"281"},{"size":739,"mtime":1627306207024,"results":"479","hashOfConfig":"281"},{"size":2519,"mtime":1634559087977,"results":"480","hashOfConfig":"281"},{"size":4012,"mtime":1634915187548,"results":"481","hashOfConfig":"281"},{"size":2521,"mtime":1645967994855,"results":"482","hashOfConfig":"281"},{"size":3797,"mtime":1626278320869,"results":"483","hashOfConfig":"281"},{"size":4070,"mtime":1645980806482,"results":"484","hashOfConfig":"281"},{"size":450,"mtime":1628647536437,"results":"485","hashOfConfig":"281"},{"size":678,"mtime":1631761584227,"results":"486","hashOfConfig":"281"},{"size":743,"mtime":1625801372351,"results":"487","hashOfConfig":"281"},{"size":364,"mtime":1645190532706,"results":"488","hashOfConfig":"281"},{"size":218,"mtime":1626014179037,"results":"489","hashOfConfig":"281"},{"size":753,"mtime":1625801448372,"results":"490","hashOfConfig":"281"},{"size":796,"mtime":1625802990123,"results":"491","hashOfConfig":"281"},{"size":212,"mtime":1638172282050,"results":"492","hashOfConfig":"281"},{"size":1187,"mtime":1637680924176,"results":"493","hashOfConfig":"281"},{"size":1067,"mtime":1631801114382,"results":"494","hashOfConfig":"281"},{"size":1309,"mtime":1646051027296,"results":"495","hashOfConfig":"281"},{"size":1375,"mtime":1632042598961,"results":"496","hashOfConfig":"281"},{"size":28675,"mtime":1647344306338,"results":"497","hashOfConfig":"281"},{"size":1596,"mtime":1646017475444,"results":"498","hashOfConfig":"281"},{"size":1531,"mtime":1646017458224,"results":"499","hashOfConfig":"281"},{"size":1347,"mtime":1632038635671,"results":"500","hashOfConfig":"281"},{"size":1104,"mtime":1632040092091,"results":"501","hashOfConfig":"281"},{"size":1587,"mtime":1646017418139,"results":"502","hashOfConfig":"281"},{"size":1553,"mtime":1622901288533,"results":"503","hashOfConfig":"281"},{"size":1404,"mtime":1646017436516,"results":"504","hashOfConfig":"281"},{"size":218,"mtime":1632042511765,"results":"505","hashOfConfig":"281"},{"size":224,"mtime":1626059101507,"results":"506","hashOfConfig":"281"},{"size":742,"mtime":1625800887575,"results":"507","hashOfConfig":"281"},{"size":1056,"mtime":1638199168189,"results":"508","hashOfConfig":"281"},{"size":727,"mtime":1626014379405,"results":"509","hashOfConfig":"281"},{"size":717,"mtime":1626014330237,"results":"510","hashOfConfig":"281"},{"size":770,"mtime":1626014520002,"results":"511","hashOfConfig":"281"},{"size":1072,"mtime":1632306858886,"results":"512","hashOfConfig":"281"},{"size":741,"mtime":1625832767335,"results":"513","hashOfConfig":"281"},{"size":748,"mtime":1625833836425,"results":"514","hashOfConfig":"281"},{"size":738,"mtime":1625833769320,"results":"515","hashOfConfig":"281"},{"size":789,"mtime":1626011673317,"results":"516","hashOfConfig":"281"},{"size":978,"mtime":1625833701287,"results":"517","hashOfConfig":"281"},{"size":704,"mtime":1625831924179,"results":"518","hashOfConfig":"281"},{"size":714,"mtime":1625831978364,"results":"519","hashOfConfig":"281"},{"size":757,"mtime":1625831672038,"results":"520","hashOfConfig":"281"},{"size":916,"mtime":1625832650282,"results":"521","hashOfConfig":"281"},{"size":731,"mtime":1625832717517,"results":"522","hashOfConfig":"281"},{"size":784,"mtime":1625832816616,"results":"523","hashOfConfig":"281"},{"size":965,"mtime":1625833417248,"results":"524","hashOfConfig":"281"},{"size":746,"mtime":1625800910412,"results":"525","hashOfConfig":"281"},{"size":789,"mtime":1625802984510,"results":"526","hashOfConfig":"281"},{"size":175,"mtime":1638189001426,"results":"527","hashOfConfig":"281"},{"size":165,"mtime":1638188907547,"results":"528","hashOfConfig":"281"},{"size":180,"mtime":1638188926234,"results":"529","hashOfConfig":"281"},{"size":173,"mtime":1638188950802,"results":"530","hashOfConfig":"281"},{"size":222,"mtime":1632278524654,"results":"531","hashOfConfig":"281"},{"size":736,"mtime":1638064098760,"results":"532","hashOfConfig":"281"},{"size":683,"mtime":1638064239149,"results":"533","hashOfConfig":"281"},{"size":912,"mtime":1638725848973,"results":"534","hashOfConfig":"281"},{"size":1003,"mtime":1638726017088,"results":"535","hashOfConfig":"281"},{"size":1016,"mtime":1638725530053,"results":"536","hashOfConfig":"281"},{"size":925,"mtime":1638725343906,"results":"537","hashOfConfig":"281"},{"size":1056,"mtime":1638724980499,"results":"538","hashOfConfig":"281"},{"size":175,"mtime":1638725004641,"results":"539","hashOfConfig":"281"},{"size":167,"mtime":1638725369531,"results":"540","hashOfConfig":"281"},{"size":179,"mtime":1638726036775,"results":"541","hashOfConfig":"281"},{"size":181,"mtime":1638725545603,"results":"542","hashOfConfig":"281"},{"size":165,"mtime":1638725867948,"results":"543","hashOfConfig":"281"},{"size":10156,"mtime":1645979750546,"results":"544","hashOfConfig":"281"},{"size":2480,"mtime":1647344393629,"results":"545","hashOfConfig":"281"},{"size":3400,"mtime":1647344582259,"results":"546","hashOfConfig":"281"},{"size":2794,"mtime":1646019170674,"results":"547","hashOfConfig":"281"},{"size":1416,"mtime":1645969199841,"results":"548","hashOfConfig":"281"},{"size":8465,"mtime":1645972127907,"results":"549","hashOfConfig":"281"},{"size":20375,"mtime":1645975405230,"results":"550","hashOfConfig":"281"},{"size":756,"mtime":1626014159472,"results":"551","hashOfConfig":"281"},{"size":51224,"mtime":1647258040690,"results":"552","hashOfConfig":"281"},{"size":42398,"mtime":1645980652396,"results":"553","hashOfConfig":"281"},{"size":476,"mtime":1625801885836,"results":"554","hashOfConfig":"281"},{"size":8115,"mtime":1647349989638,"results":"555","hashOfConfig":"281"},{"size":7368,"mtime":1645975982561,"results":"556","hashOfConfig":"281"},{"size":6527,"mtime":1645975898649,"results":"557","hashOfConfig":"281"},{"size":5787,"mtime":1647344630019,"results":"558","hashOfConfig":"281"},{"size":5657,"mtime":1647356594077,"results":"559","hashOfConfig":"281"},{"filePath":"560","messages":"561","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"279dzi",{"filePath":"562","messages":"563","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"565","messages":"566","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"567","usedDeprecatedRules":"564"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"576","messages":"577","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"578","messages":"579","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"580","messages":"581","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"588","messages":"589","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"590","messages":"591","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"596","messages":"597","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"598","messages":"599","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"602","messages":"603","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"606","messages":"607","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"608","messages":"609","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"610"},{"filePath":"611","messages":"612","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"613","messages":"614","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"615","messages":"616","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"617","messages":"618","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"619","messages":"620","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"621","messages":"622","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"623","usedDeprecatedRules":"564"},{"filePath":"624","messages":"625","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"626","messages":"627","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"628","usedDeprecatedRules":"564"},{"filePath":"629","messages":"630","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"633","messages":"634","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"635","messages":"636","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"639","messages":"640","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"641","messages":"642","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"643","messages":"644","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"645","messages":"646","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"647","messages":"648","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"649","messages":"650","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"651","messages":"652","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"653","usedDeprecatedRules":"564"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"656","messages":"657","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"658","messages":"659","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"660","messages":"661","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"662","usedDeprecatedRules":"564"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"665","messages":"666","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"667","usedDeprecatedRules":"564"},{"filePath":"668","messages":"669","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"670","messages":"671","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"672","messages":"673","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"674","messages":"675","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"676","usedDeprecatedRules":"564"},{"filePath":"677","messages":"678","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"679","messages":"680","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"681","messages":"682","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"683","messages":"684","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"685","messages":"686","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"687","messages":"688","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"689","messages":"690","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"691","messages":"692","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"693","messages":"694","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"695","messages":"696","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"610"},{"filePath":"697","messages":"698","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"699","messages":"700","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"701","usedDeprecatedRules":"564"},{"filePath":"702","messages":"703","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"704","messages":"705","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"706","usedDeprecatedRules":"564"},{"filePath":"707","messages":"708","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"709","messages":"710","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"711","messages":"712","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"713","messages":"714","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"715","messages":"716","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"717","messages":"718","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"719","messages":"720","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"721","messages":"722","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"723","messages":"724","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"725","messages":"726","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"727","messages":"728","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"729","messages":"730","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"731","messages":"732","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"733","messages":"734","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"735","messages":"736","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"737","messages":"738","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"739","messages":"740","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"741","messages":"742","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"743","messages":"744","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"745","messages":"746","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"747","messages":"748","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"749","messages":"750","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"751","messages":"752","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"753","messages":"754","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"755","messages":"756","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"757","messages":"758","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"759","messages":"760","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"761","messages":"762","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"763","messages":"764","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"765","messages":"766","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"767","messages":"768","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"769","messages":"770","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"771","messages":"772","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"773","messages":"774","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"775","messages":"776","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"777","messages":"778","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"779","messages":"780","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"781","messages":"782","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"783","messages":"784","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"785","usedDeprecatedRules":"564"},{"filePath":"786","messages":"787","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"788","messages":"789","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"790","messages":"791","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"792","messages":"793","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"794","messages":"795","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"796","messages":"797","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"798","messages":"799","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"800","messages":"801","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"802","messages":"803","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"804","messages":"805","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"806","messages":"807","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"808","messages":"809","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"810","messages":"811","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"812","usedDeprecatedRules":"564"},{"filePath":"813","messages":"814","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"815","usedDeprecatedRules":"564"},{"filePath":"816","messages":"817","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"818","usedDeprecatedRules":"564"},{"filePath":"819","messages":"820","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"821","usedDeprecatedRules":"564"},{"filePath":"822","messages":"823","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"824","messages":"825","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"826","messages":"827","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"828","messages":"829","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"830","messages":"831","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"832","usedDeprecatedRules":"564"},{"filePath":"833","messages":"834","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"835","messages":"836","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"837","usedDeprecatedRules":"564"},{"filePath":"838","messages":"839","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"840","messages":"841","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"842","usedDeprecatedRules":"564"},{"filePath":"843","messages":"844","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"845","messages":"846","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"847","messages":"848","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"849","messages":"850","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"851","usedDeprecatedRules":"564"},{"filePath":"852","messages":"853","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"854","usedDeprecatedRules":"564"},{"filePath":"855","messages":"856","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"857","messages":"858","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"859","usedDeprecatedRules":"564"},{"filePath":"860","messages":"861","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"862","messages":"863","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"864","messages":"865","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"866","messages":"867","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"868","messages":"869","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"870","messages":"871","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"872","messages":"873","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"874","messages":"875","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"876","messages":"877","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"878","messages":"879","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"880","messages":"881","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"882","messages":"883","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"884","messages":"885","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"886","messages":"887","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"888","messages":"889","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"890","messages":"891","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"892","messages":"893","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"894","messages":"895","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"896","messages":"897","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"898","messages":"899","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"900","messages":"901","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"902","usedDeprecatedRules":"564"},{"filePath":"903","messages":"904","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"905","messages":"906","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"907","messages":"908","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"909","messages":"910","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"911","usedDeprecatedRules":"564"},{"filePath":"912","messages":"913","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"914","messages":"915","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"916","usedDeprecatedRules":"564"},{"filePath":"917","messages":"918","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"919","messages":"920","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"921","messages":"922","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"923","messages":"924","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"925","usedDeprecatedRules":"564"},{"filePath":"926","messages":"927","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"928","messages":"929","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"930","messages":"931","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"932","messages":"933","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"934","usedDeprecatedRules":"564"},{"filePath":"935","messages":"936","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"937","usedDeprecatedRules":"564"},{"filePath":"938","messages":"939","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"940","messages":"941","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"942","messages":"943","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"944","messages":"945","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"946","usedDeprecatedRules":"564"},{"filePath":"947","messages":"948","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"949","usedDeprecatedRules":"564"},{"filePath":"950","messages":"951","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"952","messages":"953","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"954","messages":"955","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"956","messages":"957","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"958","messages":"959","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"960","messages":"961","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"962","messages":"963","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"964","messages":"965","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"966","usedDeprecatedRules":"564"},{"filePath":"967","messages":"968","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"969","messages":"970","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"971","usedDeprecatedRules":"564"},{"filePath":"972","messages":"973","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"974","messages":"975","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"976","messages":"977","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"978","messages":"979","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"980","messages":"981","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"982","messages":"983","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"984","messages":"985","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"986","messages":"987","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"988","messages":"989","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"990","messages":"991","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"992","usedDeprecatedRules":"564"},{"filePath":"993","messages":"994","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"995","usedDeprecatedRules":"564"},{"filePath":"996","messages":"997","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"998","usedDeprecatedRules":"564"},{"filePath":"999","messages":"1000","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1001","usedDeprecatedRules":"564"},{"filePath":"1002","messages":"1003","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1004","usedDeprecatedRules":"564"},{"filePath":"1005","messages":"1006","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1007","messages":"1008","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1009","messages":"1010","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1011","messages":"1012","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1013","messages":"1014","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1015","messages":"1016","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1017","messages":"1018","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1019","messages":"1020","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1021","messages":"1022","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1023","messages":"1024","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1025","messages":"1026","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1027","messages":"1028","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1029","messages":"1030","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1031","messages":"1032","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1033","usedDeprecatedRules":"564"},{"filePath":"1034","messages":"1035","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1036","usedDeprecatedRules":"564"},{"filePath":"1037","messages":"1038","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1039","messages":"1040","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1041","messages":"1042","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1043","usedDeprecatedRules":"564"},{"filePath":"1044","messages":"1045","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1046","usedDeprecatedRules":"564"},{"filePath":"1047","messages":"1048","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1049","usedDeprecatedRules":"564"},{"filePath":"1050","messages":"1051","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1052","messages":"1053","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1054","messages":"1055","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1056","messages":"1057","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1058","messages":"1059","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1060","messages":"1061","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1062","messages":"1063","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1064","messages":"1065","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1066","messages":"1067","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1068","messages":"1069","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1070","messages":"1071","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1072","messages":"1073","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1074","messages":"1075","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1076","messages":"1077","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1078","messages":"1079","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1080","messages":"1081","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1082","messages":"1083","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1084","messages":"1085","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1086","messages":"1087","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1088","messages":"1089","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1090","messages":"1091","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1092","messages":"1093","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1094","messages":"1095","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1096","messages":"1097","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1098","messages":"1099","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1100","messages":"1101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1102","messages":"1103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1104","messages":"1105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1106","messages":"1107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1108","messages":"1109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1110","messages":"1111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1112","messages":"1113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1114","messages":"1115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1116","messages":"1117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1118","messages":"1119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1120","messages":"1121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1122","messages":"1123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1124","messages":"1125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1126","messages":"1127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1128","messages":"1129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1130","usedDeprecatedRules":"564"},{"filePath":"1131","messages":"1132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1133","messages":"1134","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1135","messages":"1136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1137","usedDeprecatedRules":"564"},{"filePath":"1138","messages":"1139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1140","messages":"1141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1142","messages":"1143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1144","usedDeprecatedRules":"564"},{"filePath":"1145","messages":"1146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1147","messages":"1148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1149","messages":"1150","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1151","messages":"1152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1153"},{"filePath":"1154","messages":"1155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1156","messages":"1157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1158","messages":"1159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1160","messages":"1161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1162","messages":"1163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\react-myprojects\\hrms-demo\\src\\index.js",[],"D:\\react-myprojects\\hrms-demo\\src\\reportWebVitals.js",[],["1164","1165"],"D:\\react-myprojects\\hrms-demo\\src\\App.js",["1166"],"//import React, { useState } from \"react\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n//import { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n//import Switch from \"@material-ui/core/Switch\";\nimport { theme } from \"./components/theme\";\nimport { Loading } from \"./components/app/Loading\";\n// import {\n//   orange,\n//   lightBlue,\n//   deepPurple,\n//   deepOrange,\n// } from \"@material-ui/core/colors\";\n//import DashboardMain from \"./components/DashboardMain\";\nimport Main from \"./components/Main\";\nimport MainMenu from \"./components/MainMenu\";\n\nconst App = () => {\n  //const [darkState, setDarkState] = useState(false);\n  //const palletType = darkState ? \"dark\" : \"light\";\n  //const mainPrimaryColor = darkState ? orange[500] : lightBlue[500];\n  //const mainSecondaryColor = darkState ? deepOrange[900] : deepPurple[500];\n\n  // const darkTheme = createMuiTheme({\n  //   palette: {\n  //     type: palletType,\n  //     primary: {\n  //       main: mainPrimaryColor,\n  //     },\n  //     secondary: {\n  //       main: mainSecondaryColor,\n  //     },\n  //   },\n  // });\n  // const lightTheme = createMuiTheme({\n  //   palette: {\n  //     type: palletType,\n  //     primary: {\n  //       main: \"#4dabf5\",\n  //     },\n  //     secondary: {\n  //       main: \"#f73378\",\n  //     },\n  //   },\n  // });\n\n  // const handleThemeChange = () => {\n  //   setDarkState(!darkState);\n  // };\n\n  return (\n    <ChakraProvider theme={theme}>\n      {/* <ThemeProvider theme={lightTheme}> */}\n      <CssBaseline />\n      <div>\n        <Loading />\n        <MainMenu />\n      </div>\n      {/* <Switch checked={darkState} onChange={handleThemeChange} /> */}\n\n      {/* </ThemeProvider> */}\n    </ChakraProvider>\n  );\n};\n\nexport default App;\n","D:\\react-myprojects\\hrms-demo\\src\\context\\employees_context.js",[],"D:\\react-myprojects\\hrms-demo\\src\\context\\dailyallowances_context.js",[],"D:\\react-myprojects\\hrms-demo\\src\\context\\leaves_context.js",[],"D:\\react-myprojects\\hrms-demo\\src\\context\\expenses_context.js",[],"D:\\react-myprojects\\hrms-demo\\src\\context\\tables_context.js",[],"D:\\react-myprojects\\hrms-demo\\src\\context\\payslips_context.js",[],"D:\\react-myprojects\\hrms-demo\\src\\context\\trainings_context.js",[],"D:\\react-myprojects\\hrms-demo\\src\\context\\auth_context.js",[],"D:\\react-myprojects\\hrms-demo\\src\\actions.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\Main.js",["1167"],"D:\\react-myprojects\\hrms-demo\\src\\components\\MainMenu.js",["1168"],"D:\\react-myprojects\\hrms-demo\\src\\utils\\firebase.js",[],"D:\\react-myprojects\\hrms-demo\\src\\utils\\constants.js",[],"D:\\react-myprojects\\hrms-demo\\src\\reducers\\employees_reducer.js",[],"D:\\react-myprojects\\hrms-demo\\src\\reducers\\dailyallowances_reducer.js",[],"D:\\react-myprojects\\hrms-demo\\src\\reducers\\expenses_reducer.js",[],"D:\\react-myprojects\\hrms-demo\\src\\reducers\\leaves_reducer.js",[],"D:\\react-myprojects\\hrms-demo\\src\\reducers\\tables_reducer.js",[],"D:\\react-myprojects\\hrms-demo\\src\\reducers\\trainings_reducer.js",[],"D:\\react-myprojects\\hrms-demo\\src\\reducers\\payslips_reducer.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\app\\Loading.tsx",[],["1169","1170"],"D:\\react-myprojects\\hrms-demo\\src\\components\\LoginForm.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\DashboardMain.js",["1171","1172","1173","1174"],"D:\\react-myprojects\\hrms-demo\\src\\components\\data\\atomdata.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\theme\\index.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\SigninForm.js",["1175"],"D:\\react-myprojects\\hrms-demo\\src\\components\\Example6.js",["1176","1177","1178","1179"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport * as emailjs from \"emailjs-com\";\r\nimport axios from \"axios\";\r\nimport clsx from \"clsx\";\r\n//import Table from \"../helpers/TableContainer\";\r\nimport { Box, Image } from \"@chakra-ui/react\";\r\n//import Paper from \"@material-ui/core/Paper\";\r\n//import { Cloudinary, Transformation } from \"@cloudinary/base\";\r\n// import {Image ,\r\n//   AdvancedImage,\r\n//   accessibility,\r\n//   responsive,\r\n// } from \"@cloudinary/react\";\r\n// Import required actions.\r\n//import { thumbnail, scale } from \"@cloudinary/base/actions/resize\";\r\n//import { byRadius } from \"@cloudinary/base/actions/roundCorners\";\r\n//import { sepia } from \"@cloudinary/base/actions/effect\";\r\n//import { source } from \"@cloudinary/base/actions/overlay\";\r\n//import { opacity, brightness } from \"@cloudinary/base/actions/adjust\";\r\n//import { byAngle } from \"@cloudinary/base/actions/rotate\";\r\n//import { format } from \"@cloudinary/base/actions/delivery\";\r\n// Import required qualifiers.\r\n//import { face } from \"@cloudinary/base/qualifiers/focusOn\";\r\n//import { focusOn } from \"@cloudinary/base/qualifiers/gravity\";\r\n//import { image } from \"@cloudinary/base/qualifiers/source\";\r\n//import { Position } from \"@cloudinary/base/qualifiers/position\";\r\n//import { southEast } from \"@cloudinary/base/qualifiers/compass\";\r\n//import { compass } from \"@cloudinary/base/qualifiers/gravity\";\r\n//import { png } from \"@cloudinary/base/qualifiers/format\";\r\n\r\n//const drawerWidth = 240;\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\n\r\nconst Example = () => {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const [data, setData] = useState([]);\r\n  // const myCld = new Cloudinary({ cloudName: \"dlmzwvakr\" });\r\n  // const myImage = myCld.image(\"sample\");\r\n  const [emailstatus, setEmailStatus] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    axios(\"http://api.tvmaze.com/search/shows?q=girls\")\r\n      .then((res) => {\r\n        setData(res.data);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }, []);\r\n\r\n  // Apply the transformation.\r\n  // myImage\r\n  //   .resize(thumbnail().width(150).height(150).gravity(focusOn(face()))) // Crop the image.\r\n  //   .roundCorners(byRadius(20)) // Round the corners.\r\n  //   .effect(sepia()) // Apply a sepia effect.\r\n  //   .overlay(\r\n  //     // Overlay the Cloudinary logo.\r\n  //     source(\r\n  //       image(\"cloudinary_icon_blue\").transformation(\r\n  //         new Transformation()\r\n  //           .resize(scale(50)) // Resize the logo.\r\n  //           .adjust(opacity(60)) // Adjust the opacity of the logo.\r\n  //           .adjust(brightness(200))\r\n  //       ) // Adjust the brightness of the logo.\r\n  //     ).position(\r\n  //       new Position().gravity(compass(southEast())).offsetX(5).offsetY(5)\r\n  //     ) // Position the logo.\r\n  //   )\r\n  //   .rotate(byAngle(10)) // Rotate the result.\r\n  //   .delivery(format(png())); // Deliver as PNG. */\r\n\r\n  const columns = useMemo(() => [\r\n    {\r\n      Header: \"TV Show\",\r\n      columns: [\r\n        {\r\n          Header: \"Name\",\r\n          accessor: \"show.name\",\r\n        },\r\n        {\r\n          Header: \"Language\",\r\n          accessor: \"show.language\",\r\n        },\r\n        {\r\n          Header: \"Official Site\",\r\n          accessor: \"show.officialSite\",\r\n          Cell: ({ cell: { value } }) =>\r\n            value ? <a href={value}>{value}</a> : \"-\",\r\n        },\r\n        {\r\n          Header: \"Status\",\r\n          accessor: \"show.status\",\r\n        },\r\n        {\r\n          Header: \"Premiered\",\r\n          accessor: \"show.premiered\",\r\n          Cell: ({ cell: { value } }) => value || \"-\",\r\n        },\r\n        {\r\n          Header: \"Time\",\r\n          accessor: \"show.schedule.time\",\r\n          Cell: ({ cell: { value } }) => value || \"-\",\r\n        },\r\n      ],\r\n    },\r\n  ]);\r\n\r\n  const handleButtonClick = () => {\r\n    var data = {\r\n      to_name: \"pvchin\",\r\n      to_email: \"pvchinbn@gmail.com\",\r\n      message: \"This is a reminder!!\",\r\n      cc_to: \"pvchinbn@yahoo.com\",\r\n    };\r\n\r\n    emailjs.send(SERVICE_ID, TEMPLATE_ID, data, USER_ID).then(\r\n      function (response) {\r\n        console.log(response.status, response.text);\r\n        setEmailStatus(\"success\");\r\n      },\r\n      function (err) {\r\n        console.log(err);\r\n        setEmailStatus(\"failure\");\r\n      }\r\n    );\r\n    console.log(\"email\", emailstatus);\r\n    if (emailstatus === \"success\") {\r\n      toast({\r\n        title: \"Invalid email or password!\",\r\n        status: \"warning\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <paper className={fixedHeightPaper} style={{ backgroundColor: \"white\" }}>\r\n      <section className={classes.section}>\r\n        {/* <Image\r\n          cloudName=\"dlmzwvakr\"\r\n          secure=\"true\"\r\n          upload_preset=\"advtrade\"\r\n          publicId=\"smartsecurity-ss3_d21ecw.jpg\"\r\n        >\r\n          <Transformation\r\n            width=\"400\"\r\n            height=\"250\"\r\n            gravity=\"face\"\r\n            crop=\"thumb\"\r\n          />\r\n        </Image> */}\r\n        {/* <div>\r\n          <AdvancedImage cldImg={myImage} />\r\n        </div>{\" \"} */}\r\n\r\n        <Image\r\n          boxSize=\"200px\"\r\n          src=\"https://res.cloudinary.com/dlmzwvakr/image/upload/v1626538637/advtrade/smartsecurity-ss3_d21ecw.jpg\"\r\n          alt=\"Dan Abramov\"\r\n        />\r\n        <div className=\"App\">\r\n          <h1>\r\n            <center>React Table Demo</center>\r\n          </h1>\r\n          {/* <Table columns={columns} data={data} /> */}\r\n          <button onClick={handleButtonClick}>Send Email</button>\r\n        </div>\r\n      </section>\r\n    </paper>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  container: {\r\n    margin: 0,\r\n    padding: 0,\r\n    width: \"80vw\",\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"repeat(auto-fill,250px)\",\r\n    gridAutoRows: \"10px\",\r\n    position: \"absolute\",\r\n    left: \"50%\",\r\n    transform: \"translateX(-50%)\",\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"primary\",\r\n  },\r\n  fixedHeight: {\r\n    height: 800,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(10),\r\n    // display: \"flex\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n    border: \"1px solid\",\r\n    width: \"100%\",\r\n    color: \"primary\",\r\n    bcakgroundColor: \"black\",\r\n  },\r\n  card: {\r\n    backgroundColor: \"black\",\r\n  },\r\n  section: {\r\n    width: \"90vw\",\r\n    margin: \"5rem auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n  },\r\n  underline: {\r\n    width: \"5rem\",\r\n    height: \"0.25rem\",\r\n    marginBottom: \"1.25rem\",\r\n    background: \"var(--clr-primary-5)\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n  },\r\n  title: {\r\n    marginbottom: \"4rem\",\r\n    textAlign: \"center\",\r\n  },\r\n  jobscenter: {\r\n    width: \"80vw\",\r\n    margin: \"0 auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n    flexDirection: \"row\",\r\n  },\r\n  btncontainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    marginBottom: \"4rem\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  jobbtn: {\r\n    background: \"transparent\",\r\n    borderColor: \"transparent\",\r\n    textTransform: \"capitalize\",\r\n    fontSize: \"1.25rem\",\r\n    letterSpacing: \"var(--spacing)\",\r\n    margin: \"0 0.5rem\",\r\n    transition: \"var(--transition)\",\r\n    cursor: \"pointer\",\r\n    padding: \"0.25rem 0\",\r\n    lineHeight: \"1\",\r\n    outlineColor: \"var(--clr-primary-10)\",\r\n    \"&:hover\": {\r\n      color: \"var(--clr-primary-5)\",\r\n      boxShadow: \"0 2px var(--clr-primary-5)\",\r\n    },\r\n  },\r\n  activebtn: {\r\n    color: \"var(--clr-primary-5)\",\r\n    boxShadow: \"0 2px var(--clr-primary-5)\",\r\n  },\r\n  jobinfo: {\r\n    fontWeight: \"400\",\r\n  },\r\n}));\r\n\r\nexport default Example;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleEmployeeStaff.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\SideDrawer.js",["1180"],"import React from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport {\r\n  //RecoilRoot,\r\n  //atom,\r\n  //selector,\r\n  useRecoilState,\r\n  //useRecoilValue,\r\n  //useSetRecoilState,\r\n} from \"recoil\";\r\n\r\n//import MenuListItems from \"./MenuListItems\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport MenuListItemsStaff from \"./MenuListItemsStaff\";\r\nimport MenuListItemsAdmin from \"./MenuListItemsAdmin\";\r\nimport MenuListItemsOpsSpvr from \"./MenuListItemsOpsSpvr\";\r\nimport MenuListItemsAdminManager from \"./MenuListItemsAdminManager\";\r\nimport MenuListItemsManager from \"./MenuListItemsManager\";\r\nimport MenuListItemsDirector from \"./MenuListItemsDirector\"\r\n//import headerlogo from \"../assets/headerlogo.png\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst SideDrawer = ({ HandleDrawerOpen, handleDrawerClose, open }) => {\r\n  const classes = useStyles();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n\r\n  const SwitchCase = () => {\r\n  \r\n    switch (loginLevel.loginLevel) {\r\n      case \"Staff\":\r\n        return <MenuListItemsStaff />;\r\n      case \"Admin\":\r\n        return <MenuListItemsAdmin />;\r\n      case \"OpsSpvr\":\r\n        return <MenuListItemsOpsSpvr />;\r\n      case \"AdminManager\":\r\n        return <MenuListItemsAdminManager />;\r\n      case \"Manager\":\r\n        return <MenuListItemsManager />;\r\n      case \"Director\":\r\n        return <MenuListItemsDirector />;\r\n      default:\r\n        return \"You are not authorised user!\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        {/* \"flex-end\" */}\r\n\r\n        <div className={classes.toolbarIcon}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </div>\r\n\r\n        <Divider />\r\n        <List>\r\n          <SwitchCase />\r\n        </List>\r\n      </Drawer>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      //changing the sidebar hide width\r\n      width: theme.spacing(7),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n  image: {\r\n    width: 200,\r\n    height: 1150,\r\n  },\r\n  img: {\r\n    margin: \"auto\",\r\n    display: \"block\",\r\n    maxWidth: \"100%\",\r\n    maxHeight: \"100%\",\r\n  },\r\n}));\r\n\r\nexport default SideDrawer;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleLeave.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\SingleDailyAllowance.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\SingleExpense.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\SingleDailyAllowsDetlsStaff.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\BatchDailyAllowances.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\SinglePayslip.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\SingleEmployee.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\SingleDailyAllowsDetls.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\Payrun.js",["1181","1182","1183"],"D:\\react-myprojects\\hrms-demo\\src\\components\\UserAccessTable.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\Payrunbatch.js",["1184","1185","1186","1187","1188","1189"],"D:\\react-myprojects\\hrms-demo\\src\\components\\ApprovalManager.js",["1190"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\nimport { Grid,  Container, Box } from \"@material-ui/core\";\r\n//import CardLayout from \"../helpers/CardLayout\";\r\n//import CardLayout2 from \"../helpers/CardLayout2\";\r\nimport CardLayout3 from \"../helpers/CardLayout3\";\r\nimport Copyright from \"./Copyright\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { useRecoilState } from \"recoil\";\r\n//import { loginLevelState } from \"./data/atomdata\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\nimport LeaveTableViewManager from \"./LeaveTableViewManager\";\r\nimport LeaveTableManager from \"./LeaveTableManager\";\r\nimport ExpenseTableView from \"./ExpenseTableView\";\r\nimport ExpenseTableManager from \"./ExpenseTableManager\";\r\nimport PayslipTableViewManager from \"./PayslipTableViewManager\";\r\nimport PayslipTableAdmin from \"./PayslipTableAdmin\";\r\nimport DailyAllowancesTableView from \"./DailyAllowancesTableView\";\r\nimport DailyAllowancesTableAdmin from \"./DailyAllowancesTableAdmin\";\r\n//import OnLeavesView from \"./OnLeavesView\";\r\n//import WPExpiryView from \"./WPExpiryView\";\r\nimport { useDailyAllowsStatus } from \"./dailyallows/useDailyAllowsStatus\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst FILTERSTRING = \"Pending\";\r\n\r\nconst EmployeeView = () => {\r\n  const classes = useStyles();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  //const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const [leavesdata, setLeavesdata] = useState([]);\r\n  const [isLeaveDialogOpen, setIsLeaveDialogOpen] = useState(false);\r\n  const [expensesdata, setExpensesdata] = useState([]);\r\n  const [isExpenseDialogOpen, setIsExpenseDialogOpen] = useState(false);\r\n  const [payslipsdata, setPayslipsdata] = useState([]);\r\n  const [isPayslipDialogOpen, setIsPayslipDialogOpen] = useState(false);\r\n  const [dailyallowancesdata, setDailyAllowancesdata] = useState([]);\r\n  const [isDailyAllowancesDialogOpen, setIsDailyAllowancesDialogOpen] =\r\n    useState(false);\r\n  const { dailyallowsstatus, setDailyAllowsStatusId } = useDailyAllowsStatus();\r\n  const { leaves, loadPendingLeaves } = useLeavesContext();\r\n  const { expenses, loadPendingExpenses } = useExpensesContext();\r\n  const {  loadPendingPayslips } = usePayslipsContext();\r\n  const {  loadPendingDailyAllowances } =\r\n    useDailyAllowancesContext();\r\n\r\n  const handleLeaveDialogOpen = () => {\r\n    setLeavesdata([]);\r\n    setLeavesdata([...leaves]);\r\n    setIsLeaveDialogOpen(true);\r\n  };\r\n\r\n  const handleLeaveDialogClose = () => {\r\n    setIsLeaveDialogOpen(false);\r\n    loadPendingLeaves(FILTERSTRING);\r\n  };\r\n\r\n  const handleExpenseDialogOpen = () => {\r\n    setExpensesdata([]);\r\n    setExpensesdata([...expenses]);\r\n    setIsExpenseDialogOpen(true);\r\n  };\r\n\r\n  const handleExpenseDialogClose = () => {\r\n    setIsExpenseDialogOpen(false);\r\n    loadPendingExpenses(FILTERSTRING);\r\n  };\r\n\r\n  const handlePayslipDialogOpen = () => {\r\n    setPayslipsdata([]);\r\n    //setPayslipsdata([...batchpayslips]);\r\n    setIsPayslipDialogOpen(true);\r\n  };\r\n\r\n  const handlePayslipDialogClose = () => {\r\n    setIsPayslipDialogOpen(false);\r\n    loadPendingPayslips(FILTERSTRING);\r\n  };\r\n\r\n  const handleDailyAllowancesDialogOpen = () => {\r\n    setDailyAllowancesdata([]);\r\n    setDailyAllowancesdata([...dailyallowsstatus]);\r\n    setIsDailyAllowancesDialogOpen(true);\r\n  };\r\n\r\n  const handleDailyAllowancesDialogClose = () => {\r\n    setIsDailyAllowancesDialogOpen(false);\r\n    loadPendingDailyAllowances(FILTERSTRING);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setDailyAllowsStatusId(\"Verified\");\r\n  },[])\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.appBarSpacer} />\r\n      <div style={{ paddingLeft: 50 }}>\r\n        {/* <h2>Welcome {loginLevel.loginUser}!</h2>\r\n        <h3>Dashboard</h3> */}\r\n      </div>\r\n      <Container maxWidth=\"lg\" className={classes.container}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={8} lg={12}>\r\n            <CardLayout3\r\n              title=\"Leaves pending for approval\"\r\n              handleClick={handleLeaveDialogOpen}\r\n            >\r\n              <LeaveTableViewManager />\r\n            </CardLayout3>\r\n          </Grid>\r\n          <Grid item xs={12} md={8} lg={12}>\r\n            <CardLayout3\r\n              title=\"Expenses pending for approval\"\r\n              handleClick={handleExpenseDialogOpen}\r\n            >\r\n              <ExpenseTableView />\r\n            </CardLayout3>\r\n          </Grid>\r\n          <Grid item xs={12} md={8} lg={12}>\r\n            <CardLayout3\r\n              title=\"Site Allowances pending for approval\"\r\n              handleClick={handleDailyAllowancesDialogOpen}\r\n            >\r\n              <DailyAllowancesTableView />\r\n            </CardLayout3>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={8} lg={12}>\r\n            <CardLayout3\r\n              title=\"Payroll pending for approval\"\r\n              handleClick={handlePayslipDialogOpen}\r\n            >\r\n              <PayslipTableViewManager />\r\n            </CardLayout3>\r\n          </Grid>\r\n        </Grid>\r\n        <Box pt={4}>\r\n          <Copyright />\r\n        </Box>\r\n        <CustomDialog\r\n          isOpen={isLeaveDialogOpen}\r\n          handleClose={handleLeaveDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <LeaveTableManager\r\n            setLeavesdata={setLeavesdata}\r\n            leavesdata={leavesdata}\r\n            handleDialogClose={handleLeaveDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isExpenseDialogOpen}\r\n          handleClose={handleExpenseDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <ExpenseTableManager\r\n            setExpensesdata={setExpensesdata}\r\n            expensesdata={expensesdata}\r\n            handleDialogClose={handleExpenseDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isPayslipDialogOpen}\r\n          handleClose={handlePayslipDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={true}\r\n          isFullwidth={false}\r\n        >\r\n          <PayslipTableAdmin\r\n            setPayslipsdata={setPayslipsdata}\r\n            payslipsdata={payslipsdata}\r\n            handleDialogClose={handlePayslipDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isDailyAllowancesDialogOpen}\r\n          handleClose={handleDailyAllowancesDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={true}\r\n          isFullwidth={false}\r\n        >\r\n          <DailyAllowancesTableAdmin\r\n            setDailyAllowancesdata={setDailyAllowancesdata}\r\n            dailyallowancesdata={dailyallowancesdata}\r\n            handleDialogClose={handleDailyAllowancesDialogClose}\r\n          />\r\n        </CustomDialog>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default EmployeeView;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\Appbanner.js",["1191"],"D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsDirector.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeFormStaff.js",["1192","1193","1194","1195","1196","1197"],"D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveForm.js",["1198","1199"],"import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  TextField,\r\n  Paper,\r\n  Typography,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport * as emailjs from \"emailjs-com\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\n//import { useEmployees } from \"./employees/useEmployees\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\n//import { useLeaves } from \"./leaves/useLeaves\";\r\nimport { useAddLeaves } from \"./leaves/useAddLeaves\";\r\n//import { useDeleteLeaves } from \"./leaves/useDeleteLeaves\";\r\nimport { useUpdateLeaves } from \"./leaves/useUpdateLeaves\";\r\n\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\n\r\n// const initial_state = {\r\n//   name: \"\",\r\n//   to_date: \"\",\r\n//   from_date: \"\",\r\n//   reason: \"\",\r\n//   status: \"Pending\",\r\n//   no_of_days: 0,\r\n//   leave_bal: 0,\r\n//   reporting_email: \"\",\r\n// };\r\n\r\nconst LeaveForm = ({\r\n  formdata,\r\n  leavestate,\r\n  setFormdata,\r\n  handleDialogClose,\r\n}) => {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  //const { employees } = useEmployees();\r\n  //const { leaves, filter, setFilter, setLeaveId } = useLeaves();\r\n  const updateLeaves = useUpdateLeaves();\r\n  const addLeaves = useAddLeaves();\r\n  //const [state, setState] = useState(initial_state);\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { handleSubmit, control } = useForm();\r\n  //const initialValues = Object.values(initial_state).join(\"\");\r\n  const { isLeaveEditing, editLeaveID } = useLeavesContext();\r\n\r\n  const handleSentEmail = (data) => {\r\n    const { from_date, to_date } = data;\r\n    //console.log(\"leave form\", loginLevel);\r\n    var emaildata = {\r\n      to_name: loginLevel.loginUser,\r\n      to_email: loginLevel.loginEmail,\r\n      message: `Your leave application from ${from_date} to ${to_date} has been successfully submitted for approval`,\r\n      cc_to: loginLevel.reporting_email,\r\n    };\r\n\r\n    emailjs.send(SERVICE_ID, TEMPLATE_ID, emaildata, USER_ID).then(\r\n      function (response) {\r\n        console.log(response.status, response.text);\r\n        toast({\r\n          title: `Email has sent successfully to ${emaildata.to_email}!`,\r\n          status: \"success\",\r\n        });\r\n      },\r\n      function (err) {\r\n        console.log(err);\r\n        toast({\r\n          title: `Email has fail to send to ${emaildata.to_email}!`,\r\n          status: \"warning\",\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    console.log(\"leave\", data);\r\n    if (isLeaveEditing) {\r\n      updateLeaves({ id: editLeaveID, ...data });\r\n      toast({\r\n        title: \"Your leave has been updated!\",\r\n        status: \"success\",\r\n      });\r\n    } else {\r\n      addLeaves({\r\n        ...data,\r\n        empid: loginLevel.loginUserId,\r\n        reporting_email: loginLevel.reporting_email,\r\n      });\r\n      handleSentEmail(data);\r\n    }\r\n\r\n    //history.push(\"/leave\");\r\n    handleDialogClose();\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   setState(initial_state);\r\n  //   setState({ ...formdata });\r\n  //   setState({ ...formdata });\r\n  //   console.log(\"laeve form\",state)\r\n  // }, [initialValues]);\r\n\r\n  return (\r\n    <div>\r\n      <Paper className={classes.root}>\r\n        <Typography variant=\"h5\" component=\"h3\">\r\n          LEAVE FORM\r\n        </Typography>\r\n        <Typography component=\"p\">Leave Application</Typography>\r\n        <Divider />\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <div>\r\n            <Controller\r\n              name=\"name\"\r\n              control={control}\r\n              defaultValue={loginLevel.loginUser}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Name\"\r\n                    id=\"margin-normal\"\r\n                    name=\"name\"\r\n                    //value={value}\r\n                    defaultValue={loginLevel.loginUser}\r\n                    className={classes.textField}\r\n                    onChange={(e) => {\r\n                      console.log(e.target.value);\r\n                      onChange(e.target.value);\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    //select\r\n                  >\r\n                    {/* {employees.map((e) => {\r\n                      return (\r\n                        <MenuItem key={e.name} value={e.name}>\r\n                          {e.name}\r\n                        </MenuItem>\r\n                      );\r\n                    })} */}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              // rules={{ required: \"Name required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"from_date\"\r\n              control={control}\r\n              defaultValue={formdata.from_date}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"From Date\"\r\n                    type=\"date\"\r\n                    id=\"margin-normal\"\r\n                    name=\"from_date\"\r\n                    defaultValue={formdata.from_date}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                );\r\n              }}\r\n              rules={{ required: \"From Date is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"to_date\"\r\n              control={control}\r\n              defaultValue={formdata.to_date}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"To Date\"\r\n                    id=\"margin-normal\"\r\n                    type=\"date\"\r\n                    name=\"to_date\"\r\n                    defaultValue={formdata.to_date}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                );\r\n              }}\r\n              rules={{ required: \"To Date is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"leave_bal\"\r\n              control={control}\r\n              defaultValue={leavestate.leave_bal}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    disable\r\n                    label=\"Leave Balance\"\r\n                    type=\"number\"\r\n                    id=\"standard-number\"\r\n                    name=\"leave_bal\"\r\n                    defaultValue={leavestate.leave_bal}\r\n                    className={classes.textField}\r\n                    //onChange={onChange}\r\n                    onChange={(e) => {\r\n                      onChange(parseInt(e.target.value, 10));\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                );\r\n              }}\r\n              //rules={{ required: \"IC No required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"no_of_days\"\r\n              control={control}\r\n              defaultValue={formdata.no_of_days}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"No Of Days\"\r\n                    type=\"number\"\r\n                    id=\"standard-number\"\r\n                    name=\"no_of_days\"\r\n                    defaultValue={formdata.no_of_days}\r\n                    className={classes.textField}\r\n                    //onChange={onChange}\r\n                    onChange={(e) => {\r\n                      onChange(parseInt(e.target.value, 10));\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  />\r\n                );\r\n              }}\r\n              //rules={{ required: \"IC No required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"reason\"\r\n              control={control}\r\n              defaultValue={formdata.reason}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Reason\"\r\n                    id=\"margin-normal\"\r\n                    name=\"reason\"\r\n                    defaultValue={formdata.reason}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  />\r\n                );\r\n              }}\r\n              // rules={{ required: \"Reason is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"status\"\r\n              control={control}\r\n              defaultValue={formdata.status}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Status\"\r\n                    id=\"margin-normal\"\r\n                    name=\"status\"\r\n                    defaultValue={formdata.status}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                    // select\r\n                  >\r\n                    {/* <MenuItem value=\"Pending\">Pending</MenuItem>\r\n                    <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n                    <MenuItem value=\"Approve\">Approve</MenuItem>\r\n                    <MenuItem value=\"Reject\">Reject</MenuItem> */}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              onClick={handleSubmit(onSubmit)}\r\n            >\r\n              Submit <Icon className={classes.rightIcon}>send</Icon>\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 400,\r\n  },\r\n}));\r\n\r\nexport default LeaveForm;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\DaiylAllowanceForm.js",["1200"],"D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseForm.js",["1201"],"import React from \"react\";\r\nimport { Button, Icon, TextField, Paper, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport * as emailjs from \"emailjs-com\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\n//import { useExpenses } from \"./expenses/useExpenses\";\r\nimport { useAddExpenses } from \"./expenses/useAddExpenses\";\r\n//import { useDeleteExpenses } from \"./expenses/useDeleteExpenses\";\r\nimport { useUpdateExpenses } from \"./expenses/useUpdateExpenses\";\r\n\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\n\r\n// const initial_values = {\r\n//   name: \"\",\r\n//   date: \"\",\r\n//   purchased_date: \"\",\r\n//   purchased_from: \"\",\r\n//   description: \"\",\r\n//   remark: \"\",\r\n//   status: \"Pending\",\r\n//   amount: 0,\r\n//};\r\n\r\nconst ExpenseForm = ({ formdata, setFormdata, handleDialogClose }) => {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  //const { expenses, filter, setFilter, setExpenseId } = useExpenses();\r\n  const updateExpenses = useUpdateExpenses();\r\n  const addExpenses = useAddExpenses();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { isExpenseEditing, editExpenseID } = useExpensesContext();\r\n\r\n  const { handleSubmit, control } = useForm();\r\n\r\n  const handleSentEmail = (data) => {\r\n    const { date } = data;\r\n    //console.log(\"expense form\", loginLevel);\r\n    var emaildata = {\r\n      to_name: loginLevel.loginUser,\r\n      to_email: loginLevel.loginEmail,\r\n      message: `Your expenses claim application dated on ${date} has been successfully submitted for approval`,\r\n      cc_to: loginLevel.reporting_email,\r\n    };\r\n\r\n    emailjs.send(SERVICE_ID, TEMPLATE_ID, emaildata, USER_ID).then(\r\n      function (response) {\r\n        console.log(response.status, response.text);\r\n        toast({\r\n          title: `Email has sent successfully to ${emaildata.to_email}!`,\r\n          status: \"success\",\r\n        });\r\n      },\r\n      function (err) {\r\n        console.log(err);\r\n        toast({\r\n          title: `Email has fail to send to ${emaildata.to_email}!`,\r\n          status: \"warning\",\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  const onSubmit = (data, e) => {\r\n    e.preventDefault();\r\n    if (isExpenseEditing) {\r\n      updateExpenses({ id: editExpenseID, ...data });\r\n    } else {\r\n      addExpenses({ empid: loginLevel.loginUserId, ...data });\r\n      handleSentEmail(data);\r\n    }\r\n\r\n    handleDialogClose();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Paper className={classes.root}>\r\n        <Typography variant=\"h5\" component=\"h3\">\r\n          EXPENSES CLAIM FORM\r\n        </Typography>\r\n        <Typography component=\"p\">Expense Claim Application</Typography>\r\n\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <div>\r\n            <Controller\r\n              name=\"name\"\r\n              control={control}\r\n              defaultValue={loginLevel.loginUser}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Name\"\r\n                    id=\"margin-normal1\"\r\n                    name=\"name\"\r\n                    defaultValue={loginLevel.loginUser}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  ></TextField>\r\n                );\r\n              }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"date\"\r\n              control={control}\r\n              defaultValue={formdata.date}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Date\"\r\n                    type=\"date\"\r\n                    id=\"margin-normal2\"\r\n                    name=\"formdata.date\"\r\n                    value={value}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                );\r\n              }}\r\n              rules={{ required: \"From Date is required\" }}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <Controller\r\n              name=\"purchased_from\"\r\n              control={control}\r\n              defaultValue={formdata.purchased_from}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Purchased From\"\r\n                    id=\"margin-normal3\"\r\n                    name=\"purchased_from\"\r\n                    defaultValue={formdata.purchased_from}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  />\r\n                );\r\n              }}\r\n              // rules={{ required: \"Reason is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"description\"\r\n              control={control}\r\n              defaultValue={formdata.description}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Description\"\r\n                    id=\"margin-normal4\"\r\n                    name=\"description\"\r\n                    defaultValue={formdata.description}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  />\r\n                );\r\n              }}\r\n              // rules={{ required: \"Reason is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"amount\"\r\n              control={control}\r\n              defaultValue={formdata.amount}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Amount\"\r\n                    type=\"number\"\r\n                    id=\"standard-number1\"\r\n                    name=\"amount\"\r\n                    defaultValue={formdata.amount}\r\n                    className={classes.textField}\r\n                    //onChange={onChange}\r\n                    onChange={(e) => {\r\n                      onChange(parseInt(e.target.value, 10));\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  />\r\n                );\r\n              }}\r\n              //rules={{ required: \"IC No required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"remark\"\r\n              control={control}\r\n              defaultValue={formdata.remark}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Remark\"\r\n                    id=\"margin-normal5\"\r\n                    name=\"remark\"\r\n                    defaultValue={formdata.remark}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  />\r\n                );\r\n              }}\r\n              // rules={{ required: \"Reason is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"status\"\r\n              control={control}\r\n              defaultValue=\"Pending\"\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Status\"\r\n                    id=\"margin-normal6\"\r\n                    name=\"status\"\r\n                    defaultValue=\"Pending\"\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  ></TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              //onClick={() => handleSubmit(onSubmit)()}\r\n            >\r\n              Save <Icon className={classes.rightIcon}>send</Icon>\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 400,\r\n  },\r\n}));\r\n\r\nexport default ExpenseForm;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowsDetlsTableStaff.js",["1202","1203","1204","1205"],"D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableStaff.js",["1206","1207","1208","1209","1210"],"D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipForm.js",["1211","1212","1213","1214","1215"],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeFormNew.js",["1216","1217","1218","1219","1220","1221"],"import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  TextField,\r\n  Paper,\r\n  Typography,\r\n  Grid,\r\n  Divider,\r\n  Checkbox,\r\n  FormControlLabel,\r\n} from \"@material-ui/core\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { Controller, useForm, setValue } from \"react-hook-form\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\nimport { useAddEmployees } from \"./employees/useAddEmployees\";\r\nimport { useUpdateEmployees } from \"./employees/useUpdateEmployees\";\r\nimport { useDepartments } from \"./departments/useDepartments\";\r\nimport { useDesignations } from \"./designations/useDesignations\";\r\nimport App from \"../utils/firebase\";\r\n\r\n// import EmpFamily from \"./EmpFamily\";\r\n// import EmpEducations from \"./EmpEducations\";\r\n// import EmpExperiences from \"./EmpExperiences\";\r\n// import EmpTrainings from \"./EmpTrainings\";\r\n\r\nconst initial_values = {\r\n  name: \"\",\r\n  empno: \"\",\r\n  gender: \"\",\r\n  ic_no: \"\",\r\n  email: \"\",\r\n  age: 0,\r\n  birthdate: null,\r\n  address: \"\",\r\n  nationality: \"\",\r\n  basic_salary: 0,\r\n  salary_currency: \"BND\",\r\n  bank_name: \"\",\r\n  bank_acno: \"\",\r\n  tap_checkbox: true,\r\n  tap_acno: \"\",\r\n  scp_acno: \"\",\r\n  date_of_join: null,\r\n  date_of_resign: null,\r\n  leave_bal: 0,\r\n  leave_bf: 0,\r\n  leave_entitled: 0,\r\n  leave_cd: 0,\r\n  designation: \"\",\r\n  department: \"\",\r\n  passportno: \"\",\r\n  passport_expirydate: null,\r\n  workpermitno: \"\",\r\n  workpermit_expirydate: null,\r\n  siteallows_fee: 0,\r\n  perdiem_fee: 0,\r\n  role: 1,\r\n  password: \"abc123*\",\r\n  reporting_to: \"\",\r\n  reporting_email: \"\",\r\n};\r\n\r\nconst EmployeeFormNew = () => {\r\n  const classes = useStyles();\r\n  const {\r\n    isEditing,\r\n    single_employee,\r\n    //updateEmployee,\r\n    //addEmployee,\r\n    editEmployeeID,\r\n    single_employee_loading,\r\n  } = useEmployeesContext();\r\n  const {\r\n    name,\r\n    empno,\r\n    ic_no,\r\n    gender,\r\n    //age,\r\n    birthdate,\r\n    email,\r\n    address,\r\n    nationality,\r\n    basic_salary,\r\n    salary_currency,\r\n    bank_name,\r\n    bank_acno,\r\n    tap_checkbox,\r\n    tap_acno,\r\n    scp_acno,\r\n    leave_bal,\r\n    leave_bf,\r\n    leave_cd,\r\n    leave_entitled,\r\n    password,\r\n    date_of_join,\r\n    date_of_resign,\r\n    designation,\r\n    department,\r\n    passportno,\r\n    passport_expirydate,\r\n    workpermitno,\r\n    workpermit_expirydate,\r\n    siteallows_fee,\r\n    perdiem_fee,\r\n    reporting_to,\r\n    reporting_email,\r\n  } = single_employee || initial_values;\r\n  const addEmployees = useAddEmployees();\r\n  const updateEmployees = useUpdateEmployees();\r\n  const { employees } = useEmployees();\r\n  const { designations } = useDesignations();\r\n  const { departments } = useDepartments();\r\n  const [empage, setEmpage] = useState(0);\r\n  const [reportemail, setReportEmail] = useState(\"\");\r\n  //const [checktap, setCheckTap] = useState(false);\r\n  //const [alert, setAlert] = useState(false);\r\n  const { handleSubmit, control } = useForm();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  //console.log(\"emplevel\", loginLevel);\r\n\r\n  const calculateAge = (dob) => {\r\n    var today = new Date();\r\n    var birthDate = new Date(dob);\r\n    var age = today.getFullYear() - birthDate.getFullYear();\r\n    var m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      age--;\r\n    }\r\n    return age;\r\n  };\r\n\r\n  const handleReportingTo = (name) => {\r\n    const emp = employees\r\n      .filter((f) => f.name === name)\r\n      .map((r) => {\r\n        return { ...r };\r\n      });\r\n    setReportEmail(emp[0].email);\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    if (isEditing) {\r\n      updateEmployees({ id: editEmployeeID, ...data });\r\n    } else {\r\n      addEmployees({ password: \"abc123*\", role: 1, ...data });\r\n      try {\r\n        App.auth().createUserWithEmailAndPassword(email, \"abc123*\");\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    // setAlert(true);\r\n    // setTimeout(() => {\r\n    //   setAlert(false);\r\n    // }, 3000);\r\n    //loadEmployees();\r\n    // <Alert severity=\"success\">\r\n    //   <AlertTitle>Success</AlertTitle>\r\n    //   This is a success alert — <strong>check it out!</strong>\r\n    // </Alert>;\r\n    //history.push(\"/allemployees\");\r\n  };\r\n\r\n  if (single_employee_loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <Paper className={classes.root}>\r\n          <Grid container className={classes.root} spacing={15}>\r\n            <div>\r\n              <Typography variant=\"h5\" component=\"h3\">\r\n                EMPLOYEE FORM\r\n              </Typography>\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n              >\r\n                Submit <Icon className={classes.rightIcon}>send</Icon>\r\n              </Button>\r\n            </div>\r\n          </Grid>\r\n          <Divider className={classes.divider} />\r\n          <Grid item xs={12}>\r\n            <div>\r\n              <div>\r\n                <Controller\r\n                  name=\"name\"\r\n                  control={control}\r\n                  defaultValue={name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Name\"\r\n                        id=\"margin-normal\"\r\n                        name=\"name\"\r\n                        defaultValue={name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"empno\"\r\n                  control={control}\r\n                  defaultValue={empno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Emp No\"\r\n                        id=\"standard-empno\"\r\n                        defaultValue={empno}\r\n                        name=\"empno\"\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"email\"\r\n                  control={control}\r\n                  defaultValue={email}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Email\"\r\n                        id=\"margin-normal\"\r\n                        name=\"email\"\r\n                        defaultValue={email}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"ic_no\"\r\n                  control={control}\r\n                  defaultValue={ic_no}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"IC No\"\r\n                        id=\"margin-normal\"\r\n                        name=\"ic_no\"\r\n                        defaultValue={ic_no}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"birthdate\"\r\n                  control={control}\r\n                  defaultValue={birthdate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Birth Date\"\r\n                        id=\"margin-birthdate\"\r\n                        name=\"birthdate\"\r\n                        type=\"date\"\r\n                        defaultValue={birthdate}\r\n                        className={classes.textField}\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(parseInt(e.target.value, 10));\r\n                          let age = calculateAge(e.target.value);\r\n                          console.log(\"emp\", birthdate, age);\r\n                          setEmpage(age);\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"age\"\r\n                  control={control}\r\n                  defaultValue={empage}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Age\"\r\n                        type=\"number\"\r\n                        id=\"standard-number-age\"\r\n                        name=\"empage\"\r\n                        value={empage}\r\n                        className={classes.textField}\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(parseInt(e.target.value, 10));\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"passportno\"\r\n                  control={control}\r\n                  defaultValue={passportno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Passport No\"\r\n                        id=\"margin-normal\"\r\n                        name=\"passportno\"\r\n                        defaultValue={passportno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"passport_expirydate\"\r\n                  control={control}\r\n                  defaultValue={passport_expirydate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Passport Expiry Date\"\r\n                        id=\"margin-normal\"\r\n                        name=\"passport_expirydate\"\r\n                        type=\"date\"\r\n                        defaultValue={passport_expirydate}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"nationality\"\r\n                  control={control}\r\n                  defaultValue={nationality}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Nationality\"\r\n                        id=\"standard-nationality\"\r\n                        name=\"nationality\"\r\n                        defaultValue={nationality}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"gender\"\r\n                  control={control}\r\n                  defaultValue={gender}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Gender\"\r\n                        id=\"margin-normal\"\r\n                        name=\"gender\"\r\n                        defaultValue={gender}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        <MenuItem value=\"Male\">Male</MenuItem>\r\n                        <MenuItem value=\"Female\">Female</MenuItem>\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"address\"\r\n                  control={control}\r\n                  defaultValue={address}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Address\"\r\n                        id=\"standard-address\"\r\n                        name=\"address\"\r\n                        defaultValue={address}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <Divider className={classes.divider} />\r\n            <div>\r\n              <div>\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"basic_salary\"\r\n                    control={control}\r\n                    defaultValue={basic_salary}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Basic Salary\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"basic_pay\"\r\n                          defaultValue={basic_salary}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            onChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                        />\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"salary_currency\"\r\n                    control={control}\r\n                    defaultValue={salary_currency}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Currency\"\r\n                          id=\"standard-currency\"\r\n                          name=\"salary_currency\"\r\n                          defaultValue={salary_currency}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            onChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                          select\r\n                        >\r\n                          <MenuItem value=\"BND\">BND</MenuItem>\r\n                          <MenuItem value=\"USD\">USD</MenuItem>\r\n                          <MenuItem value=\"MYR\">MYR</MenuItem>\r\n                        </TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n              </div>\r\n              <div>\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"siteallows_fee\"\r\n                    control={control}\r\n                    defaultValue={siteallows_fee}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Site Allowances Fee\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"siteallows_fee\"\r\n                          defaultValue={siteallows_fee}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            onChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                        />\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"perdiem_fee\"\r\n                    control={control}\r\n                    defaultValue={perdiem_fee}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Per Diem Fee\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"perdiem_fee\"\r\n                          defaultValue={perdiem_fee}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            onChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                        />\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Controller\r\n                  name=\"tap_checkbox\"\r\n                  control={control}\r\n                  defaultValue={tap_checkbox}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Checkbox\r\n                            checked={tap_checkbox}\r\n                            onChange={onChange}\r\n                            name=\"tap_checkbox\"\r\n                          />\r\n                        }\r\n                        label=\"TAP/SCP Contribution\"\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"tap_acno\"\r\n                  control={control}\r\n                  defaultValue={tap_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"TAP Ac No\"\r\n                        id=\"margin-normal\"\r\n                        name=\"tap_acno\"\r\n                        defaultValue={tap_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"scp_acno\"\r\n                  control={control}\r\n                  defaultValue={scp_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"SCP Ac No\"\r\n                        id=\"margin-normal\"\r\n                        name=\"scp_acno\"\r\n                        defaultValue={scp_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"bank_name\"\r\n                  control={control}\r\n                  defaultValue={bank_name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Bank Name\"\r\n                        id=\"margin-normal\"\r\n                        name=\"bank_name\"\r\n                        defaultValue={bank_name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"bank_acno\"\r\n                  control={control}\r\n                  defaultValue={bank_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Bank Ac No\"\r\n                        id=\"margin-normal\"\r\n                        name=\"bank_acno\"\r\n                        defaultValue={bank_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  // rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"workpermitno\"\r\n                  control={control}\r\n                  defaultValue={workpermitno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Work Permit No\"\r\n                        id=\"margin-normal\"\r\n                        name=\"workpermitno\"\r\n                        defaultValue={workpermitno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"workpermit_expirydate\"\r\n                  control={control}\r\n                  defaultValue={workpermit_expirydate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Work Permit Expiry Date\"\r\n                        id=\"margin-normal\"\r\n                        name=\"workpermit_expirydate\"\r\n                        type=\"date\"\r\n                        defaultValue={workpermit_expirydate}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <Divider className={classes.divider} />\r\n              <div>\r\n                <Controller\r\n                  name=\"date_of_join\"\r\n                  control={control}\r\n                  defaultValue={date_of_join}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Joining Date\"\r\n                        id=\"margin-normal\"\r\n                        name=\"date_of_join\"\r\n                        type=\"date\"\r\n                        defaultValue={date_of_join}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"date_of_resign\"\r\n                  control={control}\r\n                  defaultValue={date_of_resign}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Resign Date\"\r\n                        id=\"margin-normal\"\r\n                        name=\"date_of_resign\"\r\n                        type=\"date\"\r\n                        defaultValue={date_of_resign}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"leave_entitled\"\r\n                  control={control}\r\n                  defaultValue={leave_entitled}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Annual Leaves Entitled\"\r\n                        id=\"standard-annualleave\"\r\n                        name=\"leave_entitled\"\r\n                        type=\"numeric\"\r\n                        defaultValue={leave_entitled}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"leave_bal\"\r\n                  control={control}\r\n                  defaultValue={leave_bal}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Leaves Balance\"\r\n                        id=\"standard-leavebal\"\r\n                        name=\"leave_bal\"\r\n                        type=\"numeric\"\r\n                        defaultValue={leave_bal}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"designation\"\r\n                  control={control}\r\n                  defaultValue={designation}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Designation\"\r\n                        id=\"margin-normal\"\r\n                        name=\"designation\"\r\n                        defaultValue={designation}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        {designations &&\r\n                          designations.map((r) => {\r\n                            return <MenuItem value={r.name}>{r.name}</MenuItem>;\r\n                          })}\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"department\"\r\n                  control={control}\r\n                  defaultValue={department}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Department\"\r\n                        id=\"margin-normal\"\r\n                        name=\"department\"\r\n                        defaultValue={department}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        {departments &&\r\n                          departments.map((r) => {\r\n                            return <MenuItem value={r.name}>{r.name}</MenuItem>;\r\n                          })}\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"reporting_to\"\r\n                  control={control}\r\n                  defaultValue={reporting_to}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Reporting To\"\r\n                        id=\"standard-reportingto\"\r\n                        name=\"reporting_to\"\r\n                        defaultValue={reporting_to}\r\n                        className={classes.textField}\r\n                        onChange={(e) => {\r\n                          onChange(e.target.value);\r\n                          handleReportingTo(e.target.value);\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        <MenuItem value=\"\">None</MenuItem>\r\n                        {employees &&\r\n                          employees.map((r) => {\r\n                            return <MenuItem value={r.name}>{r.name}</MenuItem>;\r\n                          })}\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"reporting_email\"\r\n                  control={control}\r\n                  defaultValue={reportemail}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Reporting Email\"\r\n                        id=\"standard-reportingemail\"\r\n                        name=\"reporting_email\"\r\n                        value={reportemail}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <Divider className={classes.divider} />\r\n            </div>\r\n          </Grid>\r\n          <Divider />\r\n        </Paper>\r\n      </form>\r\n\r\n      {/* <div>\r\n        <Grid xs={12}>\r\n          <EmpFamily />\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <EmpEducations />\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <EmpExperiences />\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <EmpTrainings />\r\n        </Grid>\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  divider: {\r\n    padding: 4,\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 350,\r\n  },\r\n}));\r\n\r\nexport default EmployeeFormNew;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowsDetlsTable.js",["1222","1223","1224","1225","1226","1227"],"D:\\react-myprojects\\hrms-demo\\src\\components\\CurrencyTable.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\useUpdateEmployees.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\useEmployees.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payslips\\useUpdatePayslips.js",["1228"],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDailyAllowsStatus.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableView.js",["1229","1230"],"D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableAdmin.js",["1231"],"D:\\react-myprojects\\hrms-demo\\src\\pages\\index.js",[],"D:\\react-myprojects\\hrms-demo\\src\\helpers\\useCustomToast.ts",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\user\\useUser.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmpJobhistory.js",["1232","1233","1234","1235","1236"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport {\r\n  Heading,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { AiFillEdit, AiFillDelete, AiOutlinePlus } from \"react-icons/ai\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useJobhistory } from \"./jobhistory/useJobhistory\";\r\nimport { useUpdateJobhistory } from \"./jobhistory/useUpdateJobhistory\";\r\nimport { useAddJobhistory } from \"./jobhistory/useAddJobhistory\";\r\nimport { useDeleteJobhistory } from \"./jobhistory/useDeleteJobhistory\";\r\nimport JobhistoryForm from \"./JobhistoryForm\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\n\r\nconst initial_jobhistory = {\r\n  empid: \"\",\r\n  name: \"\",\r\n  designation: \"\",\r\n  department: \"\",\r\n  status: \"\",\r\n  remark: \"\",\r\n  basicsalary: 0,\r\n  siteallows: 0,\r\n  isresign: false,\r\n};\r\n\r\nexport default function Emp_Jobhistory({\r\n  empid,\r\n  staffname,\r\n  basicsalary,\r\n  siteallows,\r\n  department,\r\n  designation,\r\n  jobhistorydata,\r\n  setJobhistorydata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const { jobhistory, filter, setFilter, setJobId } = useJobhistory();\r\n  //const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const updateJobhistory = useUpdateJobhistory();\r\n  const addJobhistory = useAddJobhistory();\r\n  const deleteJobhistory = useDeleteJobhistory();\r\n  const [state, setState] = useState({});\r\n  const [statustype, setStatusType] = useState(\"\");\r\n  const { editEmployeeID } = useEmployeesContext();\r\n  const {\r\n    isOpen: isJobOpen,\r\n    onOpen: onJobOpen,\r\n    onClose: onJobClose,\r\n  } = useDisclosure();\r\n  const {\r\n    isOpen: isAlertDeleteOpen,\r\n    onOpen: onAlertDeleteOpen,\r\n    onClose: onAlertDeleteClose,\r\n  } = useDisclosure();\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Designation\",\r\n      field: \"designation\",\r\n    },\r\n    {\r\n      title: \"Department\",\r\n      field: \"department\",\r\n    },\r\n    {\r\n      title: \"Effective Date\",\r\n      field: \"effectdate\",\r\n      type: \"date\",\r\n      dateSetting: { locale: \"en-GB\" },\r\n      editComponent: (props) => (\r\n        <TextField\r\n          defaultValue={props.value || new Date()}\r\n          onChange={(e) => props.onChange(e.target.value)}\r\n          type=\"date\"\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      title: \"Status\",\r\n      field: \"status\",\r\n    },\r\n    {\r\n      title: \"Remark\",\r\n      field: \"remark\",\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    setJobId(editEmployeeID);\r\n  }, []);\r\n\r\n  const add_Jobhistory = (data) => {\r\n    console.log(\"addjob\", data);\r\n    addJobhistory({\r\n      ...data,\r\n    });\r\n  };\r\n\r\n  const delete_Jobhistory = (id) => {\r\n    deleteJobhistory(id);\r\n  };\r\n\r\n  const update_Jobhistory = (data) => {\r\n    const { id, rec_id, tableData, ...fields } = data;\r\n    updateJobhistory({ id, ...fields });\r\n  };\r\n\r\n  const handleAddJobhistory = () => {\r\n    const data = {\r\n      ...initial_jobhistory,\r\n      name: staffname,\r\n      empid: empid,\r\n      basicsalary: basicsalary,\r\n      siteallows: siteallows,\r\n      department: department,\r\n      designation: designation,\r\n    };\r\n    setState(data);\r\n    onJobOpen(true);\r\n  };\r\n\r\n  const handleUpdateJobhistory = (data) => {\r\n    setState(data);\r\n    onJobOpen(true);\r\n  };\r\n\r\n  const handleDeleteJobhistory = (rowData) => {\r\n    setState((prev) => (prev = { ...rowData }));\r\n    onAlertDeleteOpen();\r\n  };\r\n\r\n  const handleOnDeleteConfirm = () => {\r\n    const { id } = state;\r\n    delete_Jobhistory(id);\r\n    // toast({\r\n    //   title: \"Order being deleted!\",\r\n    //   status: \"warning\",\r\n    // });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={jobhistory}\r\n          title=\"Employment History\"\r\n          actions={[\r\n            {\r\n              icon: () => <AiOutlinePlus size=\"30px\" />,\r\n              tooltip: \"Add Record\",\r\n              isFreeAction: true,\r\n              onClick: (event, rowData) => {\r\n                setStatusType((prev) => (prev = \"add\"));\r\n                handleAddJobhistory(rowData);\r\n              },\r\n            },\r\n            (rowData) => ({\r\n              //disabled: rowData.status !== \"Pending\",\r\n              icon: () => <AiFillEdit size=\"30px\" />,\r\n              tooltip: \"Edit Record\",\r\n              onClick: (event, rowData) => {\r\n                setStatusType((prev) => (prev = \"edit\"));\r\n                handleUpdateJobhistory(rowData);\r\n              },\r\n            }),\r\n            (rowData) => ({\r\n              //disabled: rowData.status !== \"Pending\",\r\n              icon: () => <AiFillDelete />,\r\n              tooltip: \"Delete Record\",\r\n              onClick: (event, rowData) => {\r\n                handleDeleteJobhistory(rowData);\r\n              },\r\n            }),\r\n          ]}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n      <Modal\r\n        closeOnOverlayClick={false}\r\n        isOpen={isJobOpen}\r\n        onClose={onJobClose}\r\n        size=\"lg\"\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          {/* <ModalHeader>Product Form</ModalHeader> */}\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            <JobhistoryForm\r\n              state={state}\r\n              setState={setState}\r\n              statustype={statustype}\r\n              add_Item={add_Jobhistory}\r\n              update_Item={update_Jobhistory}\r\n              onJobClose={onJobClose}\r\n            />\r\n          </ModalBody>\r\n\r\n          {/* <ModalFooter>\r\n            <Button colorScheme=\"blue\" mr={3} onClick={onProductClose}>\r\n              Close\r\n            </Button>\r\n          </ModalFooter> */}\r\n        </ModalContent>\r\n      </Modal>\r\n      <AlertDialogBox\r\n        onClose={onAlertDeleteClose}\r\n        onConfirm={handleOnDeleteConfirm}\r\n        isOpen={isAlertDeleteOpen}\r\n        title=\"Delete Employment History\"\r\n      >\r\n        <Heading size=\"md\">\r\n          Are you sure you want to delete this history record ?\r\n        </Heading>\r\n      </AlertDialogBox>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\helpers\\AlertDialogBox.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\Payslip_Deductions.js",["1237"],"import React, {  useEffect } from \"react\";\r\n\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, Icon, TextField, MenuItem } from \"@material-ui/core\";\r\nimport {  useRecoilValue } from \"recoil\";\r\nimport {\r\n  payPeriodState,\r\n  //payPeriodEndMonthState,\r\n  payPeriodEmpIdState,\r\n  //payEarningDataState,\r\n} from \"./data/atomdata\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\n\r\nexport default function Payslip_Deductions({\r\n  //setCalc,\r\n  deductionsdata,\r\n  oldDeductionsdata,\r\n  setDeductionsdata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\r\n  const payPeriod = useRecoilValue(payPeriodState);\r\n  //const payEarningData = useRecoilValue(payEarningDataState);\r\n  const {\r\n    //payslipdeductions,\r\n    //payslip_deduction_amount,\r\n    //setPayslipDeductionAmount,\r\n    //loadPayslipDeductions,\r\n    addPayslipDeduction,\r\n    payslipdeductions_loading,\r\n    updatePayslipDeduction,\r\n    deletePayslipDeduction,\r\n    //updatePayslip,\r\n    //editPayslipID,\r\n    single_payslip,\r\n    payslip_period,\r\n    getSingleBatchPayslipDeductions,\r\n  } = usePayslipsContext();\r\n  //const { name, amount } = payslipdeductions;\r\n  const { deductions } = useTablesContext();\r\n\r\n  // const calc_Deduction = (data) => {\r\n  //   const sum = data.reduce((a, v) => (a = a + v.amount), 0);\r\n  //   setPayslipDeductionAmount(sum);\r\n  // };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Description\",\r\n      field: \"description\",\r\n      editComponent: (props) => (\r\n        <TextField\r\n          //defaultValue={props.value || null}\r\n          onChange={(e) => props.onChange(e.target.value)}\r\n          style={{ width: 200 }}\r\n          value={props.value}\r\n          select\r\n        >\r\n          {deductions.map((r) => {\r\n            return <MenuItem value={r.name}>{r.name}</MenuItem>;\r\n          })}\r\n        </TextField>\r\n      ),\r\n    },\r\n    { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  }, []);\r\n\r\n  // const update_Payslip = () => {\r\n  //   const { rec_id, id, total_deductions, ...paydata } = single_payslip;\r\n  //   updatePayslip({\r\n  //     id: editPayslipID,\r\n  //     total_deductions: payslip_deduction_amount,\r\n  //     ...paydata,\r\n  //   });\r\n  //};\r\n\r\n  // const update_PayslipDeduction = async (data) => {\r\n  //   const { id, rec_id, empid, ...fields } = data;\r\n  //   updatePayslipDeduction({ id: data.id, empid: empid, ...fields });\r\n  //   update_Payslip();\r\n  //   getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  // const add_PayslipDeduction = (data) => {\r\n  //   const { description, amount } = data;\r\n  //   addPayslipDeduction({\r\n  //     description: description,\r\n  //     amount: amount,\r\n  //     name: single_payslip.name,\r\n  //     empid: single_payslip.empid,\r\n  //     period: single_payslip.period,\r\n  //   });\r\n  //   getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  //};\r\n\r\n  // const delete_PayslipDeduction = (data) => {\r\n  //   const { id } = data;\r\n  //   deletePayslipDeduction(id);\r\n  //   getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  const Save_DeductionsData = () => {\r\n    // delete unwanted data\r\n    console.log(\"update\", deductionsdata, oldDeductionsdata);\r\n    oldDeductionsdata.forEach((row) => {\r\n      const { id, rec_id } = row;\r\n      const res = deductionsdata.find((r) => r.rec_id === rec_id);\r\n      console.log(\"find\", id, res);\r\n      if (!res) {\r\n        deletePayslipDeduction(id);\r\n      }\r\n    });\r\n    //add or update new data\r\n\r\n    deductionsdata.forEach((data) => {\r\n      const { id, description, amount } = data;\r\n      if (id) {\r\n        const { id, rec_id, tableData, ...fields } = data;\r\n        updatePayslipDeduction({ id, ...fields });\r\n      } else {\r\n        addPayslipDeduction({\r\n          description: description,\r\n          amount: amount,\r\n          name: single_payslip.name,\r\n          empid: payPeriodEmpId,\r\n          period: payPeriod,\r\n        });\r\n      }\r\n    });\r\n    handleDialogClose();\r\n  };\r\n\r\n  if (payslipdeductions_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading... Expenses.</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={deductionsdata}\r\n          title=\"Deductions\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  setDeductionsdata([...deductionsdata, newData]);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataUpdate = [...deductionsdata];\r\n                  const index = oldData.tableData.id;\r\n                  dataUpdate[index] = newData;\r\n                  setDeductionsdata([...dataUpdate]);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataDelete = [...deductionsdata];\r\n                  const index = oldData.tableData.id;\r\n                  dataDelete.splice(index, 1);\r\n                  setDeductionsdata([...dataDelete]);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Save_DeductionsData}\r\n                  >\r\n                    Update <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDailyAllows.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useUpdateLeaves.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useUpdateExpenses.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\useDailyAllowsDetlsBatch.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\designations\\useDesignations.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\currency\\useAddCurrency.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\react-query\\constants.js",[],"D:\\react-myprojects\\hrms-demo\\src\\helpers\\CustomDialog.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\ErrorPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\JobhistoryForm.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\useDeleteJobhistory.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\useUpdateJobhistory.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\useAddJobhistory.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\useJobhistory.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\user-storage\\index.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\jobstatus\\useJobstatus.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\departments\\useDepartments.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\jobstatus\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\ClientsPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\PrivateRoute.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\DailyAllowancesPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\DailyAllowancesStaffPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\TablesPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\DesignationPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\DepartmentsPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\AllowancesPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\BatchPayslipsPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\PayslipPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\PayrollPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\PayslipStaffPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\UserAccessPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\TrainingsStaffPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\ExpensesStaffPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\HocPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\ExpensesPage.js",["1238"],"import React, { useEffect } from \"react\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\n//import { headExpenseTableCells } from \"../utils/constants\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\nimport ExpenseTable from \"../components/ExpenseTable\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst ExpensesPage = () => {\r\n  const classes = useStyles();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const { loadExpenses, expenses_loading } = useExpensesContext();\r\n\r\n  useEffect(() => {\r\n    loadExpenses();\r\n  }, []);\r\n\r\n  if (expenses_loading) {\r\n    return (\r\n      <div>\r\n        <Paper className={fixedHeightPaper}>\r\n          \r\n        <h2>Loading...Expenses</h2>\r\n         </Paper>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div>\r\n      <CssBaseline />\r\n      <div className={classes.appBarSpacer}>\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid container spacing={3}>\r\n            {/* <Grid item xs={12} md={8} lg={9}> */}\r\n            <Grid item xs={12}>\r\n              <Paper className={fixedHeightPaper}>\r\n                <div>\r\n                  <ExpenseTable title=\"Expenses Claims\" />\r\n                </div>\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(9),\r\n    paddingBottom: theme.spacing(4),\r\n    border: \"1px solid\",\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    // display: \"flex\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n    border: \"1px solid\",\r\n    width: \"100%\",\r\n  },\r\n  fixedHeight: {\r\n    // height: 240,\r\n    height: \"85vh\",\r\n  },\r\n}));\r\nexport default ExpensesPage;\r\n","D:\\react-myprojects\\hrms-demo\\src\\pages\\LeaveStaffPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\LeavePage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\AllEmployeesPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\DashboardPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\HomePage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesPeriods.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\TablesUpdate.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\Example.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\TableForm.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTable.js",["1239","1240","1241"],"D:\\react-myprojects\\hrms-demo\\src\\components\\currency\\useDeleteCurrency.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTableStaff.js",["1242","1243"],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmpTrainings.js",["1244","1245","1246"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { TextField, MenuItem } from \"@material-ui/core\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\n//import { useTrainingsContext } from \"../context/trainings_context\";\r\nimport { useTrainings } from \"./trainings/useTrainings\";\r\nimport { useInstitutes } from \"./institutes/useInstitutes\";\r\nimport { useUpdateTrainings } from \"./trainings/useUpdateTrainings\";\r\nimport { useAddTrainings } from \"./trainings/useAddTrainings\";\r\nimport { useDeleteTrainings } from \"./trainings/useDeleteTrainings\";\r\n\r\n\r\nexport default function Emp_Training({\r\n  trainingdata,\r\n  setTrainingdata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const { trainings,  setTrainingId } = useTrainings();\r\n  const { institutes } = useInstitutes();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const updateTrainings = useUpdateTrainings();\r\n  const addTrainings = useAddTrainings();\r\n  const deleteTrainings = useDeleteTrainings();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n  // const {\r\n  //   //getSingleBatchTraining,\r\n  //   //singlebatch_training,\r\n  //   //addTraining,\r\n  //   //deleteTraining,\r\n  //   //updateTraining,\r\n  //   //singlebatch_training_loading,\r\n  // } = useTrainingsContext();\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Institute\",\r\n    field: \"institute\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        //defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        style={{ width: 100 }}\r\n        value={props.value}\r\n        select\r\n      >\r\n        <MenuItem value=\"\">None</MenuItem>\r\n        {institutes &&\r\n          institutes.map((r) => {\r\n            return <MenuItem value={r.name}>{r.name}</MenuItem>;\r\n          })}\r\n      </TextField>\r\n    ),\r\n  },\r\n  {\r\n    title: \"Course\",\r\n    field: \"course\",\r\n  },\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editComponent: (props) => (\r\n      <TextField\r\n        defaultValue={props.value || new Date()}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        type=\"date\"\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editComponent: (props) => (\r\n      <TextField\r\n        defaultValue={props.value || new Date()}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        type=\"date\"\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    title: \"Expiry Date\",\r\n    field: \"expiry_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editComponent: (props) => (\r\n      <TextField\r\n        defaultValue={props.value || new Date()}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        type=\"date\"\r\n      />\r\n    ),\r\n  },\r\n];\r\n\r\n  useEffect(() => {\r\n    setTrainingId(editEmployeeID);\r\n  }, []);\r\n\r\n  const add_Training = (data) => {\r\n    addTrainings({\r\n      ...data,\r\n      name: loginLevel.loginUser,\r\n      empid: editEmployeeID,\r\n    });\r\n  };\r\n\r\n  const delete_Training = (data) => {\r\n    const { id } = data;\r\n    deleteTrainings(id);\r\n  };\r\n\r\n  const update_Training = (data) => {\r\n    const { id, rec_id, tableData, ...fields } = data;\r\n    updateTrainings({ id, ...fields });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={trainings}\r\n          title=\"Training\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  add_Training(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  update_Training(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  delete_Training(oldData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableStaff.js",["1247","1248","1249"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { TextField, MenuItem } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport CheckCircleOutlineOutlinedIcon from \"@material-ui/icons/CheckCircleOutlineOutlined\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\n//import { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\nimport { useExpenses } from \"./expenses/useExpenses\";\r\n//import { useAddExpenses } from \"./expenses/useAddExpenses\";\r\nimport { useDeleteExpenses } from \"./expenses/useDeleteExpenses\";\r\n//import { useUpdateExpenses } from \"./expenses/useUpdateExpenses\";\r\n\r\nconst initial_form = {\r\n  name: \"\",\r\n  date: \"\",\r\n  purchased_from: \"\",\r\n  description: \"\",\r\n  status: \"Pending\",\r\n  amount: 0,\r\n};\r\n\r\nconst columns = [\r\n  { title: \"Name\", field: \"name\", editable: \"never\" },\r\n  {\r\n    title: \"Date\",\r\n    field: \"date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n\r\n  {\r\n    title: \"Description\",\r\n    field: \"description\",\r\n    editable: \"never\",\r\n  },\r\n  { title: \"Amount\", field: \"amount\", type: \"currency\", editable: \"never\" },\r\n  {\r\n    title: \"Status\",\r\n    field: \"status\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        //defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        style={{ width: 100 }}\r\n        value={props.value}\r\n        select\r\n      >\r\n        <MenuItem value=\"Pending\">Pending</MenuItem>\r\n        <MenuItem value=\"Approve\">Approve</MenuItem>\r\n        <MenuItem value=\"Reject\">Reject</MenuItem>\r\n        <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n      </TextField>\r\n    ),\r\n  },\r\n];\r\n\r\nexport default function ExpenseTable() {\r\n  const classes = useStyles();\r\n  //const toast = useCustomToast();\r\n  //const [isLoad, setIsLoad] = useState(false);\r\n  const { expenses, setFilter, setExpenseId } = useExpenses();\r\n  //const updateExpenses = useUpdateExpenses();\r\n  //const addExpenses = useAddExpenses();\r\n  const deleteExpenses = useDeleteExpenses();\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  //const [expensesdata, setExpensesdata] = useState([]);\r\n  //const [alertSuccess, setAlertSuccess] = useState(false);\r\n  const [formdata, setFormdata] = useState(initial_form);\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  //const { editEmployeeID } = useEmployeesContext();\r\n  const {\r\n    //expenses,\r\n    editExpenseID,\r\n    //updateExpense,\r\n    //addExpense,\r\n    //deleteExpense,\r\n    setEditExpenseID,\r\n    setIsExpenseEditingOn,\r\n    setIsExpenseEditingOff,\r\n  } = useExpensesContext();\r\n\r\n  useEffect(() => {\r\n    setFilter(loginLevel.loginUserId);\r\n  }, []);\r\n\r\n  const add_Expense = async (data) => {\r\n    // const { id } = data;\r\n    setFormdata(initial_form);\r\n    setFormdata(initial_form);\r\n    setIsExpenseEditingOff();\r\n    handleDialogOpen();\r\n    // history.push(\"/singleexpense\");\r\n  };\r\n\r\n  const update_Expense = async (data) => {\r\n    const { id } = data;\r\n    setFormdata({ ...data });\r\n    setFormdata({ ...data });\r\n    setEditExpenseID(id);\r\n    setIsExpenseEditingOn();\r\n    handleDialogOpen();\r\n\r\n    // history.push(\"/singleexpense\");\r\n  };\r\n\r\n  const delete_Expense = (data) => {\r\n    const { id } = data;\r\n    setEditExpenseID(id);\r\n    handleAlertOpen();\r\n\r\n    // deleteExpense(id);\r\n    // loadExpenses();\r\n  };\r\n\r\n  const handleDialogOpen = () => {\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n  };\r\n\r\n  const handleAlertOpen = () => {\r\n    setIsAlertOpen(true);\r\n  };\r\n\r\n  const handleAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleOnDeleteConfirm = () => {\r\n    const id = editExpenseID;\r\n    deleteExpenses(id);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={expenses}\r\n          title=\"Expenses Claims Application\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <CheckCircleOutlineOutlinedIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          // editable={{\r\n          //   onRowUpdate: (newData, oldData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         const dataUpdate = [...expensesdata];\r\n          //         const index = oldData.tableData.id;\r\n          //         dataUpdate[index] = newData;\r\n          //         setExpensesdata([...dataUpdate]);\r\n          //         //approve_Expense(newData);\r\n\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          // }}\r\n          actions={[\r\n            (rowData) => ({\r\n              disabled: rowData.status !== \"Pending\",\r\n              icon: \"edit\",\r\n              tooltip: \"Edit Record\",\r\n              onClick: (event, rowData) => {\r\n                update_Expense(rowData);\r\n              },\r\n            }),\r\n            (rowData) => ({\r\n              disabled: rowData.status !== \"Pending\",\r\n              icon: \"delete\",\r\n              tooltip: \"Delete Record\",\r\n              onClick: (event, rowData) => {\r\n                delete_Expense(rowData);\r\n              },\r\n            }),\r\n            {\r\n              icon: \"add\",\r\n              tooltip: \"Add Record\",\r\n              isFreeAction: true,\r\n              onClick: (event, rowData) => {\r\n                add_Expense(rowData);\r\n              },\r\n            },\r\n          ]}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <CustomDialog\r\n          isOpen={isDialogOpen}\r\n          handleClose={handleDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <ExpenseForm\r\n            formdata={formdata}\r\n            setFormdata={setFormdata}\r\n            handleDialogClose={handleDialogClose}\r\n          />\r\n        </CustomDialog>\r\n\r\n        <AlertDialogBox\r\n          onClose={handleAlertClose}\r\n          onConfirm={handleOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete Expenses\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\HocTable.js",["1250","1251"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { format } from \"date-fns\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport CheckCircleOutlineOutlinedIcon from \"@material-ui/icons/CheckCircleOutlineOutlined\";\r\n//import { useCustomToast } from \"../helpers/useCustomToast\";\r\n//import { useExpensesContext } from \"../context/expenses_context\";\r\nimport HocForm from \"./HocForm\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\nimport { useHoc } from \"./hoc/useHoc\";\r\n//import { useAddHoc } from \"./hoc/useAddHoc\";\r\nimport { useDeleteHoc } from \"./hoc/useDeleteHoc\";\r\n//import { useUpdateHoc } from \"./hoc/useUpdateHoc\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Findings\",\r\n    field: \"findings\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      minWidth: 200,\r\n      maxWidth: 200,\r\n    },\r\n  },\r\n  {\r\n    title: \"Risks\",\r\n    field: \"risks\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      minWidth: 150,\r\n      maxWidth: 150,\r\n    },\r\n  },\r\n  {\r\n    title: \"Type/Category\",\r\n    field: \"category\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"What\",\r\n    field: \"what\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"What Details\",\r\n    field: \"what_details\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      minWidth: 150,\r\n      maxWidth: 150,\r\n    },\r\n  },\r\n  {\r\n    title: \"Why\",\r\n    field: \"why\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Why Details\",\r\n    field: \"why_details\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Discussion\",\r\n    field: \"discussion\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Action\",\r\n    field: \"action\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      minWidth: 200,\r\n      maxWidth: 200,\r\n    },\r\n  },\r\n  {\r\n    title: \"Follow-up required?\",\r\n    field: \"isfollowup\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Work Related?\",\r\n    field: \"isworkrelated\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Raised By\",\r\n    field: \"raisedby\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Raised On\",\r\n    field: \"raisedon\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Company\",\r\n    field: \"company\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Location\",\r\n    field: \"location\",\r\n    editable: \"never\",\r\n  },\r\n  // {\r\n  //   title: \"Department\",\r\n  //   field: \"department\",\r\n  //   editable: \"never\",\r\n  // },\r\n];\r\n\r\nconst initial_form = {\r\n  findings: \"\",\r\n  category: \"\",\r\n  what: \"\",\r\n  what_details: \"\",\r\n  why: \"\",\r\n  why_details: \"\",\r\n  discussion: \"No\",\r\n  action: \"\",\r\n  isfollowup: \"No\",\r\n  isworkrelated: \"No\",\r\n  raisedby: \"\",\r\n  email: \"\",\r\n  raisedon: null,\r\n  company: \"APPSMITH SUTERA\",\r\n  location: \" \",\r\n  department: \"\",\r\n};\r\n\r\nexport default function HocTable() {\r\n  const classes = useStyles();\r\n  //const toast = useCustomToast();\r\n  //const [isLoad, setIsLoad] = useState(false);\r\n  const { hoc, setHocId } = useHoc();\r\n  //const updateHoc = useUpdateHoc();\r\n  //const addHoc = useAddHoc();\r\n  const deleteHoc = useDeleteHoc();\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  //const [hocdata, setHocdata] = useState([]);\r\n  //const [alertSuccess, setAlertSuccess] = useState(false);\r\n  const [formdata, setFormdata] = useState(initial_form);\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const [isEditId, setIsEditId] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    //console.log(\"loginid\", loginLevel.loginUserId)\r\n    setHocId(loginLevel.loginUserId);\r\n  }, []);\r\n\r\n  const add_Hoc = async (data) => {\r\n    //const { id } = data;\r\n    let today = format(new Date(), \"yyyy-MM-dd\");\r\n    //console.log(\"today\", today);\r\n    setIsEditId((prev) => (prev = \"\"));\r\n    setFormdata(\r\n      (prev) =>\r\n        (prev = {\r\n          ...data,\r\n          raisedby: loginLevel.loginUser,\r\n          email: loginLevel.loginEmail,\r\n          company: \"APPSMITHS SUTERA\",\r\n          raisedon: today,\r\n        })\r\n    );\r\n    //setFormdata(initial_form);\r\n    //setIsHocEditingOff();\r\n    handleDialogOpen();\r\n    // history.push(\"/singleexpense\");\r\n  };\r\n\r\n  const update_Hoc = async (data) => {\r\n    console.log(\"hoc\", data);\r\n    const { id } = data;\r\n    setIsEditId((prev) => (prev = id));\r\n    setFormdata((prev) => (prev = { ...data }));\r\n    //setFormdata({ ...data });\r\n    //setHocId(prev => prev = id)\r\n    //setEditHocID(id);\r\n    //setIsExpenseEditingOn();\r\n    handleDialogOpen();\r\n\r\n    // history.push(\"/singleexpense\");\r\n  };\r\n\r\n  const delete_Hoc = (data) => {\r\n    const { id } = data;\r\n    setIsEditId((prev) => (prev = id));\r\n    handleAlertOpen();\r\n\r\n    // deleteExpense(id);\r\n    // loadExpenses();\r\n  };\r\n\r\n  const handleDialogOpen = () => {\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n  };\r\n\r\n  const handleAlertOpen = () => {\r\n    setIsAlertOpen(true);\r\n  };\r\n\r\n  const handleAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleOnDeleteConfirm = () => {\r\n    //const id = isEditId;\r\n    deleteHoc(isEditId);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={hoc}\r\n          title=\"HOC Tables\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <CheckCircleOutlineOutlinedIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          // editable={{\r\n          //   onRowUpdate: (newData, oldData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         const dataUpdate = [...expensesdata];\r\n          //         const index = oldData.tableData.id;\r\n          //         dataUpdate[index] = newData;\r\n          //         setExpensesdata([...dataUpdate]);\r\n          //         //approve_Expense(newData);\r\n\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          // }}\r\n          actions={[\r\n            (rowData) => ({\r\n              icon: \"edit\",\r\n              tooltip: \"Edit Record\",\r\n              onClick: (event, rowData) => {\r\n                update_Hoc(rowData);\r\n              },\r\n            }),\r\n            (rowData) => ({\r\n              icon: \"delete\",\r\n              tooltip: \"Delete Record\",\r\n              onClick: (event, rowData) => {\r\n                delete_Hoc(rowData);\r\n              },\r\n            }),\r\n            {\r\n              icon: \"add\",\r\n              tooltip: \"Add Record\",\r\n              isFreeAction: true,\r\n              onClick: (event, rowData) => {\r\n                add_Hoc(rowData);\r\n              },\r\n            },\r\n          ]}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <CustomDialog\r\n          isOpen={isDialogOpen}\r\n          handleClose={handleDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n          isEditId={isEditId}\r\n        >\r\n          <HocForm\r\n            formdata={formdata}\r\n            setFormdata={setFormdata}\r\n            handleDialogClose={handleDialogClose}\r\n          />\r\n        </CustomDialog>\r\n\r\n        <AlertDialogBox\r\n          onClose={handleAlertClose}\r\n          onConfirm={handleOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete HOC\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTable.js",["1252"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { TextField, MenuItem } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport CheckCircleOutlineOutlinedIcon from \"@material-ui/icons/CheckCircleOutlineOutlined\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\n\r\nconst columns = [\r\n  { title: \"Name\", field: \"name\", editable: \"never\" },\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Description\",\r\n    field: \"description\",\r\n    editable: \"never\",\r\n  },\r\n  { title: \"Amount\", field: \"amount\", type: \"currency\", editable: \"never\" },\r\n  {\r\n    title: \"Status\",\r\n    field: \"status\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        //defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        style={{ width: 100 }}\r\n        value={props.value}\r\n        select\r\n      >\r\n        <MenuItem value=\"Pending\">Pending</MenuItem>\r\n        <MenuItem value=\"Approve\">Approve</MenuItem>\r\n        <MenuItem value=\"Reject\">Reject</MenuItem>\r\n        <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n      </TextField>\r\n    ),\r\n  },\r\n];\r\n\r\nexport default function ExpenseTable() {\r\n  const classes = useStyles();\r\n  //const [isLoad, setIsLoad] = useState(false);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const [expensesdata, setExpensesdata] = useState([]);\r\n  //const { loadEmployees } = useEmployeesContext();\r\n  const {\r\n    expenses,\r\n    editExpenseID,\r\n    //updateExpense,\r\n    //expenses_loading,\r\n    deleteExpense,\r\n    loadExpenses,\r\n    getSingleExpense,\r\n    setEditExpenseID,\r\n    setIsExpenseEditingOn,\r\n    setIsExpenseEditingOff,\r\n    resetSingleExpense,\r\n  } = useExpensesContext();\r\n\r\n  useEffect(() => {\r\n    setExpensesdata(expenses);\r\n    //console.log(expensesdata)\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   loadEmployees();\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   if (expenses) {\r\n  //     setExpensesdata(expenses);\r\n  //     console.log(\"expenses\", expenses, expensesdata)\r\n  //   } else {\r\n  //     setIsLoad(!isLoad);\r\n  //   }\r\n  // }, [isLoad]);\r\n\r\n  const add_Expense = async (data) => {\r\n    // const { id } = data;\r\n    resetSingleExpense();\r\n    setEditExpenseID(\"\");\r\n    setIsExpenseEditingOff();\r\n    handleDialogOpen();\r\n    // history.push(\"/singleexpense\");\r\n  };\r\n\r\n  // const approve_Expense = async (data) => {\r\n  //   console.log(\"approve\", data);\r\n  //   const { id, rec_id, ...fields } = data;\r\n  //   updateExpense({ id, ...fields });\r\n  //   // loadExpenses();\r\n  // };\r\n\r\n  const update_Expense = async (data) => {\r\n    const { id } = data;\r\n    setEditExpenseID(id);\r\n    setIsExpenseEditingOn();\r\n    getSingleExpense(id);\r\n    handleDialogOpen();\r\n    // history.push(\"/singleexpense\");\r\n  };\r\n\r\n  const delete_Expense = (data) => {\r\n    const { id } = data;\r\n    setEditExpenseID(id);\r\n    handleAlertOpen();\r\n\r\n    // deleteExpense(id);\r\n    // loadExpenses();\r\n  };\r\n\r\n  const handleDialogOpen = () => {\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n    loadExpenses();\r\n  };\r\n\r\n  const handleAlertOpen = () => {\r\n    setIsAlertOpen(true);\r\n  };\r\n\r\n  const handleAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleOnDeleteConfirm = () => {\r\n    const id = editExpenseID;\r\n    deleteExpense(id);\r\n    loadExpenses();\r\n  };\r\n\r\n  // if (expenses_loading) {\r\n  //   return (\r\n  //     <div>\r\n  //       <h2>Loading...Expenses</h2>\r\n  //     </div>\r\n  //   );\r\n  // }\r\nif (!expensesdata) {\r\n  return (\r\n    <div>\r\n      <h2>Loading...Expenses</h2>\r\n    </div>\r\n  );\r\n}\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={expensesdata}\r\n          title=\"Expenses Claims Application\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <CheckCircleOutlineOutlinedIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          editable={{\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataUpdate = [...expensesdata];\r\n                  const index = oldData.tableData.id;\r\n                  dataUpdate[index] = newData;\r\n                  setExpensesdata([...dataUpdate]);\r\n                  //approve_Expense(newData);\r\n\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          actions={[\r\n            {\r\n              icon: \"edit\",\r\n              tooltip: \"Edit Record\",\r\n              onClick: (event, rowData) => {\r\n                update_Expense(rowData);\r\n              },\r\n            },\r\n            {\r\n              icon: \"delete\",\r\n              tooltip: \"Delete Record\",\r\n              onClick: (event, rowData) => {\r\n                delete_Expense(rowData);\r\n              },\r\n            },\r\n            {\r\n              icon: \"add\",\r\n              tooltip: \"Add Record\",\r\n              isFreeAction: true,\r\n              onClick: (event, rowData) => {\r\n                add_Expense(rowData);\r\n              },\r\n            },\r\n          ]}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n        />\r\n        <CustomDialog\r\n          isOpen={isDialogOpen}\r\n          handleClose={handleDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscree={false}\r\n          isFullwidth={false}\r\n        >\r\n          <ExpenseForm handleDialogClose={handleDialogClose} />\r\n        </CustomDialog>\r\n\r\n        <AlertDialogBox\r\n          onClose={handleAlertClose}\r\n          onConfirm={handleOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete Expenses\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableStaff.js",["1253","1254","1255","1256","1257"],"D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableAdmin.js",["1258","1259"],"D:\\react-myprojects\\hrms-demo\\src\\components\\AllEmployeesTable.js",["1260"],"D:\\react-myprojects\\hrms-demo\\src\\components\\HomeDirector.js",["1261","1262","1263","1264","1265"],"D:\\react-myprojects\\hrms-demo\\src\\components\\HomeStaff.js",["1266"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\n//import { useHistory } from \"react-router-dom\";\r\nimport { Box, Stack } from \"@chakra-ui/react\";\r\nimport {  Container } from \"@material-ui/core\";\r\n//import CardLayout from \"../helpers/CardLayout\";\r\nimport CardLayout2 from \"../helpers/CardLayout2\";\r\n//import CardLayout3 from \"../helpers/CardLayout3\";\r\nimport Copyright from \"./Copyright\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\n\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\n//import { useLeavesContext } from \"../context/leaves_context\";\r\n//import { useExpensesContext } from \"../context/expenses_context\";\r\n//import { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\nimport LeaveTableViewStaff from \"./LeaveTableViewStaff\";\r\nimport TrainingsTableViewStaff from \"./TrainingsTableViewStaff\";\r\nimport LeaveTableAdmin from \"./LeaveTableManager\";\r\nimport ExpenseTableViewStaff from \"./ExpenseTableViewStaff\";\r\nimport ExpenseTableAdmin from \"./ExpenseTableAdmin\";\r\n//import PayslipTableViewStaff from \"./PayslipTableViewStaff\";\r\nimport PayslipTableAdmin from \"./PayslipTableAdmin\";\r\n//import DailyAllowancesTableViewStaff from \"./DailyAllowancesTableViewStaff\";\r\nimport DailyAllowancesTableAdmin from \"./DailyAllowancesTableAdmin\";\r\n//import OnLeavesViewStaff from \"./OnLeavesViewStaff\";\r\nimport WPExpiryViewStaff from \"./WPExpiryViewStaff\";\r\n//import { useEmployees } from \"./employees/useEmployees\";\r\n//import { useSingleEmployee } from \"./employees/useSingleEmployee\";\r\n\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst FILTERSTRING = \"Pending\";\r\n\r\nconst HomeStaff = () => {\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const [loginLevel] = useRecoilState(loginLevelState);\r\n  //const { employees, setFilter, setEmployeeId } = useEmployees();\r\n  //const { singleemployee, setSingleEmployeeId } = useSingleEmployee();\r\n  const [leavesdata, setLeavesdata] = useState([]);\r\n  const [isLeaveDialogOpen, setIsLeaveDialogOpen] = useState(false);\r\n  const [expensesdata, setExpensesdata] = useState([]);\r\n  const [isExpenseDialogOpen, setIsExpenseDialogOpen] = useState(false);\r\n  const [payslipsdata, setPayslipsdata] = useState([]);\r\n  const [isPayslipDialogOpen, setIsPayslipDialogOpen] = useState(false);\r\n  const [dailyallowancesdata, setDailyAllowancesdata] = useState([]);\r\n  const [isDailyAllowancesDialogOpen, setIsDailyAllowancesDialogOpen] =\r\n    useState(false);\r\n\r\n  //const { leaves } = useLeavesContext();\r\n  //const { expenses } = useExpensesContext();\r\n  //const { payslips } = usePayslipsContext();\r\n  const {  loadPendingDailyAllowances } =\r\n    useDailyAllowancesContext();\r\n  const {  setEditEmployeeID, setIsEditingOn } =\r\n    useEmployeesContext();\r\n\r\n  // const handleLeaveDialogOpen = () => {\r\n  //   setLeavesdata([]);\r\n  //   setLeavesdata([...leaves]);\r\n  //   setIsLeaveDialogOpen(true);\r\n  // };\r\n\r\n  const handleLeaveDialogClose = () => {\r\n    setIsLeaveDialogOpen(false);\r\n    //loadPendingLeaves(FILTERSTRING);\r\n  };\r\n\r\n  // const handleExpenseDialogOpen = () => {\r\n  //   setExpensesdata([]);\r\n  //   setExpensesdata([...expenses]);\r\n  //   setIsExpenseDialogOpen(true);\r\n  // };\r\n\r\n  const handleExpenseDialogClose = () => {\r\n    setIsExpenseDialogOpen(false);\r\n    //loadPendingExpenses(FILTERSTRING);\r\n  };\r\n\r\n  // const handlePayslipDialogOpen = () => {\r\n  //   setPayslipsdata([]);\r\n  //   setPayslipsdata([...payslips]);\r\n  //   setIsPayslipDialogOpen(true);\r\n  // };\r\n\r\n  const handlePayslipDialogClose = () => {\r\n    setIsPayslipDialogOpen(false);\r\n    //loadPendingPayslips(FILTERSTRING);\r\n  };\r\n\r\n  // const handleDailyAllowancesDialogOpen = () => {\r\n  //   setDailyAllowancesdata([]);\r\n  //   setDailyAllowancesdata([...dailyallowances]);\r\n  //   setIsDailyAllowancesDialogOpen(true);\r\n  // };\r\n\r\n  const handleDailyAllowancesDialogClose = () => {\r\n    setIsDailyAllowancesDialogOpen(false);\r\n    loadPendingDailyAllowances(FILTERSTRING);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setEditEmployeeID(loginLevel.loginUserId);\r\n    setIsEditingOn();\r\n  },[]);\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.appBarSpacer} />\r\n      <div style={{ paddingLeft: 50 }}>\r\n        {/* <h2>Welcome Staff {loginLevel.loginUser}!</h2>\r\n        <h3>Dashboard</h3> */}\r\n      </div>\r\n      <Container maxWidth=\"xl\" className={classes.container}>\r\n        <Stack direction=\"column\">\r\n          <Box>\r\n            <CardLayout2>\r\n              <LeaveTableViewStaff />\r\n            </CardLayout2>\r\n          </Box>\r\n          <Box>\r\n            <CardLayout2>\r\n              <ExpenseTableViewStaff />\r\n            </CardLayout2>\r\n          </Box>\r\n          <Box>\r\n            <CardLayout2>\r\n              <TrainingsTableViewStaff />\r\n            </CardLayout2>\r\n          </Box>\r\n\r\n          <Box>\r\n            <CardLayout2>\r\n              <WPExpiryViewStaff />\r\n            </CardLayout2>\r\n          </Box>\r\n       \r\n        </Stack>\r\n        <Box pt={4}>\r\n          <Copyright />\r\n        </Box>\r\n        <CustomDialog\r\n          isOpen={isLeaveDialogOpen}\r\n          handleClose={handleLeaveDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <LeaveTableAdmin\r\n            setLeavesdata={setLeavesdata}\r\n            leavesdata={leavesdata}\r\n            handleDialogClose={handleLeaveDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isExpenseDialogOpen}\r\n          handleClose={handleExpenseDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <ExpenseTableAdmin\r\n            setExpensesdata={setExpensesdata}\r\n            expensesdata={expensesdata}\r\n            handleDialogClose={handleExpenseDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isPayslipDialogOpen}\r\n          handleClose={handlePayslipDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={true}\r\n          isFullwidth={false}\r\n        >\r\n          <PayslipTableAdmin\r\n            setPayslipsdata={setPayslipsdata}\r\n            payslipsdata={payslipsdata}\r\n            handleDialogClose={handlePayslipDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isDailyAllowancesDialogOpen}\r\n          handleClose={handleDailyAllowancesDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={true}\r\n          isFullwidth={false}\r\n        >\r\n          <DailyAllowancesTableAdmin\r\n            setDailyAllowancesdata={setDailyAllowancesdata}\r\n            dailyallowancesdata={dailyallowancesdata}\r\n            handleDialogClose={handleDailyAllowancesDialogClose}\r\n          />\r\n        </CustomDialog>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default HomeStaff;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeManager.js",["1267","1268","1269","1270","1271","1272","1273"],"D:\\react-myprojects\\hrms-demo\\src\\components\\HomeOpsSpvr.js",["1274"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\n//import { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Divider,\r\n  Heading,\r\n  HStack,\r\n  Stack,\r\n  Select,\r\n  SimpleGrid,\r\n  Tabs,\r\n  TabList,\r\n  TabPanels,\r\n  Tab,\r\n  TabPanel,\r\n} from \"@chakra-ui/react\";\r\nimport {  Container } from \"@material-ui/core\";\r\n//import CardLayout from \"../helpers/CardLayout\";\r\n//import CardLayout2 from \"../helpers/CardLayout2\";\r\n//import CardLayout3 from \"../helpers/CardLayout3\";\r\nimport Copyright from \"./Copyright\";\r\n//import { useEmployees } from \"./employees/useEmployees\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { useRecoilState } from \"recoil\";\r\n//import { loginLevelState } from \"./data/atomdata\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\n//import LeaveTableViewAdmin from \"./LeaveTableViewAdmin\";\r\nimport LeaveTableAdmin from \"./LeaveTableManager\";\r\n//import ExpenseTableView from \"./ExpenseTableView\";\r\nimport ExpenseTableAdmin from \"./ExpenseTableAdmin\";\r\n//import PayslipTableView from \"./PayslipTableView\";\r\nimport PayslipTableAdmin from \"./PayslipTableAdmin\";\r\n//import DailyAllowancesTableView from \"./DailyAllowancesTableView\";\r\nimport DailyAllowancesTableAdmin from \"./DailyAllowancesTableAdmin\";\r\nimport DailyAllowanceTableViewSummary from \"./DailyAllowancesTableViewSummary\";\r\n//import TrainingsTableViewAdmin from \"./TrainingsTableViewAdmin\";\r\n//import WPExpiryViewAdmin from \"./WPExpiryViewAdmin\";\r\n//import EmployeeTableLeaveView from \"./EmployeeTableLeaveView\";\r\nimport LeavesTableViewSummary from \"./LeavesTableViewSummary\";\r\nimport LeavesTableApproval from \"./LeaveTableApproval\";\r\nimport DailyAllowancesTableApproval from \"./DailyAllowancesTableVeryfy\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst FILTERSTRING = \"Pending\";\r\n\r\nconst EmployeeView = () => {\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  //const { employees } = useEmployees();\r\n  //const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const [leavesdata, setLeavesdata] = useState([]);\r\n  const [isLeaveDialogOpen, setIsLeaveDialogOpen] = useState(false);\r\n  const [expensesdata, setExpensesdata] = useState([]);\r\n  const [isExpenseDialogOpen, setIsExpenseDialogOpen] = useState(false);\r\n  const [payslipsdata, setPayslipsdata] = useState([]);\r\n  const [isPayslipDialogOpen, setIsPayslipDialogOpen] = useState(false);\r\n  const [dailyallowancesdata, setDailyAllowancesdata] = useState([]);\r\n  const [isDailyAllowancesDialogOpen, setIsDailyAllowancesDialogOpen] =\r\n    useState(false);\r\n\r\n  const {  loadPendingLeaves } = useLeavesContext();\r\n  const {  loadPendingExpenses } = useExpensesContext();\r\n  const {  loadPendingPayslips } = usePayslipsContext();\r\n  const {  loadPendingDailyAllowances } =\r\n    useDailyAllowancesContext();\r\n  const [selectleaveyear, setSelectLeaveYear] = useState(\"\");\r\n  const [selectsiteallowsyear, setSelectSiteAllowsYear] = useState(\"\");\r\n  const currentyear = new Date().getFullYear();\r\n  const currentmonth = new Date().getMonth();\r\n\r\n  // const handleLeaveDialogOpen = () => {\r\n  //   setLeavesdata([]);\r\n  //   setLeavesdata([...leaves]);\r\n  //   setIsLeaveDialogOpen(true);\r\n  // };\r\n\r\n  const handleLeaveDialogClose = () => {\r\n    setIsLeaveDialogOpen(false);\r\n    loadPendingLeaves(FILTERSTRING);\r\n  };\r\n\r\n  // const handleExpenseDialogOpen = () => {\r\n  //   setExpensesdata([]);\r\n  //   setExpensesdata([...expenses]);\r\n  //   setIsExpenseDialogOpen(true);\r\n  // };\r\n\r\n  const handleExpenseDialogClose = () => {\r\n    setIsExpenseDialogOpen(false);\r\n    loadPendingExpenses(FILTERSTRING);\r\n  };\r\n\r\n  // const handlePayslipDialogOpen = () => {\r\n  //   setPayslipsdata([]);\r\n  //   setPayslipsdata([...payslips]);\r\n  //   setIsPayslipDialogOpen(true);\r\n  // };\r\n\r\n  const handlePayslipDialogClose = () => {\r\n    setIsPayslipDialogOpen(false);\r\n    loadPendingPayslips(FILTERSTRING);\r\n  };\r\n\r\n  // const handleDailyAllowancesDialogOpen = () => {\r\n  //   setDailyAllowancesdata([]);\r\n  //   setDailyAllowancesdata([...dailyallowances]);\r\n  //   setIsDailyAllowancesDialogOpen(true);\r\n  //};\r\n\r\n  const handleDailyAllowancesDialogClose = () => {\r\n    setIsDailyAllowancesDialogOpen(false);\r\n    loadPendingDailyAllowances(FILTERSTRING);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSelectLeaveYear(currentyear);\r\n    setSelectSiteAllowsYear(currentyear);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.appBarSpacer} />\r\n      <div style={{ paddingLeft: 50 }}>\r\n        {/* <h2>Welcome {loginLevel.loginUser}!</h2>\r\n        <h3>Dashboard</h3> */}\r\n      </div>\r\n      <Container maxWidth=\"full\" className={classes.container}>\r\n        <Stack direction=\"column\">\r\n          {/* <Box>\r\n            <CardLayout2>\r\n              <LeaveTableViewAdmin />\r\n            </CardLayout2>\r\n          </Box> */}\r\n          {/* <Box>\r\n            <CardLayout2>\r\n              <WPExpiryViewAdmin />\r\n            </CardLayout2>\r\n          </Box> */}\r\n          {/* <Box>\r\n            <CardLayout2>\r\n              <TrainingsTableViewAdmin />\r\n            </CardLayout2>\r\n          </Box> */}\r\n          <Box\r\n            maxW=\"x3\"\r\n            padding=\"4\"\r\n            width=\"100%\"\r\n            height=\"750\"\r\n            borderColor=\"blue.500\"\r\n            borderWidth=\"1px\"\r\n            borderRadius=\"lg\"\r\n            overflow=\"scroll\"\r\n          >\r\n            <Tabs>\r\n              <TabList>\r\n                {/* <Tab>Employees</Tab> */}\r\n                <Tab>Leaves</Tab>\r\n                <Tab>Site Allowances</Tab>\r\n                <Tab>Leaves Approval</Tab>\r\n                <Tab>Site Allows Verify</Tab>\r\n              </TabList>\r\n              <TabPanels>\r\n                {/* <TabPanel>\r\n                  <Box\r\n                    maxW=\"full\"\r\n                    padding=\"4\"\r\n                    width=\"100%\"\r\n                    height=\"700\"\r\n                    borderColor=\"blue.500\"\r\n                    borderWidth=\"1px\"\r\n                    borderRadius=\"lg\"\r\n                    overflow=\"scroll\"\r\n                  >\r\n                    <SimpleGrid>\r\n                      <Box>\r\n                        <Heading as=\"h2\" size=\"lg\">\r\n                          Employees\r\n                        </Heading>\r\n                      </Box>\r\n                      <Divider />\r\n                      <Box>\r\n                        <Tabs isLazy>\r\n                          <TabPanels>\r\n                            <TabPanel>\r\n                              <EmployeeTableLeaveView />\r\n                            </TabPanel>\r\n                          </TabPanels>\r\n                        </Tabs>\r\n                      </Box>\r\n                      <Divider />\r\n                    </SimpleGrid>\r\n                  </Box>\r\n                </TabPanel> */}\r\n                <TabPanel>\r\n                  <Box\r\n                    maxW=\"100%\"\r\n                    padding=\"4\"\r\n                    width=\"full\"\r\n                    height=\"700\"\r\n                    borderColor=\"blue.500\"\r\n                    borderWidth=\"1px\"\r\n                    borderRadius=\"lg\"\r\n                    overflow=\"scroll\"\r\n                  >\r\n                    <SimpleGrid w=\"168vh\">\r\n                      <HStack>\r\n                        <Box>\r\n                          <Heading as=\"h2\" size=\"lg\">\r\n                            Leaves\r\n                          </Heading>\r\n                        </Box>\r\n                        <Box alignSelf=\"flex-end\">\r\n                          <HStack>\r\n                            <Select\r\n                              value={selectleaveyear}\r\n                              fontSize={20}\r\n                              onChange={(e) =>\r\n                                setSelectLeaveYear(e.target.value)\r\n                              }\r\n                            >\r\n                              <option value=\"2021\">2021</option>\r\n                              <option value=\"2022\">2022</option>\r\n                            </Select>\r\n                            {/* <Box size=\"xl\" py={2}>\r\n                              <Text fontSize=\"lg\">\r\n                                <ExportLeave2Excel\r\n                                  filename=\"leave\"\r\n                                  dataset={dataset}\r\n                                  title=\"Leave\"\r\n                                />\r\n                              </Text>\r\n                            </Box> */}\r\n                          </HStack>\r\n                        </Box>\r\n                      </HStack>\r\n                      <Divider />\r\n                      <Box>\r\n                        <Tabs defaultIndex={currentmonth} isLazy>\r\n                          <TabList>\r\n                            {/* <Tab>Chart</Tab>\r\n                          <Tab>Summary</Tab> */}\r\n                            <Tab>January</Tab>\r\n                            <Tab>February</Tab>\r\n                            <Tab>March</Tab>\r\n                            <Tab>April</Tab>\r\n                            <Tab>May</Tab>\r\n                            <Tab>June</Tab>\r\n                            <Tab>July</Tab>\r\n                            <Tab>August</Tab>\r\n                            <Tab>September</Tab>\r\n                            <Tab>October</Tab>\r\n                            <Tab>November</Tab>\r\n                            <Tab>December</Tab>\r\n                          </TabList>\r\n                          <TabPanels>\r\n                            {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Expenses for the Month\"\r\n                    barchartdata={expchartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={1}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={2}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={3}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={4}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={5}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={6}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={7}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={8}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={9}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={10}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={11}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={12}\r\n                              />\r\n                            </TabPanel>\r\n                          </TabPanels>\r\n                        </Tabs>\r\n                      </Box>\r\n                      <Divider />\r\n                    </SimpleGrid>\r\n                  </Box>\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <Box\r\n                    maxW=\"x3\"\r\n                    padding=\"4\"\r\n                    width=\"100%\"\r\n                    height=\"700\"\r\n                    borderColor=\"blue.500\"\r\n                    borderWidth=\"1px\"\r\n                    borderRadius=\"lg\"\r\n                    overflow=\"scroll\"\r\n                  >\r\n                    <SimpleGrid w=\"168vh\">\r\n                      <HStack>\r\n                        <Box>\r\n                          <Heading as=\"h2\" size=\"lg\">\r\n                            Site Allowances\r\n                          </Heading>\r\n                        </Box>\r\n                        <Box alignSelf=\"flex-end\">\r\n                          <HStack>\r\n                            <Select\r\n                              value={selectsiteallowsyear}\r\n                              fontSize={20}\r\n                              onChange={(e) =>\r\n                                setSelectSiteAllowsYear(e.target.value)\r\n                              }\r\n                            >\r\n                              <option value=\"2021\">2021</option>\r\n                              <option value=\"2022\">2022</option>\r\n                            </Select>\r\n                            {/* <Box size=\"xl\" py={2}>\r\n                              <Text fontSize=\"lg\">\r\n                                <ExportLeave2Excel\r\n                                  filename=\"leave\"\r\n                                  dataset={dataset}\r\n                                  title=\"Leave\"\r\n                                />\r\n                              </Text>\r\n                            </Box> */}\r\n                          </HStack>\r\n                        </Box>\r\n                      </HStack>\r\n                      <Divider />\r\n                      <Box>\r\n                        <Tabs defaultIndex={currentmonth} isLazy>\r\n                          <TabList>\r\n                            {/* <Tab>Chart</Tab>\r\n                <Tab>Summary</Tab> */}\r\n                            <Tab>January</Tab>\r\n                            <Tab>February</Tab>\r\n                            <Tab>March</Tab>\r\n                            <Tab>April</Tab>\r\n                            <Tab>May</Tab>\r\n                            <Tab>June</Tab>\r\n                            <Tab>July</Tab>\r\n                            <Tab>August</Tab>\r\n                            <Tab>September</Tab>\r\n                            <Tab>October</Tab>\r\n                            <Tab>November</Tab>\r\n                            <Tab>December</Tab>\r\n                          </TabList>\r\n                          <TabPanels>\r\n                            {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Site Allowances for the Month\"\r\n                    barchartdata={paychartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                            <TabPanel>\r\n                              <DailyAllowanceTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"01\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowanceTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"02\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowanceTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"03\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowanceTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"04\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowanceTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"05\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowanceTableViewSummary\r\n                                year={currentyear}\r\n                                month=\"06\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowanceTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"07\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowanceTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"08\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowanceTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"09\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowanceTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"10\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowanceTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"11\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowanceTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"12\"\r\n                              />\r\n                            </TabPanel>\r\n                          </TabPanels>\r\n                        </Tabs>\r\n                      </Box>\r\n                      <Divider />\r\n                    </SimpleGrid>\r\n                  </Box>\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <Box\r\n                    maxW=\"full\"\r\n                    padding=\"4\"\r\n                    width=\"100%\"\r\n                    height=\"700\"\r\n                    borderColor=\"blue.500\"\r\n                    borderWidth=\"1px\"\r\n                    borderRadius=\"lg\"\r\n                    overflow=\"scroll\"\r\n                  >\r\n                    <LeavesTableApproval />\r\n                  </Box>\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <Box\r\n                    maxW=\"full\"\r\n                    padding=\"4\"\r\n                    width=\"100%\"\r\n                    height=\"700\"\r\n                    borderColor=\"blue.500\"\r\n                    borderWidth=\"1px\"\r\n                    borderRadius=\"lg\"\r\n                    overflow=\"scroll\"\r\n                  >\r\n                    <DailyAllowancesTableApproval />\r\n                  </Box>\r\n                </TabPanel>\r\n              </TabPanels>\r\n            </Tabs>\r\n          </Box>\r\n        </Stack>\r\n\r\n        <Box pt={4}>\r\n          <Copyright />\r\n        </Box>\r\n        <CustomDialog\r\n          isOpen={isLeaveDialogOpen}\r\n          handleClose={handleLeaveDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <LeaveTableAdmin\r\n            setLeavesdata={setLeavesdata}\r\n            leavesdata={leavesdata}\r\n            handleDialogClose={handleLeaveDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isExpenseDialogOpen}\r\n          handleClose={handleExpenseDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <ExpenseTableAdmin\r\n            setExpensesdata={setExpensesdata}\r\n            expensesdata={expensesdata}\r\n            handleDialogClose={handleExpenseDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isPayslipDialogOpen}\r\n          handleClose={handlePayslipDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={true}\r\n          isFullwidth={false}\r\n        >\r\n          <PayslipTableAdmin\r\n            setPayslipsdata={setPayslipsdata}\r\n            payslipsdata={payslipsdata}\r\n            handleDialogClose={handlePayslipDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isDailyAllowancesDialogOpen}\r\n          handleClose={handleDailyAllowancesDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={true}\r\n          isFullwidth={false}\r\n        >\r\n          <DailyAllowancesTableAdmin\r\n            setDailyAllowancesdata={setDailyAllowancesdata}\r\n            dailyallowancesdata={dailyallowancesdata}\r\n            handleDialogClose={handleDailyAllowancesDialogClose}\r\n          />\r\n        </CustomDialog>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default EmployeeView;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeAdminManager.js",["1275","1276","1277","1278","1279"],"D:\\react-myprojects\\hrms-demo\\src\\components\\HomeAdmin.js",["1280"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\n//import { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Divider,\r\n  Heading,\r\n  HStack,\r\n  Stack,\r\n  Select,\r\n  SimpleGrid,\r\n  Tabs,\r\n  TabList,\r\n  TabPanels,\r\n  Tab,\r\n  TabPanel,\r\n} from \"@chakra-ui/react\";\r\nimport { Container } from \"@material-ui/core\";\r\n//import { useEmployees } from \"./employees/useEmployees\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { useRecoilState } from \"recoil\";\r\n//import { loginLevelState } from \"./data/atomdata\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\n\r\n//import CardLayout from \"../helpers/CardLayout\";\r\nimport CardLayout2 from \"../helpers/CardLayout2\";\r\n//import CardLayout3 from \"../helpers/CardLayout3\";\r\nimport LeaveTableViewAdmin from \"./LeaveTableViewAdmin\";\r\nimport LeaveTableAdmin from \"./LeaveTableManager\";\r\n//import ExpenseTableView from \"./ExpenseTableView\";\r\nimport ExpenseTableAdmin from \"./ExpenseTableAdmin\";\r\n//import PayslipTableView from \"./PayslipTableView\";\r\nimport PayslipTableAdmin from \"./PayslipTableAdmin\";\r\nimport HocTableViewSummary from \"./HocTableViewSummary\";\r\n//import DailyAllowancesTableView from \"./DailyAllowancesTableView\";\r\nimport DailyAllowancesTableAdmin from \"./DailyAllowancesTableAdmin\";\r\nimport TrainingsTableViewAdmin from \"./TrainingsTableViewAdmin\";\r\nimport WPExpiryViewAdmin from \"./WPExpiryViewAdmin\";\r\nimport EmployeeTableLeaveView from \"./EmployeeTableLeaveView\";\r\nimport LeavesTableViewSummary from \"./LeavesTableViewSummary\";\r\nimport Copyright from \"../components/Copyright\";\r\n\r\n//const Copyright  = React.lazy(()=> import(\"../components/Copyright\"));\r\n//const CardLayout = React.lazy(() => import(\"../helpers/CardLayout\"));\r\n//const CardLayout2 = React.lazy(() => import(\"../helpers/CardLayout2\"));\r\n//const CardLayout3 = React.lazy(() => import(\"../helpers/CardLayout3\"));\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst FILTERSTRING = \"Pending\";\r\n\r\nconst EmployeeView = () => {\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  //const { employees } = useEmployees();\r\n  //const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const [leavesdata, setLeavesdata] = useState([]);\r\n  const [isLeaveDialogOpen, setIsLeaveDialogOpen] = useState(false);\r\n  const [expensesdata, setExpensesdata] = useState([]);\r\n  const [isExpenseDialogOpen, setIsExpenseDialogOpen] = useState(false);\r\n  const [payslipsdata, setPayslipsdata] = useState([]);\r\n  const [isPayslipDialogOpen, setIsPayslipDialogOpen] = useState(false);\r\n  const [dailyallowancesdata, setDailyAllowancesdata] = useState([]);\r\n  const [isDailyAllowancesDialogOpen, setIsDailyAllowancesDialogOpen] =\r\n    useState(false);\r\n\r\n  const {  loadPendingLeaves } = useLeavesContext();\r\n  const {  loadPendingExpenses } = useExpensesContext();\r\n  const {  loadPendingPayslips } = usePayslipsContext();\r\n  const {  loadPendingDailyAllowances } =\r\n    useDailyAllowancesContext();\r\n  const [selectleaveyear, setSelectLeaveYear] = useState(\"\");\r\n  const [selecthocyear, setSelectHocYear] = useState(\"\");\r\n  const currentyear = new Date().getFullYear();\r\n  const currentmonth = new Date().getMonth();\r\n\r\n  // const handleLeaveDialogOpen = () => {\r\n  //   setLeavesdata([]);\r\n  //   setLeavesdata([...leaves]);\r\n  //   setIsLeaveDialogOpen(true);\r\n  // };\r\n\r\n  const handleLeaveDialogClose = () => {\r\n    setIsLeaveDialogOpen(false);\r\n    loadPendingLeaves(FILTERSTRING);\r\n  };\r\n\r\n  // const handleExpenseDialogOpen = () => {\r\n  //   setExpensesdata([]);\r\n  //   setExpensesdata([...expenses]);\r\n  //   setIsExpenseDialogOpen(true);\r\n  // };\r\n\r\n  const handleExpenseDialogClose = () => {\r\n    setIsExpenseDialogOpen(false);\r\n    loadPendingExpenses(FILTERSTRING);\r\n  };\r\n\r\n  // const handlePayslipDialogOpen = () => {\r\n  //   setPayslipsdata([]);\r\n  //   setPayslipsdata([...payslips]);\r\n  //   setIsPayslipDialogOpen(true);\r\n  //};\r\n\r\n  const handlePayslipDialogClose = () => {\r\n    setIsPayslipDialogOpen(false);\r\n    loadPendingPayslips(FILTERSTRING);\r\n  };\r\n\r\n  // const handleDailyAllowancesDialogOpen = () => {\r\n  //   setDailyAllowancesdata([]);\r\n  //   setDailyAllowancesdata([...dailyallowances]);\r\n  //   setIsDailyAllowancesDialogOpen(true);\r\n  // };\r\n\r\n  const handleDailyAllowancesDialogClose = () => {\r\n    setIsDailyAllowancesDialogOpen(false);\r\n    loadPendingDailyAllowances(FILTERSTRING);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSelectLeaveYear(currentyear);\r\n    setSelectHocYear(currentyear);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.appBarSpacer} />\r\n      <div style={{ paddingLeft: 50 }}>\r\n        {/* <h2>Welcome {loginLevel.loginUser}!</h2>\r\n        <h3>Dashboard</h3> */}\r\n      </div>\r\n      <Container maxWidth=\"full\" className={classes.container}>\r\n        <Stack direction=\"column\">\r\n          <Box>\r\n            <CardLayout2>\r\n              <React.Suspense fallback={<div>Loading...</div>}>\r\n                <LeaveTableViewAdmin />\r\n              </React.Suspense>\r\n            </CardLayout2>\r\n          </Box>\r\n          <Box>\r\n            <CardLayout2>\r\n              <WPExpiryViewAdmin />\r\n            </CardLayout2>\r\n          </Box>\r\n          <Box>\r\n            <CardLayout2>\r\n              <TrainingsTableViewAdmin />\r\n            </CardLayout2>\r\n          </Box>\r\n          <Box\r\n            maxW=\"x3\"\r\n            padding=\"4\"\r\n            width=\"100%\"\r\n            height=\"750\"\r\n            borderColor=\"blue.500\"\r\n            borderWidth=\"1px\"\r\n            borderRadius=\"lg\"\r\n            overflow=\"scroll\"\r\n          >\r\n            <Tabs>\r\n              <TabList>\r\n                <Tab>Employees</Tab>\r\n                <Tab>Leaves</Tab>\r\n                <Tab>HOC History</Tab>\r\n              </TabList>\r\n              <TabPanels>\r\n                <TabPanel>\r\n                  <Box\r\n                    maxW=\"full\"\r\n                    padding=\"4\"\r\n                    width=\"100%\"\r\n                    height=\"700\"\r\n                    borderColor=\"blue.500\"\r\n                    borderWidth=\"1px\"\r\n                    borderRadius=\"lg\"\r\n                    overflow=\"scroll\"\r\n                  >\r\n                    <SimpleGrid>\r\n                      <Box>\r\n                        <Heading as=\"h2\" size=\"lg\">\r\n                          Employees\r\n                        </Heading>\r\n                      </Box>\r\n                      <Divider />\r\n                      <Box>\r\n                        <Tabs isLazy>\r\n                          {/* <TabList>\r\n                            <Tab>Details</Tab>\r\n                          </TabList> */}\r\n                          <TabPanels>\r\n                            <TabPanel>\r\n                              <EmployeeTableLeaveView />\r\n                            </TabPanel>\r\n                          </TabPanels>\r\n                        </Tabs>\r\n                      </Box>\r\n                      <Divider />\r\n                    </SimpleGrid>\r\n                  </Box>\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <Box\r\n                    maxW=\"100%\"\r\n                    padding=\"4\"\r\n                    width=\"full\"\r\n                    height=\"700\"\r\n                    borderColor=\"blue.500\"\r\n                    borderWidth=\"1px\"\r\n                    borderRadius=\"lg\"\r\n                    overflow=\"scroll\"\r\n                  >\r\n                    <SimpleGrid w=\"168vh\">\r\n                      <HStack>\r\n                        <Box>\r\n                          <Heading as=\"h2\" size=\"lg\">\r\n                            Leaves\r\n                          </Heading>\r\n                        </Box>\r\n                        <Box alignSelf=\"flex-end\">\r\n                          <HStack>\r\n                            <Select\r\n                              value={selectleaveyear}\r\n                              fontSize={20}\r\n                              onChange={(e) =>\r\n                                setSelectLeaveYear(e.target.value)\r\n                              }\r\n                            >\r\n                              <option value=\"2021\">2021</option>\r\n                              <option value=\"2022\">2022</option>\r\n                            </Select>\r\n                            {/* <Box size=\"xl\" py={2}>\r\n                              <Text fontSize=\"lg\">\r\n                                <ExportLeave2Excel\r\n                                  filename=\"leave\"\r\n                                  dataset={dataset}\r\n                                  title=\"Leave\"\r\n                                />\r\n                              </Text>\r\n                            </Box> */}\r\n                          </HStack>\r\n                        </Box>\r\n                      </HStack>\r\n                      <Divider />\r\n                      <Box>\r\n                        <Tabs defaultIndex={currentmonth} isLazy>\r\n                          <TabList>\r\n                            {/* <Tab>Chart</Tab>\r\n                          <Tab>Summary</Tab> */}\r\n                            <Tab>January</Tab>\r\n                            <Tab>February</Tab>\r\n                            <Tab>March</Tab>\r\n                            <Tab>April</Tab>\r\n                            <Tab>May</Tab>\r\n                            <Tab>June</Tab>\r\n                            <Tab>July</Tab>\r\n                            <Tab>August</Tab>\r\n                            <Tab>September</Tab>\r\n                            <Tab>October</Tab>\r\n                            <Tab>November</Tab>\r\n                            <Tab>December</Tab>\r\n                          </TabList>\r\n                          <TabPanels>\r\n                            {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Expenses for the Month\"\r\n                    barchartdata={expchartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={1}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={2}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={3}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={4}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={5}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={6}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={7}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={8}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={9}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={10}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={11}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={12}\r\n                              />\r\n                            </TabPanel>\r\n                          </TabPanels>\r\n                        </Tabs>\r\n                      </Box>\r\n                      <Divider />\r\n                    </SimpleGrid>\r\n                  </Box>\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <Box\r\n                    maxW=\"100%\"\r\n                    padding=\"4\"\r\n                    width=\"full\"\r\n                    height=\"700\"\r\n                    borderColor=\"blue.500\"\r\n                    borderWidth=\"1px\"\r\n                    borderRadius=\"lg\"\r\n                    overflow=\"scroll\"\r\n                  >\r\n                    <SimpleGrid w=\"168vh\">\r\n                      <HStack>\r\n                        <Box>\r\n                          <Heading as=\"h2\" size=\"lg\">\r\n                            HOC History\r\n                          </Heading>\r\n                        </Box>\r\n                        <Box alignSelf=\"flex-end\">\r\n                          <HStack>\r\n                            <Select\r\n                              value={selecthocyear}\r\n                              fontSize={20}\r\n                              onChange={(e) => setSelectHocYear(e.target.value)}\r\n                            >\r\n                              <option value=\"2021\">2021</option>\r\n                              <option value=\"2022\">2022</option>\r\n                            </Select>\r\n                            {/* <Box size=\"xl\" py={2}>\r\n                              <Text fontSize=\"lg\">\r\n                                <ExportLeave2Excel\r\n                                  filename=\"leave\"\r\n                                  dataset={dataset}\r\n                                  title=\"Leave\"\r\n                                />\r\n                              </Text>\r\n                            </Box> */}\r\n                          </HStack>\r\n                        </Box>\r\n                      </HStack>\r\n                      <Divider />\r\n                      <Box>\r\n                        <Tabs defaultIndex={currentmonth} isLazy>\r\n                          <TabList>\r\n                            {/* <Tab>Chart</Tab>\r\n                          <Tab>Summary</Tab> */}\r\n                            <Tab>January</Tab>\r\n                            <Tab>February</Tab>\r\n                            <Tab>March</Tab>\r\n                            <Tab>April</Tab>\r\n                            <Tab>May</Tab>\r\n                            <Tab>June</Tab>\r\n                            <Tab>July</Tab>\r\n                            <Tab>August</Tab>\r\n                            <Tab>September</Tab>\r\n                            <Tab>October</Tab>\r\n                            <Tab>November</Tab>\r\n                            <Tab>December</Tab>\r\n                          </TabList>\r\n                          <TabPanels>\r\n                            {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Expenses for the Month\"\r\n                    barchartdata={expchartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={1}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={2}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={3}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={4}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={5}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={6}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={7}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={8}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={9}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={10}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={11}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={12}\r\n                              />\r\n                            </TabPanel>\r\n                          </TabPanels>\r\n                        </Tabs>\r\n                      </Box>\r\n                      <Divider />\r\n                    </SimpleGrid>\r\n                  </Box>\r\n                </TabPanel>\r\n              </TabPanels>\r\n            </Tabs>\r\n          </Box>\r\n        </Stack>\r\n\r\n        <Box pt={4}>\r\n          <Copyright />\r\n        </Box>\r\n        <CustomDialog\r\n          isOpen={isLeaveDialogOpen}\r\n          handleClose={handleLeaveDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <LeaveTableAdmin\r\n            setLeavesdata={setLeavesdata}\r\n            leavesdata={leavesdata}\r\n            handleDialogClose={handleLeaveDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isExpenseDialogOpen}\r\n          handleClose={handleExpenseDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <ExpenseTableAdmin\r\n            setExpensesdata={setExpensesdata}\r\n            expensesdata={expensesdata}\r\n            handleDialogClose={handleExpenseDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isPayslipDialogOpen}\r\n          handleClose={handlePayslipDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={true}\r\n          isFullwidth={false}\r\n        >\r\n          <PayslipTableAdmin\r\n            setPayslipsdata={setPayslipsdata}\r\n            payslipsdata={payslipsdata}\r\n            handleDialogClose={handlePayslipDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isDailyAllowancesDialogOpen}\r\n          handleClose={handleDailyAllowancesDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={true}\r\n          isFullwidth={false}\r\n        >\r\n          <DailyAllowancesTableAdmin\r\n            setDailyAllowancesdata={setDailyAllowancesdata}\r\n            dailyallowancesdata={dailyallowancesdata}\r\n            handleDialogClose={handleDailyAllowancesDialogClose}\r\n          />\r\n        </CustomDialog>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default EmployeeView;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\currency\\useUpdateCurrency.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\currency\\useCurrency.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\useAddEmployees.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\Payslip_Earnings.js",["1281"],"import React, {  useEffect } from \"react\";\r\n\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, Icon, TextField, MenuItem } from \"@material-ui/core\";\r\n\r\n//import { useHistory} from \"react-router-dom\";\r\nimport {  useRecoilValue } from \"recoil\";\r\nimport {\r\n  payPeriodState,\r\n  //payPeriodEndMonthState,\r\n  payPeriodEmpIdState,\r\n  //payEarningDataState,\r\n} from \"./data/atomdata\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\n\r\nexport default function Payslip_Earnings({\r\n  //setCalc,\r\n  earningsdata,\r\n  oldEarningsdata,\r\n  setEarningsdata,\r\n  handleDialogClose,\r\n}) {\r\n  //let history = useHistory();\r\n   const classes = useStyles();\r\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\r\n  const payPeriod = useRecoilValue(payPeriodState);\r\n  //const payEarningData = useRecoilValue(payEarningDataState);\r\n  const {\r\n    //payslipearnings,\r\n    //payslip_earning_amount,\r\n    //setPayslipEarningAmount,\r\n    addPayslipEarning,\r\n    payslipearnings_loading,\r\n    updatePayslipEarning,\r\n    deletePayslipEarning,\r\n    //updatePayslip,\r\n    //editPayslipID,\r\n    single_payslip,\r\n    payslip_period,\r\n    getSingleBatchPayslipEarnings,\r\n  } = usePayslipsContext();\r\n\r\n  //const { name, amount } = payslipearnings;\r\n  const { allowances } = useTablesContext();\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Description\",\r\n      field: \"description\",\r\n      editComponent: (props) => (\r\n        <TextField\r\n          //defaultValue={props.value || null}\r\n          onChange={(e) => props.onChange(e.target.value)}\r\n          style={{ width: 200 }}\r\n          value={props.value}\r\n          select\r\n        >\r\n          {allowances.map((r) => {\r\n            return <MenuItem value={r.name}>{r.name}</MenuItem>;\r\n          })}\r\n        </TextField>\r\n      ),\r\n    },\r\n    { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    getSingleBatchPayslipEarnings(single_payslip.empid, payslip_period);\r\n  }, []);\r\n\r\n  // const calc_Earning = (data) => {\r\n  //   const sum = data.reduce((a, v) => (a = a + v.amount), 0);\r\n  //   console.log(\"Earning\", data);\r\n  //   setPayslipEarningAmount(sum);\r\n  // };\r\n\r\n  // const update_Payslip = () => {\r\n  //   const { rec_id, id, total_earnings, ...paydata } = single_payslip;\r\n  //   updatePayslip({\r\n  //     id: editPayslipID,\r\n  //     total_earnings: payslip_earning_amount,\r\n  //     ...paydata,\r\n  //   });\r\n  //   setCalc(true);\r\n  // };\r\n\r\n  // const update_PayslipEarning = async (data) => {\r\n  //   const { id, rec_id, empid, ...fields } = data;\r\n  //   console.log(\"update\", data);\r\n  //   updatePayslipEarning({ id: data.id, empid: empid, ...fields });\r\n\r\n  //   update_Payslip();\r\n  //   getSingleBatchPayslipEarnings(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  // const add_PayslipEarning = (data) => {\r\n  //   console.log(\"add\", data);\r\n  //   const { description, amount } = data;\r\n  //   addPayslipEarning({\r\n  //     description: description,\r\n  //     amount: amount,\r\n  //     name: single_payslip.name,\r\n  //     empid: single_payslip.empid,\r\n  //     period: single_payslip.period,\r\n  //   });\r\n\r\n  //   getSingleBatchPayslipEarnings(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  // const delete_PayslipEarning = (data) => {\r\n  //   const { id } = data;\r\n  //   deletePayslipEarning(id);\r\n  //   getSingleBatchPayslipEarnings(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  const Save_EarningsData = () => {\r\n    // delete unwanted data\r\n    console.log(\"update\", earningsdata, oldEarningsdata);\r\n    oldEarningsdata.forEach((row) => {\r\n      const { id, rec_id } = row;\r\n      const res = earningsdata.find((r) => r.rec_id === rec_id);\r\n      console.log(\"find\", id, res);\r\n      if (!res) {\r\n        deletePayslipEarning(id);\r\n      }\r\n    });\r\n    //add or update new data\r\n\r\n    earningsdata.forEach((data) => {\r\n      const { id, description, amount } = data;\r\n      if (id) {\r\n        const { id, rec_id, tableData, ...fields } = data;\r\n        updatePayslipEarning({ id, ...fields });\r\n      } else {\r\n        addPayslipEarning({\r\n          description: description,\r\n          amount: amount,\r\n          name: single_payslip.name,\r\n          empid: payPeriodEmpId,\r\n          period: payPeriod,\r\n        });\r\n      }\r\n    });\r\n\r\n    handleDialogClose();\r\n  };\r\n\r\n  if (payslipearnings_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading... Incomes.</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={earningsdata}\r\n          title=\"Income\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  setEarningsdata([...earningsdata, newData]);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataUpdate = [...earningsdata];\r\n                  const index = oldData.tableData.id;\r\n                  dataUpdate[index] = newData;\r\n                  setEarningsdata([...dataUpdate]);\r\n\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataDelete = [...earningsdata];\r\n                  const index = oldData.tableData.id;\r\n                  dataDelete.splice(index, 1);\r\n                  setEarningsdata([...dataDelete]);\r\n\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Save_EarningsData}\r\n                  >\r\n                    Update <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\Payslip_ViewDeductions.js",["1282"],"import React, {  useEffect } from \"react\";\r\n\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {  useRecoilValue } from \"recoil\";\r\nimport {\r\n  payPeriodState,\r\n  //payPeriodEndMonthState,\r\n  payPeriodEmpIdState,\r\n} from \"./data/atomdata\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\n//import { useTablesContext } from \"../context/tables_context\";\r\n\r\nexport default function Payslip_ViewDeductions() {\r\n  const classes = useStyles();\r\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\r\n  const payPeriod = useRecoilValue(payPeriodState);\r\n  \r\n  const {\r\n    payslipdeductions,\r\n    //payslip_deduction_amount,\r\n    //setPayslipDeductionAmount,\r\n    //loadPayslipDeductions,\r\n    //addPayslipDeduction,\r\n    payslipdeductions_loading,\r\n    //updatePayslipDeduction,\r\n    //deletePayslipDeduction,\r\n    //updatePayslip,\r\n    //editPayslipID,\r\n    //single_payslip,\r\n    //payslip_period,\r\n    getSingleBatchPayslipDeductions,\r\n  } = usePayslipsContext();\r\n  //const { name, amount } = payslipdeductions;\r\n  //const { deductions } = useTablesContext();\r\n\r\n  // const calc_Deduction = (data) => {\r\n  //   const sum = data.reduce((a, v) => (a = a + v.amount), 0);\r\n  //   setPayslipDeductionAmount(sum);\r\n  // };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Name\",\r\n      field: \"description\",\r\n    },\r\n    { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    getSingleBatchPayslipDeductions(payPeriodEmpId, payPeriod);\r\n  }, []);\r\n\r\n  \r\n  // const update_Payslip = () => {\r\n  //   const { rec_id, id, total_deductions, ...paydata } = single_payslip;\r\n  //   updatePayslip({\r\n  //     id: editPayslipID,\r\n  //     total_deductions: payslip_deduction_amount,\r\n  //     ...paydata,\r\n  //   });\r\n  // };\r\n\r\n  // const update_PayslipDeduction = async (data) => {\r\n  //   const { id, rec_id, empid, ...fields } = data;\r\n  //   updatePayslipDeduction({ id: data.id, empid: empid, ...fields });\r\n  //   update_Payslip();\r\n  //   getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  // const add_PayslipDeduction = (data) => {\r\n  //   const { description, amount } = data;\r\n  //   addPayslipDeduction({\r\n  //     description: description,\r\n  //     amount: amount,\r\n  //     name: single_payslip.name,\r\n  //     empid: single_payslip.empid,\r\n  //     period: single_payslip.period,\r\n  //   });\r\n  //   getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  // const delete_PayslipDeduction = (data) => {\r\n  //   const { id } = data;\r\n  //   deletePayslipDeduction(id);\r\n  //   getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  \r\n  if (payslipdeductions_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading... Expenses.</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={payslipdeductions}\r\n          title=\"Expense\"\r\n          options={{\r\n            search: false,\r\n            toolbar: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\helpers\\CardLayout.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\Payslip_ViewEarnings.js",["1283"],"import React, {  useEffect } from \"react\";\r\n\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {  useRecoilValue } from \"recoil\";\r\nimport {\r\n  payPeriodState,\r\n  //payPeriodEndMonthState,\r\n  payPeriodEmpIdState,\r\n} from \"./data/atomdata\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\n\r\nexport default function Payslip_ViewEarnings({ setCalc }) {\r\n  //let history = useHistory();\r\n  //const [load, setLoad] = useState(true);\r\n  const classes = useStyles();\r\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\r\n  const payPeriod = useRecoilValue(payPeriodState);\r\n  const {\r\n    payslipearnings,\r\n    //payslip_earning_amount,\r\n    //setPayslipEarningAmount,\r\n    //addPayslipEarning,\r\n    payslipearnings_loading,\r\n    //updatePayslipEarning,\r\n    //deletePayslipEarning,\r\n    //updatePayslip,\r\n    //editPayslipID,\r\n    //single_payslip,\r\n    //payslip_period,\r\n    getSingleBatchPayslipEarnings,\r\n  } = usePayslipsContext();\r\n\r\n  //const { description, amount } = payslipearnings;\r\n  //const { allowances } = useTablesContext();\r\n  //console.log(\"recoil\", payPeriod, payPeriodEmpId);\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"description\",\r\n  },\r\n  { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n];\r\n\r\n  useEffect(() => {\r\n    getSingleBatchPayslipEarnings(payPeriodEmpId, payPeriod);\r\n  }, []);\r\n\r\n  // const calc_Earning = (data) => {\r\n  //   const sum = data.reduce((a, v) => (a = a + v.amount), 0);\r\n  //   console.log(\"Earning\", data);\r\n  //   setPayslipEarningAmount(sum);\r\n  // };\r\n\r\n  // const update_Payslip = () => {\r\n  //   const { rec_id, id, total_earnings, ...paydata } = single_payslip;\r\n  //   updatePayslip({\r\n  //     id: editPayslipID,\r\n  //     total_earnings: payslip_earning_amount,\r\n  //     ...paydata,\r\n  //   });\r\n  //   setCalc(true);\r\n  //};\r\n\r\n  if (payslipearnings_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading... Incomes.</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={payslipearnings}\r\n          title=\"Income\"\r\n          options={{\r\n            search: false,\r\n            toolbar: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\useDeleteDailyAllowsDetls.js",[],"D:\\react-myprojects\\hrms-demo\\src\\helpers\\CardLayout2.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDeleteDailyAllows.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesAddPeriod.js",["1284","1285","1286","1287"],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useUpdateDailyAllows.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\useUpdateDailyAllowsDetls.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useAddExpenses.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useAddLeaves.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\InstitutesTable.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDailyAllowsPayrun.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payslips\\usePayslipsBatch.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useExpensesPayrun.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\DesignationsTable.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\PrintPayslip.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payslips\\usePayslips.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\usePayrun.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\useDeletePayrun.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useDeleteExpenses.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useDeleteLeaves.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\useDeleteTrainings.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeFormAdd.js",["1288","1289"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  TextField,\r\n  Paper,\r\n  Typography,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport { Box, Heading } from \"@chakra-ui/react\";\r\n//import * as emailjs from \"emailjs-com\";\r\n//import { useRecoilState } from \"recoil\";\r\n//import { loginLevelState } from \"./data/atomdata\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\nimport { useAddEmployees } from \"./employees/useAddEmployees\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\n\r\nconst initial_state = {\r\n  name: \"\",\r\n  email: \"\",\r\n};\r\n\r\nconst EmployeeFormAdd = ({ onAddEmpFormClose }) => {\r\n  const classes = useStyles();\r\n  //const toast = useCustomToast();\r\n  const { employees } = useEmployees();\r\n  const addEmployee = useAddEmployees();\r\n  const [state, setState] = useState(initial_state);\r\n  const [isExit, setIsExit] = useState(false);\r\n  //const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { handleSubmit, control } = useForm();\r\n  //const initialValues = Object.values(initial_state).join(\"\");\r\n\r\n  //const {\r\n    //editEmployeeID,\r\n    //employees_loading,\r\n    //deleteEmployee,\r\n    //loadEmployees,\r\n    //setEditEmployeeID,\r\n    //setIsEditingOn,\r\n    //setIsEditingOff,\r\n    //resetSingleEmployee,\r\n    //resetEmployees,\r\n    //getSingleEmployee,\r\n  //} = useEmployeesContext();\r\n\r\n  const onSubmit = (data) => {\r\n    const { email } = data;\r\n    const emp = employees && employees.filter((rec) => rec.email === email);\r\n    console.log(\"exist\", emp);\r\n    if (emp.length) {\r\n      setIsExit(true);\r\n      setTimeout(() => {\r\n        setIsExit(false);\r\n      }, 2000);\r\n    } else {\r\n      setIsExit(false)\r\n      addEmployee({ ...data });\r\n      onAddEmpFormClose();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Paper className={classes.root}>\r\n        <Typography variant=\"h5\" component=\"h3\">\r\n          CREATE NEW EMPLOYEE\r\n        </Typography>\r\n        <Typography component=\"p\">Fill in new employee name and email</Typography>\r\n        <Divider />\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <div>\r\n            <Controller\r\n              name=\"name\"\r\n              control={control}\r\n              defaultValue={state.name}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Name\"\r\n                    id=\"margin-normal\"\r\n                    name=\"name\"\r\n                    //value={value}\r\n                    defaultValue={state.name}\r\n                    className={classes.textField}\r\n                    onChange={(e) => {\r\n                      onChange(e.target.value);\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  ></TextField>\r\n                );\r\n              }}\r\n              rules={{ required: \"Name required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"email\"\r\n              control={control}\r\n              defaultValue={state.email}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Email\"\r\n                    id=\"margin-normal-email\"\r\n                    name=\"email\"\r\n                    defaultValue={state.email}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  />\r\n                );\r\n              }}\r\n              rules={{ required: \"Email is required\" }}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              onClick={handleSubmit(onSubmit)}\r\n            >\r\n              Submit <Icon className={classes.rightIcon}>send</Icon>\r\n            </Button>\r\n          </div>\r\n          {isExit && (\r\n            <Box>\r\n              <Heading size=\"md\" pl={2}>\r\n                Warning! This email already existed!\r\n              </Heading>\r\n            </Box>\r\n          )}\r\n        </form>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 400,\r\n  },\r\n}));\r\n\r\nexport default EmployeeFormAdd;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useHoc.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useDeleteHoc.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\useDeleteEmployees.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeView.js",["1290"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport CardLayout from \"../helpers/CardLayout\";\r\nimport CardLayout2 from \"../helpers/CardLayout2\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\n\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\nimport { useTrainingsContext } from \"../context/trainings_context\";\r\nimport EmpViewFamily from \"./EmpViewFamily\";\r\nimport EmpViewEducations from \"./EmpViewEducations\";\r\nimport EmpViewExperiences from \"./EmpViewExperiences\";\r\nimport EmpViewLeaves from \"./EmpViewLeaves\";\r\nimport EmpViewTrainings from \"./EmpViewTrainings\";\r\nimport EmpPersonal from \"./EmpPersonal\";\r\nimport EmpFamily from \"./EmpFamily\";\r\nimport EmpEducations from \"./EmpEducations\";\r\nimport EmpExperiences from \"./EmpExperiences\";\r\nimport EmpTrainings from \"./EmpTrainings\";\r\n\r\n// const drawerWidth = 240;\r\n\r\n// const CardLayout = ({ title, children }) => {\r\n//   const classes = useStyles();\r\n//   return (\r\n//     <div>\r\n//       <CardLayout title=\"Personal Information\">\r\n//         <h2>details</h2>\r\n//       </CardLayout>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\nconst EmployeeView = () => {\r\n  const classes = useStyles();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const [familydata, setFamilydata] = useState([]);\r\n  const [educationdata, setEducationdata] = useState([]);\r\n  const [experiencedata, setExperiencedata] = useState([]);\r\n  const [trainingdata, setTrainingdata] = useState([]);\r\n  const [isPersonalDialogOpen, setIsPersonalDialogOpen] = useState(false);\r\n  const [isFamilyDialogOpen, setIsFamilyDialogOpen] = useState(false);\r\n  const [isEducationDialogOpen, setIsEducationDialogOpen] = useState(false);\r\n  const [isExperienceDialogOpen, setIsExperienceDialogOpen] = useState(false);\r\n  const [isTrainingDialogOpen, setIsTrainingDialogOpen] = useState(false);\r\n\r\n  const {\r\n    editEmployeeID,\r\n    getSingleEmployee,\r\n    single_employee,\r\n    single_employee_loading,\r\n  } = useEmployeesContext();\r\n  const { singlebatch_training } = useTrainingsContext();\r\n\r\n  const {\r\n    loadDepartments,\r\n    loadDesignations,\r\n    loadSingleBatchFamily,\r\n    loadSingleBatchEducation,\r\n    singlebatchfamily,\r\n    singlebatcheducation,\r\n    singlebatchexperience,\r\n  } = useTablesContext();\r\n\r\n  useEffect(() => {\r\n    getSingleEmployee(editEmployeeID);\r\n    loadDepartments();\r\n    loadDesignations();\r\n  }, []);\r\n\r\n  //useEffect(() => {}, [singlebatchfamily]);\r\n\r\n  if (single_employee_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading...Employee</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const handlePersonalDialogOpen = () => {\r\n    //setFamilydata([...singlebatchfamily]);\r\n    setIsPersonalDialogOpen(true);\r\n  };\r\n\r\n  const handlePersonalDialogClose = () => {\r\n    setIsPersonalDialogOpen(false);\r\n    //loadEmployees();\r\n  };\r\n\r\n  const handleFamilyDialogOpen = () => {\r\n    setFamilydata([]);\r\n    setFamilydata([...singlebatchfamily]);\r\n    setIsFamilyDialogOpen(true);\r\n  };\r\n\r\n  const handleFamilyDialogClose = () => {\r\n    setIsFamilyDialogOpen(false);\r\n    loadSingleBatchFamily(editEmployeeID);\r\n  };\r\n\r\n  const handleEducationDialogOpen = () => {\r\n    setEducationdata([]);\r\n    setEducationdata([...singlebatcheducation]);\r\n    setIsEducationDialogOpen(true);\r\n  };\r\n\r\n  const handleEducationDialogClose = () => {\r\n    setIsEducationDialogOpen(false);\r\n    loadSingleBatchEducation(editEmployeeID);\r\n  };\r\n\r\n  const handleExperienceDialogOpen = () => {\r\n    setExperiencedata([...singlebatchexperience]);\r\n    setIsExperienceDialogOpen(true);\r\n  };\r\n\r\n  const handleExperienceDialogClose = () => {\r\n    setIsExperienceDialogOpen(false);\r\n    //loadEmployees();\r\n  };\r\n\r\n  const handleTrainingDialogOpen = () => {\r\n    setTrainingdata([...singlebatch_training]);\r\n    setIsTrainingDialogOpen(true);\r\n    //loadEmployees();\r\n  };\r\n\r\n  const handleTrainingDialogClose = () => {\r\n    setIsTrainingDialogOpen(false);\r\n    //loadEmployees();\r\n  };\r\n\r\n  return (\r\n    <Paper className={fixedHeightPaper} style={{ backgroundColor: \"black\" }}>\r\n      <div className={classes.root}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={8} lg={12}>\r\n            <CardLayout2 title=\"Employee Profile\">\r\n              <div>\r\n                <form className={classes.form}>\r\n                  <TextField\r\n                    label=\"Name\"\r\n                    name=\"name\"\r\n                    value={single_employee.name}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                  <TextField\r\n                    label=\"Phone\"\r\n                    name=\"phone\"\r\n                    value={single_employee.phone}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                  <TextField\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    value={single_employee.email}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                  <TextField\r\n                    label=\"Birth Date\"\r\n                    name=\"birthdate\"\r\n                    value={single_employee.birhdate}\r\n                    type=\"date\"\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                  <TextField\r\n                    label=\"Gender\"\r\n                    name=\"gender\"\r\n                    value={single_employee.gender}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                  <TextField\r\n                    label=\"Leave Balance\"\r\n                    name=\"leave_bal\"\r\n                    value={single_employee.leave_bal}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                </form>\r\n              </div>\r\n            </CardLayout2>\r\n          </Grid>\r\n          <Grid item xs={6} md={8} lg={6}>\r\n            <div>\r\n              <CardLayout\r\n                title=\"Personal Information\"\r\n                handleClick={handlePersonalDialogOpen}\r\n              >\r\n                <div>\r\n                  <form className={classes.form}>\r\n                    <TextField\r\n                      label=\"I/C No\"\r\n                      name=\"icno\"\r\n                      value={single_employee.ic_no}\r\n                      InputProps={{\r\n                        readOnly: true,\r\n                      }}\r\n                    />\r\n\r\n                    <TextField\r\n                      label=\"I/C Expiry Date\"\r\n                      name=\"ic_expirydate\"\r\n                      value={single_employee.ic_expirydate}\r\n                      type=\"date\"\r\n                      InputProps={{\r\n                        readOnly: true,\r\n                      }}\r\n                      InputLabelProps={{\r\n                        shrink: true,\r\n                      }}\r\n                    />\r\n\r\n                    <TextField\r\n                      label=\"Passport No\"\r\n                      name=\"passportno\"\r\n                      value={single_employee.passportno}\r\n                      InputProps={{\r\n                        readOnly: true,\r\n                      }}\r\n                    />\r\n                    <TextField\r\n                      label=\"Passport Expiry Date\"\r\n                      name=\"passport_expirydate\"\r\n                      value={single_employee.passport_expirydate}\r\n                      type=\"date\"\r\n                      InputLabelProps={{\r\n                        shrink: true,\r\n                      }}\r\n                      InputProps={{\r\n                        readOnly: true,\r\n                      }}\r\n                    />\r\n\r\n                    <TextField\r\n                      label=\"Work Permit No\"\r\n                      name=\"workpermitno\"\r\n                      value={single_employee.workpermitno}\r\n                      InputProps={{\r\n                        readOnly: true,\r\n                      }}\r\n                    />\r\n                    <TextField\r\n                      label=\"W/P Expiry Date\"\r\n                      name=\"workpermit_expirydate\"\r\n                      value={single_employee.workpermit_expirydate}\r\n                      type=\"date\"\r\n                      InputLabelProps={{\r\n                        shrink: true,\r\n                      }}\r\n                      InputProps={{\r\n                        readOnly: true,\r\n                      }}\r\n                    />\r\n\r\n                    <div>\r\n                      <TextField\r\n                        label=\"Nationality\"\r\n                        name=\"nationality\"\r\n                        value={single_employee.nationality}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <TextField\r\n                        label=\"Marital Status\"\r\n                        name=\"marital_status\"\r\n                        value={single_employee.marital_status}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </CardLayout>\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={6} md={8} lg={6}>\r\n            <div>\r\n              <CardLayout2 title=\"Leaves\">\r\n                <div>\r\n                  <EmpViewLeaves />\r\n                </div>\r\n              </CardLayout2>\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={6} md={8} lg={6}>\r\n            <div>\r\n              <CardLayout\r\n                title=\"Training\"\r\n                handleClick={handleTrainingDialogOpen}\r\n              >\r\n                <EmpViewTrainings />\r\n              </CardLayout>\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={6} md={8} lg={6}>\r\n            <div>\r\n              <CardLayout\r\n                title=\"Experiences\"\r\n                handleClick={handleExperienceDialogOpen}\r\n              >\r\n                <div>\r\n                  <EmpViewExperiences />\r\n                </div>\r\n              </CardLayout>\r\n            </div>\r\n          </Grid>\r\n\r\n          <Grid item xs={6} md={8} lg={6}>\r\n            <div>\r\n              <CardLayout\r\n                title=\"Education\"\r\n                handleClick={handleEducationDialogOpen}\r\n              >\r\n                <div>\r\n                  <EmpViewEducations />\r\n                </div>\r\n              </CardLayout>\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={6} md={8} lg={6}>\r\n            <div>\r\n              <CardLayout title=\"Family\" handleClick={handleFamilyDialogOpen}>\r\n                <EmpViewFamily />\r\n              </CardLayout>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n      <CustomDialog\r\n        isOpen={isPersonalDialogOpen}\r\n        handleClose={handlePersonalDialogClose}\r\n        title=\"\"\r\n        showButton={true}\r\n        isFullscreen={false}\r\n        isFullwidth={false}\r\n      >\r\n        <EmpPersonal\r\n          //setPersonaldata={setFamilydata}\r\n          //familydata={familydata}\r\n          handleDialogClose={handlePersonalDialogClose}\r\n        />\r\n      </CustomDialog>\r\n      <CustomDialog\r\n        isOpen={isFamilyDialogOpen}\r\n        handleClose={handleFamilyDialogClose}\r\n        title=\"\"\r\n        showButton={true}\r\n        isFullscreen={false}\r\n        isFullwidth={false}\r\n      >\r\n        <EmpFamily\r\n          setFamilydata={setFamilydata}\r\n          familydata={familydata}\r\n          handleDialogClose={handleFamilyDialogClose}\r\n        />\r\n      </CustomDialog>\r\n      <CustomDialog\r\n        isOpen={isEducationDialogOpen}\r\n        handleClose={handleEducationDialogClose}\r\n        title=\"\"\r\n        showButton={true}\r\n        isFullscreen={false}\r\n        isFullwidth={false}\r\n      >\r\n        <EmpEducations\r\n          setEducationdata={setEducationdata}\r\n          educationdata={educationdata}\r\n          handleDialogClose={handleEducationDialogClose}\r\n        />\r\n      </CustomDialog>\r\n      <CustomDialog\r\n        isOpen={isExperienceDialogOpen}\r\n        handleClose={handleExperienceDialogClose}\r\n        title=\"\"\r\n        showButton={true}\r\n        isFullscreen={false}\r\n        isFullwidth={false}\r\n      >\r\n        <EmpExperiences\r\n          setExperiencedata={setExperiencedata}\r\n          experiencedata={experiencedata}\r\n          handleDialogClose={handleExperienceDialogClose}\r\n        />\r\n      </CustomDialog>\r\n      <CustomDialog\r\n        isOpen={isTrainingDialogOpen}\r\n        handleClose={handleTrainingDialogClose}\r\n        title=\"\"\r\n        showButton={true}\r\n        isFullscreen={false}\r\n        isFullwidth={false}\r\n      >\r\n        <EmpTrainings\r\n          setTrainingdata={setTrainingdata}\r\n          trainingdata={trainingdata}\r\n          handleDialogClose={handleTrainingDialogClose}\r\n        />\r\n      </CustomDialog>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  container: {\r\n    margin: 0,\r\n    padding: 0,\r\n    width: \"80vw\",\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"repeat(auto-fill,250px)\",\r\n    gridAutoRows: \"10px\",\r\n    position: \"absolute\",\r\n    left: \"50%\",\r\n    transform: \"translateX(-50%)\",\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"primary\",\r\n  },\r\n  fixedHeight: {\r\n    height: 800,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(10),\r\n    // display: \"flex\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n    border: \"1px solid\",\r\n    width: \"100%\",\r\n    color: \"primary\",\r\n    bcakgroundColor: \"black\",\r\n  },\r\n  card: {\r\n    backgroundColor: \"black\",\r\n  },\r\n  form: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 350,\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n}));\r\n\r\nexport default EmployeeView;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableApproval.js",["1291","1292","1293"],"D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTableViewSummary.js",["1294"],"import React, { useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Box} from \"@chakra-ui/react\"\r\n//import { useHistory } from \"react-router-dom\";\r\n//import { useSetRecoilState } from \"recoil\";\r\nimport {\r\n  //payPeriodState,\r\n  //payPeriodEndMonthState,\r\n  //payPeriodEmpIdState,\r\n} from \"./data/atomdata\";\r\n//import { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { usePayrunStatus} from \"./payrun/usePayrunStatus\"\r\n\r\n//const FILTERSTRING = \"Pending\";\r\n\r\nconst columns = [\r\n  // { title: \"Period\", field: \"period\" },\r\n  {\r\n    title: \"Payrun Batch\",\r\n    field: \"payrun\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n  },\r\n  // {\r\n  //   title: \"Pay Date\",\r\n  //   field: \"pay_date\",\r\n  //   type: \"date\",\r\n  //   dateSetting: { locale: \"en-GB\" },\r\n  // },\r\n  { title: \"Total Wages\", field: \"totalwages\", type: \"currency\" },\r\n  { title: \"TAP Amount\", field: \"totaltap\", type: \"currency\" },\r\n  { title: \"SCP Amount\", field: \"totalscp\", type: \"currency\" },\r\n  { title: \"Site Allowances\", field: \"totalsitesallows\", type: \"currency\" },\r\n  { title: \"Expenses Claims\", field: \"totalexpensesclaims\", type: \"currency\" },\r\n  { title: \"Total Allowances\", field: \"totalallows\", type: \"currency\" },\r\n  { title: \"Total Deductions\", field: \"totaldeducts\", type: \"currency\" },\r\n  { title: \"Total Payroll\", field: \"totalpayroll\", type: \"currency\" },\r\n  { title: \"Status\", field: \"status\" },\r\n];\r\n\r\n\r\nexport default function PayslipTableVIew({status}) {\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  //const setPayPeriodEmpId = useSetRecoilState(payPeriodEmpIdState);\r\n  //const { payrun, getPayrun,payrun_loading, loadPendingPayslips } =\r\n  //  usePayslipsContext();\r\n  //const { loadEmployees, employees } = useEmployeesContext();\r\n  const { payrunstatus, setPayrunStatusId} = usePayrunStatus()\r\n  \r\n  \r\n  useEffect(() => {\r\n    setPayrunStatusId(status);\r\n  }, []);\r\n\r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n    \r\n        <Box maxW=\"100%\" pt=\"5px\" overflow=\"Scroll\">\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={payrunstatus}\r\n          title=\"Payslips\"\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            paging: false,\r\n            headerStyle: {\r\n              backgroundColor: \"rgba(75, 192, 192, 1)\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </Box>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\WPExpiryViewStaff.js",["1295"],"D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableVeryfy.js",["1296","1297","1298","1299","1300","1301"],"D:\\react-myprojects\\hrms-demo\\src\\components\\Copyright.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\LeavesTableViewSummary.js",["1302","1303","1304","1305"],"import React, {  useEffect } from \"react\";\r\nimport MaterialTable  from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Box, Button, HStack, Text } from \"@chakra-ui/react\";\r\n//import AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\n//import DeleteIcon from \"@material-ui/icons/Delete\";\r\n//import CheckIcon from \"@material-ui/icons/Check\";\r\n//import SearchIcon from \"@material-ui/icons/Search\";\r\n//import LeaveForm from \"./LeaveForm\";\r\n//import { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { AlertDialog } from \"../helpers/AlertDialogBox\";\r\nimport { useLeavesPeriod } from \"./leaves/useLeavesPeriod\";\r\n\r\n//const FILTERSTRING = \"Pending\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n  },\r\n\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"No of Days\",\r\n    field: \"no_of_days\",\r\n    type: \"numeric\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Reason\",\r\n    field: \"reason\",\r\n    editable: \"never\",\r\n  },\r\n  { title: \"Status\", field: \"status\" },\r\n];\r\n\r\n\r\n\r\n\r\nexport default function LeaveTableViewSummary({ year, month }) {\r\n  const classes = useStyles();\r\n  const { leavesperiod, setLeavePeriodYrId, setLeavePeriodMthId } =\r\n    useLeavesPeriod();\r\n\r\n  useEffect(() => {\r\n    setLeavePeriodYrId(year);\r\n    setLeavePeriodMthId(month);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      {/* <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}> */}\r\n      \r\n      <Box maxW=\"100%\" pt=\"5px\" overflow=\"scroll\">\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={leavesperiod}\r\n          title=\"Leave Application\"\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            paging: false,\r\n            headerStyle: {\r\n              backgroundColor: \"rgba(75, 192, 192, 1)\",\r\n              color: \"white\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </Box>\r\n    </div>\r\n    // </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\Export2ExcelDialog.js",["1306","1307","1308","1309"],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeTableLeaveView.js",["1310","1311"],"D:\\react-myprojects\\hrms-demo\\src\\components\\TrainingsTableViewAdmin.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\HocTableViewSummary.js",["1312","1313"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Box } from \"@chakra-ui/react\";\r\n//import AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\n//import DeleteIcon from \"@material-ui/icons/Delete\";\r\n//import CheckIcon from \"@material-ui/icons/Check\";\r\n//import SearchIcon from \"@material-ui/icons/Search\";\r\n//import LeaveForm from \"./LeaveForm\";\r\n//import { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { AlertDialog } from \"../helpers/AlertDialogBox\";\r\nimport { useHocPeriod } from \"./hoc/useHocPeriod\";\r\n\r\n//const FILTERSTRING = \"Pending\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Findings\",\r\n    field: \"findings\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      minWidth: 200,\r\n      maxWidth: 200,\r\n    },\r\n  },\r\n  {\r\n    title: \"Risks\",\r\n    field: \"risks\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      minWidth: 150,\r\n      maxWidth: 150,\r\n    },\r\n  },\r\n  {\r\n    title: \"Type/Category\",\r\n    field: \"category\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"What\",\r\n    field: \"what\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"What Details\",\r\n    field: \"what_details\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      minWidth: 150,\r\n      maxWidth: 150,\r\n    },\r\n  },\r\n  {\r\n    title: \"Why\",\r\n    field: \"why\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Why Details\",\r\n    field: \"why_details\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      minWidth: 200,\r\n      maxWidth: 200,\r\n    },\r\n  },\r\n  {\r\n    title: \"Discussion\",\r\n    field: \"discussion\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Action\",\r\n    field: \"action\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Follow-up required?\",\r\n    field: \"isfollowup\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Work Related?\",\r\n    field: \"isworkrelated\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Raised By\",\r\n    field: \"raisedby\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Raised On\",\r\n    field: \"raisedon\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Company\",\r\n    field: \"company\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Location\",\r\n    field: \"location\",\r\n    editable: \"never\",\r\n  },\r\n  // {\r\n  //   title: \"Department\",\r\n  //   field: \"department\",\r\n  //   editable: \"never\",\r\n  // },\r\n];\r\n\r\nexport default function HocTableViewSummary({ year, month }) {\r\n  const classes = useStyles();\r\n  const { hocperiod, setHocPeriodYrId, setHocPeriodMthId } = useHocPeriod();\r\n\r\n  useEffect(() => {\r\n    setHocPeriodYrId(year);\r\n    setHocPeriodMthId(month);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      {/* <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}> */}\r\n      <Box maxW=\"100%\" pt=\"5px\" overflow=\"scroll\">\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={hocperiod}\r\n          title=\"HOC History\"\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            paging: false,\r\n            headerStyle: {\r\n              backgroundColor: \"rgba(75, 192, 192, 1)\",\r\n              color: \"white\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </Box>\r\n    </div>\r\n    // </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableAdmin.js",["1314"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { TextField, MenuItem, Button, Icon } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport CheckCircleOutlineOutlinedIcon from \"@material-ui/icons/CheckCircleOutlineOutlined\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\n\r\nconst FILTERSTRING = \"Pending\";\r\n\r\nconst columns = [\r\n  { title: \"Name\", field: \"name\", editable: \"never\" },\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Description\",\r\n    field: \"description\",\r\n    editable: \"never\",\r\n  },\r\n  { title: \"Amount\", field: \"amount\", type: \"currency\", editable: \"never\" },\r\n  {\r\n    title: \"Status\",\r\n    field: \"status\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        //defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        style={{ width: 100 }}\r\n        value={props.value}\r\n        select\r\n      >\r\n        <MenuItem value=\"Pending\">Pending</MenuItem>\r\n        <MenuItem value=\"Approve\">Approve</MenuItem>\r\n        <MenuItem value=\"Reject\">Reject</MenuItem>\r\n        <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n      </TextField>\r\n    ),\r\n  },\r\n];\r\n\r\nexport default function ExpenseTable({\r\n  expensesdata,\r\n  setExpensesdata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  //const [isLoad, setIsLoad] = useState(false);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  //const { loadEmployees } = useEmployeesContext();\r\n  const {\r\n    editExpenseID,\r\n    updateExpense,\r\n    update_expense_error,\r\n    //expenses_loading,\r\n    deleteExpense,\r\n    loadPendingExpenses,\r\n  } = useExpensesContext();\r\n\r\n  // useEffect(() => {\r\n  //   setExpensesdata(expenses);\r\n  //   console.log(expensesdata)\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   loadEmployees();\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   if (expenses) {\r\n  //     setExpensesdata(expenses);\r\n  //     console.log(\"expenses\", expenses, expensesdata)\r\n  //   } else {\r\n  //     setIsLoad(!isLoad);\r\n  //   }\r\n  // }, [isLoad]);\r\n\r\n  // const handleExpenseFormDialogOpen = () => {\r\n  //   setIsDialogOpen(true);\r\n  // };\r\n\r\n  const handleExpenseFormDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n    loadPendingExpenses(FILTERSTRING);\r\n  };\r\n\r\n  // const handleExpenseFormAlertOpen = () => {\r\n  //   setIsAlertOpen(true);\r\n  // };\r\n\r\n  const handleExpenseFormAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleExpenseFormOnDeleteConfirm = () => {\r\n    const id = editExpenseID;\r\n    deleteExpense(id);\r\n    loadPendingExpenses(FILTERSTRING);\r\n  };\r\n\r\n  // const Save_ExpenseData = () => {\r\n  //   expensesdata.forEach((data) => {\r\n  //     const { id } = data;\r\n  //     if (id) {\r\n  //       const { id, rec_id, tableData, ...fields } = data;\r\n  //       updateExpense({ id, ...fields });\r\n  //     }\r\n  //   });\r\n\r\n  //   handleDialogClose();\r\n  // };\r\n\r\n  const Approve_ExpenseData = () => {\r\n    expensesdata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        updateExpense({ id: rec.id, status: \"Approved\" });\r\n        //update leavesdata\r\n        if (!update_expense_error) {\r\n          const recdata = expensesdata.filter((r) => r.id === rec.id);\r\n          recdata[0].status = \"Approved\";\r\n        }\r\n      }\r\n    });\r\n    expensesdata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  const Reject_ExpenseData = () => {\r\n    expensesdata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        updateExpense({ id: rec.id, status: \"Rejected\" });\r\n        //update leavesdata\r\n        if (!update_expense_error) {\r\n          const recdata = expensesdata.filter((r) => r.id === rec.id);\r\n          recdata[0].status = \"Rejected\";\r\n        }\r\n      }\r\n    });\r\n    expensesdata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  if (!expensesdata) {\r\n    return (\r\n      <div>\r\n        <h2>Loading...Expenses</h2>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={expensesdata}\r\n          title=\"Expenses Claims Application\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <CheckCircleOutlineOutlinedIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          // editable={{\r\n          //   onRowUpdate: (newData, oldData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         const dataUpdate = [...expensesdata];\r\n          //         const index = oldData.tableData.id;\r\n          //         dataUpdate[index] = newData;\r\n          //         setExpensesdata([...dataUpdate]);\r\n          //         //approve_Expense(newData);\r\n\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          // }}\r\n          options={{\r\n            filtering: true,\r\n            selection: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Approve_ExpenseData}\r\n                  >\r\n                    Approve <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Reject_ExpenseData}\r\n                  >\r\n                    Reject <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                  {/* <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Save_ExpenseData}\r\n                  >\r\n                    Update <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button> */}\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <CustomDialog\r\n          isOpen={isDialogOpen}\r\n          handleClose={handleExpenseFormDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscree={false}\r\n        >\r\n          <ExpenseForm handleDialogClose={handleExpenseFormDialogClose} />\r\n        </CustomDialog>\r\n\r\n        <AlertDialogBox\r\n          onClose={handleExpenseFormAlertClose}\r\n          onConfirm={handleExpenseFormOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete Expenses\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\WPExpiryViewAdmin.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTableAdmin.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableViewAdmin.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableManager.js",["1315"],"import React, { useState } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { TextField, MenuItem, Button } from \"@material-ui/core\";\r\nimport * as emailjs from \"emailjs-com\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport LeaveForm from \"./LeaveForm\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\n\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\nconst ADMINMANAGER_EMAIL = process.env.ADMINMANAGER_EMAIL;\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Leave Balance\",\r\n    field: \"leave_bal\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      width: 10,\r\n      maxWidth: 10,\r\n    },\r\n  },\r\n  {\r\n    title: \"Days\",\r\n    field: \"no_of_days\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      width: 10,\r\n      maxWidth: 10,\r\n    },\r\n  },\r\n  {\r\n    title: \"Reason\",\r\n    field: \"reason\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      width: 10,\r\n      maxWidth: 10,\r\n    },\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    field: \"status\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      width: 50,\r\n      maxWidth: 50,\r\n    },\r\n    editComponent: (props) => (\r\n      <TextField\r\n        //defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        style={{ width: 100 }}\r\n        value={props.value}\r\n        select\r\n      >\r\n        <MenuItem value=\"Pending\">Pending</MenuItem>\r\n        <MenuItem value=\"Approve\">Approve</MenuItem>\r\n        <MenuItem value=\"Reject\">Reject</MenuItem>\r\n        <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n      </TextField>\r\n    ),\r\n  },\r\n];\r\n\r\nexport default function LeaveTable({\r\n  leavesdata,\r\n  //setLeavesdata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const { employees } = useEmployees();\r\n  const {\r\n    editLeaveID,\r\n    updateLeave,\r\n    deleteLeave,\r\n    loadLeaves,\r\n    update_leave_error,\r\n  } = useLeavesContext();\r\n\r\n  const { updateEmployee } = useEmployeesContext();\r\n\r\n  // useEffect(() => {\r\n  //   loadLeaves();\r\n  // }, []);\r\n\r\n  // const handleLeaveFormDialogOpen = () => {\r\n  //   setIsDialogOpen(true);\r\n  // };\r\n\r\n  const handleLeaveFormDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n    loadLeaves();\r\n  };\r\n\r\n  // const handleLeaveFormAlertOpen = () => {\r\n  //   setIsAlertOpen(true);\r\n  // };\r\n\r\n  const handleLeaveFormAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleLeaveFormOnDeleteConfirm = () => {\r\n    const id = editLeaveID;\r\n    deleteLeave(id);\r\n    loadLeaves();\r\n  };\r\n\r\n  const handleSentEmail = (data, result) => {\r\n    const { from_date, to_date, name, empid } = data;\r\n    const emp = employees\r\n      .filter((f) => f.id === empid)\r\n      .map((r) => {\r\n        return { ...r };\r\n      });\r\n    //console.log(\"leave form\", data, emp);\r\n\r\n    var emaildata = {\r\n      to_name: name,\r\n      to_email: emp[0].email,\r\n      message: `Your leave application from ${from_date} to ${to_date} has been ${result}!`,\r\n      cc_to: ADMINMANAGER_EMAIL,\r\n    };\r\n\r\n    emailjs.send(SERVICE_ID, TEMPLATE_ID, emaildata, USER_ID).then(\r\n      function (response) {\r\n        console.log(response.status, response.text);\r\n        toast({\r\n          title: `Email has sent successfully to ${emaildata.to_email}!`,\r\n          status: \"success\",\r\n        });\r\n      },\r\n      function (err) {\r\n        console.log(err);\r\n        toast({\r\n          title: `Email has fail to send to ${emaildata.to_email}!`,\r\n          status: \"warning\",\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  const Approve_LeaveData = () => {\r\n    leavesdata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        updateLeave({ id: rec.id, status: \"Approved\" });\r\n        //update leavesdata\r\n        if (!update_leave_error) {\r\n          const recdata = leavesdata.filter((r) => r.id === rec.id);\r\n          recdata[0].status = \"Approved\";\r\n\r\n          // update leave bal\r\n          //console.log(\"leave\", rec.empid, employees);\r\n          const empleavebal = employees\r\n            .filter((r) => r.id === rec.empid)\r\n            .map((item) => {\r\n              return item.leave_bal;\r\n            });\r\n          const leavebal = empleavebal - rec.no_of_days;\r\n          updateEmployee({ id: rec.empid, leave_bal: leavebal });\r\n        }\r\n        //sent email\r\n        handleSentEmail(rec, \"Approved\");\r\n      }\r\n    });\r\n    leavesdata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  const Reject_LeaveData = () => {\r\n    leavesdata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        updateLeave({ id: rec.id, status: \"Rejected\" });\r\n        //update leavesdata\r\n        if (!update_leave_error) {\r\n          const recdata = leavesdata.filter((r) => r.id === rec.id);\r\n          recdata[0].status = \"Rejected\";\r\n        }\r\n        //sent email\r\n        handleSentEmail(rec, \"Rejected\");\r\n      }\r\n    });\r\n    leavesdata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  // const Save_LeaveData = () => {\r\n  //   leavesdata.forEach((data) => {\r\n  //     const { id } = data;\r\n  //     if (id) {\r\n  //       const { id, rec_id, tableData, ...fields } = data;\r\n  //       updateLeave({ id, ...fields });\r\n  //     }\r\n  //   });\r\n\r\n  //   handleDialogClose();\r\n  //};\r\n\r\n  // if (expenses_loading) {\r\n  //   return (\r\n\r\n  // if (leaves_loading) {\r\n  //   return (\r\n  //     <div>\r\n  //       <h2>Loading...Leaves</h2>\r\n  //     </div>\r\n  //   );\r\n  // }\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={leavesdata.filter(\r\n            (r) => r.reporting_email === loginLevel.loginEmail\r\n          )}\r\n          title=\"Leave Application\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <EditIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          // editable={{\r\n          //   onRowUpdate: (newData, oldData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         const dataUpdate = [...leavesdata];\r\n          //         const index = oldData.tableData.id;\r\n          //         dataUpdate[index] = newData;\r\n          //         setLeavesdata([...dataUpdate]);\r\n          //         //approve_Expense(newData);\r\n\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          // }}\r\n          options={{\r\n            filtering: true,\r\n            selection: true,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Approve_LeaveData}\r\n                  >\r\n                    Approve\r\n                  </Button>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Reject_LeaveData}\r\n                  >\r\n                    Reject\r\n                  </Button>\r\n                  {/* <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Save_LeaveData}\r\n                  >\r\n                    Update <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button> */}\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <CustomDialog\r\n          isOpen={isDialogOpen}\r\n          handleClose={handleLeaveFormDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscree={false}\r\n        >\r\n          <LeaveForm handleDialogClose={handleLeaveFormDialogClose} />\r\n        </CustomDialog>\r\n\r\n        <AlertDialogBox\r\n          onClose={handleLeaveFormAlertClose}\r\n          onConfirm={handleLeaveFormOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete Expenses\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableViewSummary.js",["1316","1317","1318"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Box } from \"@chakra-ui/react\";\r\n//import AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\n//import DeleteIcon from \"@material-ui/icons/Delete\";\r\n//import CheckIcon from \"@material-ui/icons/Check\";\r\n//import SearchIcon from \"@material-ui/icons/Search\";\r\n//import LeaveForm from \"./LeaveForm\";\r\n//import { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { AlertDialog } from \"../helpers/AlertDialogBox\";\r\n//import { useExpensesStatus } from \"./expenses/useExpensesStatus\";\r\nimport { useExpensesPeriod } from \"./expenses/useExpensesPeriod\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\n\r\n//const FILTERSTRING = \"Pending\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n  },\r\n  {\r\n    title: \"Date\",\r\n    field: \"date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n  },\r\n\r\n  { title: \"Description\", field: \"description\" },\r\n  { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n  { title: \"Status\", field: \"status\" },\r\n];\r\n\r\nexport default function ExpenseTableView({ year, month }) {\r\n  const classes = useStyles();\r\n  //const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  //const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const [totals, setTotals] = useState(0);\r\n  const [isCalc, setIsCalc] = useState(false);\r\n  //const { loadEmployees } = useEmployeesContext();\r\n  //const { expensesstatus, setExpStatusId } = useExpensesStatus();\r\n  const { expensesperiod, setExpPeriodYrId, setExpPeriodMthId } =\r\n    useExpensesPeriod();\r\n\r\n  useEffect(() => {\r\n    setExpPeriodYrId(year);\r\n    setExpPeriodMthId(month);\r\n    setIsCalc(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (expensesperiod) {\r\n      Calc_Totals();\r\n      setIsCalc(false);\r\n    }\r\n  }, [isCalc]);\r\n\r\n  const Calc_Totals = () => {\r\n    const amount = expensesperiod.reduce((acc, r) => {\r\n      if (r.status === \"Approved\" || r.status === \"Approve\") {\r\n        return acc + r.amount;\r\n      } else {\r\n        return acc;\r\n      }\r\n    }, 0);\r\n    setTotals(amount);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <Box maxW=\"100%\" pt=\"5px\" overflow=\"scroll\">\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={expensesperiod}\r\n          title=\"Leave Application\"\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            paging: false,\r\n            headerStyle: {\r\n              backgroundColor: \"rgba(75, 192, 192, 1)\",\r\n              color: \"white\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </Box>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableViewSummary.js",["1319","1320"],"D:\\react-myprojects\\hrms-demo\\src\\components\\Export2Excel.js",["1321"],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\useAddDailyAllowsDetls.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useAddDailyAllows.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableViewStaff.js",["1322","1323","1324","1325"],"D:\\react-myprojects\\hrms-demo\\src\\components\\TrainingsTableViewStaff.js",["1326","1327"],"D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableViewStaff.js",["1328","1329","1330"],"D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveFormAdmin.js",["1331","1332"],"import React, { useState} from \"react\";\r\nimport {\r\n  //Button,\r\n  //Icon,\r\n  TextField,\r\n  Paper,\r\n  Typography,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\n//import { useLeaves } from \"./leaves/useLeaves\";\r\nimport { useAddLeaves } from \"./leaves/useAddLeaves\";\r\n//import { useDeleteLeaves } from \"./leaves/useDeleteLeaves\";\r\nimport { useUpdateLeaves } from \"./leaves/useUpdateLeaves\";\r\n\r\n// const initial_state = {\r\n//   name: \"\",\r\n//   to_date: \"\",\r\n//   from_date: \"\",\r\n//   reason: \"\",\r\n//   status: \"Pending\",\r\n//   no_of_days: 0,\r\n//   leave_bal: 0,\r\n// };\r\n\r\nconst LeaveForm = ({ formdata, setFormdata, handleDialogClose }) => {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast()\r\n  //const { leaves, filter, setFilter, setLeaveId } = useLeaves();\r\n  const updateLeaves = useUpdateLeaves();\r\n  const addLeaves = useAddLeaves();\r\n  //const [state, setState] = useState(initial_state);\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { handleSubmit, control } = useForm();\r\n  //const initialValues = Object.values(initial_state).join(\"\");\r\n  const { isLeaveEditing, editLeaveID } = useLeavesContext();\r\n\r\n  //console.log(\"leave\", isLeaveEditing, formdata);\r\n  const onSubmit = (data) => {\r\n    console.log(\"leave\", data);\r\n    if (isLeaveEditing) {\r\n      updateLeaves({ id: editLeaveID, ...data });\r\n       toast({\r\n         title: \"Leave record being rejected!\",\r\n         status: \"success\",\r\n       });\r\n    } else {\r\n      addLeaves({\r\n        ...data,\r\n        empid: loginLevel.loginUserId,\r\n        reporting_email: loginLevel.reporting_email,\r\n      });\r\n    }\r\n\r\n    //history.push(\"/leave\");\r\n    handleDialogClose();\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   setState(initial_state);\r\n  //   setState({ ...formdata });\r\n  //   setState({ ...formdata });\r\n  //   console.log(\"laeve form\",state)\r\n  // }, [initialValues]);\r\n\r\n  return (\r\n    <div>\r\n      <Paper className={classes.root}>\r\n        <Typography variant=\"h5\" component=\"h3\">\r\n          LEAVE FORM\r\n        </Typography>\r\n        <Typography component=\"p\">Leave Application</Typography>\r\n        <Divider />\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <div>\r\n            <Controller\r\n              name=\"name\"\r\n              control={control}\r\n              defaultValue={formdata.name}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Name\"\r\n                    id=\"margin-normal\"\r\n                    name=\"name\"\r\n                    defaultValue={formdata.name}\r\n                    //value={value}\r\n                    className={classes.textField}\r\n                    onChange={(e) => {\r\n                      console.log(e.target.value);\r\n                      onChange(e.target.value);\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    //select\r\n                  >\r\n                    {/* {employees.map((e) => {\r\n                      return (\r\n                        <MenuItem key={e.name} value={e.name}>\r\n                          {e.name}\r\n                        </MenuItem>\r\n                      );\r\n                    })} */}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              // rules={{ required: \"Name required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"from_date\"\r\n              control={control}\r\n              defaultValue={formdata.from_date}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"From Date\"\r\n                    type=\"date\"\r\n                    id=\"margin-normal\"\r\n                    name=\"from_date\"\r\n                    defaultValue={formdata.from_date}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                );\r\n              }}\r\n              rules={{ required: \"From Date is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"to_date\"\r\n              control={control}\r\n              defaultValue={formdata.to_date}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"To Date\"\r\n                    id=\"margin-normal\"\r\n                    type=\"date\"\r\n                    name=\"to_date\"\r\n                    defaultValue={formdata.to_date}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                );\r\n              }}\r\n              rules={{ required: \"To Date is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"leave_bal\"\r\n              control={control}\r\n              defaultValue={formdata.leave_bal}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    disable\r\n                    label=\"Leave Balance\"\r\n                    type=\"number\"\r\n                    id=\"standard-number\"\r\n                    name=\"leave_bal\"\r\n                    defaultValue={formdata.leave_bal}\r\n                    className={classes.textField}\r\n                    //onChange={onChange}\r\n                    onChange={(e) => {\r\n                      onChange(parseInt(e.target.value, 10));\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                );\r\n              }}\r\n              //rules={{ required: \"IC No required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"no_of_days\"\r\n              control={control}\r\n              defaultValue={formdata.no_of_days}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"No Of Days\"\r\n                    type=\"number\"\r\n                    id=\"standard-number\"\r\n                    name=\"no_of_days\"\r\n                    defaultValue={formdata.no_of_days}\r\n                    className={classes.textField}\r\n                    //onChange={onChange}\r\n                    onChange={(e) => {\r\n                      onChange(parseInt(e.target.value, 10));\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                     InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                 \r\n                );\r\n              }}\r\n              //rules={{ required: \"IC No required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"reason\"\r\n              control={control}\r\n              defaultValue={formdata.reason}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Reason\"\r\n                    id=\"margin-normal\"\r\n                    name=\"reason\"\r\n                    defaultValue={formdata.reason}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                     InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                  \r\n                );\r\n              }}\r\n              // rules={{ required: \"Reason is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"status\"\r\n              control={control}\r\n              defaultValue={formdata.status}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Status\"\r\n                    id=\"margin-normal\"\r\n                    name=\"status\"\r\n                    defaultValue={formdata.status}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                    // select\r\n                  >\r\n                    {/* <MenuItem value=\"Pending\">Pending</MenuItem>\r\n                    <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n                    <MenuItem value=\"Approve\">Approve</MenuItem>\r\n                    <MenuItem value=\"Reject\">Reject</MenuItem> */}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            {/* <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              onClick={handleSubmit(onSubmit)}\r\n            >\r\n              Submit <Icon className={classes.rightIcon}>send</Icon>\r\n            </Button> */}\r\n          </div>\r\n        </form>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 400,\r\n  },\r\n}));\r\n\r\nexport default LeaveForm;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useLeaves.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\HocForm.js",["1333","1334","1335","1336","1337","1338"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, Icon, TextField, Paper, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport * as emailjs from \"emailjs-com\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\n//import { useExpensesContext } from \"../context/expenses_context\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport { useHoc } from \"./hoc/useHoc\";\r\nimport { useAddHoc } from \"./hoc/useAddHoc\";\r\n//import { useDeleteHoc } from \"./hoc/useDeleteHoc\";\r\nimport { useUpdateHoc } from \"./hoc/useUpdateHoc\";\r\nimport { useHoccategory } from \"./hoccategory/useHoccategory\";\r\nimport { useHocwhat } from \"./hocwhat/useHocwhat\";\r\nimport { useHocwhatdetails } from \"./hocwhatdetails/useHocwhatdetails\";\r\nimport { useHocwhy } from \"./hocwhy/useHocwhy\";\r\nimport { useHocwhydetails } from \"./hocwhydetails/useHocwhydetails\";\r\nimport { useHoclocation } from \"./hoclocation/useHoclocation\";\r\n\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\n\r\nconst HocForm = ({ formdata, setFormdata, handleDialogClose, isEditId }) => {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  //const { hoc, filter, setFilter, setHocId } = useHoc();\r\n  const { hocwhat } = useHocwhat();\r\n  const { hocwhatdetails, setHocwhatdetailsId } = useHocwhatdetails();\r\n  const { hocwhy, setHocwhyId } = useHocwhy();\r\n  const { hocwhydetails, setHocwhydetailsId } = useHocwhydetails();\r\n  const { hoccategory } = useHoccategory();\r\n  const { hoclocation, setHoclocationId } = useHoclocation();\r\n  const updateHoc = useUpdateHoc();\r\n  const addHoc = useAddHoc();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const [category, setCategory] = useState(\"\" || formdata.category);\r\n  const [whatstatus, setWhatstatus] = useState(\"\" || formdata.what);\r\n  const [whystatus, setWhystatus] = useState(\"\" || formdata.why);\r\n\r\n  const { handleSubmit, control } = useForm({\r\n    defaultValues: {\r\n      ...formdata,\r\n    },\r\n  });\r\n\r\n  const handleSentEmail = (data) => {\r\n    const { date } = data;\r\n    //console.log(\"expense form\", loginLevel);\r\n    var emaildata = {\r\n      to_name: loginLevel.loginUser,\r\n      to_email: loginLevel.loginEmail,\r\n      message: `Your expenses claim application dated on ${date} has been successfully submitted for approval`,\r\n      cc_to: loginLevel.reporting_email,\r\n    };\r\n\r\n    emailjs.send(SERVICE_ID, TEMPLATE_ID, emaildata, USER_ID).then(\r\n      function (response) {\r\n        console.log(response.status, response.text);\r\n        toast({\r\n          title: `Email has sent successfully to ${emaildata.to_email}!`,\r\n          status: \"success\",\r\n        });\r\n      },\r\n      function (err) {\r\n        console.log(err);\r\n        toast({\r\n          title: `Email has fail to send to ${emaildata.to_email}!`,\r\n          status: \"warning\",\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  const onSubmit = (data, e) => {\r\n    e.preventDefault();\r\n\r\n    if (data.id) {\r\n      const { id, tableData, ...fields } = data;\r\n      updateHoc({ id, ...fields });\r\n    } else {\r\n      const { tableData, ...fields } = data;\r\n      addHoc({ ...fields, empid: loginLevel.loginUserId });\r\n      //handleSentEmail(data);\r\n    }\r\n\r\n    handleDialogClose();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setHoclocationId(\"C\");\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (whatstatus === \"\") {\r\n      setHocwhatdetailsId((prev) => (prev = \"none\"));\r\n    } else {\r\n      setHocwhatdetailsId((prev) => (prev = whatstatus));\r\n    }\r\n  }, [whatstatus]);\r\n\r\n  useEffect(() => {\r\n    if (category === \"Positive Act\") {\r\n      setHocwhyId((prev) => (prev = \"none\"));\r\n      setHocwhydetailsId((prev) => (prev = \"none\"));\r\n    } else {\r\n      setHocwhydetailsId((prev) => (prev = whystatus));\r\n    }\r\n  }, [whystatus, category]);\r\n\r\n  return (\r\n    <div>\r\n      <Paper className={classes.root}>\r\n        <Typography variant=\"h5\" component=\"h3\">\r\n          HOC FORM\r\n        </Typography>\r\n        <Typography component=\"p\">HOC Form</Typography>\r\n\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <div>\r\n            <Controller\r\n              name=\"findings\"\r\n              control={control}\r\n              defaultValue={formdata.findings}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"What is/are the findings?\"\r\n                    id=\"margin-findings\"\r\n                    name=\"findings\"\r\n                    defaultValue={formdata.findings}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    multiline\r\n                    rows={2}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  ></TextField>\r\n                );\r\n              }}\r\n              rules={{ required: \"Findings is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"risks\"\r\n              control={control}\r\n              defaultValue={formdata.risks}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"What is/are the potential hazard(s)/risk(s)?\"\r\n                    id=\"margin-risks\"\r\n                    name=\"risks\"\r\n                    defaultValue={formdata.risks}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    multiline\r\n                    rows={2}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  ></TextField>\r\n                );\r\n              }}\r\n              rules={{ required: \"Potential hazard/risk is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"category\"\r\n              control={control}\r\n              defaultValue={formdata.category}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Type/Category\"\r\n                    //type=\"date\"\r\n                    id=\"margin-category\"\r\n                    name=\"formdata.category\"\r\n                    value={value}\r\n                    className={classes.textField}\r\n                    onChange={(e) => {\r\n                      onChange(e.target.value);\r\n                      setCategory((prev) => (prev = e.target.value));\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    // InputLabelProps={{\r\n                    //   shrink: true,\r\n                    // }}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"\">None</MenuItem>\r\n                    {hoccategory &&\r\n                      hoccategory.map((rec) => {\r\n                        return (\r\n                          <MenuItem key={rec.id} value={rec.description}>\r\n                            {rec.description}\r\n                          </MenuItem>\r\n                        );\r\n                      })}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              rules={{ required: \"Category is required\" }}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <Controller\r\n              name=\"what\"\r\n              control={control}\r\n              defaultValue={formdata.what}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"What\"\r\n                    id=\"margin-what\"\r\n                    name=\"what\"\r\n                    defaultValue={formdata.what}\r\n                    className={classes.textField}\r\n                    onChange={(e) => {\r\n                      onChange(e.target.value);\r\n                      setWhatstatus((prev) => (prev = e.target.value));\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"\">None</MenuItem>\r\n                    {hocwhat &&\r\n                      hocwhat\r\n                        .filter((r) => {\r\n                          if (category === \"Positive Act\") {\r\n                            return r.positiveact;\r\n                          } else {\r\n                            return r.unsafeact;\r\n                          }\r\n                        })\r\n                        .map((rec) => {\r\n                          return (\r\n                            <MenuItem key={rec.id} value={rec.description}>\r\n                              {rec.description}\r\n                            </MenuItem>\r\n                          );\r\n                        })}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"What is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"what_details\"\r\n              control={control}\r\n              defaultValue={formdata.what_details}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"What Details\"\r\n                    id=\"margin-whatdetails\"\r\n                    name=\"what_details\"\r\n                    defaultValue={formdata.what_details}\r\n                    value={value}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"\">None</MenuItem>\r\n                    {hocwhatdetails &&\r\n                      hocwhatdetails\r\n                        //.filter((r) => r.group === \"What Details\")\r\n                        .map((rec) => {\r\n                          return (\r\n                            <MenuItem key={rec.id} value={rec.description}>\r\n                              {rec.description}\r\n                            </MenuItem>\r\n                          );\r\n                        })}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"What detail is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"why\"\r\n              control={control}\r\n              defaultValue={formdata.why}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Why\"\r\n                    //type=\"number\"\r\n                    id=\"standard-why\"\r\n                    name=\"why\"\r\n                    defaultValue={formdata.why}\r\n                    className={classes.textField}\r\n                    //onChange={onChange}\r\n                    onChange={(e) => {\r\n                      onChange(e.target.value);\r\n                      setWhystatus((prev) => (prev = e.target.value));\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"\">None</MenuItem>\r\n                    {hocwhy &&\r\n                      hocwhy\r\n                        //.filter((r) => category === \"Positive Art\")\r\n                        .map((rec) => {\r\n                          return (\r\n                            <MenuItem key={rec.id} value={rec.description}>\r\n                              {rec.description}\r\n                            </MenuItem>\r\n                          );\r\n                        })}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Why is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"why_details\"\r\n              control={control}\r\n              defaultValue={formdata.why_details}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Why Details\"\r\n                    id=\"margin-whydetails\"\r\n                    name=\"why_details\"\r\n                    defaultValue={formdata.why_details}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"\">None</MenuItem>\r\n                    {hocwhydetails &&\r\n                      hocwhydetails.map((rec) => {\r\n                        return (\r\n                          <MenuItem key={rec.id} value={rec.description}>\r\n                            {rec.description}\r\n                          </MenuItem>\r\n                        );\r\n                      })}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Why detail is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"discussion\"\r\n              control={control}\r\n              defaultValue={formdata.discussion}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Did a conversation take place?\"\r\n                    id=\"margin-discussion\"\r\n                    name=\"discussion\"\r\n                    defaultValue={formdata.discussion}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"Yes\">Yes</MenuItem>\r\n                    <MenuItem value=\"No\">No</MenuItem>\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"action\"\r\n              control={control}\r\n              defaultValue={formdata.action}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Was there an agreed remedial/corrective or preventive action? \"\r\n                    id=\"margin-action\"\r\n                    name=\"action\"\r\n                    defaultValue={formdata.action}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    multiline\r\n                    rows={2}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  ></TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"isfollowup\"\r\n              control={control}\r\n              defaultValue={formdata.isfollowup}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Follow-up required?\"\r\n                    id=\"standard-isfollowup\"\r\n                    name=\"isfollowup\"\r\n                    defaultValue={formdata.isfollowup}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"Yes\">Yes</MenuItem>\r\n                    <MenuItem value=\"No\">No</MenuItem>\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"IC No required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"isworkrelated\"\r\n              control={control}\r\n              defaultValue={formdata.isworkrelated}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Work Related?\"\r\n                    id=\"margin-workrelated\"\r\n                    name=\"isworkrelated\"\r\n                    defaultValue={formdata.isworkrelated}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"Yes\">Yes</MenuItem>\r\n                    <MenuItem value=\"No\">No</MenuItem>\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"raisedby\"\r\n              control={control}\r\n              defaultValue={formdata.raisedby}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Raised By\"\r\n                    id=\"margin-raisedby\"\r\n                    name=\"raisedby\"\r\n                    defaultValue={formdata.raisedby}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    inputProps={{ readOnly: true }}\r\n                  ></TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"raisedon\"\r\n              control={control}\r\n              defaultValue={formdata.raisedon}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Raised On\"\r\n                    id=\"margin-raisedon\"\r\n                    name=\"raisedon\"\r\n                    type=\"date\"\r\n                    defaultValue={formdata.raisedon}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  ></TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"company\"\r\n              control={control}\r\n              defaultValue={formdata.company}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Company\"\r\n                    id=\"margin-company\"\r\n                    name=\"company\"\r\n                    defaultValue={formdata.company}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    inputProps={{ readOnly: true }}\r\n                  ></TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"location\"\r\n              control={control}\r\n              defaultValue={formdata.location}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Location\"\r\n                    id=\"margin-location\"\r\n                    name=\"location\"\r\n                    defaultValue={formdata.location}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"\">None</MenuItem>\r\n                    {hoclocation &&\r\n                      hoclocation.map((rec) => {\r\n                        return (\r\n                          <MenuItem key={rec.id} value={rec.name}>\r\n                            {rec.name}\r\n                          </MenuItem>\r\n                        );\r\n                      })}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n          {/* <div>\r\n            <Controller\r\n              name=\"department\"\r\n              control={control}\r\n              defaultValue={formdata.department}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Department\"\r\n                    id=\"margin-department\"\r\n                    name=\"department\"\r\n                    defaultValue={formdata.department}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  ></TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div> */}\r\n          <div>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              //onClick={() => handleSubmit(onSubmit)()}\r\n            >\r\n              Save <Icon className={classes.rightIcon}>send</Icon>\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 500,\r\n  },\r\n}));\r\n\r\nexport default HocForm;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useExpenses.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\useAddTrainings.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\useUpdateTrainings.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\useTrainings.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\institutes\\useInstitutes.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\institutes\\useUpdateInstitutes.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\DepartmentsTable.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\institutes\\useAddInstitutes.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\institutes\\useDeleteInstitutes.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\DeductionsTable.js",["1339"],"import React, { useEffect} from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport { usePayItems } from \"./payitems/usePayItems\";\r\nimport { useUpdatePayItems } from \"./payitems/useUpdatePayItems\";\r\nimport { useDeletePayItems } from \"./payitems/useDeletePayItems\";\r\nimport { useAddPayItems } from \"./payitems/useAddPayItems\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n  },\r\n];\r\n\r\nexport default function UpdateDeductions() {\r\n  const classes = useStyles();\r\n  const { payitems, setPayItemId } = usePayItems();\r\n  const updatePayItems = useUpdatePayItems();\r\n  const deletePayItems = useDeletePayItems();\r\n  const addPayItems = useAddPayItems();\r\n\r\n    \r\n  const update_Deduction = (data) => {\r\n    const { id, rec_id, ...fields } = data;\r\n    updatePayItems({ id, ...fields });\r\n  };\r\n\r\n  const add_Deduction = (data) => {\r\n    const fields = {...data, pay_type:\"Deductions\"}\r\n    addPayItems(fields);\r\n  };\r\n\r\n  const delete_Deduction = (data) => {\r\n    const { id } = data;\r\n    deletePayItems(id);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setPayItemId(\"Deductions\");\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={payitems}\r\n          title=\"Deductions\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  add_Deduction(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  update_Deduction(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  delete_Deduction(oldData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpEducations.js",["1340"],"import React, { useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useEducations } from \"./educations/useEducations\";\r\nimport { useUpdateEducations } from \"./educations/useUpdateEducations\";\r\nimport { useAddEducations } from \"./educations/useAddEducations\";\r\nimport { useDeleteEducations } from \"./educations/useDeleteEducations\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Institution\",\r\n    field: \"institution\",\r\n  },\r\n  {\r\n    title: \"Course\",\r\n    field: \"course\",\r\n  },\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editComponent: (props) => (\r\n      <TextField\r\n        defaultValue={props.value || new Date()}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        type=\"date\"\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editComponent: (props) => (\r\n      <TextField\r\n        defaultValue={props.value || new Date()}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        type=\"date\"\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    title: \"Archievement\",\r\n    field: \"archievement\",\r\n  },\r\n\r\n  { title: \"Grade\", field: \"grade\" },\r\n  {\r\n    title: \"Remark\",\r\n    field: \"remark\",\r\n  },\r\n];\r\n\r\nexport default function Emp_Educations({\r\n  educationdata,\r\n  setEducationdata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const { educations, setEducationId } = useEducations();\r\n  const updateEducations = useUpdateEducations();\r\n  const addEducations = useAddEducations();\r\n  const deleteEducations = useDeleteEducations();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n\r\n  useEffect(() => {\r\n    setEducationId(editEmployeeID);\r\n  }, []);\r\n\r\n  const update_Education = (data) => {\r\n    const { id, rec_id, tableData, ...fields } = data;\r\n    updateEducations({ id, ...fields });\r\n  };\r\n\r\n  const add_Education = (data) => {\r\n    addEducations({ ...data, empid: editEmployeeID });\r\n  };\r\n\r\n  const delete_Education = (data) => {\r\n    const { id } = data;\r\n    deleteEducations(id);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={educations}\r\n          title=\"Education\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  add_Education(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  update_Education(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  // const dataDelete = [...educationdata];\r\n                  // const index = oldData.tableData.id;\r\n                  // dataDelete.splice(index, 1);\r\n                  delete_Education(oldData);\r\n\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\AllowancesTable.js",["1341"],"import React, { useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { usePayItems } from \"./payitems/usePayItems\";\r\nimport { useUpdatePayItems } from \"./payitems/useUpdatePayItems\";\r\nimport { useDeletePayItems } from \"./payitems/useDeletePayItems\";\r\nimport { useAddPayItems } from \"./payitems/useAddPayItems\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n  },\r\n];\r\n\r\nexport default function UpdateAllowances() {\r\n  const classes = useStyles();\r\n  const { payitems, setPayItemId } = usePayItems();\r\n  const updatePayItems = useUpdatePayItems();\r\n  const deletePayItems = useDeletePayItems();\r\n  const addPayItems = useAddPayItems();\r\n\r\n  const update_Allowance = (data) => {\r\n    const { id, rec_id, ...fields } = data;\r\n    updatePayItems({ id, ...fields });\r\n  };\r\n\r\n  const add_Allowance = async (data) => {\r\n    const fields = { ...data, pay_type: \"Allowances\" };\r\n    addPayItems(fields);\r\n  };\r\n\r\n  const delete_Allowance = (data) => {\r\n    const { id } = data;\r\n    deletePayItems(id);\r\n  };\r\n\r\n  useEffect(() => {\r\n   setPayItemId(\"Allowances\");\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={payitems}\r\n          title=\"Allowances\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  add_Allowance(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  update_Allowance(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  delete_Allowance(oldData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpExperiences.js",["1342","1343"],"import React, { useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\nimport { useExperiences } from \"./experiences/useExperiences\";\r\nimport { useUpdateExperiences } from \"./experiences/useUpdateExperiences\";\r\nimport { useAddExperiences } from \"./experiences/useAddExperiences\";\r\nimport { useDeleteExperiences } from \"./experiences/useDeleteExperiences\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Company\",\r\n    field: \"company\",\r\n  },\r\n  {\r\n    title: \"Location\",\r\n    field: \"location\",\r\n  },\r\n  {\r\n    title: \"Position\",\r\n    field: \"position\",\r\n  },\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        defaultValue={props.value || new Date()}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        type=\"date\"\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        defaultValue={props.value || new Date()}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        type=\"date\"\r\n      />\r\n    ),\r\n  },\r\n  { title: \"Remark\", field: \"remark\" },\r\n];\r\n\r\nexport default function Emp_Experiences({\r\n  experiencedata,\r\n  setExperiencedata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const { experiences, setExperienceId } = useExperiences();\r\n  const updateExperiences = useUpdateExperiences();\r\n  const addExperiences = useAddExperiences();\r\n  const deleteExperiences = useDeleteExperiences();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n\r\n  useEffect(() => {\r\n    setExperienceId(editEmployeeID);\r\n  }, []);\r\n\r\n  const update_Experience = (data) => {\r\n    const { id, rec_id, tableData, ...fields } = data;\r\n    updateExperiences({ id, ...fields });\r\n  };\r\n\r\n  const add_Experience = (data) => {\r\n    addExperiences({ ...data, empid: editEmployeeID });\r\n  };\r\n\r\n  const delete_Experience = (data) => {\r\n    const { id } = data;\r\n    deleteExperiences(id);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={experiences}\r\n          title=\"Experience\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  add_Experience(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  update_Experience(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  delete_Experience(oldData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpFamily.js",["1344","1345"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {  TextField, MenuItem } from \"@material-ui/core\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\n\r\nimport { useFamily } from \"./family/useFamily\";\r\nimport { useUpdateFamily } from \"./family/useUpdateFamily\";\r\nimport { useAddFamily } from \"./family/useAddFamily\";\r\nimport { useDeleteFamily } from \"./family/useDeleteFamily\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n  },\r\n  {\r\n    title: \"Relationship\",\r\n    field: \"relationship\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        //defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        style={{ width: 100 }}\r\n        value={props.value}\r\n        select\r\n      >\r\n        <MenuItem value=\"Father\">Father</MenuItem>\r\n        <MenuItem value=\"Mother\">Mother</MenuItem>\r\n        <MenuItem value=\"Husband\">Husband</MenuItem>\r\n        <MenuItem value=\"Wife\">Wife</MenuItem>\r\n        <MenuItem value=\"Daughter\">Daughter</MenuItem>\r\n        <MenuItem value=\"Son\">Son</MenuItem>\r\n        <MenuItem value=\"Son-in-law\">Son-in-law</MenuItem>\r\n        <MenuItem value=\"Daughter-in-law\">Daughter-in-law</MenuItem>\r\n      </TextField>\r\n    ),\r\n  },\r\n  {\r\n    title: \"BIrth Date\",\r\n    field: \"birth_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editComponent: (props) => (\r\n      <TextField\r\n        defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        type=\"date\"\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    title: \"Phone\",\r\n    field: \"phone\",\r\n  },\r\n  { title: \"Age\", field: \"age\", type: \"numeric\" },\r\n];\r\n\r\nexport default function Emp_Family() {\r\n  const classes = useStyles();\r\n  const { family,  setFamilyId } = useFamily();\r\n  const updateFamily = useUpdateFamily();\r\n  const addFamily = useAddFamily();\r\n  const deleteFamily = useDeleteFamily();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n\r\n  const update_Family = (data) => {\r\n    const { id, rec_id, tableData, ...fields } = data;\r\n    updateFamily({ id, ...fields });\r\n  };\r\n\r\n  const add_Family = (data) => {\r\n    addFamily({ ...data, empid: editEmployeeID });\r\n  };\r\n\r\n  const delete_Family = (data) => {\r\n    const { id } = data;\r\n    deleteFamily(id);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setFamilyId(editEmployeeID);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={family}\r\n          title=\"Family\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  // setFamilydata([...familydata, newData]);\r\n                  add_Family(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  update_Family(newData);\r\n\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  delete_Family(oldData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\payslips\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\designations\\useAddDesignations.js",[],"D:\\react-myprojects\\hrms-demo\\src\\helpers\\Utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\designations\\useDeleteDesignations.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\designations\\useUpdateDesignations.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useLeavesStatus.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\usePayrunStatus.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useHocPeriod.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useLeavesPeriod.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmpPersonal.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewTrainings.js",["1346"],"import React, { useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useTrainingsContext } from \"../context/trainings_context\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Institute\",\r\n    field: \"institute\",\r\n  },\r\n  {\r\n    title: \"Course\",\r\n    field: \"course\",\r\n  },\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    filtering: false,\r\n    dateSetting: { locale: \"en-GB\" },\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    filtering: false,\r\n    dateSetting: { locale: \"en-GB\" },\r\n  },\r\n  {\r\n    title: \"Expiry Date\",\r\n    field: \"expiry_date\",\r\n    type: \"date\",\r\n    filtering: false,\r\n    dateSetting: { locale: \"en-GB\" },\r\n  },\r\n];\r\n\r\nexport default function Emp_ViewFamily() {\r\n  const classes = useStyles();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n  const { singlebatch_training, getSingleBatchTraining } =\r\n    useTrainingsContext();\r\n\r\n  useEffect(() => {\r\n    getSingleBatchTraining(editEmployeeID);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={singlebatch_training}\r\n          title=\"\"\r\n          options={{\r\n            search: false,\r\n            toolbar: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewLeaves.js",["1347"],"import React, { useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    filtering: false,\r\n    dateSetting: { locale: \"en-GB\" },\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    filtering: false,\r\n    dateSetting: { locale: \"en-GB\" },\r\n  },\r\n  {\r\n    title: \"Reason\",\r\n    field: \"Reason\",\r\n  },\r\n  {\r\n    title: \"No of Days\",\r\n    field: \"no_of_days\",\r\n    type: \"numeric\",\r\n    filtering: false,\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    field: \"status\",\r\n  },\r\n];\r\n\r\nexport default function Emp_ViewFamily() {\r\n  const classes = useStyles();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n  const { singlebatch_leave, getSingleBatchLeave } =\r\n    useLeavesContext();\r\n\r\n  useEffect(() => {\r\n    getSingleBatchLeave(editEmployeeID);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={singlebatch_leave}\r\n          title=\"\"\r\n          options={{\r\n            search: false,\r\n            toolbar: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useExpensesPeriod.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDailyAllowsPeriod.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewExperiences.js",["1348"],"import React, { useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Company\",\r\n    field: \"company\",\r\n  },\r\n  {\r\n    title: \"Location\",\r\n    field: \"location\",\r\n  },\r\n  {\r\n    title: \"Position\",\r\n    field: \"position\",\r\n  },\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n  },\r\n];\r\n\r\nexport default function Emp_Experiences({\r\n  experiencedata,\r\n  setExperiencedata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n  const {\r\n    loadSingleBatchExperience,\r\n    singlebatchexperience,\r\n    \r\n  } = useTablesContext();\r\n\r\n  useEffect(() => {\r\n    //console.log(linkid);\r\n    loadSingleBatchExperience(editEmployeeID);\r\n  }, []);\r\n\r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={singlebatchexperience}\r\n          title=\"Experience\"\r\n          options={{\r\n            search: false,\r\n            toolbar: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewEducations.js",["1349"],"import React, { useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Institution\",\r\n    field: \"institution\",\r\n  },\r\n  {\r\n    title: \"Course\",\r\n    field: \"course\",\r\n  },\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n  },\r\n];\r\n\r\nexport default function Emp_Educations() {\r\n  const classes = useStyles();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n\r\n  const {\r\n    loadSingleBatchEducation,\r\n    singlebatcheducation,\r\n    singlebatch_education_loading,\r\n  } = useTablesContext();\r\n\r\n  useEffect(() => {\r\n    loadSingleBatchEducation(editEmployeeID);\r\n  }, []);\r\n\r\n  if (singlebatch_education_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading...Education</h2>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={singlebatcheducation}\r\n          title=\"Experience\"\r\n          options={{\r\n            search: false,\r\n            toolbar: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewFamily.js",["1350"],"import React, { useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n    filtering: false,\r\n  },\r\n  {\r\n    title: \"Relationship\",\r\n    field: \"relationship\",\r\n  },\r\n  {\r\n    title: \"BIrth Date\",\r\n    field: \"birth_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    filtering: false,\r\n  },\r\n  {\r\n    title: \"Phone\",\r\n    field: \"phone\",\r\n  },\r\n];\r\n\r\nexport default function Emp_ViewFamily() {\r\n  const classes = useStyles();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n  const {\r\n    loadSingleBatchFamily,\r\n     singlebatchfamily,\r\n     \r\n  } = useTablesContext();\r\n\r\n  useEffect(() => {\r\n    loadSingleBatchFamily(editEmployeeID);\r\n  }, []);\r\n  \r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={singlebatchfamily}\r\n          title=\"Family\"\r\n          options={{\r\n            search: false,\r\n            toolbar: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\departments\\useAddDepartments.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hoclocation\\useHoclocation.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\useDeletePayItems.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\useAddPayItems.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\useUpdatePayItems.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\usePayItems.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\useDeleteEducations.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\useDeleteExperiences.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\useAddExperiences.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\useUpdateExperiences.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\useExperiences.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\family\\useAddFamily.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\family\\useDeleteFamily.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\family\\useUpdateFamily.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\family\\useFamily.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\useAddEducations.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\useUpdateEducations.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\useEducations.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\departments\\useDeleteDepartments.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\departments\\useUpdateDepartments.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hoclocation\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\family\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useUpdateHoc.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useAddHoc.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhy\\useHocwhy.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhydetails\\useHocwhydetails.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhatdetails\\useHocwhatdetails.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhat\\useHocwhat.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hoccategory\\useHoccategory.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hoccategory\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhat\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhydetails\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhatdetails\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhy\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableManager.js",["1351"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { TextField, MenuItem, Button, Icon } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport * as emailjs from \"emailjs-com\";\r\n//import { useRecoilState } from \"recoil\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport CheckCircleOutlineOutlinedIcon from \"@material-ui/icons/CheckCircleOutlineOutlined\";\r\n//import { loginLevelState } from \"./data/atomdata\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\n\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\nconst ADMINMANAGER_EMAIL = process.env.ADMINMANAGER_EMAIL;\r\nconst FILTERSTRING = \"Pending\";\r\n\r\nconst columns = [\r\n  { title: \"Name\", field: \"name\", editable: \"never\" },\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Description\",\r\n    field: \"description\",\r\n    editable: \"never\",\r\n  },\r\n  { title: \"Amount\", field: \"amount\", type: \"currency\", editable: \"never\" },\r\n  {\r\n    title: \"Status\",\r\n    field: \"status\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        //defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        style={{ width: 100 }}\r\n        value={props.value}\r\n        select\r\n      >\r\n        <MenuItem value=\"Pending\">Pending</MenuItem>\r\n        <MenuItem value=\"Approve\">Approve</MenuItem>\r\n        <MenuItem value=\"Reject\">Reject</MenuItem>\r\n        <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n      </TextField>\r\n    ),\r\n  },\r\n];\r\n\r\nexport default function ExpenseTable({\r\n  expensesdata,\r\n  setExpensesdata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  //const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  //const [isLoad, setIsLoad] = useState(false);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const { employees } = useEmployees();\r\n  const {\r\n    editExpenseID,\r\n    updateExpense,\r\n    update_expense_error,\r\n    //expenses_loading,\r\n    deleteExpense,\r\n    loadPendingExpenses,\r\n  } = useExpensesContext();\r\n\r\n  // useEffect(() => {\r\n  //   setExpensesdata(expenses);\r\n  //   console.log(expensesdata)\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   loadEmployees();\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   if (expenses) {\r\n  //     setExpensesdata(expenses);\r\n  //     console.log(\"expenses\", expenses, expensesdata)\r\n  //   } else {\r\n  //     setIsLoad(!isLoad);\r\n  //   }\r\n  // }, [isLoad]);\r\n\r\n  // const handleExpenseFormDialogOpen = () => {\r\n  //   setIsDialogOpen(true);\r\n  // };\r\n\r\n  const handleExpenseFormDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n    loadPendingExpenses(FILTERSTRING);\r\n  };\r\n\r\n  // const handleExpenseFormAlertOpen = () => {\r\n  //   setIsAlertOpen(true);\r\n  // };\r\n\r\n  const handleExpenseFormAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleExpenseFormOnDeleteConfirm = () => {\r\n    const id = editExpenseID;\r\n    deleteExpense(id);\r\n    loadPendingExpenses(FILTERSTRING);\r\n  };\r\n\r\n  const handleSentEmail = (data, result) => {\r\n    const { date, empid, name } = data;\r\n    const emp = employees\r\n      .filter((f) => f.id === empid)\r\n      .map((r) => {\r\n        return { ...r };\r\n      });\r\n    // console.log(\"leave form\", emp[0].email, data);\r\n    var emaildata = {\r\n      to_name: name,\r\n      to_email: emp[0].email,\r\n      message: `Your expenses claim application dated on ${date} has been ${result}!`,\r\n      cc_to: ADMINMANAGER_EMAIL,\r\n    };\r\n\r\n    emailjs.send(SERVICE_ID, TEMPLATE_ID, emaildata, USER_ID).then(\r\n      function (response) {\r\n        console.log(response.status, response.text);\r\n        toast({\r\n          title: `Email has sent successfully to ${emaildata.to_email}!`,\r\n          status: \"success\",\r\n        });\r\n      },\r\n      function (err) {\r\n        console.log(err);\r\n        toast({\r\n          title: `Email has fail to send to ${emaildata.to_email}!`,\r\n          status: \"warning\",\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  // const Save_ExpenseData = () => {\r\n  //   expensesdata.forEach((data) => {\r\n  //     const { id } = data;\r\n  //     if (id) {\r\n  //       const { id, rec_id, tableData, ...fields } = data;\r\n  //       updateExpense({ id, ...fields });\r\n  //     }\r\n  //   });\r\n\r\n  //   handleDialogClose();\r\n  //};\r\n\r\n  const Approve_ExpenseData = () => {\r\n    expensesdata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        updateExpense({ id: rec.id, status: \"Approved\" });\r\n        //update leavesdata\r\n        if (!update_expense_error) {\r\n          const recdata = expensesdata.filter((r) => r.id === rec.id);\r\n          recdata[0].status = \"Approved\";\r\n        }\r\n        //sent email\r\n        handleSentEmail(rec, \"Approved\");\r\n      }\r\n    });\r\n    expensesdata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  const Reject_ExpenseData = () => {\r\n    expensesdata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        updateExpense({ id: rec.id, status: \"Rejected\" });\r\n        //update leavesdata\r\n        if (!update_expense_error) {\r\n          const recdata = expensesdata.filter((r) => r.id === rec.id);\r\n          recdata[0].status = \"Rejected\";\r\n        }\r\n        //sent email\r\n        handleSentEmail(rec, \"Rejected\");\r\n      }\r\n    });\r\n    expensesdata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  if (!expensesdata) {\r\n    return (\r\n      <div>\r\n        <h2>Loading...Expenses</h2>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={expensesdata}\r\n          title=\"Expenses Claims Application\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <CheckCircleOutlineOutlinedIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          // editable={{\r\n          //   onRowUpdate: (newData, oldData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         const dataUpdate = [...expensesdata];\r\n          //         const index = oldData.tableData.id;\r\n          //         dataUpdate[index] = newData;\r\n          //         setExpensesdata([...dataUpdate]);\r\n          //         //approve_Expense(newData);\r\n\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          // }}\r\n          options={{\r\n            filtering: true,\r\n            selection: true,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Approve_ExpenseData}\r\n                  >\r\n                    Approve <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Reject_ExpenseData}\r\n                  >\r\n                    Reject <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                  {/* <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Save_ExpenseData}\r\n                  >\r\n                    Update <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button> */}\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <CustomDialog\r\n          isOpen={isDialogOpen}\r\n          handleClose={handleExpenseFormDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscree={false}\r\n        >\r\n          <ExpenseForm handleDialogClose={handleExpenseFormDialogClose} />\r\n        </CustomDialog>\r\n\r\n        <AlertDialogBox\r\n          onClose={handleExpenseFormAlertClose}\r\n          onConfirm={handleExpenseFormOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete Expenses\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableView.js",["1352","1353"],"D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableViewManager.js",["1354","1355","1356"],"D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTableViewManager.js",["1357"],"import React, { useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import {\r\n  //payPeriodState,\r\n  //payPeriodEndMonthState,\r\n  //payPeriodEmpIdState,\r\n//} from \"./data/atomdata\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\n\r\nconst FILTERSTRING = \"Verified\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Batch\",\r\n    field: \"payrun\",\r\n    editable: \"never\",\r\n  },\r\n  // { title: \"Period\", field: \"period\", editable: \"never\" },\r\n  // {\r\n  //   title: \"PayDate\",\r\n  //   field: \"pay_date\",\r\n  //   type: \"date\",\r\n  //   dateSetting: { locale: \"en-GB\" },\r\n  //   editable: \"never\",\r\n  // },\r\n  {\r\n    title: \"Wages\",\r\n    field: \"totalwages\",\r\n    type: \"currency\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"TAP Amount\",\r\n    field: \"totaltap\",\r\n    type: \"currency\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"SCP Amount\",\r\n    field: \"totalscp\",\r\n    type: \"currency\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Site Allowances\",\r\n    field: \"totalsitesallows\",\r\n    type: \"currency\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Expenses Claims\",\r\n    field: \"totalexpensesclaims\",\r\n    type: \"currency\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Allowances\",\r\n    field: \"totalallows\",\r\n    type: \"currency\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Deductions\",\r\n    field: \"totaldeducts\",\r\n    type: \"currency\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Payroll\",\r\n    field: \"totalpayroll\",\r\n    type: \"currency\",\r\n    editable: \"never\",\r\n  },\r\n  // { title: \"Bank Name\", field: \"bank_name\" },\r\n  // { title: \"Bank AC No\", field: \"bank_accno\" },\r\n  { title: \"Status\", field: \"status\", editable: \"never\" },\r\n];\r\n\r\nexport default function PayslipTableVIew() {\r\n  //et history = useHistory();\r\n  const classes = useStyles();\r\n  \r\n  const {\r\n    batchpayrun,\r\n    getBatchPayrun,\r\n    //batchpayrun_loading,\r\n    //batchpayrun_error,\r\n    //loadPendingPayslips,\r\n  } = usePayslipsContext();\r\n  //const { loadEmployees, employees } = useEmployeesContext();\r\n\r\n  useEffect(() => {\r\n    getBatchPayrun(FILTERSTRING);\r\n  }, []);\r\n\r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={batchpayrun}\r\n          title=\"Payslips\"\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"black\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\helpers\\CardLayout3.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\PrintPaySummary.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\PaySummary.js",["1358"],"import React, { useState, useEffect } from \"react\";\r\nimport currency from \"currency.js\";\r\n//import PrintPaySummary from \"./PrintPaySummary\";\r\nimport {\r\n  Box,\r\n  //Heading,\r\n  //Text,\r\n  //Table,\r\n  //Thead,\r\n  //Tbody,\r\n  //Tr,\r\n  //Th,\r\n  //Td,\r\n  //chakra,\r\n} from \"@chakra-ui/react\";\r\n//import { TriangleDownIcon, TriangleUpIcon } from \"@chakra-ui/icons\";\r\nimport MaterialTable from \"material-table\";\r\nimport {  Grid, TextField } from \"@material-ui/core\";\r\n//import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\n//import { formatPriceZero } from \"../helpers/Utils\";\r\nimport { payrunState } from \"./data/atomdata\";\r\n//import { usePayslipsContext } from \"../context/payslips_context\";\r\n//import { ComponentToPrint } from \"./ComponentToPrint\";\r\n//import PaySummaryTable from \"./PaySummaryTable\";\r\n\r\n// const initial_state = [\r\n//   {\r\n//     totalwages: 0,\r\n//     totaltap: 0,\r\n//     totalscp: 0,\r\n//     totalallows: 0,\r\n//     totaldeducts: 0,\r\n//     totalpayroll: 0,\r\n//   },\r\n// ];\r\n\r\nconst PaySummary = ({ singlebatchpayslip }) => {\r\n  //const classes = useStyles();\r\n  //const componentRef = useRef();\r\n  //const [state, setState] = useState(initial_state);\r\n  const [payrundata, setPayrundata] = useRecoilState(payrunState);\r\n  //const [payrunstatus, setPayrunStatus] = useRecoilState(payrunStatusState);\r\n  const [isCalc, setIsCalc] = useState(true);\r\n  //const { payrun, updatePayrun, payslip_period } = usePayslipsContext();\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Name\",\r\n      field: \"name\",\r\n      editable: \"never\",\r\n    },\r\n    {\r\n      title: \"Wages\",\r\n      field: \"wages_bnd\",\r\n      editable: \"never\",\r\n      type: \"currency\",\r\n    },\r\n    {\r\n      title: \"TAP Amount\",\r\n      field: \"tap_amount_bnd\",\r\n      editable: \"never\",\r\n      type: \"currency\",\r\n    },\r\n    {\r\n      title: \"SCP Amount\",\r\n      field: \"scp_amount_bnd\",\r\n      editable: \"never\",\r\n      type: \"currency\",\r\n    },\r\n    {\r\n      title: \"Site Allows\",\r\n      field: \"site_allows_bnd\",\r\n      editable: \"never\",\r\n      type: \"currency\",\r\n    },\r\n    {\r\n      title: \"Exps Claims\",\r\n      field: \"expenses_claims_bnd\",\r\n      editable: \"never\",\r\n      type: \"currency\",\r\n    },\r\n    {\r\n      title: \"Allowances\",\r\n      field: \"total_allowances_bnd\",\r\n      editable: \"never\",\r\n      type: \"currency\",\r\n    },\r\n    {\r\n      title: \"Deductions\",\r\n      field: \"total_deductions_bnd\",\r\n      editable: \"never\",\r\n      type: \"currency\",\r\n    },\r\n    {\r\n      title: \"Nett Pay\",\r\n      field: \"nett_pay_bnd\",\r\n      editable: \"never\",\r\n      type: \"currency\",\r\n    },\r\n  ];\r\n\r\n  // const columns1 = [\r\n  //   {\r\n  //     Header: \"Name\",\r\n  //     accessor: \"name\",\r\n  //   },\r\n  //   {\r\n  //     Header: \"Wages\",\r\n  //     accessor: \"wages_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n\r\n  //   {\r\n  //     Header: \"TAP Amount\",\r\n  //     accessor: \"tap_amount_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  //   {\r\n  //     Header: \"SCP Amount\",\r\n  //     accessor: \"scp_amount_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  //   {\r\n  //     Header: \"Site Allows\",\r\n  //     accessor: \"site_allows_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  //   {\r\n  //     Header: \"Exps Claims\",\r\n  //     accessor: \"expenses_claims_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  //   {\r\n  //     Header: \"Allowances\",\r\n  //     accessor: \"total_allowances_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  //   {\r\n  //     Header: \"Deductions\",\r\n  //     accessor: \"total_deductions_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  //   {\r\n  //     Header: \"Nett Pay\",\r\n  //     accessor: \"nett_pay_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  // ];\r\n\r\n  // const exportPdfTable = () => {\r\n  //   PrintPaySummary((singlebatchpayslip = { singlebatchpayslip }));\r\n  // };\r\n\r\n  const handleCalcTotals = () => {\r\n    const data = singlebatchpayslip;\r\n    const totalwages = data.reduce((acc, item) => {\r\n      return acc + item.wages_bnd;\r\n    }, 0);\r\n    const totalsitesallows = data.reduce((acc, item) => {\r\n      return acc + item.site_allows_bnd;\r\n    }, 0);\r\n    const totalexpclaims = data.reduce((acc, item) => {\r\n      return acc + item.expenses_claims_bnd;\r\n    }, 0);\r\n    const totalallows = data.reduce((acc, item) => {\r\n      return acc + item.total_allowances_bnd;\r\n    }, 0);\r\n    const totaldeducts = data.reduce((acc, item) => {\r\n      return acc + item.total_deductions_bnd;\r\n    }, 0);\r\n    const totaltap = data.reduce((acc, item) => {\r\n      return acc + item.tap_amount_bnd;\r\n    }, 0);\r\n    const totalscp = data.reduce((acc, item) => {\r\n      return acc + item.scp_amount_bnd;\r\n    }, 0);\r\n    const totalpayroll = data.reduce((acc, item) => {\r\n      return acc + item.nett_pay_bnd;\r\n    }, 0);\r\n\r\n    setPayrundata({\r\n      ...payrundata,\r\n      totalpayroll: totalpayroll,\r\n      totalwages: totalwages,\r\n      totaltap: totaltap,\r\n      totalscp: totalscp,\r\n      totalallows: totalallows,\r\n      totaldeducts: totaldeducts,\r\n      totalsitesallows: totalsitesallows,\r\n      totalexpensesclaims: totalexpclaims,\r\n    });\r\n    // payrun\r\n    //   .filter((r) => r.payrun === payslip_period)\r\n    //   .map((rec) => {\r\n    //     //update payrun\r\n    //     return updatePayrun({\r\n    //       id: rec.id,\r\n    //       totalpayroll: totalpayroll,\r\n    //       totalwages: totalwages,\r\n    //       totaltap: totaltap,\r\n    //       totalscp: totalscp,\r\n    //       totalallows: totalallows,\r\n    //       totaldeducts: totaldeducts,\r\n    //       totalsitesallows: totalsitesallows,\r\n    //       totalexpensesclaims: totalexpclaims,\r\n    //     });\r\n    //   });\r\n    // console.log(\"payrundata\", payrundata);\r\n    // console.log(\r\n    //   \"totals\",\r\n    //   totalpayroll,\r\n    //   totalwages,\r\n    //   totaltap,\r\n    //   totalscp,\r\n    //   totalallows,\r\n    //   totaldeducts\r\n    // );\r\n  };\r\n\r\n  // const handleSaveCalcTotals = (e) => {\r\n  //   e.preventDefault();\r\n  //   handleCalcTotals();\r\n  //};\r\n\r\n  useEffect(() => {\r\n    handleCalcTotals();\r\n    setIsCalc(false);\r\n  }, [isCalc]);\r\n\r\n  return (\r\n    <div>\r\n      {/* <div style={{ display: \"none\" }}> */}\r\n      <div>\r\n        {/* <div style={{ border: \"1px solid black\" }} align=\"center\">\r\n          <button onClick={() => exportPdfTable()}>\r\n            <Heading size=\"sm\">Print Payroll Summary Report!</Heading>\r\n          </button>\r\n        </div> */}\r\n        {/* <div>\r\n          <div style={{ display: \"none\" }}>\r\n            <ComponentToPrint ref={componentRef} />\r\n          </div>\r\n          <button onClick={handlePrint}>Print this out!</button>\r\n        </div> */}\r\n      </div>\r\n      <form>\r\n        <Grid container direction=\"row\" style={{ border: \"1px solid black\" }}>\r\n          <Grid\r\n          // item\r\n          // sm={12}\r\n          // align=\"center\"\r\n          // style={{ border: \"1px solid black\" }}\r\n          >\r\n            <div>\r\n              {/* <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              style={{ marginLeft: 5 }}\r\n              onClick={(e) => handleSaveCalcTotals(e)}\r\n            >\r\n              Save <Icon className={classes.rightIcon}>send</Icon>\r\n            </Button> */}\r\n              {/* <Heading size=\"sm\">Summary</Heading> */}\r\n              {/* <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                style={{ marginLeft: 5 }}\r\n                onClick={(e) => handle_Print(e)}\r\n              >\r\n                Print <Icon className={classes.rightIcon}>send</Icon>\r\n              </Button> */}\r\n              {/* <div>\r\n                <ReactToPrint\r\n                  trigger={(e) => {\r\n                    handle_Print(e);\r\n                  }}\r\n                  content={() => this.componentRef}\r\n                />\r\n                <ComponentToPrint ref={(el) => (this.componentRef = el)} />\r\n              </div> */}\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container direction=\"row\" style={{ border: \"1px solid white\" }}>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Period\"\r\n                name=\"period\"\r\n                variant=\"filled\"\r\n                type=\"text\"\r\n                value={payrundata.period}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Pay Run Batch\"\r\n                name=\"payrun\"\r\n                variant=\"filled\"\r\n                type=\"text\"\r\n                value={payrundata.payrun}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Status\"\r\n                name=\"status\"\r\n                variant=\"filled\"\r\n                value={payrundata.status}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Payroll Total\"\r\n                name=\"paytotal\"\r\n                variant=\"filled\"\r\n                type=\"number\"\r\n                value={currency(payrundata.totalpayroll)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container direction=\"row\" style={{ border: \"1px solid white\" }}>\r\n          <Grid\r\n            item\r\n            sm={12}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            {/* <Box h=\"400\" overflow=\"scroll\">\r\n              <PaySummaryTable columns={columns} data={singlebatchpayslip} />\r\n            </Box> */}\r\n            <Box h=\"400\" w=\"full\" overflow=\"scroll\">\r\n              <MaterialTable\r\n                columns={columns}\r\n                data={singlebatchpayslip}\r\n                title=\"Payroll\"\r\n                options={{\r\n                  filtering: false,\r\n                  search: false,\r\n                  toolbar: false,\r\n                  paging: false,\r\n                  headerStyle: {\r\n                    backgroundColor: \"lightblue\",\r\n                    color: \"primary\",\r\n                  },\r\n                  showTitle: false,\r\n                }}\r\n              />\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container direction=\"row\" style={{ border: \"1px solid white\" }}>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total Wages\"\r\n                name=\"totalwages\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totalwages)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total TAP\"\r\n                name=\"totaltap\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totaltap)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total SCP\"\r\n                name=\"totalscp\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totalscp)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total Sites Allows\"\r\n                name=\"totalsitesallows\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totalsiteallows)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total Expenses Claims\"\r\n                name=\"totalsitesallows\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totalexpensesclaims)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total Allowances\"\r\n                name=\"totalallows\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totalallows)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total Deductions\"\r\n                name=\"totaldeducts\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totaldeducts)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total Payroll\"\r\n                name=\"totalpayroll\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totalpayroll)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   root: {\r\n//     flexGrow: 1,\r\n//   },\r\n//   button: {\r\n//     margin: theme.spacing(1),\r\n//   },\r\n//   container: {\r\n//     margin: 0,\r\n//     padding: 0,\r\n//     width: \"80vw\",\r\n//     display: \"grid\",\r\n//     gridTemplateColumns: \"repeat(auto-fill,250px)\",\r\n//     gridAutoRows: \"10px\",\r\n//     position: \"absolute\",\r\n//     left: \"50%\",\r\n//     transform: \"translateX(-50%)\",\r\n//     justifyContent: \"center\",\r\n//     backgroundColor: \"primary\",\r\n//   },\r\n//   fixedHeight: {\r\n//     height: 800,\r\n//   },\r\n//   paper: {\r\n//     padding: theme.spacing(10),\r\n//     // display: \"flex\",\r\n//     display: \"flex\",\r\n//     overflow: \"auto\",\r\n//     flexDirection: \"column\",\r\n//     border: \"1px solid\",\r\n//     width: \"100%\",\r\n//     color: \"primary\",\r\n//     bcakgroundColor: \"black\",\r\n//   },\r\n//   card: {\r\n//     backgroundColor: \"black\",\r\n//   },\r\n//   section: {\r\n//     width: \"80vw\",\r\n//     margin: \"1rem auto\",\r\n//     maxWidth: \"var(--max-width)\",\r\n//   },\r\n//   underline: {\r\n//     width: \"5rem\",\r\n//     height: \"0.25rem\",\r\n//     marginBottom: \"1.25rem\",\r\n//     background: \"var(--clr-primary-5)\",\r\n//     marginLeft: \"auto\",\r\n//     marginRight: \"auto\",\r\n//   },\r\n//   title: {\r\n//     marginbottom: \"4rem\",\r\n//     textAlign: \"center\",\r\n//   },\r\n//   jobscenter: {\r\n//     width: \"80vw\",\r\n//     margin: \"0 auto\",\r\n//     maxWidth: \"var(--max-width)\",\r\n//     flexDirection: \"row\",\r\n//   },\r\n//   btncontainer: {\r\n//     display: \"flex\",\r\n//     flexDirection: \"row\",\r\n//     justifyContent: \"center\",\r\n//     marginBottom: \"4rem\",\r\n//     flexWrap: \"wrap\",\r\n//   },\r\n//   jobbtn: {\r\n//     background: \"transparent\",\r\n//     borderColor: \"transparent\",\r\n//     textTransform: \"capitalize\",\r\n//     fontSize: \"1.25rem\",\r\n//     letterSpacing: \"var(--spacing)\",\r\n//     margin: \"0 0.5rem\",\r\n//     transition: \"var(--transition)\",\r\n//     cursor: \"pointer\",\r\n//     padding: \"0.25rem 0\",\r\n//     lineHeight: \"1\",\r\n//     outlineColor: \"var(--clr-primary-10)\",\r\n//     \"&:hover\": {\r\n//       color: \"var(--clr-primary-5)\",\r\n//       boxShadow: \"0 2px var(--clr-primary-5)\",\r\n//     },\r\n//   },\r\n//   activebtn: {\r\n//     color: \"var(--clr-primary-5)\",\r\n//     boxShadow: \"0 2px var(--clr-primary-5)\",\r\n//   },\r\n//   jobinfo: {\r\n//     fontWeight: \"400\",\r\n//   },\r\n//   divider: {\r\n//     // Theme Color, or use css color in quote\r\n//     background: \"white\",\r\n//   },\r\n//   textField: {\r\n//     marginLeft: theme.spacing(1),\r\n//     marginRight: theme.spacing(1),\r\n//     width: 350,\r\n//   },\r\n//   divContainer: {\r\n//     display: \"flex\",\r\n//     flexDirection: \"row\",\r\n//   },\r\n// }));\r\n\r\nexport default PaySummary;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\useUpdatePayrun.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\PayForm.js",["1359","1360"],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeForm.js",["1361","1362","1363","1364","1365","1366","1367","1368","1369"],"D:\\react-myprojects\\hrms-demo\\src\\components\\allowances\\useAllowances.js",[],["1370","1371"],"D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsManager.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsAdminManager.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsOpsSpvr.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsAdmin.js",["1372"],"D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsStaff.js",[],{"ruleId":"1373","replacedBy":"1374"},{"ruleId":"1375","replacedBy":"1376"},{"ruleId":"1377","severity":1,"message":"1378","line":15,"column":8,"nodeType":"1379","messageId":"1380","endLine":15,"endColumn":12},{"ruleId":"1377","severity":1,"message":"1381","line":19,"column":22,"nodeType":"1379","messageId":"1380","endLine":19,"endColumn":35},{"ruleId":"1377","severity":1,"message":"1381","line":13,"column":22,"nodeType":"1379","messageId":"1380","endLine":13,"endColumn":35},{"ruleId":"1373","replacedBy":"1374"},{"ruleId":"1375","replacedBy":"1376"},{"ruleId":"1377","severity":1,"message":"1382","line":5,"column":25,"nodeType":"1379","messageId":"1380","endLine":5,"endColumn":29},{"ruleId":"1377","severity":1,"message":"1383","line":47,"column":3,"nodeType":"1379","messageId":"1380","endLine":47,"endColumn":15},{"ruleId":"1377","severity":1,"message":"1384","line":69,"column":7,"nodeType":"1379","messageId":"1380","endLine":69,"endColumn":22},{"ruleId":"1377","severity":1,"message":"1385","line":86,"column":10,"nodeType":"1379","messageId":"1380","endLine":86,"endColumn":16},{"ruleId":"1377","severity":1,"message":"1386","line":45,"column":10,"nodeType":"1379","messageId":"1380","endLine":45,"endColumn":18},{"ruleId":"1377","severity":1,"message":"1387","line":8,"column":10,"nodeType":"1379","messageId":"1380","endLine":8,"endColumn":13},{"ruleId":"1377","severity":1,"message":"1388","line":42,"column":10,"nodeType":"1379","messageId":"1380","endLine":42,"endColumn":14},{"ruleId":"1377","severity":1,"message":"1389","line":76,"column":9,"nodeType":"1379","messageId":"1380","endLine":76,"endColumn":16},{"ruleId":"1390","severity":1,"message":"1391","line":76,"column":19,"nodeType":"1379","endLine":76,"endColumn":26},{"ruleId":"1377","severity":1,"message":"1381","line":32,"column":22,"nodeType":"1379","messageId":"1380","endLine":32,"endColumn":35},{"ruleId":"1377","severity":1,"message":"1392","line":107,"column":10,"nodeType":"1379","messageId":"1380","endLine":107,"endColumn":18},{"ruleId":"1390","severity":1,"message":"1393","line":121,"column":6,"nodeType":"1394","endLine":121,"endColumn":20,"suggestions":"1395"},{"ruleId":"1390","severity":1,"message":"1396","line":411,"column":6,"nodeType":"1394","endLine":411,"endColumn":8,"suggestions":"1397"},{"ruleId":"1377","severity":1,"message":"1398","line":190,"column":10,"nodeType":"1379","messageId":"1380","endLine":190,"endColumn":22},{"ruleId":"1390","severity":1,"message":"1399","line":209,"column":6,"nodeType":"1394","endLine":209,"endColumn":8,"suggestions":"1400"},{"ruleId":"1390","severity":1,"message":"1401","line":224,"column":6,"nodeType":"1394","endLine":224,"endColumn":19,"suggestions":"1402"},{"ruleId":"1390","severity":1,"message":"1403","line":229,"column":6,"nodeType":"1394","endLine":229,"endColumn":14,"suggestions":"1404"},{"ruleId":"1390","severity":1,"message":"1405","line":234,"column":6,"nodeType":"1394","endLine":234,"endColumn":20,"suggestions":"1406"},{"ruleId":"1377","severity":1,"message":"1407","line":254,"column":9,"nodeType":"1379","messageId":"1380","endLine":254,"endColumn":14},{"ruleId":"1390","severity":1,"message":"1408","line":98,"column":5,"nodeType":"1394","endLine":98,"endColumn":7,"suggestions":"1409"},{"ruleId":"1377","severity":1,"message":"1410","line":31,"column":11,"nodeType":"1379","messageId":"1380","endLine":31,"endColumn":15},{"ruleId":"1377","severity":1,"message":"1411","line":31,"column":8,"nodeType":"1379","messageId":"1380","endLine":31,"endColumn":21},{"ruleId":"1377","severity":1,"message":"1412","line":70,"column":21,"nodeType":"1379","messageId":"1380","endLine":70,"endColumn":34},{"ruleId":"1377","severity":1,"message":"1413","line":75,"column":34,"nodeType":"1379","messageId":"1380","endLine":75,"endColumn":42},{"ruleId":"1377","severity":1,"message":"1414","line":75,"column":44,"nodeType":"1379","messageId":"1380","endLine":75,"endColumn":52},{"ruleId":"1377","severity":1,"message":"1381","line":76,"column":22,"nodeType":"1379","messageId":"1380","endLine":76,"endColumn":35},{"ruleId":"1390","severity":1,"message":"1415","line":172,"column":6,"nodeType":"1394","endLine":172,"endColumn":8,"suggestions":"1416"},{"ruleId":"1377","severity":1,"message":"1417","line":1,"column":17,"nodeType":"1379","messageId":"1380","endLine":1,"endColumn":25},{"ruleId":"1377","severity":1,"message":"1381","line":51,"column":22,"nodeType":"1379","messageId":"1380","endLine":51,"endColumn":35},{"ruleId":"1390","severity":1,"message":"1418","line":46,"column":6,"nodeType":"1394","endLine":46,"endColumn":8,"suggestions":"1419"},{"ruleId":"1377","severity":1,"message":"1381","line":36,"column":22,"nodeType":"1379","messageId":"1380","endLine":36,"endColumn":35},{"ruleId":"1377","severity":1,"message":"1381","line":119,"column":22,"nodeType":"1379","messageId":"1380","endLine":119,"endColumn":35},{"ruleId":"1377","severity":1,"message":"1420","line":127,"column":22,"nodeType":"1379","messageId":"1380","endLine":127,"endColumn":35},{"ruleId":"1377","severity":1,"message":"1421","line":132,"column":18,"nodeType":"1379","messageId":"1380","endLine":132,"endColumn":27},{"ruleId":"1390","severity":1,"message":"1422","line":162,"column":6,"nodeType":"1394","endLine":162,"endColumn":35,"suggestions":"1423"},{"ruleId":"1377","severity":1,"message":"1381","line":46,"column":22,"nodeType":"1379","messageId":"1380","endLine":46,"endColumn":35},{"ruleId":"1377","severity":1,"message":"1424","line":53,"column":10,"nodeType":"1379","messageId":"1380","endLine":53,"endColumn":23},{"ruleId":"1377","severity":1,"message":"1425","line":54,"column":10,"nodeType":"1379","messageId":"1380","endLine":54,"endColumn":22},{"ruleId":"1377","severity":1,"message":"1426","line":57,"column":17,"nodeType":"1379","messageId":"1380","endLine":57,"endColumn":25},{"ruleId":"1390","severity":1,"message":"1427","line":76,"column":6,"nodeType":"1394","endLine":76,"endColumn":21,"suggestions":"1428"},{"ruleId":"1390","severity":1,"message":"1429","line":100,"column":3,"nodeType":"1379","endLine":100,"endColumn":12},{"ruleId":"1430","severity":1,"message":"1431","line":560,"column":19,"nodeType":"1432","endLine":560,"endColumn":43},{"ruleId":"1430","severity":1,"message":"1433","line":570,"column":19,"nodeType":"1432","endLine":570,"endColumn":45},{"ruleId":"1430","severity":1,"message":"1434","line":585,"column":11,"nodeType":"1432","endLine":590,"endColumn":13},{"ruleId":"1430","severity":1,"message":"1435","line":600,"column":11,"nodeType":"1432","endLine":605,"endColumn":13},{"ruleId":"1377","severity":1,"message":"1436","line":17,"column":31,"nodeType":"1379","messageId":"1380","endLine":17,"endColumn":39},{"ruleId":"1377","severity":1,"message":"1437","line":97,"column":5,"nodeType":"1379","messageId":"1380","endLine":97,"endColumn":13},{"ruleId":"1377","severity":1,"message":"1438","line":98,"column":5,"nodeType":"1379","messageId":"1380","endLine":98,"endColumn":13},{"ruleId":"1377","severity":1,"message":"1386","line":100,"column":5,"nodeType":"1379","messageId":"1380","endLine":100,"endColumn":13},{"ruleId":"1377","severity":1,"message":"1439","line":112,"column":5,"nodeType":"1379","messageId":"1380","endLine":112,"endColumn":20},{"ruleId":"1377","severity":1,"message":"1381","line":124,"column":22,"nodeType":"1379","messageId":"1380","endLine":124,"endColumn":35},{"ruleId":"1377","severity":1,"message":"1417","line":1,"column":17,"nodeType":"1379","messageId":"1380","endLine":1,"endColumn":25},{"ruleId":"1377","severity":1,"message":"1440","line":20,"column":10,"nodeType":"1379","messageId":"1380","endLine":20,"endColumn":34},{"ruleId":"1377","severity":1,"message":"1441","line":85,"column":11,"nodeType":"1379","messageId":"1380","endLine":85,"endColumn":22},{"ruleId":"1377","severity":1,"message":"1442","line":85,"column":24,"nodeType":"1379","messageId":"1380","endLine":85,"endColumn":37},{"ruleId":"1443","severity":1,"message":"1444","line":90,"column":7,"nodeType":"1379","messageId":"1445","endLine":90,"endColumn":31},{"ruleId":"1390","severity":1,"message":"1422","line":113,"column":6,"nodeType":"1394","endLine":113,"endColumn":35,"suggestions":"1446"},{"ruleId":"1377","severity":1,"message":"1447","line":16,"column":9,"nodeType":"1379","messageId":"1380","endLine":16,"endColumn":14},{"ruleId":"1377","severity":1,"message":"1417","line":1,"column":17,"nodeType":"1379","messageId":"1380","endLine":1,"endColumn":25},{"ruleId":"1390","severity":1,"message":"1408","line":70,"column":6,"nodeType":"1394","endLine":70,"endColumn":8,"suggestions":"1448"},{"ruleId":"1377","severity":1,"message":"1449","line":74,"column":24,"nodeType":"1379","messageId":"1380","endLine":74,"endColumn":39},{"ruleId":"1377","severity":1,"message":"1450","line":15,"column":10,"nodeType":"1379","messageId":"1380","endLine":15,"endColumn":24},{"ruleId":"1377","severity":1,"message":"1451","line":16,"column":10,"nodeType":"1379","messageId":"1380","endLine":16,"endColumn":25},{"ruleId":"1377","severity":1,"message":"1452","line":49,"column":23,"nodeType":"1379","messageId":"1380","endLine":49,"endColumn":29},{"ruleId":"1377","severity":1,"message":"1453","line":49,"column":31,"nodeType":"1379","messageId":"1380","endLine":49,"endColumn":40},{"ruleId":"1390","severity":1,"message":"1454","line":102,"column":6,"nodeType":"1394","endLine":102,"endColumn":8,"suggestions":"1455"},{"ruleId":"1390","severity":1,"message":"1456","line":73,"column":6,"nodeType":"1394","endLine":73,"endColumn":8,"suggestions":"1457"},{"ruleId":"1390","severity":1,"message":"1458","line":22,"column":6,"nodeType":"1394","endLine":22,"endColumn":8,"suggestions":"1459"},{"ruleId":"1377","severity":1,"message":"1460","line":68,"column":10,"nodeType":"1379","messageId":"1380","endLine":68,"endColumn":18},{"ruleId":"1377","severity":1,"message":"1398","line":69,"column":10,"nodeType":"1379","messageId":"1380","endLine":69,"endColumn":22},{"ruleId":"1390","severity":1,"message":"1461","line":97,"column":6,"nodeType":"1394","endLine":97,"endColumn":8,"suggestions":"1462"},{"ruleId":"1377","severity":1,"message":"1381","line":52,"column":22,"nodeType":"1379","messageId":"1380","endLine":52,"endColumn":35},{"ruleId":"1390","severity":1,"message":"1463","line":108,"column":6,"nodeType":"1394","endLine":108,"endColumn":8,"suggestions":"1464"},{"ruleId":"1377","severity":1,"message":"1417","line":1,"column":17,"nodeType":"1379","messageId":"1380","endLine":1,"endColumn":25},{"ruleId":"1377","severity":1,"message":"1381","line":24,"column":22,"nodeType":"1379","messageId":"1380","endLine":24,"endColumn":35},{"ruleId":"1390","severity":1,"message":"1465","line":105,"column":6,"nodeType":"1394","endLine":105,"endColumn":8,"suggestions":"1466"},{"ruleId":"1377","severity":1,"message":"1467","line":73,"column":32,"nodeType":"1379","messageId":"1380","endLine":73,"endColumn":44},{"ruleId":"1377","severity":1,"message":"1381","line":82,"column":22,"nodeType":"1379","messageId":"1380","endLine":82,"endColumn":35},{"ruleId":"1390","severity":1,"message":"1463","line":97,"column":6,"nodeType":"1394","endLine":97,"endColumn":8,"suggestions":"1468"},{"ruleId":"1377","severity":1,"message":"1381","line":157,"column":22,"nodeType":"1379","messageId":"1380","endLine":157,"endColumn":35},{"ruleId":"1390","severity":1,"message":"1469","line":163,"column":6,"nodeType":"1394","endLine":163,"endColumn":8,"suggestions":"1470"},{"ruleId":"1390","severity":1,"message":"1471","line":83,"column":6,"nodeType":"1394","endLine":83,"endColumn":8,"suggestions":"1472"},{"ruleId":"1377","severity":1,"message":"1381","line":139,"column":22,"nodeType":"1379","messageId":"1380","endLine":139,"endColumn":35},{"ruleId":"1390","severity":1,"message":"1473","line":160,"column":6,"nodeType":"1394","endLine":160,"endColumn":8,"suggestions":"1474"},{"ruleId":"1390","severity":1,"message":"1475","line":166,"column":6,"nodeType":"1394","endLine":166,"endColumn":14,"suggestions":"1476"},{"ruleId":"1390","severity":1,"message":"1477","line":172,"column":6,"nodeType":"1394","endLine":172,"endColumn":30,"suggestions":"1478"},{"ruleId":"1390","severity":1,"message":"1479","line":172,"column":7,"nodeType":"1480","endLine":172,"endColumn":29},{"ruleId":"1377","severity":1,"message":"1481","line":1,"column":27,"nodeType":"1379","messageId":"1380","endLine":1,"endColumn":36},{"ruleId":"1377","severity":1,"message":"1482","line":90,"column":19,"nodeType":"1379","messageId":"1380","endLine":90,"endColumn":29},{"ruleId":"1390","severity":1,"message":"1391","line":61,"column":19,"nodeType":"1379","endLine":61,"endColumn":26},{"ruleId":"1377","severity":1,"message":"1483","line":60,"column":7,"nodeType":"1379","messageId":"1380","endLine":60,"endColumn":25},{"ruleId":"1377","severity":1,"message":"1484","line":410,"column":7,"nodeType":"1379","messageId":"1380","endLine":410,"endColumn":22},{"ruleId":"1377","severity":1,"message":"1485","line":428,"column":9,"nodeType":"1379","messageId":"1380","endLine":428,"endColumn":16},{"ruleId":"1377","severity":1,"message":"1486","line":435,"column":11,"nodeType":"1379","messageId":"1380","endLine":435,"endColumn":28},{"ruleId":"1390","severity":1,"message":"1473","line":459,"column":7,"nodeType":"1394","endLine":459,"endColumn":9,"suggestions":"1487"},{"ruleId":"1390","severity":1,"message":"1488","line":112,"column":5,"nodeType":"1394","endLine":112,"endColumn":7,"suggestions":"1489"},{"ruleId":"1377","severity":1,"message":"1484","line":77,"column":7,"nodeType":"1379","messageId":"1380","endLine":77,"endColumn":22},{"ruleId":"1377","severity":1,"message":"1485","line":103,"column":9,"nodeType":"1379","messageId":"1380","endLine":103,"endColumn":16},{"ruleId":"1377","severity":1,"message":"1486","line":110,"column":11,"nodeType":"1379","messageId":"1380","endLine":110,"endColumn":28},{"ruleId":"1377","severity":1,"message":"1452","line":115,"column":17,"nodeType":"1379","messageId":"1380","endLine":115,"endColumn":23},{"ruleId":"1377","severity":1,"message":"1453","line":115,"column":25,"nodeType":"1379","messageId":"1380","endLine":115,"endColumn":34},{"ruleId":"1377","severity":1,"message":"1490","line":115,"column":36,"nodeType":"1379","messageId":"1380","endLine":115,"endColumn":44},{"ruleId":"1390","severity":1,"message":"1473","line":142,"column":7,"nodeType":"1394","endLine":142,"endColumn":9,"suggestions":"1491"},{"ruleId":"1390","severity":1,"message":"1473","line":125,"column":6,"nodeType":"1394","endLine":125,"endColumn":8,"suggestions":"1492"},{"ruleId":"1377","severity":1,"message":"1486","line":97,"column":10,"nodeType":"1379","messageId":"1380","endLine":97,"endColumn":27},{"ruleId":"1377","severity":1,"message":"1452","line":102,"column":16,"nodeType":"1379","messageId":"1380","endLine":102,"endColumn":22},{"ruleId":"1377","severity":1,"message":"1453","line":102,"column":24,"nodeType":"1379","messageId":"1380","endLine":102,"endColumn":33},{"ruleId":"1377","severity":1,"message":"1490","line":102,"column":35,"nodeType":"1379","messageId":"1380","endLine":102,"endColumn":43},{"ruleId":"1390","severity":1,"message":"1473","line":130,"column":6,"nodeType":"1394","endLine":130,"endColumn":8,"suggestions":"1493"},{"ruleId":"1390","severity":1,"message":"1473","line":129,"column":6,"nodeType":"1394","endLine":129,"endColumn":8,"suggestions":"1494"},{"ruleId":"1390","severity":1,"message":"1495","line":71,"column":6,"nodeType":"1394","endLine":71,"endColumn":8,"suggestions":"1496"},{"ruleId":"1390","severity":1,"message":"1497","line":52,"column":6,"nodeType":"1394","endLine":52,"endColumn":8,"suggestions":"1498"},{"ruleId":"1390","severity":1,"message":"1499","line":48,"column":6,"nodeType":"1394","endLine":48,"endColumn":8,"suggestions":"1500"},{"ruleId":"1377","severity":1,"message":"1501","line":28,"column":7,"nodeType":"1379","messageId":"1380","endLine":28,"endColumn":11},{"ruleId":"1377","severity":1,"message":"1381","line":39,"column":22,"nodeType":"1379","messageId":"1380","endLine":39,"endColumn":35},{"ruleId":"1377","severity":1,"message":"1426","line":42,"column":17,"nodeType":"1379","messageId":"1380","endLine":42,"endColumn":25},{"ruleId":"1390","severity":1,"message":"1502","line":59,"column":6,"nodeType":"1394","endLine":59,"endColumn":8,"suggestions":"1503"},{"ruleId":"1377","severity":1,"message":"1481","line":1,"column":27,"nodeType":"1379","messageId":"1380","endLine":1,"endColumn":36},{"ruleId":"1377","severity":1,"message":"1504","line":31,"column":17,"nodeType":"1379","messageId":"1380","endLine":31,"endColumn":25},{"ruleId":"1390","severity":1,"message":"1505","line":73,"column":6,"nodeType":"1394","endLine":73,"endColumn":8,"suggestions":"1506"},{"ruleId":"1377","severity":1,"message":"1381","line":110,"column":22,"nodeType":"1379","messageId":"1380","endLine":110,"endColumn":35},{"ruleId":"1377","severity":1,"message":"1507","line":113,"column":10,"nodeType":"1379","messageId":"1380","endLine":113,"endColumn":18},{"ruleId":"1390","severity":1,"message":"1508","line":132,"column":6,"nodeType":"1394","endLine":132,"endColumn":8,"suggestions":"1509"},{"ruleId":"1390","severity":1,"message":"1510","line":55,"column":6,"nodeType":"1394","endLine":55,"endColumn":8,"suggestions":"1511"},{"ruleId":"1377","severity":1,"message":"1381","line":50,"column":22,"nodeType":"1379","messageId":"1380","endLine":50,"endColumn":35},{"ruleId":"1377","severity":1,"message":"1512","line":7,"column":3,"nodeType":"1379","messageId":"1380","endLine":7,"endColumn":20},{"ruleId":"1377","severity":1,"message":"1513","line":8,"column":3,"nodeType":"1379","messageId":"1380","endLine":8,"endColumn":17},{"ruleId":"1377","severity":1,"message":"1514","line":13,"column":3,"nodeType":"1379","messageId":"1380","endLine":13,"endColumn":20},{"ruleId":"1377","severity":1,"message":"1515","line":15,"column":3,"nodeType":"1379","messageId":"1380","endLine":15,"endColumn":13},{"ruleId":"1377","severity":1,"message":"1449","line":73,"column":24,"nodeType":"1379","messageId":"1380","endLine":73,"endColumn":39},{"ruleId":"1390","severity":1,"message":"1408","line":86,"column":6,"nodeType":"1394","endLine":86,"endColumn":8,"suggestions":"1516"},{"ruleId":"1377","severity":1,"message":"1517","line":4,"column":15,"nodeType":"1379","messageId":"1380","endLine":4,"endColumn":21},{"ruleId":"1377","severity":1,"message":"1518","line":4,"column":23,"nodeType":"1379","messageId":"1380","endLine":4,"endColumn":29},{"ruleId":"1377","severity":1,"message":"1519","line":4,"column":31,"nodeType":"1379","messageId":"1380","endLine":4,"endColumn":35},{"ruleId":"1390","severity":1,"message":"1520","line":62,"column":6,"nodeType":"1394","endLine":62,"endColumn":8,"suggestions":"1521"},{"ruleId":"1377","severity":1,"message":"1517","line":5,"column":3,"nodeType":"1379","messageId":"1380","endLine":5,"endColumn":9},{"ruleId":"1377","severity":1,"message":"1522","line":8,"column":3,"nodeType":"1379","messageId":"1380","endLine":8,"endColumn":11},{"ruleId":"1377","severity":1,"message":"1523","line":88,"column":9,"nodeType":"1379","messageId":"1380","endLine":88,"endColumn":20},{"ruleId":"1390","severity":1,"message":"1524","line":96,"column":6,"nodeType":"1394","endLine":96,"endColumn":14,"suggestions":"1525"},{"ruleId":"1377","severity":1,"message":"1526","line":1,"column":38,"nodeType":"1379","messageId":"1380","endLine":1,"endColumn":45},{"ruleId":"1390","severity":1,"message":"1527","line":183,"column":6,"nodeType":"1394","endLine":183,"endColumn":8,"suggestions":"1528"},{"ruleId":"1377","severity":1,"message":"1417","line":1,"column":17,"nodeType":"1379","messageId":"1380","endLine":1,"endColumn":25},{"ruleId":"1390","severity":1,"message":"1529","line":125,"column":6,"nodeType":"1394","endLine":125,"endColumn":8,"suggestions":"1530"},{"ruleId":"1377","severity":1,"message":"1481","line":1,"column":27,"nodeType":"1379","messageId":"1380","endLine":1,"endColumn":36},{"ruleId":"1377","severity":1,"message":"1381","line":105,"column":22,"nodeType":"1379","messageId":"1380","endLine":105,"endColumn":35},{"ruleId":"1377","severity":1,"message":"1531","line":40,"column":10,"nodeType":"1379","messageId":"1380","endLine":40,"endColumn":16},{"ruleId":"1390","severity":1,"message":"1532","line":51,"column":6,"nodeType":"1394","endLine":51,"endColumn":8,"suggestions":"1533"},{"ruleId":"1390","severity":1,"message":"1534","line":58,"column":6,"nodeType":"1394","endLine":58,"endColumn":14,"suggestions":"1535"},{"ruleId":"1377","severity":1,"message":"1417","line":1,"column":17,"nodeType":"1379","messageId":"1380","endLine":1,"endColumn":25},{"ruleId":"1390","severity":1,"message":"1536","line":72,"column":6,"nodeType":"1394","endLine":72,"endColumn":8,"suggestions":"1537"},{"ruleId":"1377","severity":1,"message":"1481","line":1,"column":17,"nodeType":"1379","messageId":"1380","endLine":1,"endColumn":26},{"ruleId":"1377","severity":1,"message":"1417","line":1,"column":17,"nodeType":"1379","messageId":"1380","endLine":1,"endColumn":25},{"ruleId":"1377","severity":1,"message":"1381","line":60,"column":22,"nodeType":"1379","messageId":"1380","endLine":60,"endColumn":35},{"ruleId":"1377","severity":1,"message":"1467","line":61,"column":32,"nodeType":"1379","messageId":"1380","endLine":61,"endColumn":44},{"ruleId":"1390","severity":1,"message":"1463","line":71,"column":6,"nodeType":"1394","endLine":71,"endColumn":8,"suggestions":"1538"},{"ruleId":"1377","severity":1,"message":"1381","line":28,"column":22,"nodeType":"1379","messageId":"1380","endLine":28,"endColumn":35},{"ruleId":"1390","severity":1,"message":"1463","line":33,"column":6,"nodeType":"1394","endLine":33,"endColumn":8,"suggestions":"1539"},{"ruleId":"1377","severity":1,"message":"1417","line":1,"column":17,"nodeType":"1379","messageId":"1380","endLine":1,"endColumn":25},{"ruleId":"1377","severity":1,"message":"1381","line":44,"column":22,"nodeType":"1379","messageId":"1380","endLine":44,"endColumn":35},{"ruleId":"1390","severity":1,"message":"1463","line":54,"column":6,"nodeType":"1394","endLine":54,"endColumn":8,"suggestions":"1540"},{"ruleId":"1377","severity":1,"message":"1417","line":1,"column":17,"nodeType":"1379","messageId":"1380","endLine":1,"endColumn":25},{"ruleId":"1377","severity":1,"message":"1381","line":38,"column":22,"nodeType":"1379","messageId":"1380","endLine":38,"endColumn":35},{"ruleId":"1377","severity":1,"message":"1541","line":12,"column":10,"nodeType":"1379","messageId":"1380","endLine":12,"endColumn":16},{"ruleId":"1377","severity":1,"message":"1381","line":39,"column":22,"nodeType":"1379","messageId":"1380","endLine":39,"endColumn":35},{"ruleId":"1377","severity":1,"message":"1542","line":50,"column":9,"nodeType":"1379","messageId":"1380","endLine":50,"endColumn":24},{"ruleId":"1390","severity":1,"message":"1543","line":95,"column":6,"nodeType":"1394","endLine":95,"endColumn":8,"suggestions":"1544"},{"ruleId":"1390","severity":1,"message":"1545","line":103,"column":6,"nodeType":"1394","endLine":103,"endColumn":18,"suggestions":"1546"},{"ruleId":"1390","severity":1,"message":"1547","line":112,"column":6,"nodeType":"1394","endLine":112,"endColumn":27,"suggestions":"1548"},{"ruleId":"1390","severity":1,"message":"1549","line":42,"column":6,"nodeType":"1394","endLine":42,"endColumn":8,"suggestions":"1550"},{"ruleId":"1390","severity":1,"message":"1551","line":72,"column":6,"nodeType":"1394","endLine":72,"endColumn":8,"suggestions":"1552"},{"ruleId":"1390","severity":1,"message":"1549","line":40,"column":6,"nodeType":"1394","endLine":40,"endColumn":8,"suggestions":"1553"},{"ruleId":"1377","severity":1,"message":"1554","line":6,"column":10,"nodeType":"1379","messageId":"1380","endLine":6,"endColumn":26},{"ruleId":"1390","severity":1,"message":"1555","line":66,"column":6,"nodeType":"1394","endLine":66,"endColumn":8,"suggestions":"1556"},{"ruleId":"1377","severity":1,"message":"1417","line":1,"column":17,"nodeType":"1379","messageId":"1380","endLine":1,"endColumn":25},{"ruleId":"1390","severity":1,"message":"1557","line":83,"column":6,"nodeType":"1394","endLine":83,"endColumn":8,"suggestions":"1558"},{"ruleId":"1390","severity":1,"message":"1559","line":47,"column":6,"nodeType":"1394","endLine":47,"endColumn":8,"suggestions":"1560"},{"ruleId":"1390","severity":1,"message":"1561","line":46,"column":6,"nodeType":"1394","endLine":46,"endColumn":8,"suggestions":"1562"},{"ruleId":"1390","severity":1,"message":"1563","line":50,"column":6,"nodeType":"1394","endLine":50,"endColumn":8,"suggestions":"1564"},{"ruleId":"1390","severity":1,"message":"1565","line":41,"column":6,"nodeType":"1394","endLine":41,"endColumn":8,"suggestions":"1566"},{"ruleId":"1390","severity":1,"message":"1567","line":41,"column":6,"nodeType":"1394","endLine":41,"endColumn":8,"suggestions":"1568"},{"ruleId":"1377","severity":1,"message":"1481","line":1,"column":27,"nodeType":"1379","messageId":"1380","endLine":1,"endColumn":36},{"ruleId":"1377","severity":1,"message":"1417","line":1,"column":17,"nodeType":"1379","messageId":"1380","endLine":1,"endColumn":25},{"ruleId":"1377","severity":1,"message":"1481","line":1,"column":27,"nodeType":"1379","messageId":"1380","endLine":1,"endColumn":36},{"ruleId":"1377","severity":1,"message":"1417","line":1,"column":17,"nodeType":"1379","messageId":"1380","endLine":1,"endColumn":25},{"ruleId":"1377","severity":1,"message":"1381","line":59,"column":23,"nodeType":"1379","messageId":"1380","endLine":59,"endColumn":36},{"ruleId":"1390","severity":1,"message":"1569","line":77,"column":6,"nodeType":"1394","endLine":77,"endColumn":8,"suggestions":"1570"},{"ruleId":"1390","severity":1,"message":"1571","line":95,"column":6,"nodeType":"1394","endLine":95,"endColumn":8,"suggestions":"1572"},{"ruleId":"1390","severity":1,"message":"1573","line":237,"column":6,"nodeType":"1394","endLine":237,"endColumn":14,"suggestions":"1574"},{"ruleId":"1390","severity":1,"message":"1575","line":121,"column":6,"nodeType":"1394","endLine":121,"endColumn":20,"suggestions":"1576"},{"ruleId":"1390","severity":1,"message":"1577","line":128,"column":6,"nodeType":"1394","endLine":128,"endColumn":14,"suggestions":"1578"},{"ruleId":"1377","severity":1,"message":"1411","line":33,"column":8,"nodeType":"1379","messageId":"1380","endLine":33,"endColumn":21},{"ruleId":"1377","severity":1,"message":"1579","line":72,"column":22,"nodeType":"1379","messageId":"1380","endLine":72,"endColumn":32},{"ruleId":"1377","severity":1,"message":"1412","line":72,"column":34,"nodeType":"1379","messageId":"1380","endLine":72,"endColumn":47},{"ruleId":"1377","severity":1,"message":"1413","line":84,"column":34,"nodeType":"1379","messageId":"1380","endLine":84,"endColumn":42},{"ruleId":"1377","severity":1,"message":"1414","line":84,"column":44,"nodeType":"1379","messageId":"1380","endLine":84,"endColumn":52},{"ruleId":"1377","severity":1,"message":"1381","line":85,"column":22,"nodeType":"1379","messageId":"1380","endLine":85,"endColumn":35},{"ruleId":"1377","severity":1,"message":"1580","line":97,"column":5,"nodeType":"1379","messageId":"1380","endLine":97,"endColumn":8},{"ruleId":"1377","severity":1,"message":"1581","line":101,"column":5,"nodeType":"1379","messageId":"1380","endLine":101,"endColumn":14},{"ruleId":"1390","severity":1,"message":"1582","line":165,"column":6,"nodeType":"1394","endLine":165,"endColumn":8,"suggestions":"1583"},{"ruleId":"1373","replacedBy":"1584"},{"ruleId":"1375","replacedBy":"1585"},{"ruleId":"1377","severity":1,"message":"1586","line":10,"column":8,"nodeType":"1379","messageId":"1380","endLine":10,"endColumn":18},"no-native-reassign",["1587"],"no-negated-in-lhs",["1588"],"no-unused-vars","'Main' is defined but never used.","Identifier","unusedVar","'setLoginLevel' is assigned a value but never used.","'Link' is defined but never used.","'PrivateRoute' is defined but never used.","'DailyAllowances' is assigned a value but never used.","'select' is assigned a value but never used.","'password' is assigned a value but never used.","'Box' is defined but never used.","'data' is assigned a value but never used.","'columns' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'payrunid' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'payrun_loading'. Either include it or remove the dependency array.","ArrayExpression",["1589"],"React Hook useEffect has missing dependencies: 'getPayrun', 'loadEmployees', 'loadUnpaidDailyAllows', and 'loadUnpaidExpenses'. Either include them or remove the dependency array.",["1590"],"'payrunstatus' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadPayitems'. Either include it or remove the dependency array.",["1591"],"React Hook useEffect has missing dependencies: 'payslip_period' and 'setPSBPayrunId'. Either include them or remove the dependency array.",["1592"],"React Hook useEffect has a missing dependency: 'calcPayrunTotals'. Either include it or remove the dependency array.",["1593"],"React Hook useEffect has a missing dependency: 'saveIndividualPayslips'. Either include it or remove the dependency array.",["1594"],"'sleep' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setDailyAllowsStatusId'. Either include it or remove the dependency array.",["1595"],"'user' is assigned a value but never used.","'EmpJobhistory' is defined but never used.","'setEmployeeId' is assigned a value but never used.","'setValue' is assigned a value but never used.","'register' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'birthdate' and 'reporting_email'. Either include them or remove the dependency array.",["1596"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'loadEmployees'. Either include it or remove the dependency array.",["1597"],"'setAllowsdata' is assigned a value but never used.","'setTotals' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setDailyAllowsDetlsId', 'setDailyAllowsDetlsPeriod', and 'setDailyAllowsId'. Either include them or remove the dependency array.",["1598"],"'allows_period' is assigned a value but never used.","'allows_empid' is assigned a value but never used.","'setError' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'loginLevel.loginUserId' and 'setDailyAllowsId'. Either include them or remove the dependency array.",["1599"],"React Hook useEffect received a function whose dependencies are unknown. Pass an inline function instead.","react/jsx-pascal-case","Imported JSX component Payslip_ViewEarnings must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component Payslip_ViewDeductions must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Payslip_Earnings must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Payslip_Deductions must be in PascalCase or SCREAMING_SNAKE_CASE","'setValue' is defined but never used.","'leave_bf' is assigned a value but never used.","'leave_cd' is assigned a value but never used.","'reporting_email' is assigned a value but never used.","'useDailyAllowsDetlsBatch' is defined but never used.","'dailyallows' is assigned a value but never used.","'dailyAllowsId' is assigned a value but never used.","no-use-before-define","'useDailyAllowsDetlsBatch' was used before it was defined.","usedBeforeDefined",["1600"],"'toast' is assigned a value but never used.",["1601"],"'setIsDialogOpen' is assigned a value but never used.","'useRecoilState' is defined but never used.","'loginLevelState' is defined but never used.","'filter' is assigned a value but never used.","'setFilter' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'editEmployeeID' and 'setJobId'. Either include them or remove the dependency array.",["1602"],"React Hook useEffect has missing dependencies: 'getSingleBatchPayslipDeductions', 'payslip_period', and 'single_payslip.empid'. Either include them or remove the dependency array.",["1603"],"React Hook useEffect has a missing dependency: 'loadExpenses'. Either include it or remove the dependency array.",["1604"],"'payrunId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setDailyAllowsPayrunId' and 'setPSBPayrunId'. Either include them or remove the dependency array.",["1605"],"React Hook useEffect has missing dependencies: 'loginLevel.loginUserId' and 'setFilter'. Either include them or remove the dependency array.",["1606"],"React Hook useEffect has missing dependencies: 'editEmployeeID' and 'setTrainingId'. Either include them or remove the dependency array.",["1607"],"'setExpenseId' is assigned a value but never used.",["1608"],"React Hook useEffect has missing dependencies: 'loginLevel.loginUserId' and 'setHocId'. Either include them or remove the dependency array.",["1609"],"React Hook useEffect has a missing dependency: 'expenses'. Either include it or remove the dependency array.",["1610"],"React Hook useEffect has a missing dependency: 'currentyear'. Either include it or remove the dependency array.",["1611"],"React Hook useEffect has missing dependencies: 'currentyear', 'loginLevel.loginUserId', 'selectleaveyear', 'setLeaveId', and 'setLeaveYr'. Either include them or remove the dependency array.",["1612"],"React Hook useEffect has missing dependencies: 'Calc_Leave' and 'leaves'. Either include them or remove the dependency array.",["1613"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","'useEffect' is defined but never used.","'setLeaveId' is assigned a value but never used.","'Export2ExcelDialog' is assigned a value but never used.","'initial_expdata' is assigned a value but never used.","'classes' is assigned a value but never used.","'selectpayrollyear' is assigned a value but never used.",["1614"],"React Hook useEffect has missing dependencies: 'loginLevel.loginUserId', 'setEditEmployeeID', and 'setIsEditingOn'. Either include them or remove the dependency array.",["1615"],"'setHocId' is assigned a value but never used.",["1616"],["1617"],["1618"],["1619"],"React Hook useEffect has missing dependencies: 'getSingleBatchPayslipEarnings', 'payslip_period', and 'single_payslip.empid'. Either include them or remove the dependency array.",["1620"],"React Hook useEffect has missing dependencies: 'getSingleBatchPayslipDeductions', 'payPeriod', and 'payPeriodEmpId'. Either include them or remove the dependency array.",["1621"],"React Hook useEffect has missing dependencies: 'getSingleBatchPayslipEarnings', 'payPeriod', and 'payPeriodEmpId'. Either include them or remove the dependency array.",["1622"],"'date' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'input', 'loginLevel.loginUser', 'loginLevel.loginUserId', 'loginLevel.perdiem_fee', 'loginLevel.reporting_to', 'loginLevel.siteallows_fee', and 'setInput'. Either include them or remove the dependency array.",["1623"],"'setState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'editEmployeeID', 'getSingleEmployee', 'loadDepartments', and 'loadDesignations'. Either include them or remove the dependency array.",["1624"],"'isUpdate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setLeaveStatusId'. Either include it or remove the dependency array.",["1625"],"React Hook useEffect has missing dependencies: 'setPayrunStatusId' and 'status'. Either include them or remove the dependency array.",["1626"],"'useSetRecoilState' is defined but never used.","'useRecoilValue' is defined but never used.","'allowsPeriodState' is defined but never used.","'empidState' is defined but never used.",["1627"],"'Button' is defined but never used.","'HStack' is defined but never used.","'Text' is defined but never used.","React Hook useEffect has missing dependencies: 'month', 'setLeavePeriodMthId', 'setLeavePeriodYrId', and 'year'. Either include them or remove the dependency array.",["1628"],"'Checkbox' is defined but never used.","'handleClose' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setHocPeriodMthId', 'setHocPeriodYrId', 'state.month', and 'state.year'. Either include them or remove the dependency array.",["1629"],"'useMemo' is defined but never used.","React Hook useEffect has a missing dependency: 'Build_EmpData'. Either include it or remove the dependency array.",["1630"],"React Hook useEffect has missing dependencies: 'month', 'setHocPeriodMthId', 'setHocPeriodYrId', and 'year'. Either include them or remove the dependency array.",["1631"],"'totals' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'month', 'setExpPeriodMthId', 'setExpPeriodYrId', and 'year'. Either include them or remove the dependency array.",["1632"],"React Hook useEffect has missing dependencies: 'Calc_Totals' and 'expensesperiod'. Either include them or remove the dependency array.",["1633"],"React Hook useEffect has missing dependencies: 'period' and 'setDailyAllowsPeriodId'. Either include them or remove the dependency array.",["1634"],["1635"],["1636"],["1637"],"'useHoc' is defined but never used.","'handleSentEmail' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setHoclocationId'. Either include it or remove the dependency array.",["1638"],"React Hook useEffect has a missing dependency: 'setHocwhatdetailsId'. Either include it or remove the dependency array.",["1639"],"React Hook useEffect has missing dependencies: 'setHocwhyId' and 'setHocwhydetailsId'. Either include them or remove the dependency array.",["1640"],"React Hook useEffect has a missing dependency: 'setPayItemId'. Either include it or remove the dependency array.",["1641"],"React Hook useEffect has missing dependencies: 'editEmployeeID' and 'setEducationId'. Either include them or remove the dependency array.",["1642"],["1643"],"'useTablesContext' is defined but never used.","React Hook useEffect has missing dependencies: 'editEmployeeID' and 'setExperienceId'. Either include them or remove the dependency array.",["1644"],"React Hook useEffect has missing dependencies: 'editEmployeeID' and 'setFamilyId'. Either include them or remove the dependency array.",["1645"],"React Hook useEffect has missing dependencies: 'editEmployeeID' and 'getSingleBatchTraining'. Either include them or remove the dependency array.",["1646"],"React Hook useEffect has missing dependencies: 'editEmployeeID' and 'getSingleBatchLeave'. Either include them or remove the dependency array.",["1647"],"React Hook useEffect has missing dependencies: 'editEmployeeID' and 'loadSingleBatchExperience'. Either include them or remove the dependency array.",["1648"],"React Hook useEffect has missing dependencies: 'editEmployeeID' and 'loadSingleBatchEducation'. Either include them or remove the dependency array.",["1649"],"React Hook useEffect has missing dependencies: 'editEmployeeID' and 'loadSingleBatchFamily'. Either include them or remove the dependency array.",["1650"],"React Hook useEffect has a missing dependency: 'loadPendingLeaves'. Either include it or remove the dependency array.",["1651"],"React Hook useEffect has a missing dependency: 'getBatchPayrun'. Either include it or remove the dependency array.",["1652"],"React Hook useEffect has a missing dependency: 'handleCalcTotals'. Either include it or remove the dependency array.",["1653"],"React Hook useEffect has missing dependencies: 'formdata' and 'setLoadFormdata'. Either include them or remove the dependency array. If 'setLoadFormdata' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1654"],"React Hook useEffect has missing dependencies: 'handleCalc' and 'state'. Either include them or remove the dependency array.",["1655"],"'employeeId' is assigned a value but never used.","'age' is assigned a value but never used.","'leave_bal' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'birthdate', 'hasresigned', 'reporting_email', and 'tap_checkbox'. Either include them or remove the dependency array.",["1656"],["1587"],["1588"],"'FlightIcon' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"1657","fix":"1658"},{"desc":"1659","fix":"1660"},{"desc":"1661","fix":"1662"},{"desc":"1663","fix":"1664"},{"desc":"1665","fix":"1666"},{"desc":"1667","fix":"1668"},{"desc":"1669","fix":"1670"},{"desc":"1671","fix":"1672"},{"desc":"1673","fix":"1674"},{"desc":"1675","fix":"1676"},{"desc":"1677","fix":"1678"},{"desc":"1679","fix":"1680"},{"desc":"1669","fix":"1681"},{"desc":"1682","fix":"1683"},{"desc":"1684","fix":"1685"},{"desc":"1686","fix":"1687"},{"desc":"1688","fix":"1689"},{"desc":"1690","fix":"1691"},{"desc":"1692","fix":"1693"},{"desc":"1690","fix":"1694"},{"desc":"1695","fix":"1696"},{"desc":"1697","fix":"1698"},{"desc":"1699","fix":"1700"},{"desc":"1701","fix":"1702"},{"desc":"1703","fix":"1704"},{"desc":"1699","fix":"1705"},{"desc":"1706","fix":"1707"},{"desc":"1699","fix":"1708"},{"desc":"1699","fix":"1709"},{"desc":"1699","fix":"1710"},{"desc":"1699","fix":"1711"},{"desc":"1712","fix":"1713"},{"desc":"1714","fix":"1715"},{"desc":"1716","fix":"1717"},{"desc":"1718","fix":"1719"},{"desc":"1720","fix":"1721"},{"desc":"1722","fix":"1723"},{"desc":"1724","fix":"1725"},{"desc":"1669","fix":"1726"},{"desc":"1727","fix":"1728"},{"desc":"1729","fix":"1730"},{"desc":"1731","fix":"1732"},{"desc":"1733","fix":"1734"},{"desc":"1735","fix":"1736"},{"desc":"1737","fix":"1738"},{"desc":"1739","fix":"1740"},{"desc":"1690","fix":"1741"},{"desc":"1690","fix":"1742"},{"desc":"1690","fix":"1743"},{"desc":"1744","fix":"1745"},{"desc":"1746","fix":"1747"},{"desc":"1748","fix":"1749"},{"desc":"1750","fix":"1751"},{"desc":"1752","fix":"1753"},{"desc":"1750","fix":"1754"},{"desc":"1755","fix":"1756"},{"desc":"1757","fix":"1758"},{"desc":"1759","fix":"1760"},{"desc":"1761","fix":"1762"},{"desc":"1763","fix":"1764"},{"desc":"1765","fix":"1766"},{"desc":"1767","fix":"1768"},{"desc":"1769","fix":"1770"},{"desc":"1771","fix":"1772"},{"desc":"1773","fix":"1774"},{"desc":"1775","fix":"1776"},{"desc":"1777","fix":"1778"},{"desc":"1779","fix":"1780"},"Update the dependencies array to be: [loadPaybatch, payrun_loading]",{"range":"1781","text":"1782"},"Update the dependencies array to be: [getPayrun, loadEmployees, loadUnpaidDailyAllows, loadUnpaidExpenses]",{"range":"1783","text":"1784"},"Update the dependencies array to be: [loadPayitems]",{"range":"1785","text":"1786"},"Update the dependencies array to be: [payslip_period, psbpayrunId, setPSBPayrunId]",{"range":"1787","text":"1788"},"Update the dependencies array to be: [calcPayrunTotals, isCalc]",{"range":"1789","text":"1790"},"Update the dependencies array to be: [isUpdPayslip, saveIndividualPayslips]",{"range":"1791","text":"1792"},"Update the dependencies array to be: [setDailyAllowsStatusId]",{"range":"1793","text":"1794"},"Update the dependencies array to be: [birthdate, reporting_email]",{"range":"1795","text":"1796"},"Update the dependencies array to be: [loadEmployees]",{"range":"1797","text":"1798"},"Update the dependencies array to be: [allows_empid, allows_period, setDailyAllowsDetlsId, setDailyAllowsDetlsPeriod, setDailyAllowsId]",{"range":"1799","text":"1800"},"Update the dependencies array to be: [dailyAllowsId, loginLevel.loginUserId, setDailyAllowsId]",{"range":"1801","text":"1802"},"Update the dependencies array to be: [allows_period, allows_empid, setDailyAllowsId, setDailyAllowsDetlsPeriod, setDailyAllowsDetlsId]",{"range":"1803","text":"1804"},{"range":"1805","text":"1794"},"Update the dependencies array to be: [editEmployeeID, setJobId]",{"range":"1806","text":"1807"},"Update the dependencies array to be: [getSingleBatchPayslipDeductions, payslip_period, single_payslip.empid]",{"range":"1808","text":"1809"},"Update the dependencies array to be: [loadExpenses]",{"range":"1810","text":"1811"},"Update the dependencies array to be: [setDailyAllowsPayrunId, setPSBPayrunId]",{"range":"1812","text":"1813"},"Update the dependencies array to be: [loginLevel.loginUserId, setFilter]",{"range":"1814","text":"1815"},"Update the dependencies array to be: [editEmployeeID, setTrainingId]",{"range":"1816","text":"1817"},{"range":"1818","text":"1815"},"Update the dependencies array to be: [loginLevel.loginUserId, setHocId]",{"range":"1819","text":"1820"},"Update the dependencies array to be: [expenses]",{"range":"1821","text":"1822"},"Update the dependencies array to be: [currentyear]",{"range":"1823","text":"1824"},"Update the dependencies array to be: [currentyear, isLoad, loginLevel.loginUserId, selectleaveyear, setLeaveId, setLeaveYr]",{"range":"1825","text":"1826"},"Update the dependencies array to be: [Calc_Leave, leaves]",{"range":"1827","text":"1828"},{"range":"1829","text":"1824"},"Update the dependencies array to be: [loginLevel.loginUserId, setEditEmployeeID, setIsEditingOn]",{"range":"1830","text":"1831"},{"range":"1832","text":"1824"},{"range":"1833","text":"1824"},{"range":"1834","text":"1824"},{"range":"1835","text":"1824"},"Update the dependencies array to be: [getSingleBatchPayslipEarnings, payslip_period, single_payslip.empid]",{"range":"1836","text":"1837"},"Update the dependencies array to be: [getSingleBatchPayslipDeductions, payPeriod, payPeriodEmpId]",{"range":"1838","text":"1839"},"Update the dependencies array to be: [getSingleBatchPayslipEarnings, payPeriod, payPeriodEmpId]",{"range":"1840","text":"1841"},"Update the dependencies array to be: [input, loginLevel.loginUser, loginLevel.loginUserId, loginLevel.perdiem_fee, loginLevel.reporting_to, loginLevel.siteallows_fee, setInput]",{"range":"1842","text":"1843"},"Update the dependencies array to be: [editEmployeeID, getSingleEmployee, loadDepartments, loadDesignations]",{"range":"1844","text":"1845"},"Update the dependencies array to be: [setLeaveStatusId]",{"range":"1846","text":"1847"},"Update the dependencies array to be: [setPayrunStatusId, status]",{"range":"1848","text":"1849"},{"range":"1850","text":"1794"},"Update the dependencies array to be: [month, setLeavePeriodMthId, setLeavePeriodYrId, year]",{"range":"1851","text":"1852"},"Update the dependencies array to be: [isLoad, setHocPeriodMthId, setHocPeriodYrId, state.month, state.year]",{"range":"1853","text":"1854"},"Update the dependencies array to be: [Build_EmpData]",{"range":"1855","text":"1856"},"Update the dependencies array to be: [month, setHocPeriodMthId, setHocPeriodYrId, year]",{"range":"1857","text":"1858"},"Update the dependencies array to be: [month, setExpPeriodMthId, setExpPeriodYrId, year]",{"range":"1859","text":"1860"},"Update the dependencies array to be: [Calc_Totals, expensesperiod, isCalc]",{"range":"1861","text":"1862"},"Update the dependencies array to be: [period, setDailyAllowsPeriodId]",{"range":"1863","text":"1864"},{"range":"1865","text":"1815"},{"range":"1866","text":"1815"},{"range":"1867","text":"1815"},"Update the dependencies array to be: [setHoclocationId]",{"range":"1868","text":"1869"},"Update the dependencies array to be: [setHocwhatdetailsId, whatstatus]",{"range":"1870","text":"1871"},"Update the dependencies array to be: [whystatus, category, setHocwhyId, setHocwhydetailsId]",{"range":"1872","text":"1873"},"Update the dependencies array to be: [setPayItemId]",{"range":"1874","text":"1875"},"Update the dependencies array to be: [editEmployeeID, setEducationId]",{"range":"1876","text":"1877"},{"range":"1878","text":"1875"},"Update the dependencies array to be: [editEmployeeID, setExperienceId]",{"range":"1879","text":"1880"},"Update the dependencies array to be: [editEmployeeID, setFamilyId]",{"range":"1881","text":"1882"},"Update the dependencies array to be: [editEmployeeID, getSingleBatchTraining]",{"range":"1883","text":"1884"},"Update the dependencies array to be: [editEmployeeID, getSingleBatchLeave]",{"range":"1885","text":"1886"},"Update the dependencies array to be: [editEmployeeID, loadSingleBatchExperience]",{"range":"1887","text":"1888"},"Update the dependencies array to be: [editEmployeeID, loadSingleBatchEducation]",{"range":"1889","text":"1890"},"Update the dependencies array to be: [editEmployeeID, loadSingleBatchFamily]",{"range":"1891","text":"1892"},"Update the dependencies array to be: [loadPendingLeaves]",{"range":"1893","text":"1894"},"Update the dependencies array to be: [getBatchPayrun]",{"range":"1895","text":"1896"},"Update the dependencies array to be: [handleCalcTotals, isCalc]",{"range":"1897","text":"1898"},"Update the dependencies array to be: [formdata, loadFormdata, setLoadFormdata]",{"range":"1899","text":"1900"},"Update the dependencies array to be: [handleCalc, isLoad, state]",{"range":"1901","text":"1902"},"Update the dependencies array to be: [birthdate, hasresigned, reporting_email, tap_checkbox]",{"range":"1903","text":"1904"},[3615,3629],"[loadPaybatch, payrun_loading]",[12203,12205],"[getPayrun, loadEmployees, loadUnpaidDailyAllows, loadUnpaidExpenses]",[5448,5450],"[loadPayitems]",[5745,5758],"[payslip_period, psbpayrunId, setPSBPayrunId]",[5838,5846],"[calcPayrunTotals, isCalc]",[5938,5952],"[isUpdPayslip, saveIndividualPayslips]",[3872,3874],"[setDailyAllowsStatusId]",[4646,4648],"[birthdate, reporting_email]",[1321,1323],"[loadEmployees]",[5716,5745],"[allows_empid, allows_period, setDailyAllowsDetlsId, setDailyAllowsDetlsPeriod, setDailyAllowsId]",[3571,3586],"[dailyAllowsId, loginLevel.loginUserId, setDailyAllowsId]",[3354,3383],"[allows_period, allows_empid, setDailyAllowsId, setDailyAllowsDetlsPeriod, setDailyAllowsDetlsId]",[2638,2640],[2800,2802],"[editEmployeeID, setJobId]",[2241,2243],"[getSingleBatchPayslipDeductions, payslip_period, single_payslip.empid]",[794,796],"[loadExpenses]",[4081,4083],"[setDailyAllowsPayrunId, setPSBPayrunId]",[3605,3607],"[loginLevel.loginUserId, setFilter]",[3132,3134],"[editEmployeeID, setTrainingId]",[3421,3423],[4094,4096],"[loginLevel.loginUserId, setHocId]",[2661,2663],"[expenses]",[4950,4952],"[currentyear]",[5114,5122],"[currentyear, isLoad, loginLevel.loginUserId, selectleaveyear, setLeaveId, setLeaveYr]",[5201,5225],"[Calc_Leave, leaves]",[9635,9637],[4380,4382],"[loginLevel.loginUserId, setEditEmployeeID, setIsEditingOn]",[4202,4204],[4732,4734],[4303,4305],[4859,4861],[2112,2114],"[getSingleBatchPayslipEarnings, payslip_period, single_payslip.empid]",[1552,1554],"[getSingleBatchPayslipDeductions, payPeriod, payPeriodEmpId]",[1412,1414],"[getSingleBatchPayslipEarnings, payPeriod, payPeriodEmpId]",[2472,2474],"[input, loginLevel.loginUser, loginLevel.loginUserId, loginLevel.perdiem_fee, loginLevel.reporting_to, loginLevel.siteallows_fee, setInput]",[2678,2680],"[editEmployeeID, getSingleEmployee, loadDepartments, loadDesignations]",[4198,4200],"[setLeaveStatusId]",[1989,1991],"[setPayrunStatusId, status]",[3120,3122],[1609,1611],"[month, setLeavePeriodMthId, setLeavePeriodYrId, year]",[2086,2094],"[isLoad, setHocPeriodMthId, setHocPeriodYrId, state.month, state.year]",[5215,5217],"[Build_EmpData]",[2698,2700],"[month, setHocPeriodMthId, setHocPeriodYrId, year]",[1834,1836],"[month, setExpPeriodMthId, setExpPeriodYrId, year]",[1949,1957],"[Calc_Totals, expensesperiod, isCalc]",[2682,2684],"[period, setDailyAllowsPeriodId]",[2152,2154],[1027,1029],[1788,1790],[3657,3659],"[setHoclocationId]",[3856,3868],"[setHocwhatdetailsId, whatstatus]",[4119,4140],"[whystatus, category, setHocwhyId, setHocwhydetailsId]",[1162,1164],"[setPayItemId]",[1959,1961],"[editEmployeeID, setEducationId]",[1164,1166],[1902,1904],"[editEmployeeID, setExperienceId]",[2485,2487],"[editEmployeeID, setFamilyId]",[1141,1143],"[editEmployeeID, getSingleBatchTraining]",[1079,1081],"[editEmployeeID, getSingleBatchLeave]",[1117,1119],"[editEmployeeID, loadSingleBatchExperience]",[956,958],"[editEmployeeID, loadSingleBatchEducation]",[940,942],"[editEmployeeID, loadSingleBatchFamily]",[2128,2130],"[loadPendingLeaves]",[2156,2158],"[getBatchPayrun]",[6494,6502],"[handleCalcTotals, isCalc]",[3020,3034],"[formdata, loadFormdata, setLoadFormdata]",[3137,3145],"[handleCalc, isLoad, state]",[4637,4639],"[birthdate, hasresigned, reporting_email, tap_checkbox]"]