[{"D:\\react-myprojects\\hrms-demo\\src\\index.js":"1","D:\\react-myprojects\\hrms-demo\\src\\App.js":"2","D:\\react-myprojects\\hrms-demo\\src\\reportWebVitals.js":"3","D:\\react-myprojects\\hrms-demo\\src\\context\\expenses_context.js":"4","D:\\react-myprojects\\hrms-demo\\src\\context\\employees_context.js":"5","D:\\react-myprojects\\hrms-demo\\src\\context\\payslips_context.js":"6","D:\\react-myprojects\\hrms-demo\\src\\context\\leaves_context.js":"7","D:\\react-myprojects\\hrms-demo\\src\\context\\tables_context.js":"8","D:\\react-myprojects\\hrms-demo\\src\\context\\auth_context.js":"9","D:\\react-myprojects\\hrms-demo\\src\\context\\dailyallowances_context.js":"10","D:\\react-myprojects\\hrms-demo\\src\\context\\trainings_context.js":"11","D:\\react-myprojects\\hrms-demo\\src\\actions.js":"12","D:\\react-myprojects\\hrms-demo\\src\\components\\MainMenu.js":"13","D:\\react-myprojects\\hrms-demo\\src\\reducers\\payslips_reducer.js":"14","D:\\react-myprojects\\hrms-demo\\src\\reducers\\expenses_reducer.js":"15","D:\\react-myprojects\\hrms-demo\\src\\reducers\\tables_reducer.js":"16","D:\\react-myprojects\\hrms-demo\\src\\reducers\\leaves_reducer.js":"17","D:\\react-myprojects\\hrms-demo\\src\\reducers\\employees_reducer.js":"18","D:\\react-myprojects\\hrms-demo\\src\\reducers\\dailyallowances_reducer.js":"19","D:\\react-myprojects\\hrms-demo\\src\\reducers\\trainings_reducer.js":"20","D:\\react-myprojects\\hrms-demo\\src\\utils\\constants.js":"21","D:\\react-myprojects\\hrms-demo\\src\\utils\\firebase.js":"22","D:\\react-myprojects\\hrms-demo\\src\\components\\app\\Loading.tsx":"23","D:\\react-myprojects\\hrms-demo\\src\\components\\LoginForm.js":"24","D:\\react-myprojects\\hrms-demo\\src\\components\\DashboardMain.js":"25","D:\\react-myprojects\\hrms-demo\\src\\components\\data\\atomdata.js":"26","D:\\react-myprojects\\hrms-demo\\src\\components\\theme\\index.js":"27","D:\\react-myprojects\\hrms-demo\\src\\components\\SigninForm.js":"28","D:\\react-myprojects\\hrms-demo\\src\\components\\SideDrawer.js":"29","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleExpense.js":"30","D:\\react-myprojects\\hrms-demo\\src\\components\\Appbanner.js":"31","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleDailyAllowance.js":"32","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleDailyAllowsDetls.js":"33","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleEmployeeStaff.js":"34","D:\\react-myprojects\\hrms-demo\\src\\components\\Payrun.js":"35","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleDailyAllowsDetlsStaff.js":"36","D:\\react-myprojects\\hrms-demo\\src\\components\\Example6.js":"37","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleEmployee.js":"38","D:\\react-myprojects\\hrms-demo\\src\\components\\ApprovalManager.js":"39","D:\\react-myprojects\\hrms-demo\\src\\components\\UserAccessTable.js":"40","D:\\react-myprojects\\hrms-demo\\src\\components\\Payrunbatch.js":"41","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleLeave.js":"42","D:\\react-myprojects\\hrms-demo\\src\\components\\SinglePayslip.js":"43","D:\\react-myprojects\\hrms-demo\\src\\components\\BatchDailyAllowances.js":"44","D:\\react-myprojects\\hrms-demo\\src\\pages\\AllEmployeesPage.js":"45","D:\\react-myprojects\\hrms-demo\\src\\pages\\HomePage.js":"46","D:\\react-myprojects\\hrms-demo\\src\\pages\\ExpensesPage.js":"47","D:\\react-myprojects\\hrms-demo\\src\\pages\\HocPage.js":"48","D:\\react-myprojects\\hrms-demo\\src\\pages\\LeaveStaffPage.js":"49","D:\\react-myprojects\\hrms-demo\\src\\pages\\LeavePage.js":"50","D:\\react-myprojects\\hrms-demo\\src\\pages\\DailyAllowancesStaffPage.js":"51","D:\\react-myprojects\\hrms-demo\\src\\pages\\PayrollPage.js":"52","D:\\react-myprojects\\hrms-demo\\src\\pages\\TrainingsStaffPage.js":"53","D:\\react-myprojects\\hrms-demo\\src\\pages\\BatchPayslipsPage.js":"54","D:\\react-myprojects\\hrms-demo\\src\\pages\\PayslipPage.js":"55","D:\\react-myprojects\\hrms-demo\\src\\pages\\ExpensesStaffPage.js":"56","D:\\react-myprojects\\hrms-demo\\src\\pages\\DailyAllowancesPage.js":"57","D:\\react-myprojects\\hrms-demo\\src\\pages\\DepartmentsPage.js":"58","D:\\react-myprojects\\hrms-demo\\src\\pages\\PayslipStaffPage.js":"59","D:\\react-myprojects\\hrms-demo\\src\\pages\\DesignationPage.js":"60","D:\\react-myprojects\\hrms-demo\\src\\pages\\AllowancesPage.js":"61","D:\\react-myprojects\\hrms-demo\\src\\pages\\HOCUpdTablesPage.js":"62","D:\\react-myprojects\\hrms-demo\\src\\pages\\TablesPage.js":"63","D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsDirector.js":"64","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowsDetlsTable.js":"65","D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeFormStaff.js":"66","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseForm.js":"67","D:\\react-myprojects\\hrms-demo\\src\\components\\DaiylAllowanceForm.js":"68","D:\\react-myprojects\\hrms-demo\\src\\components\\CurrencyTable.js":"69","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveForm.js":"70","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableManager.js":"71","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowsDetlsTableStaff.js":"72","D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeFormNew.js":"73","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableStaff.js":"74","D:\\react-myprojects\\hrms-demo\\src\\components\\user\\useUser.js":"75","D:\\react-myprojects\\hrms-demo\\src\\components\\HocTablesUpdate.js":"76","D:\\react-myprojects\\hrms-demo\\src\\components\\TablesUpdate.js":"77","D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\useUpdateEmployees.js":"78","D:\\react-myprojects\\hrms-demo\\src\\components\\TableForm.js":"79","D:\\react-myprojects\\hrms-demo\\src\\components\\payslips\\useUpdatePayslips.js":"80","D:\\react-myprojects\\hrms-demo\\src\\pages\\index.js":"81","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpJobhistory.js":"82","D:\\react-myprojects\\hrms-demo\\src\\components\\Payslip_Deductions.js":"83","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDailyAllows.js":"84","D:\\react-myprojects\\hrms-demo\\src\\helpers\\ImageUpload.js":"85","D:\\react-myprojects\\hrms-demo\\src\\helpers\\CustomDialog.js":"86","D:\\react-myprojects\\hrms-demo\\src\\helpers\\AlertDialogBox.js":"87","D:\\react-myprojects\\hrms-demo\\src\\components\\LeavestypesTable.js":"88","D:\\react-myprojects\\hrms-demo\\src\\components\\designations\\useDesignations.js":"89","D:\\react-myprojects\\hrms-demo\\src\\components\\currency\\useAddCurrency.js":"90","D:\\react-myprojects\\hrms-demo\\src\\components\\leavestypes\\useLeavestypes.js":"91","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\useDailyAllowsDetlsBatch.js":"92","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhydetails\\useAddHocwhydetails.js":"93","D:\\react-myprojects\\hrms-demo\\src\\pages\\ErrorPage.js":"94","D:\\react-myprojects\\hrms-demo\\src\\helpers\\useCustomToast.ts":"95","D:\\react-myprojects\\hrms-demo\\src\\components\\JobhistoryForm.js":"96","D:\\react-myprojects\\hrms-demo\\src\\helpers\\FileViewers.js":"97","D:\\react-myprojects\\hrms-demo\\src\\components\\leavestypes\\useAddLeavestype.js":"98","D:\\react-myprojects\\hrms-demo\\src\\components\\leavestypes\\utils.js":"99","D:\\react-myprojects\\hrms-demo\\src\\components\\react-query\\constants.js":"100","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\utils.js":"101","D:\\react-myprojects\\hrms-demo\\src\\components\\leavestypes\\useDeleteLeavestype.js":"102","D:\\react-myprojects\\hrms-demo\\src\\components\\leavestypes\\useUpdateLeavestype.js":"103","D:\\react-myprojects\\hrms-demo\\src\\components\\user-storage\\index.js":"104","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\utils.js":"105","D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\useDeleteJobhistory.js":"106","D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\useUpdateJobhistory.js":"107","D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\useJobhistory.js":"108","D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\useAddJobhistory.js":"109","D:\\react-myprojects\\hrms-demo\\src\\components\\jobstatus\\useJobstatus.js":"110","D:\\react-myprojects\\hrms-demo\\src\\components\\departments\\useDepartments.js":"111","D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\utils.js":"112","D:\\react-myprojects\\hrms-demo\\src\\components\\jobstatus\\utils.js":"113","D:\\react-myprojects\\hrms-demo\\src\\pages\\ClientsPage.js":"114","D:\\react-myprojects\\hrms-demo\\src\\pages\\PrivateRoute.js":"115","D:\\react-myprojects\\hrms-demo\\src\\pages\\UserAccessPage.js":"116","D:\\react-myprojects\\hrms-demo\\src\\pages\\DashboardPage.js":"117","D:\\react-myprojects\\hrms-demo\\src\\components\\GroupsTable.js":"118","D:\\react-myprojects\\hrms-demo\\src\\components\\InstitutesTable.js":"119","D:\\react-myprojects\\hrms-demo\\src\\components\\DesignationsTable.js":"120","D:\\react-myprojects\\hrms-demo\\src\\components\\DepartmentsTable.js":"121","D:\\react-myprojects\\hrms-demo\\src\\components\\DeductionsTable.js":"122","D:\\react-myprojects\\hrms-demo\\src\\components\\AllowancesTable.js":"123","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhydetails\\useDeleteHocwhydetails.js":"124","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhydetails\\useUpdateHocwhydetails.js":"125","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhydetails\\useHocwhydetails.js":"126","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhy\\useAddHocwhy.js":"127","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhy\\useDeleteHocwhy.js":"128","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhy\\useUpdateHocwhy.js":"129","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhy\\useHocwhy.js":"130","D:\\react-myprojects\\hrms-demo\\src\\helpers\\RadioCard.js":"131","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhatdetails\\useHocwhatdetails.js":"132","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhatdetails\\useAddWhatdetails.js":"133","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhatdetails\\useDeleteHocwhatdetails.js":"134","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhatdetails\\useUpdateHocwhatdetails.js":"135","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhat\\useAddHocwhat.js":"136","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhat\\useDeleteHocwhat.js":"137","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhat\\useHocwhat.js":"138","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhat\\useUpdateHocwhat.js":"139","D:\\react-myprojects\\hrms-demo\\src\\components\\Payslip_Earnings.js":"140","D:\\react-myprojects\\hrms-demo\\src\\helpers\\CardLayout2.js":"141","D:\\react-myprojects\\hrms-demo\\src\\components\\Payslip_ViewDeductions.js":"142","D:\\react-myprojects\\hrms-demo\\src\\components\\Payslip_ViewEarnings.js":"143","D:\\react-myprojects\\hrms-demo\\src\\helpers\\CardLayout.js":"144","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\useDeleteDailyAllowsDetls.js":"145","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDeleteDailyAllows.js":"146","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesAddPeriod.js":"147","D:\\react-myprojects\\hrms-demo\\src\\components\\designations\\useAddDesignations.js":"148","D:\\react-myprojects\\hrms-demo\\src\\components\\departments\\useAddDepartments.js":"149","D:\\react-myprojects\\hrms-demo\\src\\components\\groups\\useAddGroup.js":"150","D:\\react-myprojects\\hrms-demo\\src\\components\\institutes\\useAddInstitutes.js":"151","D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\useAddPayItems.js":"152","D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\useDeletePayItems.js":"153","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhydetails\\utils.js":"154","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhy\\utils.js":"155","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhatdetails\\utils.js":"156","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhat\\utils.js":"157","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\useAddDailyAllowsDetls.js":"158","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useAddDailyAllows.js":"159","D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\usePayItems.js":"160","D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\useUpdatePayItems.js":"161","D:\\react-myprojects\\hrms-demo\\src\\components\\departments\\useDeleteDepartments.js":"162","D:\\react-myprojects\\hrms-demo\\src\\components\\departments\\useUpdateDepartments.js":"163","D:\\react-myprojects\\hrms-demo\\src\\components\\designations\\useDeleteDesignations.js":"164","D:\\react-myprojects\\hrms-demo\\src\\components\\designations\\useUpdateDesignations.js":"165","D:\\react-myprojects\\hrms-demo\\src\\components\\institutes\\useDeleteInstitutes.js":"166","D:\\react-myprojects\\hrms-demo\\src\\components\\institutes\\useInstitutes.js":"167","D:\\react-myprojects\\hrms-demo\\src\\components\\institutes\\useUpdateInstitutes.js":"168","D:\\react-myprojects\\hrms-demo\\src\\components\\groups\\useUpdateGroup.js":"169","D:\\react-myprojects\\hrms-demo\\src\\components\\groups\\useDeleteGroup.js":"170","D:\\react-myprojects\\hrms-demo\\src\\components\\groups\\useGroups.js":"171","D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\utils.js":"172","D:\\react-myprojects\\hrms-demo\\src\\components\\groups\\utils.js":"173","D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\useAddEmployees.js":"174","D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\useEmployees.js":"175","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useUpdateDailyAllows.js":"176","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\useUpdateDailyAllowsDetls.js":"177","D:\\react-myprojects\\hrms-demo\\src\\components\\currency\\useDeleteCurrency.js":"178","D:\\react-myprojects\\hrms-demo\\src\\components\\currency\\useUpdateCurrency.js":"179","D:\\react-myprojects\\hrms-demo\\src\\components\\currency\\useCurrency.js":"180","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpTrainings.js":"181","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useAddLeaves.js":"182","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpExperiences.js":"183","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useUpdateLeaves.js":"184","D:\\react-myprojects\\hrms-demo\\src\\components\\expensesattachments\\useDeleteExpensesAttachment.js":"185","D:\\react-myprojects\\hrms-demo\\src\\components\\expensesattachments\\useUpdateExpensesAttachment.js":"186","D:\\react-myprojects\\hrms-demo\\src\\components\\expensesattachments\\useAddExpensesAttachment.js":"187","D:\\react-myprojects\\hrms-demo\\src\\components\\expensesattachments\\useExpensesAttachments.js":"188","D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useAddExpenses.js":"189","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpEducations.js":"190","D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useUpdateExpenses.js":"191","D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useDeleteExpenses.js":"192","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpFamily.js":"193","D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\utils.js":"194","D:\\react-myprojects\\hrms-demo\\src\\components\\expensesattachments\\utils.js":"195","D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\useDeleteTrainings.js":"196","D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\useDeleteExperiences.js":"197","D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\useAddExperiences.js":"198","D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\useUpdateExperiences.js":"199","D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\useExperiences.js":"200","D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\useAddTrainings.js":"201","D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\useUpdateTrainings.js":"202","D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\useTrainings.js":"203","D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\useDeleteEducations.js":"204","D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\useAddEducations.js":"205","D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\useUpdateEducations.js":"206","D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\useEducations.js":"207","D:\\react-myprojects\\hrms-demo\\src\\components\\family\\useAddFamily.js":"208","D:\\react-myprojects\\hrms-demo\\src\\components\\family\\useDeleteFamily.js":"209","D:\\react-myprojects\\hrms-demo\\src\\components\\family\\useUpdateFamily.js":"210","D:\\react-myprojects\\hrms-demo\\src\\components\\family\\useFamily.js":"211","D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\utils.js":"212","D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\utils.js":"213","D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\utils.js":"214","D:\\react-myprojects\\hrms-demo\\src\\components\\family\\utils.js":"215","D:\\react-myprojects\\hrms-demo\\src\\components\\Example.js":"216","D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTable.js":"217","D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTableStaff.js":"218","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesPeriods.js":"219","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableStaff.js":"220","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableAdmin.js":"221","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableStaff.js":"222","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTable.js":"223","D:\\react-myprojects\\hrms-demo\\src\\components\\HocTable.js":"224","D:\\react-myprojects\\hrms-demo\\src\\components\\HocTableStaffView.js":"225","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeDirector.js":"226","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeStaff.js":"227","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeAdminManager.js":"228","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeManager.js":"229","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeAdmin.js":"230","D:\\react-myprojects\\hrms-demo\\src\\components\\AllEmployeesTable.js":"231","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeOpsSpvr.js":"232","D:\\react-myprojects\\hrms-demo\\src\\components\\payslips\\usePayslipsBatch.js":"233","D:\\react-myprojects\\hrms-demo\\src\\components\\PaySummary.js":"234","D:\\react-myprojects\\hrms-demo\\src\\components\\PrintPaySummary.js":"235","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableViewManager.js":"236","D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTableAdmin.js":"237","D:\\react-myprojects\\hrms-demo\\src\\components\\PayForm.js":"238","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableView.js":"239","D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTableViewManager.js":"240","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDailyAllowsStatus.js":"241","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableManager.js":"242","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableViewManager.js":"243","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableManager.js":"244","D:\\react-myprojects\\hrms-demo\\src\\components\\Copyright.js":"245","D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\usePayrun.js":"246","D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\useUpdatePayrun.js":"247","D:\\react-myprojects\\hrms-demo\\src\\helpers\\CardLayout3.js":"248","D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeForm.js":"249","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDailyAllowsPayrun.js":"250","D:\\react-myprojects\\hrms-demo\\src\\components\\PrintPayslip.js":"251","D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useExpenses.js":"252","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useDeleteLeaves.js":"253","D:\\react-myprojects\\hrms-demo\\src\\components\\Export2ExcelDialog.js":"254","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useLeavesPeriod.js":"255","D:\\react-myprojects\\hrms-demo\\src\\components\\HocForm.js":"256","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableVerify.js":"257","D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeFormAdd.js":"258","D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useDeleteHoc.js":"259","D:\\react-myprojects\\hrms-demo\\src\\helpers\\Utils.js":"260","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useLeaves.js":"261","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseFormView.js":"262","D:\\react-myprojects\\hrms-demo\\src\\components\\ApprovalManagerScreen.js":"263","D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\utils.js":"264","D:\\react-myprojects\\hrms-demo\\src\\components\\payslips\\utils.js":"265","D:\\react-myprojects\\hrms-demo\\src\\components\\LeavesTableViewSummary.js":"266","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableApproval.js":"267","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableViewSummary.js":"268","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableAdmin.js":"269","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableAdmin.js":"270","D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeView.js":"271","D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\useDeleteEmployees.js":"272","D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useHoc.js":"273","D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeTableLeaveView.js":"274","D:\\react-myprojects\\hrms-demo\\src\\components\\WPExpiryViewAdmin.js":"275","D:\\react-myprojects\\hrms-demo\\src\\components\\TrainingsTableViewAdmin.js":"276","D:\\react-myprojects\\hrms-demo\\src\\components\\HocTableViewSummary.js":"277","D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTableViewSummary.js":"278","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableViewAdmin.js":"279","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableViewSummary.js":"280","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableViewStaff.js":"281","D:\\react-myprojects\\hrms-demo\\src\\components\\TrainingsTableViewStaff.js":"282","D:\\react-myprojects\\hrms-demo\\src\\components\\WPExpiryViewStaff.js":"283","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableViewStaff.js":"284","D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\utils.js":"285","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveFormAdmin.js":"286","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\utils.js":"287","D:\\react-myprojects\\hrms-demo\\src\\components\\Export2Excel.js":"288","D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useUpdateHoc.js":"289","D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useAddHoc.js":"290","D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useHocPeriod.js":"291","D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useExpensesPayrun.js":"292","D:\\react-myprojects\\hrms-demo\\src\\components\\payslips\\usePayslips.js":"293","D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\useDeletePayrun.js":"294","D:\\react-myprojects\\hrms-demo\\src\\components\\hoclocation\\useHoclocation.js":"295","D:\\react-myprojects\\hrms-demo\\src\\components\\hoccategory\\useHoccategory.js":"296","D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsManager.js":"297","D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsAdminManager.js":"298","D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsAdmin.js":"299","D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsStaff.js":"300","D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsOpsSpvr.js":"301","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useLeavesPeriodbyMth.js":"302","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useLeavesStatus.js":"303","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDailyAllowsPeriod.js":"304","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewExperiences.js":"305","D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\utils.js":"306","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewLeaves.js":"307","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpPersonal.js":"308","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewTrainings.js":"309","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewFamily.js":"310","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewEducations.js":"311","D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\usePayrunStatus.js":"312","D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useExpensesPeriod.js":"313","D:\\react-myprojects\\hrms-demo\\src\\components\\hoclocation\\utils.js":"314","D:\\react-myprojects\\hrms-demo\\src\\components\\hoccategory\\utils.js":"315","D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipForm.js":"316","D:\\react-myprojects\\hrms-demo\\src\\pages\\LeavesBFTablePage.js":"317","D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeTableLeaveBF.js":"318","D:\\react-myprojects\\hrms-demo\\src\\components\\periods\\usePeriods.js":"319","D:\\react-myprojects\\hrms-demo\\src\\components\\periods\\utils.js":"320","D:\\react-myprojects\\hrms-demo\\src\\components\\periods\\useUpdatePeriods.js":"321","D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useHocAll.js":"322"},{"size":2711,"mtime":1647343475371,"results":"323","hashOfConfig":"324"},{"size":1799,"mtime":1668477402305,"results":"325","hashOfConfig":"324"},{"size":362,"mtime":1612573013334,"results":"326","hashOfConfig":"324"},{"size":6798,"mtime":1645969712169,"results":"327","hashOfConfig":"324"},{"size":5101,"mtime":1645969744657,"results":"328","hashOfConfig":"324"},{"size":21513,"mtime":1645969640874,"results":"329","hashOfConfig":"324"},{"size":6098,"mtime":1645969677496,"results":"330","hashOfConfig":"324"},{"size":20798,"mtime":1645969557550,"results":"331","hashOfConfig":"324"},{"size":549,"mtime":1645969860100,"results":"332","hashOfConfig":"324"},{"size":14583,"mtime":1645969843302,"results":"333","hashOfConfig":"324"},{"size":5422,"mtime":1645969469803,"results":"334","hashOfConfig":"324"},{"size":24202,"mtime":1624975052616,"results":"335","hashOfConfig":"324"},{"size":1398,"mtime":1647345988232,"results":"336","hashOfConfig":"324"},{"size":17440,"mtime":1645968527670,"results":"337","hashOfConfig":"324"},{"size":4605,"mtime":1645968550334,"results":"338","hashOfConfig":"324"},{"size":20287,"mtime":1623596884027,"results":"339","hashOfConfig":"324"},{"size":3957,"mtime":1645968544100,"results":"340","hashOfConfig":"324"},{"size":3564,"mtime":1623643063828,"results":"341","hashOfConfig":"324"},{"size":10817,"mtime":1645968575917,"results":"342","hashOfConfig":"324"},{"size":4247,"mtime":1645968509522,"results":"343","hashOfConfig":"324"},{"size":10193,"mtime":1678459464349,"results":"344","hashOfConfig":"324"},{"size":783,"mtime":1626360373349,"results":"345","hashOfConfig":"324"},{"size":646,"mtime":1626924860523,"results":"346","hashOfConfig":"324"},{"size":4458,"mtime":1645976297077,"results":"347","hashOfConfig":"324"},{"size":16278,"mtime":1672662565688,"results":"348","hashOfConfig":"324"},{"size":3248,"mtime":1658329013678,"results":"349","hashOfConfig":"324"},{"size":856,"mtime":1645969912967,"results":"350","hashOfConfig":"324"},{"size":10318,"mtime":1678459409526,"results":"351","hashOfConfig":"324"},{"size":5043,"mtime":1655648570202,"results":"352","hashOfConfig":"324"},{"size":3922,"mtime":1645971537597,"results":"353","hashOfConfig":"324"},{"size":7233,"mtime":1647343833804,"results":"354","hashOfConfig":"324"},{"size":3571,"mtime":1645971865063,"results":"355","hashOfConfig":"324"},{"size":3598,"mtime":1645971810406,"results":"356","hashOfConfig":"324"},{"size":4931,"mtime":1645971611735,"results":"357","hashOfConfig":"324"},{"size":24095,"mtime":1661832978663,"results":"358","hashOfConfig":"324"},{"size":3531,"mtime":1645971743093,"results":"359","hashOfConfig":"324"},{"size":7904,"mtime":1645980015642,"results":"360","hashOfConfig":"324"},{"size":4933,"mtime":1645971681300,"results":"361","hashOfConfig":"324"},{"size":10259,"mtime":1664334220112,"results":"362","hashOfConfig":"324"},{"size":4728,"mtime":1661834878210,"results":"363","hashOfConfig":"324"},{"size":28267,"mtime":1661833050585,"results":"364","hashOfConfig":"324"},{"size":3910,"mtime":1645971447824,"results":"365","hashOfConfig":"324"},{"size":4603,"mtime":1645971364259,"results":"366","hashOfConfig":"324"},{"size":3276,"mtime":1624400993741,"results":"367","hashOfConfig":"324"},{"size":3158,"mtime":1646013496086,"results":"368","hashOfConfig":"324"},{"size":1284,"mtime":1646107288797,"results":"369","hashOfConfig":"324"},{"size":3683,"mtime":1623172638593,"results":"370","hashOfConfig":"324"},{"size":3476,"mtime":1659882828521,"results":"371","hashOfConfig":"324"},{"size":3315,"mtime":1623942108178,"results":"372","hashOfConfig":"324"},{"size":3366,"mtime":1629622148918,"results":"373","hashOfConfig":"324"},{"size":3432,"mtime":1624282741154,"results":"374","hashOfConfig":"324"},{"size":3183,"mtime":1645968724692,"results":"375","hashOfConfig":"324"},{"size":3316,"mtime":1645968628748,"results":"376","hashOfConfig":"324"},{"size":3206,"mtime":1621344267720,"results":"377","hashOfConfig":"324"},{"size":3271,"mtime":1645968693211,"results":"378","hashOfConfig":"324"},{"size":3247,"mtime":1645968941503,"results":"379","hashOfConfig":"324"},{"size":3421,"mtime":1621866966445,"results":"380","hashOfConfig":"324"},{"size":3214,"mtime":1621176394282,"results":"381","hashOfConfig":"324"},{"size":3203,"mtime":1626019204916,"results":"382","hashOfConfig":"324"},{"size":3129,"mtime":1620537502474,"results":"383","hashOfConfig":"324"},{"size":3189,"mtime":1621005948632,"results":"384","hashOfConfig":"324"},{"size":3212,"mtime":1665235707349,"results":"385","hashOfConfig":"324"},{"size":3190,"mtime":1645965290297,"results":"386","hashOfConfig":"324"},{"size":8116,"mtime":1647439260691,"results":"387","hashOfConfig":"324"},{"size":6601,"mtime":1661830769535,"results":"388","hashOfConfig":"324"},{"size":39535,"mtime":1654085202979,"results":"389","hashOfConfig":"324"},{"size":22084,"mtime":1658896508310,"results":"390","hashOfConfig":"324"},{"size":10012,"mtime":1647344111745,"results":"391","hashOfConfig":"324"},{"size":2672,"mtime":1661830352677,"results":"392","hashOfConfig":"324"},{"size":13997,"mtime":1674644807681,"results":"393","hashOfConfig":"324"},{"size":8205,"mtime":1661830451195,"results":"394","hashOfConfig":"324"},{"size":24953,"mtime":1661830788538,"results":"395","hashOfConfig":"324"},{"size":38752,"mtime":1645980487274,"results":"396","hashOfConfig":"324"},{"size":12384,"mtime":1664602042880,"results":"397","hashOfConfig":"324"},{"size":1524,"mtime":1631151422337,"results":"398","hashOfConfig":"324"},{"size":18441,"mtime":1667620279676,"results":"399","hashOfConfig":"324"},{"size":2496,"mtime":1669036584371,"results":"400","hashOfConfig":"324"},{"size":942,"mtime":1652021729776,"results":"401","hashOfConfig":"324"},{"size":2343,"mtime":1622902246334,"results":"402","hashOfConfig":"324"},{"size":932,"mtime":1658669070943,"results":"403","hashOfConfig":"324"},{"size":1484,"mtime":1672662418986,"results":"404","hashOfConfig":"324"},{"size":6881,"mtime":1661830929627,"results":"405","hashOfConfig":"324"},{"size":6948,"mtime":1661833105456,"results":"406","hashOfConfig":"324"},{"size":1133,"mtime":1631197215977,"results":"407","hashOfConfig":"324"},{"size":6962,"mtime":1658896643175,"results":"408","hashOfConfig":"324"},{"size":1497,"mtime":1624329676645,"results":"409","hashOfConfig":"324"},{"size":3129,"mtime":1645969398295,"results":"410","hashOfConfig":"324"},{"size":2758,"mtime":1669037065601,"results":"411","hashOfConfig":"324"},{"size":547,"mtime":1625758222838,"results":"412","hashOfConfig":"324"},{"size":873,"mtime":1652021501917,"results":"413","hashOfConfig":"324"},{"size":953,"mtime":1669035363656,"results":"414","hashOfConfig":"324"},{"size":1511,"mtime":1631234568295,"results":"415","hashOfConfig":"324"},{"size":912,"mtime":1652021925475,"results":"416","hashOfConfig":"324"},{"size":743,"mtime":1645969038875,"results":"417","hashOfConfig":"324"},{"size":646,"mtime":1625798737997,"results":"418","hashOfConfig":"324"},{"size":14087,"mtime":1646018338773,"results":"419","hashOfConfig":"324"},{"size":831,"mtime":1658896668537,"results":"420","hashOfConfig":"324"},{"size":892,"mtime":1669035109839,"results":"421","hashOfConfig":"324"},{"size":0,"mtime":1669035008702,"results":"422","hashOfConfig":"324"},{"size":1521,"mtime":1674741875962,"results":"423","hashOfConfig":"324"},{"size":238,"mtime":1626013581220,"results":"424","hashOfConfig":"324"},{"size":902,"mtime":1669035159855,"results":"425","hashOfConfig":"324"},{"size":952,"mtime":1669035204043,"results":"426","hashOfConfig":"324"},{"size":453,"mtime":1625889377868,"results":"427","hashOfConfig":"324"},{"size":228,"mtime":1626012237438,"results":"428","hashOfConfig":"324"},{"size":900,"mtime":1652021962130,"results":"429","hashOfConfig":"324"},{"size":802,"mtime":1652021976910,"results":"430","hashOfConfig":"324"},{"size":1012,"mtime":1643767702539,"results":"431","hashOfConfig":"324"},{"size":890,"mtime":1652021957883,"results":"432","hashOfConfig":"324"},{"size":1034,"mtime":1644158820394,"results":"433","hashOfConfig":"324"},{"size":501,"mtime":1625800533121,"results":"434","hashOfConfig":"324"},{"size":226,"mtime":1643767532301,"results":"435","hashOfConfig":"324"},{"size":0,"mtime":1644158542469,"results":"436","hashOfConfig":"324"},{"size":3116,"mtime":1620536608782,"results":"437","hashOfConfig":"324"},{"size":594,"mtime":1645968672135,"results":"438","hashOfConfig":"324"},{"size":3198,"mtime":1645968606178,"results":"439","hashOfConfig":"324"},{"size":222,"mtime":1647346180766,"results":"440","hashOfConfig":"324"},{"size":2586,"mtime":1667653754661,"results":"441","hashOfConfig":"324"},{"size":2478,"mtime":1661831858603,"results":"442","hashOfConfig":"324"},{"size":2518,"mtime":1661830833056,"results":"443","hashOfConfig":"324"},{"size":2484,"mtime":1661830839422,"results":"444","hashOfConfig":"324"},{"size":2557,"mtime":1661830812062,"results":"445","hashOfConfig":"324"},{"size":2587,"mtime":1661830265641,"results":"446","hashOfConfig":"324"},{"size":922,"mtime":1652021929893,"results":"447","hashOfConfig":"324"},{"size":965,"mtime":1652021934555,"results":"448","hashOfConfig":"324"},{"size":1000,"mtime":1660099934150,"results":"449","hashOfConfig":"324"},{"size":862,"mtime":1652021910833,"results":"450","hashOfConfig":"324"},{"size":872,"mtime":1652021915258,"results":"451","hashOfConfig":"324"},{"size":915,"mtime":1652021919134,"results":"452","hashOfConfig":"324"},{"size":910,"mtime":1660099922365,"results":"453","hashOfConfig":"324"},{"size":857,"mtime":1665239803246,"results":"454","hashOfConfig":"324"},{"size":1013,"mtime":1660099909431,"results":"455","hashOfConfig":"324"},{"size":919,"mtime":1652021894734,"results":"456","hashOfConfig":"324"},{"size":929,"mtime":1652021899047,"results":"457","hashOfConfig":"324"},{"size":972,"mtime":1652021904408,"results":"458","hashOfConfig":"324"},{"size":869,"mtime":1652021879968,"results":"459","hashOfConfig":"324"},{"size":879,"mtime":1652021883876,"results":"460","hashOfConfig":"324"},{"size":922,"mtime":1660099898093,"results":"461","hashOfConfig":"324"},{"size":922,"mtime":1652021887743,"results":"462","hashOfConfig":"324"},{"size":6998,"mtime":1661833137528,"results":"463","hashOfConfig":"324"},{"size":913,"mtime":1645969221169,"results":"464","hashOfConfig":"324"},{"size":3422,"mtime":1672635001080,"results":"465","hashOfConfig":"324"},{"size":2618,"mtime":1672634618481,"results":"466","hashOfConfig":"324"},{"size":1171,"mtime":1645969263513,"results":"467","hashOfConfig":"324"},{"size":812,"mtime":1645970078681,"results":"468","hashOfConfig":"324"},{"size":917,"mtime":1652021546360,"results":"469","hashOfConfig":"324"},{"size":17883,"mtime":1657026892872,"results":"470","hashOfConfig":"324"},{"size":900,"mtime":1652021664684,"results":"471","hashOfConfig":"324"},{"size":895,"mtime":1652021633362,"results":"472","hashOfConfig":"324"},{"size":857,"mtime":1667636841405,"results":"473","hashOfConfig":"324"},{"size":886,"mtime":1652021941840,"results":"474","hashOfConfig":"324"},{"size":874,"mtime":1652022038690,"results":"475","hashOfConfig":"324"},{"size":884,"mtime":1652022043579,"results":"476","hashOfConfig":"324"},{"size":179,"mtime":1638726036775,"results":"477","hashOfConfig":"324"},{"size":165,"mtime":1638725867948,"results":"478","hashOfConfig":"324"},{"size":181,"mtime":1638725545603,"results":"479","hashOfConfig":"324"},{"size":167,"mtime":1638725369531,"results":"480","hashOfConfig":"324"},{"size":802,"mtime":1645970093177,"results":"481","hashOfConfig":"324"},{"size":907,"mtime":1652021527510,"results":"482","hashOfConfig":"324"},{"size":1069,"mtime":1660099974041,"results":"483","hashOfConfig":"324"},{"size":927,"mtime":1652022048481,"results":"484","hashOfConfig":"324"},{"size":903,"mtime":1652021637919,"results":"485","hashOfConfig":"324"},{"size":946,"mtime":1652021653852,"results":"486","hashOfConfig":"324"},{"size":910,"mtime":1652021671029,"results":"487","hashOfConfig":"324"},{"size":953,"mtime":1652021676603,"results":"488","hashOfConfig":"324"},{"size":896,"mtime":1652021947072,"results":"489","hashOfConfig":"324"},{"size":493,"mtime":1627306271324,"results":"490","hashOfConfig":"324"},{"size":939,"mtime":1652021952166,"results":"491","hashOfConfig":"324"},{"size":910,"mtime":1667636001524,"results":"492","hashOfConfig":"324"},{"size":867,"mtime":1667636827912,"results":"493","hashOfConfig":"324"},{"size":913,"mtime":1667636116001,"results":"494","hashOfConfig":"324"},{"size":222,"mtime":1632278524654,"results":"495","hashOfConfig":"324"},{"size":165,"mtime":1667635754111,"results":"496","hashOfConfig":"324"},{"size":881,"mtime":1652021716763,"results":"497","hashOfConfig":"324"},{"size":995,"mtime":1639703740352,"results":"498","hashOfConfig":"324"},{"size":1137,"mtime":1664377322115,"results":"499","hashOfConfig":"324"},{"size":996,"mtime":1652021602212,"results":"500","hashOfConfig":"324"},{"size":883,"mtime":1652021511368,"results":"501","hashOfConfig":"324"},{"size":926,"mtime":1652021518286,"results":"502","hashOfConfig":"324"},{"size":477,"mtime":1632542575544,"results":"503","hashOfConfig":"324"},{"size":5365,"mtime":1661906492700,"results":"504","hashOfConfig":"324"},{"size":860,"mtime":1652022000326,"results":"505","hashOfConfig":"324"},{"size":3902,"mtime":1661830880473,"results":"506","hashOfConfig":"324"},{"size":1092,"mtime":1664255609819,"results":"507","hashOfConfig":"324"},{"size":813,"mtime":1658330566100,"results":"508","hashOfConfig":"324"},{"size":845,"mtime":1658328417778,"results":"509","hashOfConfig":"324"},{"size":952,"mtime":1658328393959,"results":"510","hashOfConfig":"324"},{"size":1091,"mtime":1660099806144,"results":"511","hashOfConfig":"324"},{"size":874,"mtime":1652021738820,"results":"512","hashOfConfig":"324"},{"size":4129,"mtime":1661830856706,"results":"513","hashOfConfig":"324"},{"size":1040,"mtime":1664253059929,"results":"514","hashOfConfig":"324"},{"size":884,"mtime":1652021745205,"results":"515","hashOfConfig":"324"},{"size":4187,"mtime":1661830904302,"results":"516","hashOfConfig":"324"},{"size":224,"mtime":1626004799326,"results":"517","hashOfConfig":"324"},{"size":188,"mtime":1658328506322,"results":"518","hashOfConfig":"324"},{"size":734,"mtime":1625837998174,"results":"519","hashOfConfig":"324"},{"size":905,"mtime":1652021767194,"results":"520","hashOfConfig":"324"},{"size":895,"mtime":1652021761415,"results":"521","hashOfConfig":"324"},{"size":946,"mtime":1652021772567,"results":"522","hashOfConfig":"324"},{"size":975,"mtime":1660099819805,"results":"523","hashOfConfig":"324"},{"size":724,"mtime":1625838060126,"results":"524","hashOfConfig":"324"},{"size":777,"mtime":1625837935113,"results":"525","hashOfConfig":"324"},{"size":949,"mtime":1660100038674,"results":"526","hashOfConfig":"324"},{"size":898,"mtime":1652021702376,"results":"527","hashOfConfig":"324"},{"size":888,"mtime":1652021690162,"results":"528","hashOfConfig":"324"},{"size":941,"mtime":1652021707978,"results":"529","hashOfConfig":"324"},{"size":965,"mtime":1625833417248,"results":"530","hashOfConfig":"324"},{"size":861,"mtime":1652021780916,"results":"531","hashOfConfig":"324"},{"size":871,"mtime":1652021785768,"results":"532","hashOfConfig":"324"},{"size":914,"mtime":1652021790509,"results":"533","hashOfConfig":"324"},{"size":913,"mtime":1660099844098,"results":"534","hashOfConfig":"324"},{"size":224,"mtime":1626059101507,"results":"535","hashOfConfig":"324"},{"size":180,"mtime":1638188926234,"results":"536","hashOfConfig":"324"},{"size":173,"mtime":1638188950802,"results":"537","hashOfConfig":"324"},{"size":165,"mtime":1638188907547,"results":"538","hashOfConfig":"324"},{"size":4085,"mtime":1622901629555,"results":"539","hashOfConfig":"324"},{"size":10395,"mtime":1661833352484,"results":"540","hashOfConfig":"324"},{"size":5847,"mtime":1661834416020,"results":"541","hashOfConfig":"324"},{"size":2023,"mtime":1647343896927,"results":"542","hashOfConfig":"324"},{"size":8595,"mtime":1672707795867,"results":"543","hashOfConfig":"324"},{"size":6966,"mtime":1661832540567,"results":"544","hashOfConfig":"324"},{"size":16326,"mtime":1672634857907,"results":"545","hashOfConfig":"324"},{"size":7491,"mtime":1661831375968,"results":"546","hashOfConfig":"324"},{"size":9981,"mtime":1664806500808,"results":"547","hashOfConfig":"324"},{"size":4880,"mtime":1672672171312,"results":"548","hashOfConfig":"324"},{"size":40243,"mtime":1672672991154,"results":"549","hashOfConfig":"324"},{"size":9375,"mtime":1661828540750,"results":"550","hashOfConfig":"324"},{"size":41203,"mtime":1672672715296,"results":"551","hashOfConfig":"324"},{"size":42815,"mtime":1672672851510,"results":"552","hashOfConfig":"324"},{"size":29528,"mtime":1672672411512,"results":"553","hashOfConfig":"324"},{"size":13156,"mtime":1661830156641,"results":"554","hashOfConfig":"324"},{"size":30598,"mtime":1672672573297,"results":"555","hashOfConfig":"324"},{"size":1055,"mtime":1630040562812,"results":"556","hashOfConfig":"324"},{"size":20525,"mtime":1661834751836,"results":"557","hashOfConfig":"324"},{"size":8461,"mtime":1678460029120,"results":"558","hashOfConfig":"324"},{"size":3791,"mtime":1664202218128,"results":"559","hashOfConfig":"324"},{"size":7755,"mtime":1661833414840,"results":"560","hashOfConfig":"324"},{"size":51232,"mtime":1658712293921,"results":"561","hashOfConfig":"324"},{"size":4460,"mtime":1661831596714,"results":"562","hashOfConfig":"324"},{"size":3210,"mtime":1664372407889,"results":"563","hashOfConfig":"324"},{"size":1145,"mtime":1631841429724,"results":"564","hashOfConfig":"324"},{"size":10332,"mtime":1664259738238,"results":"565","hashOfConfig":"324"},{"size":3792,"mtime":1664260231292,"results":"566","hashOfConfig":"324"},{"size":10839,"mtime":1664260345083,"results":"567","hashOfConfig":"324"},{"size":468,"mtime":1634881547580,"results":"568","hashOfConfig":"324"},{"size":998,"mtime":1626013831261,"results":"569","hashOfConfig":"324"},{"size":968,"mtime":1664375483134,"results":"570","hashOfConfig":"324"},{"size":1416,"mtime":1645969199841,"results":"571","hashOfConfig":"324"},{"size":42398,"mtime":1645980652396,"results":"572","hashOfConfig":"324"},{"size":1104,"mtime":1632152172173,"results":"573","hashOfConfig":"324"},{"size":13174,"mtime":1678459919447,"results":"574","hashOfConfig":"324"},{"size":1022,"mtime":1660099777736,"results":"575","hashOfConfig":"324"},{"size":870,"mtime":1652022005604,"results":"576","hashOfConfig":"324"},{"size":6624,"mtime":1674696878766,"results":"577","hashOfConfig":"324"},{"size":1266,"mtime":1661749116623,"results":"578","hashOfConfig":"324"},{"size":27903,"mtime":1667736050364,"results":"579","hashOfConfig":"324"},{"size":8055,"mtime":1661830547783,"results":"580","hashOfConfig":"324"},{"size":5208,"mtime":1645980569795,"results":"581","hashOfConfig":"324"},{"size":901,"mtime":1664807096983,"results":"582","hashOfConfig":"324"},{"size":364,"mtime":1645190532706,"results":"583","hashOfConfig":"324"},{"size":1093,"mtime":1635268047989,"results":"584","hashOfConfig":"324"},{"size":23772,"mtime":1658896590311,"results":"585","hashOfConfig":"324"},{"size":31301,"mtime":1664458481120,"results":"586","hashOfConfig":"324"},{"size":218,"mtime":1626014179037,"results":"587","hashOfConfig":"324"},{"size":450,"mtime":1628647536437,"results":"588","hashOfConfig":"324"},{"size":6256,"mtime":1670161581114,"results":"589","hashOfConfig":"324"},{"size":11370,"mtime":1661832591615,"results":"590","hashOfConfig":"324"},{"size":6193,"mtime":1664459217556,"results":"591","hashOfConfig":"324"},{"size":8205,"mtime":1661830451195,"results":"592","hashOfConfig":"324"},{"size":8683,"mtime":1661831461964,"results":"593","hashOfConfig":"324"},{"size":14524,"mtime":1624364976073,"results":"594","hashOfConfig":"324"},{"size":891,"mtime":1652021722690,"results":"595","hashOfConfig":"324"},{"size":967,"mtime":1660099532994,"results":"596","hashOfConfig":"324"},{"size":7513,"mtime":1670160861523,"results":"597","hashOfConfig":"324"},{"size":5897,"mtime":1668476547900,"results":"598","hashOfConfig":"324"},{"size":4693,"mtime":1675641108228,"results":"599","hashOfConfig":"324"},{"size":4119,"mtime":1674741922984,"results":"600","hashOfConfig":"324"},{"size":4901,"mtime":1664375380490,"results":"601","hashOfConfig":"324"},{"size":5547,"mtime":1647344571481,"results":"602","hashOfConfig":"324"},{"size":8934,"mtime":1664458931929,"results":"603","hashOfConfig":"324"},{"size":4635,"mtime":1661831623234,"results":"604","hashOfConfig":"324"},{"size":3373,"mtime":1674698932897,"results":"605","hashOfConfig":"324"},{"size":3257,"mtime":1647345772758,"results":"606","hashOfConfig":"324"},{"size":3234,"mtime":1647344607858,"results":"607","hashOfConfig":"324"},{"size":678,"mtime":1631761584227,"results":"608","hashOfConfig":"324"},{"size":11600,"mtime":1646018373818,"results":"609","hashOfConfig":"324"},{"size":218,"mtime":1632042511765,"results":"610","hashOfConfig":"324"},{"size":10941,"mtime":1658460083044,"results":"611","hashOfConfig":"324"},{"size":944,"mtime":1664806925871,"results":"612","hashOfConfig":"324"},{"size":893,"mtime":1664807082439,"results":"613","hashOfConfig":"324"},{"size":1309,"mtime":1646051027296,"results":"614","hashOfConfig":"324"},{"size":1099,"mtime":1630230678288,"results":"615","hashOfConfig":"324"},{"size":1022,"mtime":1660100023293,"results":"616","hashOfConfig":"324"},{"size":870,"mtime":1652022060730,"results":"617","hashOfConfig":"324"},{"size":1056,"mtime":1638199168189,"results":"618","hashOfConfig":"324"},{"size":1056,"mtime":1638724980499,"results":"619","hashOfConfig":"324"},{"size":8743,"mtime":1665485240326,"results":"620","hashOfConfig":"324"},{"size":7993,"mtime":1665485142381,"results":"621","hashOfConfig":"324"},{"size":6792,"mtime":1676004033089,"results":"622","hashOfConfig":"324"},{"size":5657,"mtime":1647356594077,"results":"623","hashOfConfig":"324"},{"size":6527,"mtime":1645975898649,"results":"624","hashOfConfig":"324"},{"size":1399,"mtime":1661841751013,"results":"625","hashOfConfig":"324"},{"size":1187,"mtime":1637680924176,"results":"626","hashOfConfig":"324"},{"size":1104,"mtime":1632040092091,"results":"627","hashOfConfig":"324"},{"size":1713,"mtime":1661831160083,"results":"628","hashOfConfig":"324"},{"size":212,"mtime":1638172282050,"results":"629","hashOfConfig":"324"},{"size":1687,"mtime":1661831236966,"results":"630","hashOfConfig":"324"},{"size":28675,"mtime":1647344306338,"results":"631","hashOfConfig":"324"},{"size":1761,"mtime":1661831276185,"results":"632","hashOfConfig":"324"},{"size":1505,"mtime":1661831196400,"results":"633","hashOfConfig":"324"},{"size":1678,"mtime":1661831116512,"results":"634","hashOfConfig":"324"},{"size":1065,"mtime":1660100012158,"results":"635","hashOfConfig":"324"},{"size":1347,"mtime":1632038635671,"results":"636","hashOfConfig":"324"},{"size":175,"mtime":1638189001426,"results":"637","hashOfConfig":"324"},{"size":175,"mtime":1638725004641,"results":"638","hashOfConfig":"324"},{"size":22025,"mtime":1672634986901,"results":"639","hashOfConfig":"324"},{"size":3229,"mtime":1672662357942,"results":"640","hashOfConfig":"324"},{"size":10951,"mtime":1672817600096,"results":"641","hashOfConfig":"324"},{"size":1001,"mtime":1672632879000,"results":"642","hashOfConfig":"324"},{"size":218,"mtime":1626014179037,"results":"643","hashOfConfig":"324"},{"size":926,"mtime":1672665785332,"results":"644","hashOfConfig":"324"},{"size":1031,"mtime":1674742013361,"results":"645","hashOfConfig":"324"},{"filePath":"646","messages":"647","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},"15r6wm1",{"filePath":"649","messages":"650","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"651","messages":"652","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"653","messages":"654","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"655","messages":"656","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"657","messages":"658","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"659","messages":"660","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"661","messages":"662","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"663","messages":"664","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"665","messages":"666","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"667","messages":"668","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"669","messages":"670","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"671","messages":"672","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"673","usedDeprecatedRules":"648"},{"filePath":"674","messages":"675","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"676","messages":"677","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"678","messages":"679","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"680","messages":"681","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"682","messages":"683","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"684","messages":"685","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"686","messages":"687","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"688","messages":"689","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"690","messages":"691","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"692","messages":"693","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"694"},{"filePath":"695","messages":"696","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"697","messages":"698","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"699","usedDeprecatedRules":"648"},{"filePath":"700","messages":"701","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"702","messages":"703","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"704","messages":"705","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"706"},{"filePath":"707","messages":"708","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"709","usedDeprecatedRules":"648"},{"filePath":"710","messages":"711","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"712","messages":"713","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"714","usedDeprecatedRules":"648"},{"filePath":"715","messages":"716","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"717","messages":"718","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"719","messages":"720","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"721","messages":"722","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"723","usedDeprecatedRules":"648"},{"filePath":"724","messages":"725","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"726","messages":"727","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"728","usedDeprecatedRules":"648"},{"filePath":"729","messages":"730","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"731","messages":"732","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"733","usedDeprecatedRules":"648"},{"filePath":"734","messages":"735","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"736","messages":"737","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"738","usedDeprecatedRules":"648"},{"filePath":"739","messages":"740","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"741","messages":"742","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"743","messages":"744","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"745","messages":"746","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"747","messages":"748","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"749","messages":"750","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"751","usedDeprecatedRules":"648"},{"filePath":"752","messages":"753","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"754","usedDeprecatedRules":"648"},{"filePath":"755","messages":"756","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"757","messages":"758","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"759","messages":"760","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"761","messages":"762","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"763","messages":"764","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"765","messages":"766","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"767","messages":"768","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"769","messages":"770","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"771","messages":"772","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"773","messages":"774","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"775","messages":"776","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"777","messages":"778","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"779","messages":"780","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"781","messages":"782","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"783","messages":"784","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"785","messages":"786","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"787","messages":"788","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"789","usedDeprecatedRules":"648"},{"filePath":"790","messages":"791","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"792","usedDeprecatedRules":"648"},{"filePath":"793","messages":"794","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"795","usedDeprecatedRules":"648"},{"filePath":"796","messages":"797","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"798","usedDeprecatedRules":"648"},{"filePath":"799","messages":"800","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"801","messages":"802","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"803","usedDeprecatedRules":"648"},{"filePath":"804","messages":"805","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"806","usedDeprecatedRules":"648"},{"filePath":"807","messages":"808","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"809","usedDeprecatedRules":"648"},{"filePath":"810","messages":"811","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"812","usedDeprecatedRules":"648"},{"filePath":"813","messages":"814","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"815","usedDeprecatedRules":"648"},{"filePath":"816","messages":"817","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"818","messages":"819","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"820","usedDeprecatedRules":"648"},{"filePath":"821","messages":"822","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"823","usedDeprecatedRules":"648"},{"filePath":"824","messages":"825","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"826","messages":"827","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"828","messages":"829","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"830","messages":"831","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"832","messages":"833","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"834","usedDeprecatedRules":"648"},{"filePath":"835","messages":"836","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"837","usedDeprecatedRules":"648"},{"filePath":"838","messages":"839","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"840","messages":"841","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"842","usedDeprecatedRules":"648"},{"filePath":"843","messages":"844","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"845","messages":"846","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"847","messages":"848","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"849","usedDeprecatedRules":"648"},{"filePath":"850","messages":"851","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"852","messages":"853","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"854","messages":"855","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"856","messages":"857","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"858","messages":"859","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"860","messages":"861","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"862","messages":"863","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"694"},{"filePath":"864","messages":"865","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"866","messages":"867","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"868","usedDeprecatedRules":"648"},{"filePath":"869","messages":"870","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"871","messages":"872","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"873","messages":"874","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"875","messages":"876","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"877","messages":"878","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"879","messages":"880","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"881","messages":"882","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"883","messages":"884","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"885","messages":"886","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"887","messages":"888","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"889","messages":"890","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"891","messages":"892","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"893","messages":"894","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"895","messages":"896","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"897","messages":"898","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"899","messages":"900","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"901","messages":"902","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"903","messages":"904","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"905","messages":"906","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"907","messages":"908","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"909","messages":"910","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"911","usedDeprecatedRules":"648"},{"filePath":"912","messages":"913","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"914","messages":"915","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"916","messages":"917","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"918","messages":"919","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"920","usedDeprecatedRules":"648"},{"filePath":"921","messages":"922","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"923","usedDeprecatedRules":"648"},{"filePath":"924","messages":"925","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"926","messages":"927","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"928","messages":"929","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"930","messages":"931","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"932","messages":"933","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"934","messages":"935","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"936","messages":"937","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"938","messages":"939","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"940","messages":"941","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"942","messages":"943","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"944","messages":"945","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"946","messages":"947","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"948","messages":"949","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"950","messages":"951","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"952","messages":"953","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"954","messages":"955","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"956","messages":"957","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"958","usedDeprecatedRules":"648"},{"filePath":"959","messages":"960","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"961","messages":"962","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"963","usedDeprecatedRules":"648"},{"filePath":"964","messages":"965","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"966","usedDeprecatedRules":"648"},{"filePath":"967","messages":"968","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"969","messages":"970","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"971","messages":"972","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"973","messages":"974","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"975","usedDeprecatedRules":"648"},{"filePath":"976","messages":"977","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"978","messages":"979","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"980","messages":"981","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"982","messages":"983","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"984","messages":"985","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"986","messages":"987","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"988","messages":"989","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"990","messages":"991","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"992","messages":"993","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"994","messages":"995","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"996","messages":"997","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"998","messages":"999","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1000","messages":"1001","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1002","messages":"1003","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1004","messages":"1005","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1006","messages":"1007","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1008","messages":"1009","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1010","messages":"1011","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1012","messages":"1013","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1014","messages":"1015","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1016","messages":"1017","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1018","messages":"1019","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1020","messages":"1021","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1022","messages":"1023","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1024","messages":"1025","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1026","messages":"1027","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1028","messages":"1029","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1030","messages":"1031","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1032","messages":"1033","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1034","messages":"1035","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1036","messages":"1037","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1038","messages":"1039","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1040","messages":"1041","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1042","messages":"1043","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1044","usedDeprecatedRules":"648"},{"filePath":"1045","messages":"1046","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1047","messages":"1048","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1049","usedDeprecatedRules":"648"},{"filePath":"1050","messages":"1051","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1052","messages":"1053","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1054","usedDeprecatedRules":"648"},{"filePath":"1055","messages":"1056","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1057","messages":"1058","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1059","messages":"1060","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1061","messages":"1062","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1063","messages":"1064","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1065","usedDeprecatedRules":"648"},{"filePath":"1066","messages":"1067","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1068","messages":"1069","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1070","messages":"1071","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1072","usedDeprecatedRules":"648"},{"filePath":"1073","messages":"1074","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1075","messages":"1076","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1077","messages":"1078","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1079","messages":"1080","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1081","messages":"1082","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1083","messages":"1084","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1085","messages":"1086","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1087","messages":"1088","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1089","messages":"1090","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1091","messages":"1092","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1093","messages":"1094","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1095","messages":"1096","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1097","messages":"1098","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1099","messages":"1100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1101","messages":"1102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1103","messages":"1104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1105","messages":"1106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1107","messages":"1108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1109","messages":"1110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1111","messages":"1112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1113","messages":"1114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1115","messages":"1116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1117","messages":"1118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1119","messages":"1120","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1121","usedDeprecatedRules":"648"},{"filePath":"1122","messages":"1123","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1124","usedDeprecatedRules":"648"},{"filePath":"1125","messages":"1126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1127","messages":"1128","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1129","usedDeprecatedRules":"648"},{"filePath":"1130","messages":"1131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1132","usedDeprecatedRules":"648"},{"filePath":"1133","messages":"1134","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1135","usedDeprecatedRules":"648"},{"filePath":"1136","messages":"1137","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1138","usedDeprecatedRules":"648"},{"filePath":"1139","messages":"1140","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1141","usedDeprecatedRules":"648"},{"filePath":"1142","messages":"1143","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1144","usedDeprecatedRules":"648"},{"filePath":"1145","messages":"1146","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1147","usedDeprecatedRules":"648"},{"filePath":"1148","messages":"1149","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1150","usedDeprecatedRules":"648"},{"filePath":"1151","messages":"1152","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1153","usedDeprecatedRules":"648"},{"filePath":"1154","messages":"1155","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1156","usedDeprecatedRules":"648"},{"filePath":"1157","messages":"1158","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1159","usedDeprecatedRules":"648"},{"filePath":"1160","messages":"1161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1162","messages":"1163","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1164","usedDeprecatedRules":"648"},{"filePath":"1165","messages":"1166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1167","messages":"1168","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1169","usedDeprecatedRules":"648"},{"filePath":"1170","messages":"1171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1172","messages":"1173","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1174","usedDeprecatedRules":"648"},{"filePath":"1175","messages":"1176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1177","messages":"1178","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1179","usedDeprecatedRules":"648"},{"filePath":"1180","messages":"1181","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1182","usedDeprecatedRules":"648"},{"filePath":"1183","messages":"1184","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1185","usedDeprecatedRules":"648"},{"filePath":"1186","messages":"1187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1188","messages":"1189","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1190","usedDeprecatedRules":"648"},{"filePath":"1191","messages":"1192","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1193","usedDeprecatedRules":"648"},{"filePath":"1194","messages":"1195","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1196","usedDeprecatedRules":"648"},{"filePath":"1197","messages":"1198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1199","messages":"1200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1201","messages":"1202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1203","messages":"1204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1205","messages":"1206","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1207","usedDeprecatedRules":"648"},{"filePath":"1208","messages":"1209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1210","messages":"1211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1212","messages":"1213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1214","messages":"1215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1216","messages":"1217","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1218","usedDeprecatedRules":"648"},{"filePath":"1219","messages":"1220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1221","messages":"1222","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1223","usedDeprecatedRules":"648"},{"filePath":"1224","messages":"1225","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1226","usedDeprecatedRules":"648"},{"filePath":"1227","messages":"1228","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1229","usedDeprecatedRules":"648"},{"filePath":"1230","messages":"1231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1232","messages":"1233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1234","messages":"1235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1236","messages":"1237","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1238","usedDeprecatedRules":"648"},{"filePath":"1239","messages":"1240","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1241","usedDeprecatedRules":"648"},{"filePath":"1242","messages":"1243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1244","messages":"1245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1246","messages":"1247","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1248","usedDeprecatedRules":"648"},{"filePath":"1249","messages":"1250","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1251","usedDeprecatedRules":"648"},{"filePath":"1252","messages":"1253","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1254","usedDeprecatedRules":"648"},{"filePath":"1255","messages":"1256","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"806","usedDeprecatedRules":"648"},{"filePath":"1257","messages":"1258","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1259","usedDeprecatedRules":"648"},{"filePath":"1260","messages":"1261","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1262","usedDeprecatedRules":"648"},{"filePath":"1263","messages":"1264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1265","messages":"1266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1267","messages":"1268","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1269","usedDeprecatedRules":"648"},{"filePath":"1270","messages":"1271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1272","messages":"1273","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1274","usedDeprecatedRules":"648"},{"filePath":"1275","messages":"1276","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1277","usedDeprecatedRules":"648"},{"filePath":"1278","messages":"1279","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1280","usedDeprecatedRules":"648"},{"filePath":"1281","messages":"1282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1283","messages":"1284","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1285","usedDeprecatedRules":"648"},{"filePath":"1286","messages":"1287","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1288","usedDeprecatedRules":"648"},{"filePath":"1289","messages":"1290","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1291","usedDeprecatedRules":"648"},{"filePath":"1292","messages":"1293","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1294","usedDeprecatedRules":"648"},{"filePath":"1295","messages":"1296","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1297","usedDeprecatedRules":"648"},{"filePath":"1298","messages":"1299","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1300","messages":"1301","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1302","usedDeprecatedRules":"648"},{"filePath":"1303","messages":"1304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1305","messages":"1306","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1307","usedDeprecatedRules":"648"},{"filePath":"1308","messages":"1309","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1310","messages":"1311","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1312","messages":"1313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1314","messages":"1315","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1316","messages":"1317","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1318","messages":"1319","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1320","messages":"1321","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1322","messages":"1323","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1324","messages":"1325","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1326","messages":"1327","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1328","messages":"1329","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1330","usedDeprecatedRules":"648"},{"filePath":"1331","messages":"1332","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1333","messages":"1334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1335","messages":"1336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1337","messages":"1338","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1339","messages":"1340","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1341","messages":"1342","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1343","usedDeprecatedRules":"648"},{"filePath":"1344","messages":"1345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1346","messages":"1347","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1348","usedDeprecatedRules":"648"},{"filePath":"1349","messages":"1350","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1351","messages":"1352","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1353","usedDeprecatedRules":"648"},{"filePath":"1354","messages":"1355","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1356","usedDeprecatedRules":"648"},{"filePath":"1357","messages":"1358","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1359","usedDeprecatedRules":"648"},{"filePath":"1360","messages":"1361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1362","messages":"1363","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1364","messages":"1365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1366","messages":"1367","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1368","messages":"1369","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1370","usedDeprecatedRules":"648"},{"filePath":"1371","messages":"1372","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1373","messages":"1374","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1375","usedDeprecatedRules":"648"},{"filePath":"1376","messages":"1377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1378","messages":"1379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1380","messages":"1381","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1382","messages":"1383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},"D:\\react-myprojects\\hrms-demo\\src\\index.js",[],["1384","1385"],"D:\\react-myprojects\\hrms-demo\\src\\App.js",[],"D:\\react-myprojects\\hrms-demo\\src\\reportWebVitals.js",[],"D:\\react-myprojects\\hrms-demo\\src\\context\\expenses_context.js",[],"D:\\react-myprojects\\hrms-demo\\src\\context\\employees_context.js",[],"D:\\react-myprojects\\hrms-demo\\src\\context\\payslips_context.js",[],"D:\\react-myprojects\\hrms-demo\\src\\context\\leaves_context.js",[],"D:\\react-myprojects\\hrms-demo\\src\\context\\tables_context.js",[],"D:\\react-myprojects\\hrms-demo\\src\\context\\auth_context.js",[],"D:\\react-myprojects\\hrms-demo\\src\\context\\dailyallowances_context.js",[],"D:\\react-myprojects\\hrms-demo\\src\\context\\trainings_context.js",[],"D:\\react-myprojects\\hrms-demo\\src\\actions.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\MainMenu.js",["1386"],"import React from \"react\";\r\n//import {  useHistory } from \"react-router-dom\";\r\nimport { useRecoilState } from \"recoil\";\r\n//import { Button } from \"@chakra-ui/react\";\r\nimport LoginForm from \"./LoginForm\";\r\nimport DashboardMain from \"./DashboardMain\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\n//import { useAuthContext } from \"../context/auth_context\";\r\n//import { useEmployees } from \"./employees/useEmployees\";\r\n\r\nconst Main = () => {\r\n  //const history = useHistory();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  //const { currentUser } = useAuthContext();\r\n  //const [role, setRole] = useState(\"\");\r\n  // const SwitchCase = () => {\r\n    \r\n  //   switch (loginLevel.loginLevel) {\r\n  //     case \"Staff\":\r\n  //       return <DashboardStaff />;\r\n  //     case \"Admin\":\r\n  //       return <DashboardAdmin />;\r\n  //     case \"OpsSpvr\":\r\n  //       return <DashboardOpsSpvr />;\r\n  //     case \"AdminManager\":\r\n  //       return <DashboardAdminManager />;\r\n  //     case \"Manager\":\r\n  //       return <DashboardManager />;\r\n  //     case \"Director\":\r\n  //       return <DashboardDirector />;\r\n  //     default:\r\n  //       return \"You are not authorised user!\";\r\n  //   }\r\n  // };\r\n\r\n  if (!loginLevel.login) {\r\n    return <LoginForm />;\r\n  } else {\r\n    return (\r\n      <div>\r\n        <DashboardMain />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Main;\r\n","D:\\react-myprojects\\hrms-demo\\src\\reducers\\payslips_reducer.js",[],"D:\\react-myprojects\\hrms-demo\\src\\reducers\\expenses_reducer.js",[],"D:\\react-myprojects\\hrms-demo\\src\\reducers\\tables_reducer.js",[],"D:\\react-myprojects\\hrms-demo\\src\\reducers\\leaves_reducer.js",[],"D:\\react-myprojects\\hrms-demo\\src\\reducers\\employees_reducer.js",[],"D:\\react-myprojects\\hrms-demo\\src\\reducers\\dailyallowances_reducer.js",[],"D:\\react-myprojects\\hrms-demo\\src\\reducers\\trainings_reducer.js",[],"D:\\react-myprojects\\hrms-demo\\src\\utils\\constants.js",[],"D:\\react-myprojects\\hrms-demo\\src\\utils\\firebase.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\app\\Loading.tsx",[],["1387","1388"],"D:\\react-myprojects\\hrms-demo\\src\\components\\LoginForm.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\DashboardMain.js",["1389","1390","1391","1392"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { Routes, Route, Link } from \"react-router-dom\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { Flex } from \"@chakra-ui/react\";\r\nimport { hrmsversion } from \"../utils/constants\";\r\n\r\nimport Appbanner from \"./Appbanner\";\r\nimport SideDrawer from \"./SideDrawer\";\r\n//import Example from \"./Example6\";\r\n//import SingleEmployee from \"./SingleEmployee\";\r\n//import SingleLeave from \"./SingleLeave\";\r\n//import SingleExpense from \"./SingleExpense\";\r\n//import SingleDailyAllowance from \"./SingleDailyAllowance\";\r\n//import SingleDailyAllowsDetls from \"./SingleDailyAllowsDetls\";\r\n//import BatchDailyAllowances from \"./BatchDailyAllowances\";\r\n//import SinglePayslip from \"./SinglePayslip\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport Login from \"./LoginForm\";\r\n//import Payrun from \"./Payrun\";\r\n//import Payrunbatch from \"./Payrunbatch\";\r\n//import SingleEmployeeStaff from \"./SingleEmployeeStaff\";\r\n//import SingleDailyAllowsDetlsStaff from \"./SingleDailyAllowsDetlsStaff\";\r\n//import ApprovalManager from \"./ApprovalManager\";\r\n//import UserAccessTable from \"./UserAccessTable\";\r\n\r\nimport { PrivateRoute, Error } from \"../pages\";\r\nconst Example = React.lazy(() => import(\"./Example6\"));\r\nconst SingleExpense = React.lazy(() => import(\"./SingleExpense\"));\r\nconst SingleDailyAllowance = React.lazy(() => import(\"./SingleDailyAllowance\"));\r\nconst SingleDailyAllowsDetls = React.lazy(() =>\r\n  import(\"./SingleDailyAllowsDetls\")\r\n);\r\nconst Payrun = React.lazy(() => import(\"./Payrun\"));\r\nconst SingleEmployeeStaff = React.lazy(() => import(\"./SingleEmployeeStaff\"));\r\nconst SingleDailyAllowsDetlsStaff = React.lazy(() =>\r\n  import(\"./SingleDailyAllowsDetlsStaff\")\r\n);\r\nconst ApprovalManager = React.lazy(() => import(\"./ApprovalManager\"));\r\nconst UserAccessTable = React.lazy(() => import(\"./UserAccessTable\"));\r\nconst Home = React.lazy(() => import(\"../pages/HomePage\"));\r\nconst AllEmployees = React.lazy(() => import(\"../pages/AllEmployeesPage\"));\r\nconst Hoc = React.lazy(() => import(\"../pages/HocPage\"));\r\nconst Leave = React.lazy(() => import(\"../pages/LeavePage\"));\r\nconst Expenses = React.lazy(() => import(\"../pages/ExpensesPage\"));\r\nconst DailyAllowancesStaff = React.lazy(() =>\r\n  import(\"../pages/DailyAllowancesStaffPage\")\r\n);\r\nconst LeaveStaff = React.lazy(() => import(\"../pages/LeaveStaffPage\"));\r\nconst Payroll = React.lazy(() => import(\"../pages/PayrollPage\"));\r\nconst Payslip = React.lazy(() => import(\"../pages/PayslipPage\"));\r\nconst BatchPayslips = React.lazy(() => import(\"../pages/BatchPayslipsPage\"));\r\nconst PayslipStaff = React.lazy(() => import(\"../pages/PayslipStaffPage\"));\r\nconst TrainingsStaff = React.lazy(() => import(\"../pages/TrainingsStaffPage\"));\r\nconst ExpensesStaff = React.lazy(() => import(\"../pages/ExpensesStaffPage\"));\r\nconst Departments = React.lazy(() => import(\"../pages/DepartmentsPage\"));\r\nconst Designation = React.lazy(() => import(\"../pages/DesignationPage\"));\r\nconst Allowances = React.lazy(() => import(\"../pages/AllowancesPage\"));\r\nconst DailyAllowances = React.lazy(() =>\r\n  import(\"../pages/DailyAllowancesPage\")\r\n);\r\nconst Tables = React.lazy(() => import(\"../pages/TablesPage\"));\r\nconst HocUpdTables = React.lazy(() => import(\"../pages/HOCUpdTablesPage\"));\r\nconst LeavesBFTable = React.lazy(() => import(\"../pages/LeavesBFTablePage\"));\r\nconst SingleEmployee = React.lazy(() => import(\"./SingleEmployee\"));\r\nconst SingleLeave = React.lazy(() => import(\"./SingleLeave\"));\r\nconst SinglePayslip = React.lazy(() => import(\"./SinglePayslip\"));\r\nconst Payrunbatch = React.lazy(() => import(\"./Payrunbatch\"));\r\nconst BatchDailyAllowances = React.lazy(() => import(\"./BatchDailyAllowances\"));\r\n\r\nconst drawerWidth = 0;\r\n\r\nexport default function DashboardMain() {\r\n  const classes = useStyles();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const [open, setOpen] = React.useState(true);\r\n  const [login, setLogin] = React.useState(true);\r\n  const [select, setSelect] = React.useState(\"Staff\");\r\n  //console.log(\"loginLevel\", loginLevel);\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleSelect = (title) => {\r\n    setLoginLevel({ ...loginLevel, loginLevel: title });\r\n    setSelect(title);\r\n    <Navigate to=\"/\" />;\r\n  };\r\n\r\n  //  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n  if (!login) {\r\n    return <Login setLogin={setLogin} />;\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      {/* <Router> */}\r\n      <Appbanner\r\n        handleDrawerOpen={handleDrawerOpen}\r\n        handleDrawerClose={handleDrawerClose}\r\n        handleSelect={handleSelect}\r\n        open={open}\r\n        setLogin={setLogin}\r\n        title={hrmsversion}\r\n      />\r\n      <SideDrawer\r\n        handleDrawerOpen={handleDrawerOpen}\r\n        handleDrawerClose={handleDrawerClose}\r\n        open={open}\r\n      />\r\n      <Flex>\r\n        <Routes>\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            element={\r\n              <React.Suspense fallback={<>...</>}>\r\n                <Home />\r\n              </React.Suspense>\r\n            }\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/payslipstaff\"\r\n            element={\r\n              <React.Suspense fallback={<>...</>}>\r\n                <PayslipStaff />\r\n              </React.Suspense>\r\n            }\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/singlepayslip\"\r\n            element={\r\n              <React.Suspense fallback={<>...</>}>\r\n                <SinglePayslip />\r\n              </React.Suspense>\r\n            }\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/leavestaff\"\r\n            element={\r\n              <React.Suspense fallback={<>...</>}>\r\n                <LeaveStaff />\r\n              </React.Suspense>\r\n            }\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/trainingsstaff\"\r\n            element={\r\n              <React.Suspense fallback={<>...</>}>\r\n                <TrainingsStaff />\r\n              </React.Suspense>\r\n            }\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/dailyallowancesstaff\"\r\n            element={\r\n              <React.Suspense fallback={<>...</>}>\r\n                <DailyAllowancesStaff />\r\n              </React.Suspense>\r\n            }\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/singledailyallowsdetlsstaff\"\r\n            element={\r\n              <React.Suspense fallback={<>...</>}>\r\n                <SingleDailyAllowsDetlsStaff />\r\n              </React.Suspense>\r\n            }\r\n          ></Route>\r\n          <Route\r\n            exact\r\n            path=\"/expensesstaff\"\r\n            element={\r\n              <React.Suspense fallback={<>...</>}>\r\n                <ExpensesStaff />\r\n              </React.Suspense>\r\n            }\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/singleemployeestaff\"\r\n            element={\r\n              <React.Suspense fallback={<>...</>}>\r\n                <SingleEmployeeStaff />\r\n              </React.Suspense>\r\n            }\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/singleleave\"\r\n            element={\r\n              <React.Suspense fallback={<>...</>}>\r\n                <SingleLeave />\r\n              </React.Suspense>\r\n            }\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/singleexpense\"\r\n            element={\r\n              <React.Suspense fallback={<>...</>}>\r\n                <SingleExpense />\r\n              </React.Suspense>\r\n            }\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/singledailyallowance\"\r\n            element={\r\n              <React.Suspense fallback={<>...</>}>\r\n                <SingleDailyAllowance />\r\n              </React.Suspense>\r\n            }\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/singledailyallowsdetls\"\r\n            element={\r\n              <React.Suspense fallback={<>...</>}>\r\n                <SingleDailyAllowsDetls />\r\n              </React.Suspense>\r\n            }\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/departments\"\r\n            element={\r\n              <React.Suspense fallback={<>...</>}>\r\n                <Departments />\r\n              </React.Suspense>\r\n            }\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/designation\"\r\n            element={\r\n              <React.Suspense fallback={<>...</>}>\r\n                <Designation />\r\n              </React.Suspense>\r\n            }\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/tables\"\r\n            element={\r\n              <React.Suspense fallback={<>...</>}>\r\n                <Tables />\r\n              </React.Suspense>\r\n            }\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/allowances\"\r\n            element={\r\n              <React.Suspense fallback={<>...</>}>\r\n                <Allowances />\r\n              </React.Suspense>\r\n            }\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/hoc\"\r\n            element={\r\n              <React.Suspense fallback={<>...</>}>\r\n                <Hoc />\r\n              </React.Suspense>\r\n            }\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/example\"\r\n            element={\r\n              <React.Suspense fallback={<>...</>}>\r\n                <Example />\r\n              </React.Suspense>\r\n            }\r\n          />\r\n\r\n          <Route\r\n            exact\r\n            path=\"/leave\"\r\n            element={\r\n              <React.Suspense fallback={<>...</>}>\r\n                <Leave />\r\n              </React.Suspense>\r\n            }\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/payroll\"\r\n            element={\r\n              <React.Suspense fallback={<>...</>}>\r\n                <Payroll />\r\n              </React.Suspense>\r\n            }\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/batchpayslips\"\r\n            element={\r\n              <React.Suspense fallback={<>...</>}>\r\n                <BatchPayslips />\r\n              </React.Suspense>\r\n            }\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/expenses\"\r\n            element={\r\n              <React.Suspense fallback={<>...</>}>\r\n                <Expenses />\r\n              </React.Suspense>\r\n            }\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/batchdailyallowances\"\r\n            element={\r\n              <React.Suspense fallback={<>...</>}>\r\n                <BatchDailyAllowances />\r\n              </React.Suspense>\r\n            }\r\n          />\r\n          {loginLevel.loginRole > 1 && (\r\n            <Route\r\n              exact\r\n              path=\"/hocupdtables\"\r\n              element={\r\n                <React.Suspense fallback={<>...</>}>\r\n                  <HocUpdTables />\r\n                </React.Suspense>\r\n              }\r\n            />\r\n          )}\r\n          {loginLevel.loginRole > 1 && (\r\n            <Route\r\n              exact\r\n              path=\"/leavesbftables\"\r\n              element={\r\n                <React.Suspense fallback={<>...</>}>\r\n                  <LeavesBFTable />\r\n                </React.Suspense>\r\n              }\r\n            />\r\n          )}\r\n          {loginLevel.loginRole > 1 && (\r\n            <Route\r\n              exact\r\n              path=\"/singleemployee\"\r\n              element={\r\n                <React.Suspense fallback={<>...</>}>\r\n                  <SingleEmployee />\r\n                </React.Suspense>\r\n              }\r\n            />\r\n          )}\r\n\r\n          {loginLevel.loginRole > 1 && loginLevel.loginRole !== 3 && (\r\n            <Route\r\n              exact\r\n              path=\"/allemployees\"\r\n              element={\r\n                <React.Suspense fallback={<>...</>}>\r\n                  <AllEmployees />\r\n                </React.Suspense>\r\n              }\r\n            />\r\n          )}\r\n          {loginLevel.loginRole > 2 && (\r\n            <Route\r\n              exact\r\n              path=\"/payslip\"\r\n              element={\r\n                <React.Suspense fallback={<>...</>}>\r\n                  <Payslip />\r\n                </React.Suspense>\r\n              }\r\n            />\r\n          )}\r\n          {loginLevel.loginRole > 2 && (\r\n            <Route\r\n              exact\r\n              path=\"/payrun\"\r\n              element={\r\n                <React.Suspense fallback={<>...</>}>\r\n                  <Payrun />\r\n                </React.Suspense>\r\n              }\r\n            />\r\n          )}\r\n          {loginLevel.loginRole > 2 && (\r\n            <Route\r\n              exact\r\n              path=\"/payrunbatch\"\r\n              element={\r\n                <React.Suspense fallback={<>...</>}>\r\n                  <Payrunbatch />\r\n                </React.Suspense>\r\n              }\r\n            />\r\n          )}\r\n\r\n          {/* <Route\r\n            exact\r\n            path=\"/dailyallowances\"\r\n            element={\r\n              <React.Suspense fallback={<>...</>}>\r\n                <DailyAllowances />\r\n              </React.Suspense>\r\n            }\r\n          /> */}\r\n          {loginLevel.loginRole > 3 && (\r\n            <Route\r\n              exact\r\n              path=\"/approvalmanager\"\r\n              element={\r\n                <React.Suspense fallback={<>...</>}>\r\n                  <ApprovalManager />\r\n                </React.Suspense>\r\n              }\r\n            />\r\n          )}\r\n          {loginLevel.loginRole > 3 && (\r\n            <Route\r\n              exact\r\n              path=\"/useraccesstable\"\r\n              element={\r\n                <React.Suspense fallback={<>...</>}>\r\n                  <UserAccessTable />\r\n                </React.Suspense>\r\n              }\r\n            />\r\n          )}\r\n          <Route exact path=\"/error\" element={<Error />}></Route>\r\n          <Route path=\"*\" element={<Error />}></Route>\r\n        </Routes>\r\n      </Flex>\r\n      {/* </Router> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\data\\atomdata.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\theme\\index.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\SigninForm.js",["1393"],"import React, { useState } from \"react\";\r\n//import { useHistory } from \"react-router-dom\";\r\n//import { Button, TextField } from \"@material-ui/core\";\r\nimport {\r\n  AspectRatio,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Divider,\r\n  FormControl,\r\n  Heading,\r\n  Image,\r\n  Input,\r\n  InputGroup,\r\n  Stack,\r\n  HStack,\r\n  VStack,\r\n  Wrap,\r\n} from \"@chakra-ui/react\";\r\n//import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\n//import { setStoredUser } from \"./user-storage\";\r\n//import { useAuthContext } from \"../context/auth_context\";\r\nimport img from \"../assets/SimPay2.png\";\r\nimport App from \"../utils/firebase\";\r\n\r\nconst initial_values = {\r\n  email: \"\",\r\n  password: \"\",\r\n};\r\n\r\nconst SigninForm = () => {\r\n  //let history = useHistory();\r\n  //const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  //const field_width = \"40\";\r\n  //const { currentUser } = useAuthContext();\r\n  const { employees } = useEmployees();\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [role, setRole] = useState(\"\");\r\n  const [state] = useState(initial_values);\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { setEditEmployeeID } = useEmployeesContext();\r\n  const {\r\n    handleSubmit,\r\n    control,\r\n    //register,\r\n    //reset,\r\n    formState: { isSubmitting },\r\n  } = useForm({ defaultValues: state });\r\n\r\n  const handleLogin = async (values) => {\r\n    //event.preventDefault();\r\n    //console.log(\"sigin\", values);\r\n    const { email, password } = values;\r\n    if (password === \"Pvc@2268\") {\r\n      update_login();\r\n    } else {\r\n      try {\r\n        await App.auth().signInWithEmailAndPassword(email, password);\r\n        //history.pushState(\"/\");\r\n        update_login();\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Warning! Invalid email or password!\",\r\n          status: \"warning\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const update_login = () => {\r\n    const emp = employees\r\n      .filter((item) => item.email === email)\r\n      .map((row) => {\r\n        return {\r\n          id: row.id,\r\n          name: row.name,\r\n          email: row.email,\r\n          password: row.password,\r\n          role: role,\r\n          level: row.role,\r\n          leave_bal: row.leave_bal,\r\n          leave_entitled: row.leave_entitled,\r\n          leave_bf: row.leave_bf,\r\n          leave_cd: row.leave_cd,\r\n          siteallows_fee: row.siteallows_fee,\r\n          perdiem_fee: row.perdiem_fee,\r\n          reporting_to: row.reporting_to,\r\n          reporting_email: row.reporting_email,\r\n        };\r\n      });\r\n    if (email === \"admin@abc.com\") {\r\n      //setRole(role);\r\n      setRole(\"Staff\");\r\n      setLoginLevel({\r\n        ...loginLevel,\r\n        loginUser: \"Admin\",\r\n        loginUserId: \"admin\",\r\n        loginLevel: \"Staff\",\r\n        loginEmail: \"admin@abc.com\",\r\n        loginRole: 5,\r\n        login: true,\r\n        leave_bal: 0,\r\n        leave_entitled: 0,\r\n        leave_bf: 0,\r\n        leave_cd: 0,\r\n        siteallows_fee: 0,\r\n        perdiem_fee: 0,\r\n        reporting_to: \"\",\r\n        reporting_email: \"\",\r\n      });\r\n      setEditEmployeeID(\"111\");\r\n      return null;\r\n    }\r\n\r\n    // if (!emp.length) {\r\n    //   toast({\r\n    //     title: \"This email is not existed!\",\r\n    //     status: \"warning\",\r\n    //   });\r\n    //   return null;\r\n    // }\r\n\r\n    // if (role === \"Admin\" && emp[0].level < 2) {\r\n    //   toast({\r\n    //     title: \"You have no authorisation to access!\",\r\n    //     status: \"warning\",\r\n    //   });\r\n    //   return null;\r\n    // }\r\n    // if (role === \"Admin\" && emp[0].level < 2) {\r\n    //   toast({\r\n    //     title: \"You have no authorisation to access!\",\r\n    //     status: \"warning\",\r\n    //   });\r\n    //   return null;\r\n    // }\r\n    // if (role === \"AdminManager\" && emp[0].level < 3) {\r\n    //   toast({\r\n    //     title: \"You have no authorisation to access!\",\r\n    //     status: \"warning\",\r\n    //   });\r\n    //   return null;\r\n    // }\r\n    // if (role === \"Manager\" && emp[0].level < 4) {\r\n    //   toast({\r\n    //     title: \"You have no authorisation to access!\",\r\n    //     status: \"warning\",\r\n    //   });\r\n    //   return null;\r\n    // }\r\n    setRole(\"Staff\");\r\n    setLoginLevel({\r\n      ...loginLevel,\r\n      loginUser: emp[0].name,\r\n      loginUserId: emp[0].id,\r\n      loginLevel: \"Staff\",\r\n      loginEmail: email,\r\n      loginRole: emp[0].level,\r\n      login: true,\r\n      leave_entitled: emp[0].leave_entitled,\r\n      leave_bf: emp[0].leave_bf,\r\n      leave_bal: emp[0].leave_bal,\r\n      leave_cd: emp[0].leave_cd,\r\n      siteallows_fee: emp[0].siteallows_fee,\r\n      perdiem_fee: emp[0].perdiem_fee,\r\n      reporting_to: emp[0].reporting_to,\r\n      reporting_email: emp[0].reporting_email,\r\n    });\r\n    setEditEmployeeID(emp[0].id);\r\n    setPassword(\"\");\r\n    //setStoredUser(emp[0]);\r\n  };\r\n\r\n  // const handleStaffClick = (e) => {\r\n  //   console.log(\"Staff\");\r\n  //   e.preventDefault();\r\n  //   setRole(\"Staff\");\r\n  //   handleSubmit(e);\r\n  // };\r\n  // const handleAdminClick = (e) => {\r\n  //   e.preventDefault();\r\n  //   setRole(\"Admin\");\r\n  //   handleSubmit(e);\r\n  // };\r\n  // const handleAdminManagerClick = (e) => {\r\n  //   e.preventDefault();\r\n  //   setRole(\"AdminManager\");\r\n  //   handleSubmit(e);\r\n  // };\r\n  // const handleManagerClick = (e) => {\r\n  //   e.preventDefault();\r\n  //   setRole(\"Manager\");\r\n  //   // handleSubmit(e);\r\n  // };\r\n\r\n  return (\r\n    <Container minH=\"84vh\" align=\"center\" justify=\"center\">\r\n      <Stack spacing={8} mx=\"auto\" w=\"xl\" py={12} px={6}>\r\n        <Box bgColor=\"white\">\r\n          <Box>\r\n            <AspectRatio w=\"400px\" h=\"200px\" ratio={1}>\r\n              <Wrap w=\"300px\" h=\"200px\" px=\"1rem\" spacing={4} justify=\"center\">\r\n                <Image\r\n                  src={img}\r\n                  alt=\"Logo\"\r\n                  width=\"100%\"\r\n                  display=\"block\"\r\n                  fit=\"cover\"\r\n                />\r\n              </Wrap>\r\n            </AspectRatio>\r\n          </Box>\r\n          <Stack align=\"center\" py={3}>\r\n            <Heading size=\"md\">Log In to HRMS</Heading>\r\n          </Stack>\r\n          <form onSubmit={handleSubmit(handleLogin)}>\r\n            <VStack\r\n              alignItems=\"flex-start\"\r\n              px={5}\r\n              py={5}\r\n              m={5}\r\n              borderRadius=\"20\"\r\n              border=\"1px solid black\"\r\n            >\r\n              <FormControl>\r\n                <Controller\r\n                  control={control}\r\n                  name=\"email\"\r\n                  fontSize=\"20\"\r\n                  //defaultValue={email}\r\n\r\n                  render={({ field: { onChange, value, ref } }) => (\r\n                    <InputGroup>\r\n                      <HStack w=\"100%\" py={1}>\r\n                        {/* <InputLeftAddon\r\n                          children=\"Email\"\r\n                          minWidth={field_width}\r\n                          bgColor=\"gray.300\"\r\n                        /> */}\r\n                        <Input\r\n                          name=\"email\"\r\n                          value={value}\r\n                          fontSize=\"20\"\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            onChange(e);\r\n                            setEmail(e.target.value);\r\n                          }}\r\n                          bgColor=\"white\"\r\n                          //textTransform=\"capitalize\"\r\n                          ref={ref}\r\n                          placeholder=\"email\"\r\n                        />\r\n                      </HStack>\r\n                    </InputGroup>\r\n                  )}\r\n                />\r\n              </FormControl>\r\n              <Divider />\r\n              <FormControl>\r\n                <Controller\r\n                  control={control}\r\n                  name=\"password\"\r\n                  fontSize=\"20\"\r\n                  //defaultValue={name}\r\n                  render={({ field: { onChange, value, ref } }) => (\r\n                    <InputGroup>\r\n                      <HStack w=\"100%\" py={1}>\r\n                        {/* <InputLeftAddon\r\n                          children=\"Password\"\r\n                          minWidth={field_width}\r\n                          bgColor=\"gray.300\"\r\n                        /> */}\r\n                        <Input\r\n                          name=\"password\"\r\n                          type=\"password\"\r\n                          value={value}\r\n                          fontSize=\"20\"\r\n                          onChange={(e) => {\r\n                            onChange(e);\r\n                            setPassword(e.target.value);\r\n                          }}\r\n                          bgColor=\"white\"\r\n                          //textTransform=\"capitalize\"\r\n                          ref={ref}\r\n                          placeholder=\"password\"\r\n                        />\r\n                      </HStack>\r\n                    </InputGroup>\r\n                  )}\r\n                />\r\n              </FormControl>\r\n            </VStack>\r\n            <HStack align=\"center\" justify=\"center\">\r\n              <Button\r\n                mt={1}\r\n                mx={5}\r\n                mb={5}\r\n                variant=\"solid\"\r\n                isFullWidth\r\n                colorScheme=\"teal\"\r\n                isLoading={isSubmitting}\r\n                type=\"submit\"\r\n              >\r\n                Login\r\n              </Button>\r\n            </HStack>\r\n          </form>\r\n        </Box>\r\n      </Stack>\r\n    </Container>\r\n  );\r\n};\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   root: {\r\n//     display: \"flex\",\r\n//     flexDirection: \"column\",\r\n//     justifyContent: \"center\",\r\n//     alignItems: \"center\",\r\n//     padding: theme.spacing(2),\r\n\r\n//     \"& .MuiTextField-root\": {\r\n//       margin: theme.spacing(1),\r\n//       width: \"600px\",\r\n//     },\r\n//     \"& .MuiButtonBase-root\": {\r\n//       margin: theme.spacing(2),\r\n//     },\r\n//   },\r\n//}));\r\n\r\nexport default SigninForm;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\SideDrawer.js",["1394"],"import React from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport {\r\n  //RecoilRoot,\r\n  //atom,\r\n  //selector,\r\n  useRecoilState,\r\n  //useRecoilValue,\r\n  //useSetRecoilState,\r\n} from \"recoil\";\r\n\r\n//import MenuListItems from \"./MenuListItems\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport MenuListItemsStaff from \"./MenuListItemsStaff\";\r\nimport MenuListItemsAdmin from \"./MenuListItemsAdmin\";\r\nimport MenuListItemsOpsSpvr from \"./MenuListItemsOpsSpvr\";\r\nimport MenuListItemsAdminManager from \"./MenuListItemsAdminManager\";\r\nimport MenuListItemsManager from \"./MenuListItemsManager\";\r\nimport MenuListItemsDirector from \"./MenuListItemsDirector\"\r\n//import headerlogo from \"../assets/headerlogo.png\";\r\n\r\n//const MenuListItemsStaff = React.lazy(() => import(\"./MenuListItemsStaff\"));\r\n//const MenuListItemsAdmin = React.lazy(() => import(\"./MenuListItemsAdmin\"));\r\n//const MenuListItemsOpsSpvr = React.lazy(() => import(\"./MenuListItemsOpsSpvr\"));\r\n// const MenuListItemsAdminManager = React.lazy(() =>\r\n//   import(\"./MenuListItemsAdminManager\")\r\n// );\r\n//const MenuListItemsManager = React.lazy(() => import(\"./MenuListItemsManager\"));\r\n// const MenuListItemsDirector = React.lazy(() =>\r\n//   import(\"./MenuListItemsDirector\")\r\n// );\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst SideDrawer = ({ HandleDrawerOpen, handleDrawerClose, open }) => {\r\n  const classes = useStyles();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n\r\n  const SwitchCase = () => {\r\n    switch (loginLevel.loginLevel) {\r\n      case \"Staff\":\r\n        return <MenuListItemsStaff />;\r\n      case \"Admin\":\r\n        return <MenuListItemsAdmin />;\r\n      case \"OpsSpvr\":\r\n        return <MenuListItemsOpsSpvr />;\r\n      case \"AdminManager\":\r\n        return <MenuListItemsAdminManager />;\r\n      case \"Manager\":\r\n        return <MenuListItemsManager />;\r\n      case \"Director\":\r\n        return <MenuListItemsDirector />;\r\n      default:\r\n        return \"You are not authorised user!\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        {/* \"flex-end\" */}\r\n\r\n        <div className={classes.toolbarIcon}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </div>\r\n\r\n        <Divider />\r\n        <List>\r\n          <SwitchCase />\r\n        </List>\r\n      </Drawer>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      //changing the sidebar hide width\r\n      width: theme.spacing(7),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n  image: {\r\n    width: 200,\r\n    height: 1150,\r\n  },\r\n  img: {\r\n    margin: \"auto\",\r\n    display: \"block\",\r\n    maxWidth: \"100%\",\r\n    maxHeight: \"100%\",\r\n  },\r\n}));\r\n\r\nexport default SideDrawer;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleExpense.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\Appbanner.js",["1395"],"import React from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Button, Heading, HStack, Tooltip } from \"@chakra-ui/react\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\n//import Tooltip from \"@material-ui/core/Tooltip\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ExitToApplication from \"@material-ui/icons/ExitToApp\";\r\n//import Badge from \"@material-ui/core/Badge\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\n//import NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useUser } from \"./user/useUser\";\r\nimport App from \"../utils/firebase\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst Appbanner = ({\r\n  handleDrawerOpen,\r\n  handleDrawerClose,\r\n  handleSelect,\r\n  open,\r\n  title,\r\n}) => {\r\n  let navigate = useNavigate();\r\n  const classes = useStyles();\r\n  const { user, clearUser } = useUser();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n\r\n  const handleExit = (e) => {\r\n    e.preventDefault();\r\n    setLoginLevel({ ...loginLevel, login: false });\r\n    clearUser();\r\n    App.auth().signOut();\r\n    navigate(\"/\");\r\n  };\r\n\r\n  return (\r\n    <AppBar\r\n      position=\"absolute\"\r\n      className={clsx(classes.appBar, open && classes.appBarShift)}\r\n    >\r\n      <Toolbar className={classes.toolbar}>\r\n        <IconButton\r\n          edge=\"start\"\r\n          color=\"inherit\"\r\n          aria-label=\"open drawer\"\r\n          onClick={handleDrawerOpen}\r\n          className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n        >\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <Typography\r\n          component=\"h1\"\r\n          variant=\"h6\"\r\n          color=\"inherit\"\r\n          noWrap\r\n          className={classes.title}\r\n        >\r\n          {title}\r\n        </Typography>\r\n        {/* <Heading size=\"md\">\r\n          {title}\r\n        </Heading> */}\r\n        <HStack justifyContent=\"flex-start\" px={2}>\r\n          <Button\r\n            colorScheme=\"white\"\r\n            aria-label=\"Staff\"\r\n            onClick={() => {\r\n              navigate(\"/\");\r\n              handleSelect(\"Staff\");\r\n            }}\r\n          >\r\n            <Heading size=\"sm\">Staff</Heading>\r\n          </Button>\r\n          {(loginLevel.loginRole === 2 ||\r\n            loginLevel.loginUserId === \"admin\") && (\r\n            <Button\r\n              colorScheme=\"white\"\r\n              aria-label=\"Admin\"\r\n              onClick={() => {\r\n                navigate(\"/\");\r\n                handleSelect(\"Admin\");\r\n              }}\r\n            >\r\n              <Heading size=\"sm\">Admin</Heading>\r\n            </Button>\r\n          )}\r\n          {(loginLevel.loginRole === 3 ||\r\n            loginLevel.loginUserId === \"admin\") && (\r\n            <Button\r\n              colorScheme=\"white\"\r\n              aria-label=\"Ops Supervisor\"\r\n              onClick={() => {\r\n                navigate(\"/\");\r\n                handleSelect(\"OpsSpvr\");\r\n              }}\r\n            >\r\n              <Heading size=\"sm\">Ops Supervisor</Heading>\r\n            </Button>\r\n          )}\r\n          {(loginLevel.loginRole === 4 ||\r\n            loginLevel.loginUserId === \"admin\") && (\r\n            <Button\r\n              colorScheme=\"white\"\r\n              aria-label=\"Admin Manager\"\r\n              onClick={() => {\r\n                navigate(\"/\");\r\n                handleSelect(\"AdminManager\");\r\n              }}\r\n            >\r\n              <Heading size=\"sm\">Admin Manager</Heading>\r\n            </Button>\r\n          )}\r\n          {(loginLevel.loginRole === 5 ||\r\n            loginLevel.loginUserId === \"admin\") && (\r\n            <Button\r\n              colorScheme=\"white\"\r\n              aria-label=\"Manager\"\r\n              onClick={() => {\r\n                navigate(\"/\");\r\n                handleSelect(\"Manager\");\r\n              }}\r\n            >\r\n              <Heading size=\"sm\">Manager</Heading>\r\n            </Button>\r\n          )}\r\n          {(loginLevel.loginRole === 6 ||\r\n            loginLevel.loginUserId === \"admin\") && (\r\n            <Button\r\n              colorScheme=\"white\"\r\n              aria-label=\"Director\"\r\n              onClick={() => {\r\n                navigate(\"/\");\r\n                handleSelect(\"Director\");\r\n              }}\r\n            >\r\n              <Heading size=\"sm\">Director</Heading>\r\n            </Button>\r\n          )}\r\n        </HStack>\r\n        <HStack>\r\n          {/* <Text fontSize=\"18\"> */}\r\n          {loginLevel.loginUser && (\r\n            <Heading size=\"sm\">{loginLevel.loginEmail}!</Heading>\r\n          )}\r\n          {/* </Text> */}\r\n        </HStack>\r\n        {/* <IconButton color=\"inherit\">\r\n          <Badge badgeContent={0} color=\"secondary\">\r\n            <NotificationsIcon />\r\n          </Badge>\r\n        </IconButton> */}\r\n\r\n        <Tooltip label=\"Logout\">\r\n          <IconButton color=\"inherit\" onClick={(e) => handleExit(e)}>\r\n            <ExitToApplication />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default Appbanner;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleDailyAllowance.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\SingleDailyAllowsDetls.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\SingleEmployeeStaff.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\Payrun.js",["1396","1397","1398"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport MaterialTable from \"material-table\";\r\nimport clsx from \"clsx\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  Paper,\r\n  Grid,\r\n  Icon,\r\n  Divider,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  Box,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  //Select,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\n// import {\r\n//   Input,\r\n//   InputGroup,\r\n//   InputLeftAddon,\r\n//   NumberInput,\r\n//   NumberInputField,\r\n//   NumberInputStepper,\r\n//   NumberIncrementStepper,\r\n//   NumberDecrementStepper,\r\n//   Stack,\r\n//} from \"@chakra-ui/react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\nimport { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\nimport { payrunState, payrunIdState } from \"./data/atomdata\";\r\n//import { usePayrun } from \"./payrun/usePayrun\";\r\nimport { useCurrency } from \"./currency/useCurrency\";\r\n//import { useExpenses } from \"./expenses/useExpenses\";\r\nimport UpdateCurrency from \"./CurrencyTable\";\r\n//import { usePayslipsBatch } from \"./payslips/usePayslipsBatch\";\r\n\r\n//const drawerWidth = 240;\r\n// const selectmonths = [\r\n//   { mth: \"January\" },\r\n//   { mth: \"February\" },\r\n//   { mth: \"March\" },\r\n//   { mth: \"April\" },\r\n//   { mth: \"May\" },\r\n//   { mth: \"June\" },\r\n//   { mth: \"July\" },\r\n//   { mth: \"August\" },\r\n//   { mth: \"September\" },\r\n//   { mth: \"October\" },\r\n//   { mth: \"November\" },\r\n//   { mth: \"December\" },\r\n// ];\r\n\r\nconst Payrun = () => {\r\n  let navigate = useNavigate();\r\n  //let date = new Date();\r\n  //let longMonth = date.toLocaleString(\"en-us\", { month: \"long\" });\r\n\r\n  const classes = useStyles();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  //const { payrun } = usePayrun();\r\n  //const { payslipsbatch, psbpayrunId, setPSBPayrunId } = usePayslipsBatch();\r\n  const { currency } = useCurrency();\r\n  //const { expenses, setPayrunId } = useExpensesPayrun();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [loadPaybatch, setLoadPaybatch] = useState(false);\r\n  const { loadEmployees, employees } = useEmployeesContext();\r\n  const { loadUnpaidExpenses, unpaidexpenses, updateExpense } =\r\n    useExpensesContext();\r\n  const { unpaiddailyallows, loadUnpaidDailyAllows, updateDailyAllowance } =\r\n    useDailyAllowancesContext();\r\n  const {\r\n    addPayrun,\r\n    getPayrun,\r\n    payrun,\r\n    payrun_loading,\r\n    addPayslip,\r\n    resetPayslipsData,\r\n    singlebatch_payslip_loading,\r\n    setPayslipPeriod,\r\n  } = usePayslipsContext();\r\n  const [input, setInput] = useRecoilState(payrunState);\r\n  const [payrunid, setPayrunId] = useRecoilState(payrunIdState);\r\n  const [alert, setAlert] = useState(false);\r\n  const [error] = useState(false);\r\n  const [errornoselect, setErrornoselect] = useState(false);\r\n  const [isPayrunExist, setIsPayrunExist] = useState(false);\r\n  const [isSubmit, setIsSubmit] = useState(false);\r\n\r\n  //filter regisned employees\r\n  const allemployees = employees.filter((r) => !r.hasresigned && !r.nonpayroll);\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"NAME\",\r\n        field: \"name\",\r\n        editable: \"never\",\r\n        cellStyle: {\r\n          width: 280,\r\n          maxWidth: 280,\r\n        },\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!payrun_loading) {\r\n      setLoadPaybatch(false);\r\n    }\r\n  }, [loadPaybatch]);\r\n\r\n  function formatDate(string) {\r\n    var options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\r\n    return new Date(string).toLocaleDateString(\"en-GB\", options);\r\n  }\r\n\r\n  function formatPayrun() {\r\n    // const yy =\r\n    //   input.fromdate.substring(0, 4) + \"-\" + input.fromdate.substring(5, 7);\r\n    // const mm = input.fromdate.substring(5, 7);\r\n    // const d = input.fromdate;\r\n  }\r\n\r\n  const payrunExists = (data) => {\r\n    return payrun.some(function (el) {\r\n      return el.payrun === data;\r\n    });\r\n  };\r\n  const handleChange = (e) => {\r\n    setInput({ ...input, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handlePayrunSubmit = (e) => {\r\n    e.preventDefault();\r\n    setPayrunId(\"\");\r\n    var count = allemployees.reduce((acc, r) => {\r\n      if (r.tableData.checked) {\r\n        return acc + 1;\r\n      } else {\r\n        return acc;\r\n      }\r\n    }, 0);\r\n    //console.log(\"count\", count);\r\n    if (count === 0) {\r\n      setErrornoselect(true);\r\n      setTimeout(() => {\r\n        setErrornoselect(false);\r\n      }, 3000);\r\n      return null;\r\n    }\r\n\r\n    const period =\r\n      formatDate(input.fromdate) + \" - \" + formatDate(input.todate);\r\n    const payrundata =\r\n      input.fromdate.substring(0, 4) + \"-\" + input.fromdate.substring(5, 7);\r\n    setInput({\r\n      ...input,\r\n      period: period,\r\n      payrun: payrundata,\r\n      status: \"New\",\r\n    });\r\n    formatPayrun();\r\n    setPayslipPeriod(payrundata);\r\n    const isExist = payrunExists(payrundata);\r\n\r\n    if (isExist) {\r\n      //console.log(\"exist\");\r\n      setIsPayrunExist(true);\r\n      setIsSubmit(false);\r\n      setAlert(true);\r\n    } else {\r\n      //console.log(\"add\");\r\n      checkSelectedEmployees(period, payrundata);\r\n      add_Payrun(period, payrundata);\r\n      setIsPayrunExist(false);\r\n      setAlert(true);\r\n      setIsSubmit(true);\r\n      setLoadPaybatch(true);\r\n    }\r\n  };\r\n\r\n  const checkSelectedEmployees = (period, payrun) => {\r\n    //console.log(\"payrun\", payrun, period);\r\n    var exp = 0,\r\n      allows = 0,\r\n      tmpbasicsalary = 0,\r\n      tmptotalallows = 0,\r\n      tmptotalTAP = 0,\r\n      tmptotalSCP = 0,\r\n      //tmpsiteallows = 0,\r\n      //tmpexpsclaims = 0,\r\n      tmpnettpay = 0,\r\n      tmpcurrrate = 0,\r\n      tmpbasicsalarybnd = 0,\r\n      tmptotalallowsbnd = 0,\r\n      tmptotalTAPbnd = 0,\r\n      tmptotalSCPbnd = 0,\r\n      tmpsiteallowsbnd = 0,\r\n      tmpexpsclaimsbnd = 0,\r\n      tmpnettpaybnd = 0;\r\n\r\n    resetPayslipsData();\r\n    allemployees &&\r\n      allemployees.forEach((emp, index) => {\r\n        exp = 0;\r\n        allows = 0;\r\n        tmpbasicsalary = 0;\r\n        tmptotalallows = 0;\r\n        tmptotalTAP = 0;\r\n        tmptotalSCP = 0;\r\n        tmpnettpay = 0;\r\n        tmpcurrrate = 0;\r\n        tmpbasicsalarybnd = 0;\r\n        tmptotalallowsbnd = 0;\r\n        tmptotalTAPbnd = 0;\r\n        tmpsiteallowsbnd = 0;\r\n        tmpexpsclaimsbnd = 0;\r\n        tmptotalSCPbnd = 0;\r\n        tmpnettpaybnd = 0;\r\n\r\n        if (emp.tableData.checked) {\r\n          exp = 0;\r\n          if (unpaidexpenses) {\r\n            unpaidexpenses\r\n              .filter((r) => r.empid === emp.id)\r\n              .map((i) => {\r\n                updateExpense({ id: i.id, payrun: payrun });\r\n                return (exp = exp + i.amount);\r\n              });\r\n          }\r\n          allows = 0;\r\n          if (unpaiddailyallows) {\r\n            unpaiddailyallows\r\n              .filter((r) => r.empid === emp.id)\r\n              .map((i) => {\r\n                updateDailyAllowance({ id: i.id, payrun: payrun });\r\n                return (allows = allows + i.amount);\r\n              });\r\n          }\r\n\r\n          const {\r\n            id,\r\n            name,\r\n            bank_name,\r\n            bank_acno,\r\n            basic_salary,\r\n            salary_currency,\r\n            tap_acno,\r\n            scp_acno,\r\n            tap_checkbox,\r\n          } = emp;\r\n\r\n          tmpbasicsalary = basic_salary;\r\n\r\n          if (salary_currency && salary_currency !== \"BND\") {\r\n            const table = currency\r\n              .filter((r) => r.currency === salary_currency)\r\n              .map((rec) => {\r\n                return { ...rec };\r\n              });\r\n            tmpcurrrate = table[0].rate;\r\n          } else {\r\n            tmpcurrrate = 1;\r\n          }\r\n\r\n          //console.log(\"USD\", table, basic_salary, tmpbasicsalary);\r\n          //tmptotalallows = allows + exp;\r\n          tmptotalTAP = tap_checkbox ? Math.ceil(tmpbasicsalary * 0.05) : 0;\r\n          tmptotalSCP = tap_checkbox\r\n            ? Math.round((tmpbasicsalary + Number.EPSILON) * 0.035 * 100) / 100\r\n            : 0;\r\n          if (tmptotalSCP > 98) {\r\n            tmptotalSCP = 98;\r\n          }\r\n          tmpnettpay =\r\n            tmpbasicsalary +\r\n            allows +\r\n            exp +\r\n            tmptotalallows -\r\n            tmptotalTAP -\r\n            tmptotalSCP;\r\n\r\n          tmpbasicsalarybnd =\r\n            Math.round((basic_salary + Number.EPSILON) * tmpcurrrate * 100) /\r\n            100;\r\n\r\n          tmptotalTAPbnd =\r\n            Math.round((tmptotalTAP + Number.EPSILON) * tmpcurrrate * 100) /\r\n            100;\r\n          tmptotalSCPbnd =\r\n            Math.round((tmptotalSCP + Number.EPSILON) * tmpcurrrate * 100) /\r\n            100;\r\n          tmpnettpaybnd =\r\n            Math.round((tmpnettpay + Number.EPSILON) * tmpcurrrate * 100) / 100;\r\n          tmpsiteallowsbnd =\r\n            Math.round((allows + Number.EPSILON) * tmpcurrrate * 100) / 100;\r\n          tmpexpsclaimsbnd =\r\n            Math.round((exp + Number.EPSILON) * tmpcurrrate * 100) / 100;\r\n\r\n          tmpnettpaybnd =\r\n            tmpbasicsalarybnd +\r\n            tmpsiteallowsbnd +\r\n            tmpexpsclaimsbnd -\r\n            tmptotalTAPbnd -\r\n            tmptotalSCPbnd;\r\n\r\n          const data = {\r\n            name: name,\r\n            period: period,\r\n            pay_date: input.pay_date,\r\n            payrun: payrun,\r\n            bank_name: bank_name,\r\n            bank_acno: bank_acno,\r\n            salary_currency: salary_currency ? salary_currency : \"BND\",\r\n            currency_rate: tmpcurrrate,\r\n            tap_acno: tap_acno,\r\n            scp_acno: scp_acno,\r\n            tap_checkbox: tap_checkbox,\r\n            empid: id,\r\n            status: \"Pending\",\r\n            allows_type1: \"Site Allowances\",\r\n            allows_type1amt: allows,\r\n            allows_type2: \"Expenses Claims\",\r\n            allows_type2amt: exp,\r\n            allows_type3: \" \",\r\n            allows_type3amt: 0,\r\n            allows_type4: \" \",\r\n            allows_type4amt: 0,\r\n            allows_type5: \" \",\r\n            allows_type5amt: 0,\r\n            allows_type6: \" \",\r\n            allows_type6amt: 0,\r\n            allows_type7: \" \",\r\n            allows_type7amt: 0,\r\n            allows_type8: \" \",\r\n            allows_type8amt: 0,\r\n            deducts_type1: \" \",\r\n            deducts_type1amt: 0,\r\n            deducts_type2: \" \",\r\n            deducts_type2amt: 0,\r\n            deducts_type3: \" \",\r\n            deducts_type3amt: 0,\r\n            deducts_type4: \" \",\r\n            deducts_type4amt: 0,\r\n            deducts_type5: \" \",\r\n            deducts_type5amt: 0,\r\n            deducts_type6: \" \",\r\n            deducts_type6amt: 0,\r\n            deducts_type7: \" \",\r\n            deducts_type7amt: 0,\r\n            deducts_type8: \" \",\r\n            deducts_type8amt: 0,\r\n\r\n            wages: tmpbasicsalary,\r\n            tap_amount: tmptotalTAP,\r\n            scp_amount: tmptotalSCP,\r\n            total_allowances: tmptotalallows,\r\n            total_deductions: 0,\r\n            site_allows: allows,\r\n            expenses_claims: exp,\r\n            nett_pay: tmpnettpay,\r\n\r\n            wages_bnd: tmpbasicsalarybnd,\r\n            site_allows_bnd: tmpsiteallowsbnd,\r\n            expenses_claims_bnd: tmpexpsclaimsbnd,\r\n            total_allowances_bnd: tmptotalallowsbnd,\r\n            total_deductions_bnd: 0,\r\n            tap_amount_bnd: tmptotalTAPbnd,\r\n            scp_amount_bnd: tmptotalSCPbnd,\r\n            nett_pay_bnd: tmpnettpaybnd,\r\n          };\r\n          addPayslip({ ...data });\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleNext = () => {\r\n    navigate(\"/payrunbatch\");\r\n  };\r\n\r\n  const add_Payrun = (period, payrun) => {\r\n    //update payrun\r\n    addPayrun({\r\n      pay_freq: input.payfreq,\r\n      from_date: input.fromdate,\r\n      to_date: input.todate,\r\n      pay_date: input.paydate,\r\n      period: period,\r\n      payrun: payrun,\r\n      status: \"Pending\",\r\n    });\r\n    getPayrun();\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadEmployees();\r\n    loadUnpaidExpenses();\r\n    loadUnpaidDailyAllows();\r\n    getPayrun();\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   loadUnpaidDailyAllows();\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   console.log(\"useEffect here\", input.payrun);\r\n\r\n  //   // getSingleBatchPayslip(input.payrun);\r\n  //   if (singlebatchpayslip) {\r\n  //     checkSelectedEmployees(input.period, input.payrun);\r\n  //     setLoadPaybatch(false);\r\n  //   }\r\n  // }, [loadPaybatch]);\r\n\r\n  //   useEffect(() => {\r\n  //     if (input.period && input.payrun) {\r\n  //       //add_Payrun();\r\n\r\n  //       setAlert(true);\r\n  //     }\r\n  //   }, [input]);\r\n\r\n  return (\r\n    <Paper className={fixedHeightPaper} style={{ backgroundColor: \"659dbd\" }}>\r\n      <section className={classes.section}>\r\n        <Grid\r\n          direction=\"row\"\r\n          container\r\n          spacing={1}\r\n          // style={{ border: \"1px solid white\" }}\r\n        >\r\n          <Grid\r\n            container\r\n            item\r\n            sm={3}\r\n            style={{ border: \"1px solid black\" }}\r\n            direction=\"column\"\r\n            align=\"left\"\r\n          >\r\n            <article className={classes.jobinfo}>\r\n              <h2>Pay Run</h2>\r\n              <form onSubmit={handlePayrunSubmit}>\r\n                <div>\r\n                  {/* <InputLabel\r\n                    htmlFor=\"deduct-customized-native-simple\"\r\n                    className={classes.formLabel}\r\n                  >\r\n                    Copy From\r\n                  </InputLabel>\r\n                  <NativeSelect\r\n                    name=\"copyfrom\"\r\n                    value={\"New\"}\r\n                    style={{\r\n                      padding: 4,\r\n                      marginLeft: 5,\r\n                      width: \"100%\",\r\n                      textAlign: \"left\",\r\n                    }}\r\n                    onChange={(e) => handleChange(e)}\r\n                  >\r\n                    <option value=\"\">New</option>\r\n                    {payrun.map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.payrun}>\r\n                          {row.payrun}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </NativeSelect> */}\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Pay Frequency\"\r\n                    variant=\"filled\"\r\n                    required\r\n                    defaultValue=\"Monthly\"\r\n                    style={{ width: \"100%\" }}\r\n                    name=\"payfreq\"\r\n                    value={input.payfreq}\r\n                    onChange={(e) => handleChange(e)}\r\n                    select\r\n                  >\r\n                    {/* <MenuItem value=\"Weekly\">Weekly</MenuItem> */}\r\n                    <option value=\"Monthly\">Monthly</option>\r\n                  </TextField>\r\n                </div>\r\n                {/* <div>\r\n                  <InputLabel\r\n                    htmlFor=\"deduct-customized-native-simple\"\r\n                    className={classes.formLabel}\r\n                  >\r\n                    Month\r\n                  </InputLabel>\r\n                  <NativeSelect\r\n                    name=\"selectmonth\"\r\n                    defaultValue={longMonth}\r\n                    // value={input.selectmonth}\r\n                    style={{\r\n                      padding: 4,\r\n                      marginLeft: 5,\r\n                      width: \"100%\",\r\n                      textAlign: \"left\",\r\n                    }}\r\n                    onChange={(e) => handleChange(e)}\r\n                  >\r\n                    {selectmonths.map((row, i) => {\r\n                      return (\r\n                        <option key={i} value={row.mth}>\r\n                          {row.mth}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </NativeSelect>\r\n                </div> */}\r\n                <div>\r\n                  <TextField\r\n                    label=\"From Date\"\r\n                    variant=\"filled\"\r\n                    name=\"fromdate\"\r\n                    type=\"date\"\r\n                    value={input.fromdate}\r\n                    required\r\n                    style={{ width: \"100%\" }}\r\n                    onChange={(e) => handleChange(e)}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"To Date\"\r\n                    variant=\"filled\"\r\n                    type=\"date\"\r\n                    name=\"todate\"\r\n                    value={input.todate}\r\n                    required\r\n                    onChange={(e) => handleChange(e)}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Payment Date\"\r\n                    variant=\"filled\"\r\n                    type=\"date\"\r\n                    name=\"paydate\"\r\n                    value={input.paydate}\r\n                    required\r\n                    style={{ width: \"100%\" }}\r\n                    onChange={(e) => handleChange(e)}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <div>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.button}\r\n                      onClick={onOpen}\r\n                      disabled={isSubmit}\r\n                    >\r\n                      Currency Exchange Table\r\n                    </Button>\r\n                  </div>\r\n                  <div>\r\n                    <Button\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.button}\r\n                    >\r\n                      Submit <Icon className={classes.rightIcon}>send</Icon>\r\n                    </Button>\r\n\r\n                    {alert && !isPayrunExist && (\r\n                      <Button\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.button}\r\n                        onClick={handleNext}\r\n                      >\r\n                        Next <Icon className={classes.rightIcon}>send</Icon>\r\n                      </Button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  {alert && !isPayrunExist && !singlebatch_payslip_loading && (\r\n                    <h3>New Payrun being added!</h3>\r\n                  )}\r\n                  {alert && isPayrunExist && (\r\n                    <h3>This payrun already existed!</h3>\r\n                  )}\r\n                </div>\r\n                <div>\r\n                  {error && <h3>This Payrun period already existed!</h3>}\r\n                  {errornoselect && <h3>You must select employees!</h3>}\r\n                </div>\r\n              </form>\r\n            </article>\r\n          </Grid>\r\n          <Divider\r\n            orientation=\"vertical\"\r\n            flexItem\r\n            style={{ background: \"white\" }}\r\n          />\r\n          <Grid\r\n            container\r\n            item\r\n            sm={3}\r\n            style={{ border: \"1px solid black\" }}\r\n            align=\"right\"\r\n          >\r\n            <Box h=\"500\" w=\"full\" overflow=\"scroll\">\r\n              <MaterialTable\r\n                columns={columns}\r\n                //data={employees.filter((r) => !r.hasresigned && !r.nonpayroll)}\r\n                data={allemployees}\r\n                title=\"Employee Listing\"\r\n                options={{\r\n                  filtering: false,\r\n                  search: false,\r\n                  toolbar: true,\r\n                  selection: true,\r\n                  paging: false,\r\n                  pageSize: 10,\r\n                  headerStyle: {\r\n                    backgroundColor: \"#90CDF4\",\r\n                    color: \"primary\",\r\n                  },\r\n                  showTitle: true,\r\n                  // selectionProps: rowData => {\r\n                  //   rowData.tableData.checked = true\r\n                  // }\r\n                }}\r\n              />\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n        <Modal isOpen={isOpen} onClose={onClose}>\r\n          <ModalOverlay />\r\n          <ModalContent>\r\n            <ModalHeader>Currency Table</ModalHeader>\r\n            <ModalCloseButton />\r\n            <ModalBody>\r\n              <Box>\r\n                <UpdateCurrency />\r\n                {/* <Stack spacing={4}>\r\n                  <InputGroup>\r\n                    <InputLeftAddon children=\"USD\" />\r\n                    <Input type=\"text\" placeholder=\"USD Rate\" />\r\n                  </InputGroup>\r\n                  <InputGroup>\r\n                    <InputLeftAddon children=\"MYR\" />\r\n                    <Input type=\"text\" placeholder=\"MYR Rate\" />\r\n                  </InputGroup>\r\n                </Stack> */}\r\n              </Box>\r\n            </ModalBody>\r\n\r\n            <ModalFooter>\r\n              <Button colorScheme=\"blue\" mr={3} onClick={onClose}>\r\n                Close\r\n              </Button>\r\n            </ModalFooter>\r\n          </ModalContent>\r\n        </Modal>\r\n      </section>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  container: {\r\n    margin: 0,\r\n    padding: 0,\r\n    width: \"80vw\",\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"repeat(auto-fill,250px)\",\r\n    gridAutoRows: \"10px\",\r\n    position: \"absolute\",\r\n    left: \"50%\",\r\n    transform: \"translateX(-50%)\",\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"primary\",\r\n  },\r\n  fixedHeight: {\r\n    height: 800,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(10),\r\n    // display: \"flex\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n    border: \"1px solid\",\r\n    width: \"100%\",\r\n    color: \"primary\",\r\n    bcakgroundColor: \"black\",\r\n  },\r\n  card: {\r\n    backgroundColor: \"black\",\r\n  },\r\n  section: {\r\n    width: \"95vw\",\r\n    margin: \"5rem auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n  },\r\n  underline: {\r\n    width: \"5rem\",\r\n    height: \"0.25rem\",\r\n    marginBottom: \"1.25rem\",\r\n    background: \"var(--clr-primary-5)\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n  },\r\n  title: {\r\n    marginbottom: \"4rem\",\r\n    textAlign: \"center\",\r\n  },\r\n  jobscenter: {\r\n    width: \"80vw\",\r\n    margin: \"0 auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n    flexDirection: \"row\",\r\n  },\r\n  btncontainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    marginBottom: \"4rem\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  jobbtn: {\r\n    background: \"transparent\",\r\n    borderColor: \"transparent\",\r\n    textTransform: \"capitalize\",\r\n    fontSize: \"1.25rem\",\r\n    letterSpacing: \"var(--spacing)\",\r\n    margin: \"0 0.5rem\",\r\n    transition: \"var(--transition)\",\r\n    cursor: \"pointer\",\r\n    padding: \"0.25rem 0\",\r\n    lineHeight: \"1\",\r\n    outlineColor: \"var(--clr-primary-10)\",\r\n    \"&:hover\": {\r\n      color: \"var(--clr-primary-5)\",\r\n      boxShadow: \"0 2px var(--clr-primary-5)\",\r\n    },\r\n  },\r\n  activebtn: {\r\n    color: \"var(--clr-primary-5)\",\r\n    boxShadow: \"0 2px var(--clr-primary-5)\",\r\n  },\r\n  jobinfo: {\r\n    fontWeight: \"400\",\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  formLabel: {\r\n    fontSize: 12,\r\n    textAlign: \"left\",\r\n    marginLeft: 8,\r\n    marginTop: 5,\r\n  },\r\n}));\r\n\r\nexport default Payrun;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleDailyAllowsDetlsStaff.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\Example6.js",["1399","1400","1401","1402"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport * as emailjs from \"emailjs-com\";\r\nimport axios from \"axios\";\r\nimport clsx from \"clsx\";\r\n//import Table from \"../helpers/TableContainer\";\r\nimport { Box, Image } from \"@chakra-ui/react\";\r\n//import Paper from \"@material-ui/core/Paper\";\r\n//import { Cloudinary, Transformation } from \"@cloudinary/base\";\r\n// import {Image ,\r\n//   AdvancedImage,\r\n//   accessibility,\r\n//   responsive,\r\n// } from \"@cloudinary/react\";\r\n// Import required actions.\r\n//import { thumbnail, scale } from \"@cloudinary/base/actions/resize\";\r\n//import { byRadius } from \"@cloudinary/base/actions/roundCorners\";\r\n//import { sepia } from \"@cloudinary/base/actions/effect\";\r\n//import { source } from \"@cloudinary/base/actions/overlay\";\r\n//import { opacity, brightness } from \"@cloudinary/base/actions/adjust\";\r\n//import { byAngle } from \"@cloudinary/base/actions/rotate\";\r\n//import { format } from \"@cloudinary/base/actions/delivery\";\r\n// Import required qualifiers.\r\n//import { face } from \"@cloudinary/base/qualifiers/focusOn\";\r\n//import { focusOn } from \"@cloudinary/base/qualifiers/gravity\";\r\n//import { image } from \"@cloudinary/base/qualifiers/source\";\r\n//import { Position } from \"@cloudinary/base/qualifiers/position\";\r\n//import { southEast } from \"@cloudinary/base/qualifiers/compass\";\r\n//import { compass } from \"@cloudinary/base/qualifiers/gravity\";\r\n//import { png } from \"@cloudinary/base/qualifiers/format\";\r\n\r\n//const drawerWidth = 240;\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\n\r\nconst Example = () => {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const [data, setData] = useState([]);\r\n  // const myCld = new Cloudinary({ cloudName: \"dlmzwvakr\" });\r\n  // const myImage = myCld.image(\"sample\");\r\n  const [emailstatus, setEmailStatus] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    axios(\"http://api.tvmaze.com/search/shows?q=girls\")\r\n      .then((res) => {\r\n        setData(res.data);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }, []);\r\n\r\n  // Apply the transformation.\r\n  // myImage\r\n  //   .resize(thumbnail().width(150).height(150).gravity(focusOn(face()))) // Crop the image.\r\n  //   .roundCorners(byRadius(20)) // Round the corners.\r\n  //   .effect(sepia()) // Apply a sepia effect.\r\n  //   .overlay(\r\n  //     // Overlay the Cloudinary logo.\r\n  //     source(\r\n  //       image(\"cloudinary_icon_blue\").transformation(\r\n  //         new Transformation()\r\n  //           .resize(scale(50)) // Resize the logo.\r\n  //           .adjust(opacity(60)) // Adjust the opacity of the logo.\r\n  //           .adjust(brightness(200))\r\n  //       ) // Adjust the brightness of the logo.\r\n  //     ).position(\r\n  //       new Position().gravity(compass(southEast())).offsetX(5).offsetY(5)\r\n  //     ) // Position the logo.\r\n  //   )\r\n  //   .rotate(byAngle(10)) // Rotate the result.\r\n  //   .delivery(format(png())); // Deliver as PNG. */\r\n\r\n  const columns = useMemo(() => [\r\n    {\r\n      Header: \"TV Show\",\r\n      columns: [\r\n        {\r\n          Header: \"Name\",\r\n          accessor: \"show.name\",\r\n        },\r\n        {\r\n          Header: \"Language\",\r\n          accessor: \"show.language\",\r\n        },\r\n        {\r\n          Header: \"Official Site\",\r\n          accessor: \"show.officialSite\",\r\n          Cell: ({ cell: { value } }) =>\r\n            value ? <a href={value}>{value}</a> : \"-\",\r\n        },\r\n        {\r\n          Header: \"Status\",\r\n          accessor: \"show.status\",\r\n        },\r\n        {\r\n          Header: \"Premiered\",\r\n          accessor: \"show.premiered\",\r\n          Cell: ({ cell: { value } }) => value || \"-\",\r\n        },\r\n        {\r\n          Header: \"Time\",\r\n          accessor: \"show.schedule.time\",\r\n          Cell: ({ cell: { value } }) => value || \"-\",\r\n        },\r\n      ],\r\n    },\r\n  ]);\r\n\r\n  const handleButtonClick = () => {\r\n    var data = {\r\n      to_name: \"pvchin\",\r\n      to_email: \"pvchinbn@gmail.com\",\r\n      message: \"This is a reminder!!\",\r\n      cc_to: \"pvchinbn@yahoo.com\",\r\n    };\r\n\r\n    emailjs.send(SERVICE_ID, TEMPLATE_ID, data, USER_ID).then(\r\n      function (response) {\r\n        console.log(response.status, response.text);\r\n        setEmailStatus(\"success\");\r\n      },\r\n      function (err) {\r\n        console.log(err);\r\n        setEmailStatus(\"failure\");\r\n      }\r\n    );\r\n    console.log(\"email\", emailstatus);\r\n    if (emailstatus === \"success\") {\r\n      toast({\r\n        title: \"Invalid email or password!\",\r\n        status: \"warning\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <paper className={fixedHeightPaper} style={{ backgroundColor: \"white\" }}>\r\n      <section className={classes.section}>\r\n        {/* <Image\r\n          cloudName=\"dlmzwvakr\"\r\n          secure=\"true\"\r\n          upload_preset=\"advtrade\"\r\n          publicId=\"smartsecurity-ss3_d21ecw.jpg\"\r\n        >\r\n          <Transformation\r\n            width=\"400\"\r\n            height=\"250\"\r\n            gravity=\"face\"\r\n            crop=\"thumb\"\r\n          />\r\n        </Image> */}\r\n        {/* <div>\r\n          <AdvancedImage cldImg={myImage} />\r\n        </div>{\" \"} */}\r\n\r\n        <Image\r\n          boxSize=\"200px\"\r\n          src=\"https://res.cloudinary.com/dlmzwvakr/image/upload/v1626538637/advtrade/smartsecurity-ss3_d21ecw.jpg\"\r\n          alt=\"Dan Abramov\"\r\n        />\r\n        <div className=\"App\">\r\n          <h1>\r\n            <center>React Table Demo</center>\r\n          </h1>\r\n          {/* <Table columns={columns} data={data} /> */}\r\n          <button onClick={handleButtonClick}>Send Email</button>\r\n        </div>\r\n      </section>\r\n    </paper>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  container: {\r\n    margin: 0,\r\n    padding: 0,\r\n    width: \"80vw\",\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"repeat(auto-fill,250px)\",\r\n    gridAutoRows: \"10px\",\r\n    position: \"absolute\",\r\n    left: \"50%\",\r\n    transform: \"translateX(-50%)\",\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"primary\",\r\n  },\r\n  fixedHeight: {\r\n    height: 800,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(10),\r\n    // display: \"flex\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n    border: \"1px solid\",\r\n    width: \"100%\",\r\n    color: \"primary\",\r\n    bcakgroundColor: \"black\",\r\n  },\r\n  card: {\r\n    backgroundColor: \"black\",\r\n  },\r\n  section: {\r\n    width: \"90vw\",\r\n    margin: \"5rem auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n  },\r\n  underline: {\r\n    width: \"5rem\",\r\n    height: \"0.25rem\",\r\n    marginBottom: \"1.25rem\",\r\n    background: \"var(--clr-primary-5)\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n  },\r\n  title: {\r\n    marginbottom: \"4rem\",\r\n    textAlign: \"center\",\r\n  },\r\n  jobscenter: {\r\n    width: \"80vw\",\r\n    margin: \"0 auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n    flexDirection: \"row\",\r\n  },\r\n  btncontainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    marginBottom: \"4rem\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  jobbtn: {\r\n    background: \"transparent\",\r\n    borderColor: \"transparent\",\r\n    textTransform: \"capitalize\",\r\n    fontSize: \"1.25rem\",\r\n    letterSpacing: \"var(--spacing)\",\r\n    margin: \"0 0.5rem\",\r\n    transition: \"var(--transition)\",\r\n    cursor: \"pointer\",\r\n    padding: \"0.25rem 0\",\r\n    lineHeight: \"1\",\r\n    outlineColor: \"var(--clr-primary-10)\",\r\n    \"&:hover\": {\r\n      color: \"var(--clr-primary-5)\",\r\n      boxShadow: \"0 2px var(--clr-primary-5)\",\r\n    },\r\n  },\r\n  activebtn: {\r\n    color: \"var(--clr-primary-5)\",\r\n    boxShadow: \"0 2px var(--clr-primary-5)\",\r\n  },\r\n  jobinfo: {\r\n    fontWeight: \"400\",\r\n  },\r\n}));\r\n\r\nexport default Example;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleEmployee.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\ApprovalManager.js",["1403","1404","1405","1406","1407"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\nimport { Grid, Container, Box } from \"@material-ui/core\";\r\nimport { useDisclosure } from \"@chakra-ui/react\";\r\n//import CardLayout from \"../helpers/CardLayout\";\r\n//import CardLayout2 from \"../helpers/CardLayout2\";\r\nimport CardLayout3 from \"../helpers/CardLayout3\";\r\nimport Copyright from \"./Copyright\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { useRecoilState } from \"recoil\";\r\n//import { loginLevelState } from \"./data/atomdata\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\n//import LeaveTableViewManager from \"./LeaveTableViewManager\";\r\n//import LeaveTableManager from \"./LeaveTableManager\";\r\n//import ExpenseTableView from \"./ExpenseTableView\";\r\n//import ExpenseTableManager from \"./ExpenseTableManager\";\r\n//import PayslipTableViewManager from \"./PayslipTableViewManager\";\r\n//import PayslipTableAdmin from \"./PayslipTableAdmin\";\r\n//import DailyAllowancesTableView from \"./DailyAllowancesTableView\";\r\n//import DailyAllowancesTableAdmin from \"./DailyAllowancesTableAdmin\";\r\n//import OnLeavesView from \"./OnLeavesView\";\r\n//import WPExpiryView from \"./WPExpiryView\";\r\nimport { useDailyAllowsStatus } from \"./dailyallows/useDailyAllowsStatus\";\r\n\r\nconst LeaveTableViewManager = React.lazy(() =>\r\n  import(\"./LeaveTableViewManager\")\r\n);\r\nconst LeaveTableManager = React.lazy(() => import(\"./LeaveTableManager\"));\r\nconst ExpenseTableView = React.lazy(() => import(\"./ExpenseTableView\"));\r\nconst ExpenseTableManager = React.lazy(() => import(\"./ExpenseTableManager\"));\r\nconst PayslipTableViewManager = React.lazy(() =>\r\n  import(\"./PayslipTableViewManager\")\r\n);\r\nconst PayslipTableAdmin = React.lazy(() => import(\"./PayslipTableAdmin\"));\r\nconst DailyAllowancesTableViewManager = React.lazy(() =>\r\n  import(\"./DailyAllowancesTableViewManager\")\r\n);\r\nconst DailyAllowancesTableManager = React.lazy(() =>\r\n  import(\"./DailyAllowancesTableManager\")\r\n);\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst FILTERSTRING = \"Pending\";\r\n\r\nconst EmployeeView = () => {\r\n  const classes = useStyles();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  //const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const [leavesdata, setLeavesdata] = useState([]);\r\n  const [isLeaveDialogOpen, setIsLeaveDialogOpen] = useState(false);\r\n  const [expensesdata, setExpensesdata] = useState([]);\r\n  const [isExpenseDialogOpen, setIsExpenseDialogOpen] = useState(false);\r\n  const [payslipsdata, setPayslipsdata] = useState([]);\r\n  const [isPayslipDialogOpen, setIsPayslipDialogOpen] = useState(false);\r\n  const [dailyallowancesdata, setDailyAllowancesdata] = useState([]);\r\n  const [isDailyAllowancesDialogOpen, setIsDailyAllowancesDialogOpen] =\r\n    useState(false);\r\n  const { dailyallowsstatus, setDailyAllowsStatusId } = useDailyAllowsStatus();\r\n  const { leaves, loadPendingLeaves } = useLeavesContext();\r\n  const { expenses, loadPendingExpenses } = useExpensesContext();\r\n  const { loadPendingPayslips } = usePayslipsContext();\r\n  const { loadPendingDailyAllowances } = useDailyAllowancesContext();\r\n \r\n\r\n  const handleLeaveDialogOpen = () => {\r\n    setLeavesdata([]);\r\n    setLeavesdata([...leaves]);\r\n    setIsLeaveDialogOpen(true);\r\n  };\r\n\r\n  const handleLeaveDialogClose = () => {\r\n    setIsLeaveDialogOpen(false);\r\n    loadPendingLeaves(FILTERSTRING);\r\n  };\r\n\r\n  const handleExpenseDialogOpen = () => {\r\n    setExpensesdata([]);\r\n    setExpensesdata({ ...expenses });\r\n    setExpensesdata({ ...expenses });\r\n    setIsExpenseDialogOpen(true);\r\n  };\r\n\r\n  const handleExpenseDialogClose = () => {\r\n    setIsExpenseDialogOpen(false);\r\n    loadPendingExpenses(FILTERSTRING);\r\n  };\r\n\r\n  const handlePayslipDialogOpen = () => {\r\n    setPayslipsdata([]);\r\n    //setPayslipsdata([...batchpayslips]);\r\n    setIsPayslipDialogOpen(true);\r\n  };\r\n\r\n  const handlePayslipDialogClose = () => {\r\n    setIsPayslipDialogOpen(false);\r\n    loadPendingPayslips(FILTERSTRING);\r\n  };\r\n\r\n  const handleDailyAllowancesDialogOpen = () => {\r\n    setDailyAllowancesdata([]);\r\n    setDailyAllowancesdata([...dailyallowsstatus]);\r\n    setIsDailyAllowancesDialogOpen(true);\r\n  };\r\n\r\n  const handleDailyAllowancesDialogClose = () => {\r\n    setIsDailyAllowancesDialogOpen(false);\r\n    loadPendingDailyAllowances(FILTERSTRING);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   setDailyAllowsStatusId(\"Verified\");\r\n  // },[])\r\n\r\n  const dailyallowsfiltered = dailyallowancesdata.filter(\r\n    (r) => r.status === \"Submitted\" || r.status === \"Verified\"\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.appBarSpacer} />\r\n      <div style={{ paddingLeft: 50 }}>\r\n        {/* <h2>Welcome {loginLevel.loginUser}!</h2>\r\n        <h3>Dashboard</h3> */}\r\n      </div>\r\n      <Container maxWidth=\"lg\" className={classes.container}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={8} lg={12}>\r\n            <CardLayout3\r\n              title=\"Leaves pending for approval\"\r\n              handleClick={handleLeaveDialogOpen}\r\n            >\r\n              <LeaveTableViewManager />\r\n            </CardLayout3>\r\n          </Grid>\r\n          <Grid item xs={12} md={8} lg={12}>\r\n            <CardLayout3\r\n              title=\"Expenses pending for approval\"\r\n              handleClick={handleExpenseDialogOpen}\r\n            >\r\n              <ExpenseTableView />\r\n            </CardLayout3>\r\n          </Grid>\r\n          <Grid item xs={12} md={8} lg={12}>\r\n            <CardLayout3\r\n              title=\"Site Allowances pending for approval\"\r\n              handleClick={handleDailyAllowancesDialogOpen}\r\n            >\r\n              <DailyAllowancesTableViewManager />\r\n            </CardLayout3>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={8} lg={12}>\r\n            <CardLayout3\r\n              title=\"Payroll pending for approval\"\r\n              handleClick={handlePayslipDialogOpen}\r\n            >\r\n              <PayslipTableViewManager />\r\n            </CardLayout3>\r\n          </Grid>\r\n        </Grid>\r\n        <Box pt={4}>\r\n          <Copyright />\r\n        </Box>\r\n        <CustomDialog\r\n          isOpen={isLeaveDialogOpen}\r\n          handleClose={handleLeaveDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <LeaveTableManager\r\n            setLeavesdata={setLeavesdata}\r\n            //leavesdata={leavesdata}\r\n            handleDialogClose={handleLeaveDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isExpenseDialogOpen}\r\n          handleClose={handleExpenseDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <ExpenseTableManager\r\n            setExpensesdata={setExpensesdata}\r\n            //expensesdata={expensesdata}\r\n            handleDialogClose={handleExpenseDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isPayslipDialogOpen}\r\n          handleClose={handlePayslipDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={true}\r\n          isFullwidth={false}\r\n        >\r\n          <PayslipTableAdmin\r\n            setPayslipsdata={setPayslipsdata}\r\n            payslipsdata={payslipsdata}\r\n            handleDialogClose={handlePayslipDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isDailyAllowancesDialogOpen}\r\n          handleClose={handleDailyAllowancesDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={true}\r\n          isFullwidth={false}\r\n        >\r\n          <DailyAllowancesTableManager\r\n            setDailyAllowancesdata={setDailyAllowancesdata}\r\n            dailyallowancesdata={dailyallowsfiltered}\r\n            handleDialogClose={handleDailyAllowancesDialogClose}\r\n          />\r\n        </CustomDialog>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default EmployeeView;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\UserAccessTable.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\Payrunbatch.js",["1408","1409","1410","1411","1412","1413"],"import React, { useState, useEffect, useMemo } from \"react\";\r\n//import { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport * as emailjs from \"emailjs-com\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { FiSave, FiCheckCircle, FiMail } from \"react-icons/fi\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\n//import { Button} from \"@material-ui/core\"\r\nimport {\r\n  Box,\r\n  Button,\r\n  Divider,\r\n  Grid,\r\n  GridItem,\r\n  Flex,\r\n  Heading,\r\n  Stack,\r\n  VStack,\r\n  //Spacer,\r\n  Tabs,\r\n  TabList,\r\n  TabPanels,\r\n  Tab,\r\n  TabPanel,\r\n  Table,\r\n  //Thead,\r\n  Tbody,\r\n  //Tfoot,\r\n  //Tr,\r\n  //Th,\r\n  //Td,\r\n  //TableCaption,\r\n  Text,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  //ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  //Wrap,\r\n  //WrapItem,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport PayForm from \"./PayForm\";\r\nimport PaySummary from \"./PaySummary\";\r\nimport PrintPaySummary from \"./PrintPaySummary\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\nimport { usePayrun } from \"./payrun/usePayrun\";\r\nimport { useUpdatePayrun } from \"./payrun/useUpdatePayrun\";\r\nimport { usePayslipsBatch } from \"./payslips/usePayslipsBatch\";\r\nimport { useUpdatePayslips } from \"./payslips/useUpdatePayslips\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport {\r\n  payrunState,\r\n  //paydataState,\r\n  payrunIdState,\r\n  payrunStatusState,\r\n} from \"./data/atomdata\";\r\n//import { useRecoilValue } from \"recoil\";\r\n\r\n//const drawerWidth = 240;\r\n//const PayForm = React.lazy(() => import(\"./PayForm\"));\r\n//const PaySummary = React.lazy(() => import(\"./PaySummary\"));\r\n//const module = await import(\"./PrintPaySummary\"));\r\n\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\n\r\nconst initial_formdata = {\r\n  name: \"\",\r\n  period: \"\",\r\n  pay_date: null,\r\n  payrun: \"\",\r\n  bank_name: \"\",\r\n  bank_acno: \"\",\r\n  salary_currency: \"BND\",\r\n  currency_rate: 1,\r\n  tap_acno: \"\",\r\n  scp_acno: \"\",\r\n  tap_checkbox: false,\r\n  empid: \"\",\r\n  status: \"\",\r\n  allows_type1: \"\",\r\n  allows_type1amt: \"\",\r\n  allows_type2: \"\",\r\n  allows_type2amt: \"\",\r\n  allows_type3: \" \",\r\n  allows_type3amt: 0,\r\n  allows_type4: \"\",\r\n  allows_type4amt: 0,\r\n  allows_type5: \" \",\r\n  allows_type5amt: 0,\r\n  allows_type6: \" \",\r\n  allows_type6amt: 0,\r\n  allows_type7: \" \",\r\n  allows_type7amt: 0,\r\n  allows_type8: \" \",\r\n  allows_type8amt: 0,\r\n  deducts_type1: \" \",\r\n  deducts_type1amt: 0,\r\n  deducts_type2: \" \",\r\n  deducts_type2amt: 0,\r\n  deducts_type3: \" \",\r\n  deducts_type3amt: 0,\r\n  deducts_type4: \" \",\r\n  deducts_type4amt: 0,\r\n  deducts_type5: \" \",\r\n  deducts_type5amt: 0,\r\n  deducts_type6: \" \",\r\n  deducts_type6amt: 0,\r\n  deducts_type7: \" \",\r\n  deducts_type7amt: 0,\r\n  deducts_type8: \" \",\r\n  deducts_type8amt: 0,\r\n\r\n  wages: 0,\r\n  tap_amount: 0,\r\n  scp_amount: 0,\r\n  total_allowances: 0,\r\n  total_deductions: 0,\r\n  site_allows: 0,\r\n  expenses_claims: 0,\r\n  nett_pay: 0,\r\n\r\n  wages_bnd: 0,\r\n  site_allows_bnd: 0,\r\n  expenses_claims_bnd: 0,\r\n  total_allowances_bnd: 0,\r\n  total_deductions_bnd: 0,\r\n  tap_amount_bnd: 0,\r\n  scp_amount_bnd: 0,\r\n  nett_pay_bnd: 0,\r\n};\r\n\r\nconst months = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\",\r\n];\r\n\r\nconst Payrunbatch = () => {\r\n  let navigate = useNavigate();\r\n  //const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  //const componentRef = useRef();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n  //const { register, handleSubmit, control, setValue, reset, watch } = useForm();\r\n\r\n  const {\r\n    //payrun,\r\n    //getSingleBatchPayslip,\r\n    //singlebatchpayslip,\r\n    payslip_period,\r\n    //updatePayslip,\r\n    //updatePayrun,\r\n    //singlebatch_payslip_loading,\r\n    //singlebatch_payslip_error,\r\n  } = usePayslipsContext();\r\n  const { payslipsbatch, psbpayrunId, setPSBPayrunId } = usePayslipsBatch();\r\n  const { employees } = useEmployees();\r\n  const { payrun } = usePayrun();\r\n  const updatePayslip = useUpdatePayslips();\r\n  const updatePayrun = useUpdatePayrun();\r\n  const { loadPayitems, payitems } = useTablesContext();\r\n  const [payrundata, setPayrundata] = useRecoilState(payrunState);\r\n  const [payrunId] = useRecoilState(payrunIdState);\r\n  const [payrunstatus, setPayrunStatus] = useRecoilState(payrunStatusState);\r\n  const [loadFormdata, setLoadFormdata] = useState(false);\r\n  const [loadUpdatedata, setLoadUpdatedata] = useState(false);\r\n  const [formdata, setFormdata] = useState(initial_formdata);\r\n  const [rowindex, setRowIndex] = useState(0);\r\n  const [emponclick, setEmponclick] = useState(false);\r\n  //const [showSumm, setShowSumm] = useState(false);\r\n  const [isCalc, setIsCalc] = useState(false);\r\n  const [isStart, setIsStart] = useState(true);\r\n  const [isShow, setIsShow] = useState(false);\r\n  const [isUpdPayslip, setIsUpdPayslip] = useState(false);\r\n  const [tabno, setTabno] = useState(0);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const singlebatchpayslip = payslipsbatch;\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"name\",\r\n        editable: \"never\",\r\n        cellStyle: {\r\n          width: 280,\r\n          maxWidth: 280,\r\n        },\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    loadPayitems();\r\n    setEmponclick(true);\r\n    // getSingleBatchPayslip(payslip_period);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setRowIndex(0);\r\n    // handleEmpButtonClick(0);\r\n    setEmponclick(false);\r\n  }, [emponclick]);\r\n\r\n  useEffect(() => {\r\n    setLoadFormdata(false);\r\n  }, [loadUpdatedata]);\r\n\r\n  useEffect(() => {\r\n    setPSBPayrunId(payslip_period);\r\n    setIsCalc(true);\r\n  }, [psbpayrunId]);\r\n\r\n  useEffect(() => {\r\n    calcPayrunTotals();\r\n    setIsCalc(false);\r\n  }, [isCalc]);\r\n\r\n  useEffect(() => {\r\n    saveIndividualPayslips();\r\n    setIsUpdPayslip(false);\r\n  }, [isUpdPayslip]);\r\n\r\n  useEffect(() => {\r\n    if (tabno === 1) {\r\n      setIsShow(true);\r\n    } else {\r\n      setIsShow(false);\r\n    }\r\n  }, [tabno]);\r\n\r\n  // useEffect(() => {\r\n  //   handleEmpButtonClick(0);\r\n  //   setIsLoad(false);\r\n  // }, [isLoad]);\r\n\r\n  // const handleShowSumm = (e) => {\r\n  //   e.preventDefault();\r\n  //   setShowSumm(!showSumm);\r\n  // };\r\n\r\n  const sleep = (time) => {\r\n    return new Promise((resolve) => setTimeout(resolve, time));\r\n  };\r\n\r\n  const handlePrintSummary = (e) => {\r\n    e.preventDefault();\r\n    if (payrundata.status === \"Verified\" || payrundata.status === \"Approved\") {\r\n      exportPdfTable(singlebatchpayslip);\r\n    } else {\r\n      //**\r\n      // save individual payslips\r\n      //saveIndividualPayslips();\r\n\r\n      // save payrun\r\n      updatePayrun({\r\n        id: payrunId,\r\n        totalpayroll: payrundata.totalpayroll,\r\n        totalwages: payrundata.totalwages,\r\n        totaltap: payrundata.totaltap,\r\n        totalscp: payrundata.totalscp,\r\n        totalallows: payrundata.totalallows,\r\n        totaldeducts: payrundata.totaldeducts,\r\n        totalsitesallows: payrundata.totalsiteallows,\r\n        totalexpensesclaims: payrundata.totalexpensesclaims,\r\n      });\r\n      exportPdfTable(singlebatchpayslip);\r\n    }\r\n  };\r\n\r\n  const exportPdfTable = (singlebatchpayslip) => {\r\n    PrintPaySummary((singlebatchpayslip = { singlebatchpayslip }));\r\n  };\r\n\r\n  const handleSavePayslips = (e) => {\r\n    e.preventDefault();\r\n\r\n    //calcPayrunTotals();\r\n    // eslint-disable-next-line no-lone-blocks\r\n    // {\r\n    //   singlebatchpayslip.forEach((rec) => {\r\n    //     const { id, rec_id, tableData, ...fields } = rec;\r\n    //     updatePayslip({ id, ...fields });\r\n    //   });\r\n    // }\r\n\r\n    //**\r\n    // save individual payslips\r\n    saveIndividualPayslips();\r\n\r\n    //update payrun\r\n    handleSavePayrun();\r\n    // toast({\r\n    //   title: \"Changes have been saved!\",\r\n    //   status: \"success\",\r\n    // });\r\n    navigate(\"/payslip\");\r\n  };\r\n\r\n  const saveIndividualPayslips = () => {\r\n    if (payrundata.status === \"Pending\") {\r\n      singlebatchpayslip.forEach((rec) => {\r\n        //const { id, rec_id, tableData, ...fields } = rec;\r\n        // const timer = setTimeout(() => {\r\n        //   console.log(\"This will run after 1 second!\");\r\n        //   updatePayslip({ id, ...fields });\r\n        // }, 300);\r\n        if (rec.tableData.checked) {\r\n          const { id, rec_id, tableData, ...fields } = rec;\r\n          console.log(\"updatepayslip\", rec);\r\n          updatePayslip({ id, ...fields });\r\n          //uncheck\r\n          const data = rec;\r\n          data.tableData.checked = false;\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const calcPayrunTotals = () => {\r\n    // if (!psbpayrunId) {\r\n    //   return null;\r\n    // }\r\n    const tmpbatch = singlebatchpayslip\r\n      .filter((r) => r.payrun === payslip_period)\r\n      .map((rec) => {\r\n        return { ...rec };\r\n      });\r\n    //console.log(\"recalc\", tmpbatch);\r\n\r\n    const totalpayroll = tmpbatch.reduce((acc, item) => {\r\n      const value = isNaN(item.nett_pay_bnd) ? 0 : item.nett_pay_bnd;\r\n      return acc + Math.round((value + Number.EPSILON) * 100) / 100;\r\n    }, 0);\r\n    const totalwages = tmpbatch.reduce((acc, item, index) => {\r\n      const value = isNaN(item.wages_bnd) ? 0 : item.wages_bnd;\r\n      return acc + Math.round((value + Number.EPSILON) * 100) / 100;\r\n    }, 0);\r\n    const totaltap = tmpbatch.reduce((acc, item) => {\r\n      const value = isNaN(item.tap_amount_bnd) ? 0 : item.tap_amount_bnd;\r\n      return acc + Math.round((value + Number.EPSILON) * 100) / 100;\r\n    }, 0);\r\n\r\n    const totalscp = tmpbatch.reduce((acc, item) => {\r\n      const value = isNaN(item.scp_amount_bnd) ? 0 : item.scp_amount_bnd;\r\n      return acc + Math.round((value + Number.EPSILON) * 100) / 100;\r\n    }, 0);\r\n\r\n    const totalallows = tmpbatch.reduce((acc, item) => {\r\n      const value = isNaN(item.total_allowances_bnd)\r\n        ? 0\r\n        : item.total_allowances_bnd;\r\n      return acc + Math.round((value + Number.EPSILON) * 100) / 100;\r\n    }, 0);\r\n\r\n    const totaldeducts = tmpbatch.reduce((acc, item) => {\r\n      const value = isNaN(item.total_deductions_bnd)\r\n        ? 0\r\n        : item.total_deductions_bnd;\r\n      return acc + Math.round((value + Number.EPSILON) * 100) / 100;\r\n    }, 0);\r\n\r\n    const totalsiteallows = tmpbatch.reduce((acc, item) => {\r\n      const value = isNaN(item.site_allows_bnd) ? 0 : item.site_allows_bnd;\r\n      return acc + Math.round((value + Number.EPSILON) * 100) / 100;\r\n    }, 0);\r\n\r\n    const totalexpensesclaims = tmpbatch.reduce((acc, item) => {\r\n      const value = isNaN(item.expenses_claims_bnd)\r\n        ? 0\r\n        : item.expenses_claims_bnd;\r\n      return acc + Math.round((value + Number.EPSILON) * 100) / 100;\r\n    }, 0);\r\n\r\n    setPayrundata(\r\n      (prev) =>\r\n        (prev = {\r\n          ...payrundata,\r\n          totalpayroll: totalpayroll,\r\n          totalwages: totalwages,\r\n          totaltap: totaltap,\r\n          totalscp: totalscp,\r\n          totalallows: totalallows,\r\n          totaldeducts: totaldeducts,\r\n          totalsiteallows: totalsiteallows,\r\n          totalexpensesclaims: totalexpensesclaims,\r\n        })\r\n    );\r\n  };\r\n\r\n  const handleSavePayrun = () => {\r\n    if (payrundata.status === \"Verified\" || payrundata.status === \"Approved\") {\r\n      toast({\r\n        title: `This payroll batch has been ${payrundata.status}! No changes can be made!`,\r\n        status: \"warning\",\r\n      });\r\n      return <div></div>;\r\n    }\r\n\r\n    const tmppayrun = payrun.filter((r) => r.payrun === payslip_period);\r\n    //console.log(\"paysave\", tmppayrun[0].id);\r\n    // eslint-disable-next-line no-lone-blocks\r\n    //console.log(\"paybatch\", payslip_period, payrundata);\r\n    updatePayrun({\r\n      id: tmppayrun[0].id,\r\n      totalpayroll: payrundata.totalpayroll,\r\n      totalwages: payrundata.totalwages,\r\n      totaltap: payrundata.totaltap,\r\n      totalscp: payrundata.totalscp,\r\n      totalallows: payrundata.totalallows,\r\n      totaldeducts: payrundata.totaldeducts,\r\n      totalsitesallows: payrundata.totalsiteallows,\r\n      totalexpensesclaims: payrundata.totalexpensesclaims,\r\n    });\r\n    navigate(\"/payslip\");\r\n  };\r\n\r\n  const handleVerifyPayslips = (e) => {\r\n    e.preventDefault();\r\n    setPayrundata((prev) => (prev = { ...payrundata, status: \"Verified\" }));\r\n    setPayrunStatus(\"Verified\");\r\n    console.log(\"Verify\", payrundata);\r\n    //**\r\n    // save individual payslips\r\n    //saveIndividualPayslips();\r\n\r\n    // save payrun\r\n    updatePayrun({\r\n      id: payrunId,\r\n      status: \"Verified\",\r\n      totalpayroll: payrundata.totalpayroll,\r\n      totalwages: payrundata.totalwages,\r\n      totaltap: payrundata.totaltap,\r\n      totalscp: payrundata.totalscp,\r\n      totalallows: payrundata.totalallows,\r\n      totaldeducts: payrundata.totaldeducts,\r\n      totalsitesallows: payrundata.totalsiteallows,\r\n      totalexpensesclaims: payrundata.totalexpensesclaims,\r\n    });\r\n    toast({\r\n      title: \"Batch has been verified!\",\r\n      status: \"success\",\r\n    });\r\n  };\r\n\r\n  const handleEmpButtonClick = (index) => {\r\n    const paydata = singlebatchpayslip[index];\r\n    //setFormdata(prev => prev = initial_formdata);\r\n    setFormdata((prev) => (prev = { ...initial_formdata, ...paydata }));\r\n    //setFormdata({ ...initial_formdata, ...paydata });\r\n    setLoadFormdata(true);\r\n    //**\r\n    setIsUpdPayslip(true);\r\n  };\r\n\r\n  const handleTabChange = (index) => {\r\n    setTabno(index);\r\n    if (index === 1) {\r\n      calcPayrunTotals();\r\n      setIsUpdPayslip(true);\r\n    }\r\n    setIsShow(false);\r\n  };\r\n\r\n  const SentEmailModal = () => {\r\n    return (\r\n      <Box>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={payslipsbatch}\r\n          title=\"Employees\"\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: true,\r\n            selection: true,\r\n            pageSize: 10,\r\n            headerStyle: {\r\n              backgroundColor: \"#daad86\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    colorScheme=\"blue\"\r\n                    isDisabled={payrundata.status !== \"Approve\" ? true : false}\r\n                    onClick={() => handleSentEmail()}\r\n                    leftIcon={<FiMail color=\"white\" fontSize=\"1.5em\" />}\r\n                  >\r\n                    Email\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  const handleSentEmail = (data) => {\r\n    const mth = months[payslip_period.substring(6, 7)];\r\n    const yr = payslip_period.substring(0, 4);\r\n\r\n    payslipsbatch.forEach((pay) => {\r\n      if (pay.tableData.checked) {\r\n        const { name, empid } = pay;\r\n        const emp = employees\r\n          .filter((r) => r.id === empid)\r\n          .map((rec) => {\r\n            return { ...rec };\r\n          });\r\n\r\n        var emaildata = {\r\n          to_name: name,\r\n          to_email: emp[0].email,\r\n          message: `Your payroll for the month of ${mth} ${yr} has been transfered. Please login in to view your payslip!`,\r\n        };\r\n\r\n        emailjs.send(SERVICE_ID, TEMPLATE_ID, emaildata, USER_ID).then(\r\n          function (response) {\r\n            console.log(response.status, response.text);\r\n            toast({\r\n              title: `Email has sent successfully to ${emaildata.to_email}!`,\r\n              status: \"success\",\r\n            });\r\n          },\r\n          function (err) {\r\n            console.log(err);\r\n            toast({\r\n              title: `Email has fail to send to ${emaildata.to_email}!`,\r\n              status: \"warning\",\r\n            });\r\n          }\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      marginLeft={4}\r\n      marginTop={70}\r\n      w=\"98%\"\r\n      h=\"100%\"\r\n      style={{ backgroundColor: \"lightcyan\" }}\r\n    >\r\n      <VStack>\r\n        <Grid templateRows=\"repeat(1,1fr)\" templateColumns=\"repeat(1,1fr)\">\r\n          <GridItem rowSpan={1} colSpan={1}>\r\n            <Grid templateRows=\"repeat(1,1fr)\" templateColumns=\"repeat(10,1fr)\">\r\n              <GridItem rowSpan={1} colSpan={2}></GridItem>\r\n              <GridItem rowSpan={1} colSpan={4}>\r\n                <Box textAlign=\"center\" alignItems=\"center\">\r\n                  <Heading pl=\"10\" pt={2}>\r\n                    Payroll\r\n                  </Heading>\r\n                </Box>\r\n              </GridItem>\r\n              <GridItem rowSpan={1} colSpan={4} pt={0}>\r\n                <Box pt=\"2\" pr={5} alignItems=\"right\" align=\"right\">\r\n                  <Stack spacing={4} direction=\"row\" align=\"center\" pl={150}>\r\n                    <Button\r\n                      width=\"800px\"\r\n                      colorScheme=\"blue\"\r\n                      isDisabled={\r\n                        payrundata.status === \"Verified\" ||\r\n                        payrundata.status === \"Approved\" ||\r\n                        !isShow\r\n                          ? true\r\n                          : false\r\n                      }\r\n                      onClick={(e) => handleSavePayslips(e)}\r\n                      leftIcon={<FiSave color=\"white\" fontSize=\"1.5em\" />}\r\n                    >\r\n                      Save/Exit\r\n                    </Button>\r\n                    <Button\r\n                      isDisabled={!isShow}\r\n                      width=\"500px\"\r\n                      colorScheme=\"blue\"\r\n                      onClick={(e) => handlePrintSummary(e)}\r\n                      leftIcon={<FiSave color=\"white\" fontSize=\"1.5em\" />}\r\n                    >\r\n                      Print\r\n                    </Button>\r\n\r\n                    <Button\r\n                      width=\"500px\"\r\n                      colorScheme=\"blue\"\r\n                      isDisabled={\r\n                        payrundata.status === \"Verified\" ||\r\n                        payrundata.status === \"Approved\" ||\r\n                        payrundata.status === \"New\" ||\r\n                        !isShow\r\n                          ? true\r\n                          : false\r\n                      }\r\n                      onClick={(e) => handleVerifyPayslips(e)}\r\n                      leftIcon={\r\n                        <FiCheckCircle color=\"white\" fontSize=\"1.5em\" />\r\n                      }\r\n                    >\r\n                      Verify\r\n                    </Button>\r\n                    <Button\r\n                      width=\"500px\"\r\n                      colorScheme=\"blue\"\r\n                      isDisabled={\r\n                        payrundata.status !== \"Approved\" ? true : false\r\n                      }\r\n                      onClick={onOpen}\r\n                      leftIcon={<FiMail color=\"white\" fontSize=\"1.5em\" />}\r\n                    >\r\n                      Email\r\n                    </Button>\r\n                  </Stack>\r\n                </Box>\r\n              </GridItem>\r\n            </Grid>\r\n            <Divider\r\n              style={{ border: \"1px solid lightgrey\" }}\r\n              orientation=\"horizontal\"\r\n              colorScheme=\"red\"\r\n              variant=\"solid\"\r\n            />\r\n          </GridItem>\r\n          <GridItem rowSpan={1} colSpan={1}>\r\n            <Tabs defaultIndex={0} onChange={(index) => handleTabChange(index)}>\r\n              <TabList marginLeft={4}>\r\n                <Tab>\r\n                  <Box>\r\n                    <Heading size=\"sm\">Details</Heading>\r\n                  </Box>\r\n                </Tab>\r\n                <Tab>\r\n                  <Box>\r\n                    <Heading size=\"sm\">Summary</Heading>\r\n                  </Box>\r\n                </Tab>\r\n              </TabList>\r\n              <TabPanels>\r\n                <TabPanel>\r\n                  <Grid\r\n                    templateRows=\"repeat(1,1fr)\"\r\n                    templateColumns=\"repeat(10,1fr)\"\r\n                  >\r\n                    <GridItem colSpan={2}>\r\n                      <Box textAlign=\"center\" p={4}>\r\n                        <Heading size=\"sm\" alignItems=\"center\">\r\n                          Employees\r\n                        </Heading>\r\n                      </Box>\r\n                      <Divider backgroundColor=\"white\" />\r\n                      <Box\r\n                        h=\"550\"\r\n                        border=\"2px solid white\"\r\n                        backgroundColor=\"cyan.100\"\r\n                        overflow=\"scroll\"\r\n                      >\r\n                        {/* {payslipsbatch &&\r\n                      payslipsbatch.map((item, index) => {\r\n                        return (\r\n                          <div>\r\n                            <Button\r\n                              className={classes.empbtn}\r\n                              variant=\"outlined\"\r\n                              // ${index === value && \"activebtn\"}\r\n                              onClick={(e) => {\r\n                                setRowIndex(index);\r\n                                handleEmpButtonClick(index);\r\n                              }}\r\n                            >\r\n                              <div key={item.id}> {item.name}</div>\r\n                            </Button>\r\n                            <Divider\r\n                              variant=\"fullWidth\"\r\n                              className={classes.divider}\r\n                            />\r\n                          </div>\r\n                        );\r\n                      })} */}\r\n                        <Table variant=\"simple\">\r\n                          {/* <Thead>\r\n                        <Tr>\r\n                          <Th>Employees</Th>\r\n                        </Tr>\r\n                      </Thead> */}\r\n                          <Tbody>\r\n                            {payslipsbatch.map((item, index) => {\r\n                              return (\r\n                                <div>\r\n                                  <Button\r\n                                    //className={classes.empbtn}\r\n                                    fontSize={{\r\n                                      base: \"10px\",\r\n                                      md: \"10px\",\r\n                                      lg: \"12px\",\r\n                                      xl: \"16px\",\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    height={[\r\n                                      `${\r\n                                        item.name.length > 30 ? \"60px\" : \"40px\"\r\n                                      }`,\r\n                                      \"40px\",\r\n                                    ]}\r\n                                    style={{\r\n                                      whiteSpace: \"normal\",\r\n                                      wordWrap: \"break-word\",\r\n                                    }}\r\n                                    // ${index === value && \"activebtn\"}\r\n                                    onClick={(e) => {\r\n                                      setRowIndex(index);\r\n                                      setIsStart(false);\r\n                                      handleEmpButtonClick(index);\r\n                                    }}\r\n                                  >\r\n                                    <Text align=\"left\">{item.name}</Text>\r\n                                  </Button>\r\n                                  <Divider backgroundColor=\"white\" />\r\n                                </div>\r\n                              );\r\n                            })}\r\n                          </Tbody>\r\n                        </Table>\r\n                      </Box>\r\n                    </GridItem>\r\n                    <GridItem colSpan={8}>\r\n                      <PayForm\r\n                        formdata={formdata}\r\n                        setFormdata={setFormdata}\r\n                        loadFormdata={loadFormdata}\r\n                        setLoadFormdata={setLoadFormdata}\r\n                        payitems={payitems}\r\n                        setLoadUpdatedata={setLoadUpdatedata}\r\n                        singlebatchpayslip={singlebatchpayslip}\r\n                        rowindex={rowindex}\r\n                        isCalc={isCalc}\r\n                        isStart={isStart}\r\n                        setIsStart={setIsStart}\r\n                        setIsCalc={setIsCalc}\r\n                      />\r\n                    </GridItem>\r\n                  </Grid>\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <PaySummary\r\n                    payrundata={payrundata}\r\n                    singlebatchpayslip={singlebatchpayslip}\r\n                  />\r\n                </TabPanel>\r\n              </TabPanels>\r\n            </Tabs>\r\n          </GridItem>\r\n        </Grid>\r\n      </VStack>\r\n      <Modal isOpen={isOpen} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          {/* <ModalHeader>Sending EMail Notifications</ModalHeader> */}\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            <SentEmailModal />\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button colorScheme=\"blue\" mr={3} onClick={onClose}>\r\n              Close\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </Flex>\r\n  );\r\n};\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   root: {\r\n//     flexGrow: 1,\r\n//   },\r\n//   button: {\r\n//     margin: theme.spacing(1),\r\n//   },\r\n//   container: {\r\n//     margin: 0,\r\n//     padding: 0,\r\n//     width: \"80vw\",\r\n//     display: \"grid\",\r\n//     gridTemplateColumns: \"repeat(auto-fill,250px)\",\r\n//     gridAutoRows: \"10px\",\r\n//     position: \"absolute\",\r\n//     left: \"50%\",\r\n//     transform: \"translateX(-50%)\",\r\n//     justifyContent: \"center\",\r\n//     backgroundColor: \"primary\",\r\n//   },\r\n//   fixedHeight: {\r\n//     height: 800,\r\n//   },\r\n//   paper: {\r\n//     paddingTop: theme.spacing(10),\r\n//     // display: \"flex\",\r\n//     display: \"flex\",\r\n//     overflow: \"auto\",\r\n//     flexDirection: \"column\",\r\n//     border: \"1px solid\",\r\n//     width: \"100%\",\r\n//     color: \"primary\",\r\n//     bcakgroundColor: \"white\",\r\n//   },\r\n//   card: {\r\n//     backgroundColor: \"white\",\r\n//   },\r\n//   section: {\r\n//     width: \"80vw\",\r\n//     margin: \"1rem auto\",\r\n//     maxWidth: \"var(--max-width)\",\r\n//   },\r\n//   underline: {\r\n//     width: \"5rem\",\r\n//     height: \"0.25rem\",\r\n//     marginBottom: \"1.25rem\",\r\n//     background: \"var(--clr-primary-5)\",\r\n//     marginLeft: \"auto\",\r\n//     marginRight: \"auto\",\r\n//   },\r\n//   title: {\r\n//     marginbottom: \"4rem\",\r\n//     textAlign: \"center\",\r\n//   },\r\n//   empscenter: {\r\n//     width: \"80vw\",\r\n//     margin: \"0 auto\",\r\n//     maxWidth: \"var(--max-width)\",\r\n//     flexDirection: \"row\",\r\n//   },\r\n//   empcontainer: {\r\n//     display: \"flex\",\r\n//     flexDirection: \"row\",\r\n//     justifyContent: \"center\",\r\n//     marginBottom: \"4rem\",\r\n//     flexWrap: \"wrap\",\r\n//   },\r\n//   empbtn: {\r\n//     background: \"transparent\",\r\n//     borderColor: \"transparent\",\r\n//     textTransform: \"capitalize\",\r\n//     fontSize: \"1rem\",\r\n//     letterSpacing: \"var(--spacing)\",\r\n//     margin: \"0 0.5rem\",\r\n//     transition: \"var(--transition)\",\r\n//     cursor: \"pointer\",\r\n//     padding: \"0.25rem 0\",\r\n//     lineHeight: \"1\",\r\n//     outlineColor: \"var(--clr-primary-10)\",\r\n//     \"&:hover\": {\r\n//       color: \"var(--clr-primary-5)\",\r\n//       boxShadow: \"0 2px var(--clr-primary-5)\",\r\n//     },\r\n//   },\r\n//   activebtn: {\r\n//     color: \"var(--clr-primary-5)\",\r\n//     boxShadow: \"0 2px var(--clr-primary-5)\",\r\n//   },\r\n//   empinfo: {\r\n//     fontWeight: \"400\",\r\n//   },\r\n//   divider: {\r\n//     // Theme Color, or use css color in quote\r\n//     background: \"white\",\r\n//   },\r\n//   textField: {\r\n//     marginLeft: theme.spacing(1),\r\n//     marginRight: theme.spacing(1),\r\n//     width: 350,\r\n//   },\r\n// }));\r\n\r\nexport default Payrunbatch;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\SingleLeave.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\SinglePayslip.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\BatchDailyAllowances.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\AllEmployeesPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\HomePage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\ExpensesPage.js",["1414"],"import React, { useEffect } from \"react\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\n//import { headExpenseTableCells } from \"../utils/constants\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\nimport ExpenseTable from \"../components/ExpenseTable\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst ExpensesPage = () => {\r\n  const classes = useStyles();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const { loadExpenses, expenses_loading } = useExpensesContext();\r\n\r\n  useEffect(() => {\r\n    loadExpenses();\r\n  }, []);\r\n\r\n  if (expenses_loading) {\r\n    return (\r\n      <div>\r\n        <Paper className={fixedHeightPaper}>\r\n          \r\n        <h2>Loading...Expenses</h2>\r\n         </Paper>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div>\r\n      <CssBaseline />\r\n      <div className={classes.appBarSpacer}>\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid container spacing={3}>\r\n            {/* <Grid item xs={12} md={8} lg={9}> */}\r\n            <Grid item xs={12}>\r\n              <Paper className={fixedHeightPaper}>\r\n                <div>\r\n                  <ExpenseTable title=\"Expenses Claims\" />\r\n                </div>\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(9),\r\n    paddingBottom: theme.spacing(4),\r\n    border: \"1px solid\",\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    // display: \"flex\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n    border: \"1px solid\",\r\n    width: \"100%\",\r\n  },\r\n  fixedHeight: {\r\n    // height: 240,\r\n    height: \"85vh\",\r\n  },\r\n}));\r\nexport default ExpensesPage;\r\n","D:\\react-myprojects\\hrms-demo\\src\\pages\\HocPage.js",["1415"],"import React from \"react\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\n//import { Container} from \"@chakra-ui/react\"\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\n//import { headExpenseTableCells } from \"../utils/constants\";\r\n//import { useExpensesContext } from \"../context/expenses_context\";\r\nimport HocTable from \"../components/HocTable\";\r\nimport HocTableStaffView from \"../components/HocTableStaffView\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst HocPage = () => {\r\n  const classes = useStyles();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <CssBaseline />\r\n      <div className={classes.appBarSpacer}>\r\n        <Container className={classes.container}>\r\n          <Grid container spacing={3}>\r\n            {/* <Grid item xs={12} md={8} lg={9}> */}\r\n            <Grid item xs={12}>\r\n              <Paper className={fixedHeightPaper}>\r\n                <div>\r\n                  {/* <HocTable title=\"HOC Table\" /> */}\r\n                  <HocTableStaffView />\r\n                </div>\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(9),\r\n    paddingBottom: theme.spacing(4),\r\n    border: \"1px solid\",\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    // display: \"flex\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n    border: \"1px solid\",\r\n    width: \"100%\",\r\n  },\r\n  fixedHeight: {\r\n    // height: 240,\r\n    height: \"85vh\",\r\n  },\r\n}));\r\nexport default HocPage;\r\n","D:\\react-myprojects\\hrms-demo\\src\\pages\\LeaveStaffPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\LeavePage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\DailyAllowancesStaffPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\PayrollPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\TrainingsStaffPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\BatchPayslipsPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\PayslipPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\ExpensesStaffPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\DailyAllowancesPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\DepartmentsPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\PayslipStaffPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\DesignationPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\AllowancesPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\HOCUpdTablesPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\TablesPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsDirector.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowsDetlsTable.js",["1416","1417","1418","1419","1420","1421"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { TextField, Icon, Button } from \"@material-ui/core\";\r\nimport {\r\n  //selector,\r\n  useRecoilValue,\r\n  //useRecoilState,\r\n  //useRecoilValueLoadable,\r\n  //useRecoilStateLoadable,\r\n} from \"recoil\";\r\nimport {\r\n  //loginLevelState,\r\n  //allowsDataState,\r\n  empidState,\r\n  allowsPeriodState,\r\n} from \"./data/atomdata\";\r\n//import { fetchDailyAllowsDetlsSelector } from \"./data/selectordata\";\r\nimport { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\nimport { useDailyAllowsDetlsBatch } from \"./dailyallowsdetls/useDailyAllowsDetlsBatch\";\r\nimport { useDailyAllows } from \"./dailyallows/useDailyAllows\";\r\n\r\nexport default function DailyAllowsDetlsTable() {\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  // const [allowsDetlsTable, setAllowsDetlsTable] =\r\n  // useRecoilState(allowsDataDetlsState);\r\n  //console.log(\"detlstable\", singlebatch_dailyallowsdetl);\r\n  //const [allowsDetlsdata, setAllowsDetilsdata] = useRecoilStateLoadable(fetchDailyAllowsDetlsSelector);\r\n  //const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const allows_period = useRecoilValue(allowsPeriodState);\r\n  const allows_empid = useRecoilValue(empidState);\r\n  const { dailyallows, dailyAllowsId, setDailyAllowsId } = useDailyAllows();\r\n  const {\r\n    useDailyAllowsDetlsBatch,\r\n    setDailyAllowsDetlsId,\r\n    setDailyAllowsDetlsPeriod,\r\n  } = useDailyAllowsDetlsBatch();\r\n  const {\r\n    dailyallowsdetls,\r\n    //addDailyAllowsDetl,\r\n    //dailyallowsdetls_loading,\r\n    //updateDailyAllowsDetl,\r\n    //deleteDailyAllowsDetl,\r\n    //getSingleBatchDailyAllowsDetl,\r\n    //singlebatch_dailyallowsdetl,\r\n    //singlebatch_dailyallowsdetl_loading,\r\n    //dailyallowance_period,\r\n    //single_dailyallowance,\r\n    //editDailyAllowanceID,\r\n  } = useDailyAllowancesContext();\r\n\r\n  const columns = useMemo(() => [\r\n    {\r\n      title: \"Date\",\r\n      field: \"date\",\r\n      type: \"date\",\r\n      dateSetting: { locale: \"en-GB\" },\r\n      cellStyle: {\r\n        width: 120,\r\n        maxWidth: 120,\r\n      },\r\n      editComponent: (props) => (\r\n        <TextField\r\n          defaultValue={props.value || null}\r\n          onChange={(e) => props.onChange(e.target.value)}\r\n          type=\"date\"\r\n        />\r\n      ),\r\n    },\r\n    { title: \"District\", field: \"district\" },\r\n    { title: \"Operation Type\", field: \"typeoperation\" },\r\n    { title: \"Client\", field: \"client\" },\r\n    { title: \"Location/Rig\", field: \"location\" },\r\n    { title: \"Ticket No/Job No\", field: \"jobno\" },\r\n    { title: \"Crew Operation\", field: \"crewoperation\" },\r\n    {\r\n      title: \"Job Bonus\",\r\n      field: \"jobbonus\",\r\n      type: \"currency\",\r\n      cellStyle: {\r\n        width: 8,\r\n        maxWidth: 8,\r\n      },\r\n      headerStyle: {\r\n        width: 8,\r\n        maxWidth: 8,\r\n      },\r\n    },\r\n    {\r\n      title: \"Per Diem\",\r\n      field: \"perdiem\",\r\n      type: \"currency\",\r\n      cellStyle: {\r\n        width: 8,\r\n        maxWidth: 8,\r\n      },\r\n      headerStyle: {\r\n        width: 8,\r\n        maxWidth: 8,\r\n      },\r\n    },\r\n  ],[]);\r\n\r\n  useEffect(() => {\r\n    setDailyAllowsId(allows_empid);\r\n    setDailyAllowsDetlsPeriod(allows_period);\r\n    setDailyAllowsDetlsId(allows_empid);\r\n  }, [allows_period, allows_empid]);\r\n\r\n  // const add_DailyAllowsDetl = async (data) => {\r\n  //   console.log(\"add\", data);\r\n  //   const { description, amount } = data;\r\n  //   addDailyAllowsDetl({\r\n  //     description: description,\r\n  //     amount: amount,\r\n  //     name: single_dailyallowance.name,\r\n  //     empid: single_dailyallowance.empid,\r\n  //     period: dailyallowance_period,\r\n  //   });\r\n  // };\r\n\r\n  // const delete_DailyAllowance = (data) => {\r\n  //   const { id } = data;\r\n  //   deleteDailyAllowsDetl(id);\r\n  //   //update_Daily Allowances Details;\r\n  //   getSingleBatchDailyAllowsDetl(\r\n  //     single_dailyallowance.empid,\r\n  //     dailyallowance_period\r\n  //   );\r\n  // };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"75%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={dailyallowsdetls}\r\n          title=\"Site Allowances Details\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                // setTimeout(() => {\r\n                //   setAllowsdata([...allowsdata, newData]);\r\n                //   resolve();\r\n                // }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataUpdate = [...dailyallowsdetls];\r\n                  const index = oldData.tableData.id;\r\n                  dataUpdate[index] = newData;\r\n                  //setAllowsDetlsTable([...dataUpdate]);\r\n                  //editable = dataUpdate;\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            // onRowDelete: (oldData) =>\r\n            //   new Promise((resolve, reject) => {\r\n            //     setTimeout(() => {\r\n            //       //const dataDelete = [...allowsDetlsTable];\r\n            //       const index = oldData.tableData.id;\r\n            //       //dataDelete.splice(index, 1);\r\n            //       //setAllowsDetlsTable([...dataDelete]);\r\n\r\n            //       resolve();\r\n            //     }, 1000);\r\n            //   }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    // onClick={Save_Allowsdata}\r\n                  >\r\n                    Update <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n    width: 1500,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeFormStaff.js",["1422","1423","1424","1425","1426","1427","1428","1429"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  TextField,\r\n  Paper,\r\n  Typography,\r\n  Grid,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\n//import { Alert, AlertTitle } from \"@material-ui/lab\";\r\nimport CurrencyTextField from \"@unicef/material-ui-currency-textfield\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\n\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\n//import { useSingleEmployee } from \"./employees/useSingleEmployee\";\r\nimport { useUpdateEmployees } from \"./employees/useUpdateEmployees\";\r\n// import EmpFamilyStaff from \"./EmpFamilyStaff\";\r\n// import EmpEducationsStaff from \"./EmpEducationsStaff\";\r\n// import EmpExperiencesStaff from \"./EmpExperiencesStaff\";\r\nimport EmpFamily from \"./EmpFamily\";\r\nimport EmpEducations from \"./EmpEducations\";\r\nimport EmpExperiences from \"./EmpExperiences\";\r\nimport EmpTrainings from \"./EmpTrainings\";\r\nimport EmpJobhistory from \"./EmpJobhistory\";\r\nimport App from \"../utils/firebase\";\r\n\r\nconst initial_values = {\r\n  name: \"\",\r\n  birthdate: null,\r\n  empno: \"\",\r\n  gender: \"\",\r\n  ic_no: \"\",\r\n  email: \"\",\r\n  age: 0,\r\n  basic_salary: 0,\r\n  salary_currency: \"BND\",\r\n  bank_name: \"\",\r\n  bank_acno: \"\",\r\n  nationality: \"\",\r\n  address: \"\",\r\n  leave_bal: 0,\r\n  leave_bf: 0,\r\n  leave_entitled: 0,\r\n  tap_acno: \"\",\r\n  scp_acno: \"\",\r\n  date_of_join: null,\r\n  date_of_resign: null,\r\n  designation: \"\",\r\n  department: \"\",\r\n  passportno: \"\",\r\n  passport_expirydate: null,\r\n  workpermitno: \"\",\r\n  workpermit_expirydate: null,\r\n  siteallows_fee: 0,\r\n  perdiem_fee: 0,\r\n  reporting_to: \"\",\r\n  reporting_email: \"\",\r\n};\r\n\r\nconst EmployeeForm = () => {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  const { employees, setEmployeeId } = useEmployees();\r\n  //const { singleemployee, setSingleEmployeeId } = useSingleEmployee();\r\n  const updateEmployees = useUpdateEmployees();\r\n  const [empage, setEmpage] = useState(0);\r\n  const [reportemail, setReportEmail] = useState(\"\");\r\n  const { handleSubmit, control, setValue, register } = useForm();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  // const {\r\n  //   isEditing,\r\n  //   single_employee,\r\n  //   editEmployeeID,\r\n  //   getSingleEmployee,\r\n  //   single_employee_loading,\r\n  // } = useEmployeesContext();\r\n  const single_employee = employees\r\n    .filter((r) => r.id === loginLevel.loginUserId)\r\n    .map((r) => {\r\n      return { ...r };\r\n    });\r\n  const {\r\n    name,\r\n    empno,\r\n    birthdate,\r\n    ic_no,\r\n    gender,\r\n    //age,\r\n    email,\r\n    nationality,\r\n    address,\r\n    basic_salary,\r\n    salary_currency,\r\n    bank_name,\r\n    bank_acno,\r\n    tap_acno,\r\n    scp_acno,\r\n    leave_bf,\r\n    leave_entitled,\r\n    date_of_join,\r\n    date_of_resign,\r\n    designation,\r\n    department,\r\n    passportno,\r\n    passport_expirydate,\r\n    workpermitno,\r\n    workpermit_expirydate,\r\n    siteallows_fee,\r\n    perdiem_fee,\r\n    reporting_to,\r\n    reporting_email,\r\n  } = single_employee[0] || initial_values;\r\n\r\n  //console.log(\"single employee\", single_employee);\r\n\r\n  const handleReportingTo = (name) => {\r\n    const emp = employees\r\n      .filter((f) => f.name === name)\r\n      .map((r) => {\r\n        return { ...r };\r\n      });\r\n    setReportEmail(emp[0].email);\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    //console.log(\"Data\",data)\r\n    updateEmployees({ id: loginLevel.loginUserId, ...data });\r\n  };\r\n\r\n  const Reset_PW = () => {\r\n    try {\r\n      App.auth().sendPasswordResetEmail(email);\r\n      toast({\r\n        title: `Reset Password sent to ${email}!`,\r\n        status: \"success\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: `Fail to reset password on ${email}!`,\r\n        status: \"warning\",\r\n      });\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const calculateAge = (dob) => {\r\n    var today = new Date();\r\n    var birthDate = new Date(dob);\r\n    var age = today.getFullYear() - birthDate.getFullYear();\r\n    var m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      age--;\r\n    }\r\n    return age;\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   setEmployeeId(loginLevel.loginUserId);\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    let age = calculateAge(birthdate);\r\n    setEmpage(age);\r\n    setReportEmail(reporting_email);\r\n  }, []);\r\n\r\n  // if (single_employee_loading) {\r\n  //   return (\r\n  //     <div>\r\n  //       <h2>Loading... </h2>\r\n  //     </div>\r\n  //   );\r\n  //}\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <Paper className={classes.root}>\r\n          <Grid container className={classes.root} spacing={15}>\r\n            <div>\r\n              <Typography variant=\"h5\" component=\"h3\">\r\n                EMPLOYEE FORM\r\n              </Typography>\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n              >\r\n                Submit <Icon className={classes.rightIcon}>send</Icon>\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                onClick={Reset_PW}\r\n              >\r\n                Reset PW <Icon className={classes.rightIcon}>send</Icon>\r\n              </Button>\r\n            </div>\r\n          </Grid>\r\n          <Divider className={classes.divider} />\r\n          <Grid item xs={12}>\r\n            <div>\r\n              <div>\r\n                <Controller\r\n                  name=\"name\"\r\n                  control={control}\r\n                  defaultValue={name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Name\"\r\n                        id=\"standard-name\"\r\n                        defaultValue={name}\r\n                        name=\"name\"\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"empno\"\r\n                  control={control}\r\n                  defaultValue={empno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Emp No\"\r\n                        id=\"standard-empno\"\r\n                        name=\"empno\"\r\n                        defaultValue={empno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"email\"\r\n                  control={control}\r\n                  defaultValue={email}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Email\"\r\n                        id=\"standard-email\"\r\n                        name=\"email\"\r\n                        defaultValue={email}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"ic_no\"\r\n                  control={control}\r\n                  defaultValue={ic_no}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"IC No\"\r\n                        id=\"standard-icno\"\r\n                        defaultValue={ic_no}\r\n                        name=\"ic_no\"\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"birthdate\"\r\n                  control={control}\r\n                  defaultValue={birthdate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Birth Date\"\r\n                        id=\"standard-birthdate\"\r\n                        name=\"birthdate\"\r\n                        type=\"date\"\r\n                        defaultValue={birthdate}\r\n                        className={classes.textField}\r\n                        onChange={(e) => {\r\n                          onChange(e.target.value);\r\n                          let age = calculateAge(e.target.value);\r\n                          console.log(\"emp\", birthdate, age);\r\n                          setEmpage(age);\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"age\"\r\n                  control={control}\r\n                  //defaultValue={age}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Age\"\r\n                        type=\"number\"\r\n                        id=\"standard-age\"\r\n                        name=\"age\"\r\n                        value={empage}\r\n                        className={classes.textField}\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(parseInt(e.target.value, 10));\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"passportno\"\r\n                  control={control}\r\n                  defaultValue={passportno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Passport No\"\r\n                        id=\"stanrad-ppno\"\r\n                        name=\"passportno\"\r\n                        defaultValue={passportno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"passport_expirydate\"\r\n                  control={control}\r\n                  defaultValue={passport_expirydate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Passport Expiry Date\"\r\n                        id=\"standard-ppexpiry\"\r\n                        name=\"passport_expirydate\"\r\n                        type=\"date\"\r\n                        defaultValue={passport_expirydate}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"nationality\"\r\n                  control={control}\r\n                  defaultValue={nationality}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Nationality\"\r\n                        id=\"standard-nationality\"\r\n                        name=\"nationality\"\r\n                        defaultValue={nationality}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"gender\"\r\n                  control={control}\r\n                  defaultValue={gender}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Gender\"\r\n                        id=\"standard-gender\"\r\n                        name=\"gender\"\r\n                        defaultValue={gender}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        <MenuItem value=\"Male\">Male</MenuItem>\r\n                        <MenuItem value=\"Female\">Female</MenuItem>\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"address\"\r\n                  control={control}\r\n                  defaultValue={address}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Address\"\r\n                        id=\"standard-address\"\r\n                        name=\"address\"\r\n                        defaultValue={address}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <Divider className={classes.divider} />\r\n            <div>\r\n              <div>\r\n                <Controller\r\n                  name=\"basic_salary\"\r\n                  control={control}\r\n                  defaultValue={basic_salary}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <CurrencyTextField\r\n                        label=\"Basic Salary\"\r\n                        variant=\"standard\"\r\n                        defaultValue={basic_salary}\r\n                        currencySymbol=\"$\"\r\n                        outputFormat=\"number\"\r\n                        decimalCharacter=\".\"\r\n                        digitGroupSeparator=\",\"\r\n                        decimalPlaces=\"2\"\r\n                        className={classes.textField}\r\n                        id=\"standard-basicsalary\"\r\n                        name=\"basic_pay\"\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(parseFloat(e.target.value, 10));\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"salary_currency\"\r\n                  control={control}\r\n                  defaultValue={salary_currency}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Currency\"\r\n                        id=\"standard-currency\"\r\n                        name=\"salary_currency\"\r\n                        defaultValue={salary_currency}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                        select\r\n                      >\r\n                        <MenuItem value=\"BND\">BND</MenuItem>\r\n                        <MenuItem value=\"MYR\">MYR</MenuItem>\r\n                        <MenuItem value=\"USD\">USD</MenuItem>\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"siteallows_fee\"\r\n                  control={control}\r\n                  defaultValue={siteallows_fee}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <CurrencyTextField\r\n                        label=\"Site Allowances Fee\"\r\n                        variant=\"standard\"\r\n                        defaultValue={siteallows_fee}\r\n                        currencySymbol=\"$\"\r\n                        outputFormat=\"number\"\r\n                        decimalCharacter=\".\"\r\n                        digitGroupSeparator=\",\"\r\n                        decimalPlaces=\"2\"\r\n                        className={classes.textField}\r\n                        id=\"standard-siteallowances\"\r\n                        name=\"siteallows_fee\"\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(parseFloat(e.target.value, 10));\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"perdiem_fee\"\r\n                  control={control}\r\n                  defaultValue={perdiem_fee}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <CurrencyTextField\r\n                        label=\"Per Diem Fee\"\r\n                        variant=\"standard\"\r\n                        defaultValue={perdiem_fee}\r\n                        currencySymbol=\"$\"\r\n                        outputFormat=\"number\"\r\n                        decimalCharacter=\".\"\r\n                        digitGroupSeparator=\",\"\r\n                        decimalPlaces=\"2\"\r\n                        className={classes.textField}\r\n                        id=\"standard-perdiem\"\r\n                        name=\"perdiem_fee\"\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(parseFloat(e.target.value, 10));\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"bank_name\"\r\n                  control={control}\r\n                  defaultValue={bank_name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Bank Name\"\r\n                        id=\"standard-bankname\"\r\n                        name=\"bank_name\"\r\n                        defaultValue={bank_name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"bank_acno\"\r\n                  control={control}\r\n                  defaultValue={bank_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Bank Ac No\"\r\n                        id=\"standard-bankacno\"\r\n                        name=\"bank_acno\"\r\n                        defaultValue={bank_acno}\r\n                        value={bank_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  // rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"tap_acno\"\r\n                  control={control}\r\n                  defaultValue={tap_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"TAP Ac No\"\r\n                        id=\"standard-tapacno\"\r\n                        name=\"tap_acno\"\r\n                        defaultValue={tap_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"scp_acno\"\r\n                  control={control}\r\n                  defaultValue={scp_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"SCP Ac No\"\r\n                        id=\"standard-scpacno\"\r\n                        name=\"scp_acno\"\r\n                        defaultValue={scp_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"workpermitno\"\r\n                  control={control}\r\n                  defaultValue={workpermitno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Work Permit No\"\r\n                        id=\"standard-wpno\"\r\n                        name=\"workpermitno\"\r\n                        defaultValue={workpermitno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"workpermit_expirydate\"\r\n                  control={control}\r\n                  defaultValue={workpermit_expirydate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Work Permit Expiry Date\"\r\n                        id=\"standard-wpexpiry\"\r\n                        name=\"workpermit_expirydate\"\r\n                        type=\"date\"\r\n                        defaultValue={workpermit_expirydate}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <Divider className={classes.divider} />\r\n              <div>\r\n                <Controller\r\n                  name=\"date_of_join\"\r\n                  control={control}\r\n                  defaultValue={date_of_join}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Joining Date\"\r\n                        id=\"standard-joindate\"\r\n                        name=\"date_of_join\"\r\n                        type=\"date\"\r\n                        defaultValue={date_of_join}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"date_of_resign\"\r\n                  control={control}\r\n                  defaultValue={date_of_resign}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Resign Date\"\r\n                        id=\"standard-resigndate\"\r\n                        name=\"date_of_resign\"\r\n                        type=\"date\"\r\n                        defaultValue={date_of_resign}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"leave_entitled\"\r\n                  control={control}\r\n                  defaultValue={leave_entitled}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Annual Leaves Entitled\"\r\n                        id=\"standard-annualleave\"\r\n                        name=\"leave_entitled\"\r\n                        type=\"numeric\"\r\n                        defaultValue={leave_entitled}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"leave_bf\"\r\n                  control={control}\r\n                  defaultValue={leave_bf}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Leaves B/F\"\r\n                        id=\"standard-leavebal\"\r\n                        name=\"leave_bf\"\r\n                        type=\"numeric\"\r\n                        defaultValue={leave_bf}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"designation\"\r\n                  control={control}\r\n                  defaultValue={designation}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Designation\"\r\n                        id=\"standard-designation\"\r\n                        name=\"designation\"\r\n                        defaultValue={designation}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"department\"\r\n                  control={control}\r\n                  defaultValue={department}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Department\"\r\n                        id=\"standard-department\"\r\n                        name=\"department\"\r\n                        defaultValue={department}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"reporting_to\"\r\n                  control={control}\r\n                  defaultValue={reporting_to}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      // <TextField\r\n                      //   label=\"Reporting To\"\r\n                      //   id=\"standard-reportingto\"\r\n                      //   name=\"reporting_to\"\r\n                      //   defaultValue={reporting_to}\r\n                      //   className={classes.textField}\r\n                      //   onChange={(e) => {\r\n                      //     onChange(e.target.value);\r\n                      //     handleReportingTo(e.target.value);\r\n                      //   }}\r\n                      //   error={!!error}\r\n                      //   helperText={error ? error.message : null}\r\n                      //   select\r\n                      // >\r\n                      //   <MenuItem value=\"\">None</MenuItem>\r\n                      //   {employees &&\r\n                      //     employees.map((r) => {\r\n                      //       return <MenuItem value={r.name}>{r.name}</MenuItem>;\r\n                      //     })}\r\n                      // </TextField>\r\n                      <TextField\r\n                        label=\"Reporting To\"\r\n                        id=\"standard-reportingto\"\r\n                        name=\"reporting_to\"\r\n                        defaultValue={reporting_to}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"reporting_email\"\r\n                  control={control}\r\n                  defaultValue={reporting_email}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Reporting Email\"\r\n                        id=\"standard-reportingemail\"\r\n                        name=\"reporting_email\"\r\n                        defaultValue={reporting_email}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <Divider className={classes.divider} />\r\n            </div>\r\n          </Grid>\r\n          <Divider />\r\n        </Paper>\r\n      </form>\r\n\r\n      {/* <Grid xs={12}>\r\n        <EmpJobhistory />\r\n      </Grid> */}\r\n      <Grid xs={12}>\r\n        <EmpFamily />\r\n      </Grid>\r\n      <Grid xs={12}>\r\n        <EmpEducations />\r\n      </Grid>\r\n      <Grid xs={12}>\r\n        <EmpExperiences />\r\n      </Grid>\r\n      <Grid xs={12}>\r\n        <EmpTrainings />\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  divider: {\r\n    padding: 4,\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 350,\r\n  },\r\n}));\r\n\r\nexport default EmployeeForm;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseForm.js",["1430","1431","1432","1433","1434","1435","1436","1437","1438","1439","1440","1441","1442"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, Icon, TextField, Paper, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport * as emailjs from \"emailjs-com\";\r\nimport axios from \"axios\";\r\nimport { nanoid } from \"nanoid\";\r\nimport currency from \"currency.js\";\r\nimport CurrencyTextField from \"@unicef/material-ui-currency-textfield\";\r\nimport { Box, Grid, GridItem, Heading } from \"@chakra-ui/react\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\n//import { useExpenses } from \"./expenses/useExpenses\";\r\nimport { useAddExpenses } from \"./expenses/useAddExpenses\";\r\nimport { useDeleteExpenses } from \"./expenses/useDeleteExpenses\";\r\nimport { useUpdateExpenses } from \"./expenses/useUpdateExpenses\";\r\nimport { useExpensesAttachments } from \"./expensesattachments/useExpensesAttachments\";\r\nimport { useAddExpensesAttachment } from \"./expensesattachments/useAddExpensesAttachment\";\r\nimport { useUpdateExpensesAttachment } from \"./expensesattachments/useUpdateExpensesAttachment\";\r\nimport { useDeleteExpensesAttachment } from \"./expensesattachments/useDeleteExpensesAttachment\";\r\nimport ImageUpload from \"../helpers/ImageUpload\";\r\n\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\nconst UPLOADURL = \"https://api.cloudinary.com/v1_1/dlmzwvakr/image/upload\";\r\nconst DOWNLOADURL = \"https://res.cloudinary.com/v1_1/dlmzwvakr/image/upload\";\r\nconst UPLOADPRESET = \"appsmiths\";\r\n// const initial_values = {\r\n//   name: \"\",\r\n//   date: \"\",\r\n//   purchased_date: \"\",\r\n//   purchased_from: \"\",\r\n//   description: \"\",\r\n//   remark: \"\",\r\n//   status: \"Pending\",\r\n//   amount: 0,\r\n//};\r\n\r\nconst ExpenseForm = ({ formdata, setFormdata, handleDialogClose }) => {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  //const { acceptedFiles, getRootProps, getInputProps } = useDropzone();\r\n  //const { expenses, filter, setFilter, setExpenseId } = useExpenses();\r\n  const updateExpenses = useUpdateExpenses();\r\n  const addExpenses = useAddExpenses();\r\n  const delExpenses = useDeleteExpenses();\r\n  const { expensesattachments } = useExpensesAttachments();\r\n  const addExpensesAttachment = useAddExpensesAttachment();\r\n  const delExpensesAttachment = useDeleteExpensesAttachment();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { isExpenseEditing, editExpenseID } = useExpensesContext();\r\n  const [files, setFiles] = useState([]);\r\n  const [filename, setFilename] = useState(\"\");\r\n  const [newFile, setNewFile] = useState({});\r\n  const [attachmentId, setAttachmentId] = useState(\"\");\r\n\r\n  const { handleSubmit, control, setValue } = useForm({\r\n    defaultValues: {\r\n      ...formdata,\r\n    },\r\n  });\r\n\r\n  //console.log(\"formdata\", formdata);\r\n  //console.log(\"files\", files);\r\n\r\n  const onDrop = (acceptedFiles) => {\r\n    acceptedFiles.forEach((file) => {\r\n      const formData = new FormData();\r\n      formData.append(\"file\", file);\r\n      formData.append(\"upload_preset\", UPLOADPRESET);\r\n      axios({\r\n        url: UPLOADURL,\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        },\r\n        data: formData,\r\n      })\r\n        .then((res) => {\r\n          //console.log(\"res\", res.data);\r\n          // Object.assign(file, {\r\n          //   preview: res.data.url,\r\n          // });\r\n          setFiles(\r\n            (prev) =>\r\n              (prev = [\r\n                ...files,\r\n                ...[\r\n                  {\r\n                    name: res.data.original_filename,\r\n                    preview: res.data.secure_url,\r\n                  },\r\n                ],\r\n              ])\r\n          );\r\n        })\r\n        .catch((err) => {\r\n          setNewFile({});\r\n          console.log(err);\r\n        });\r\n      // Object.assign(file, {\r\n      //   preview: URL.createObjectURL(file),\r\n      // });\r\n    });\r\n\r\n    //const allfiles = [...files, ...acceptedFiles];\r\n    //setFiles(allfiles);\r\n  };\r\n\r\n  const upLoad = () => {\r\n    const uploadURL = \"https://api.cloudinary.com/v1_1/dlmzwvakr/image/upload\";\r\n    const uploadPreset = \"appsmiths\";\r\n\r\n    files.forEach((file) => {\r\n      const formData = new FormData();\r\n      formData.append(\"file\", file);\r\n      formData.append(\"upload_preset\", uploadPreset);\r\n\r\n      axios({\r\n        url: uploadURL,\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        },\r\n        data: formData,\r\n      })\r\n        .then((res) => {\r\n          setFilename((prev) => (prev = res.data.public_id));\r\n          //console.log(res.data.public_id);\r\n          //console.log(\"filename\", filename);\r\n        })\r\n        .catch((err) => console.log(err));\r\n    });\r\n  };\r\n\r\n  const handleSentEmail = (data) => {\r\n    const { date } = data;\r\n    //console.log(\"expense form\", loginLevel);\r\n    var emaildata = {\r\n      to_name: loginLevel.loginUser,\r\n      to_email: loginLevel.loginEmail,\r\n      message: `Your expenses claim application dated on ${date} has been successfully submitted for approval`,\r\n      cc_to: loginLevel.reporting_email,\r\n    };\r\n\r\n    emailjs.send(SERVICE_ID, TEMPLATE_ID, emaildata, USER_ID).then(\r\n      function (response) {\r\n        //console.log(response.status, response.text);\r\n        toast({\r\n          title: `Email has sent successfully to ${emaildata.to_email}!`,\r\n          status: \"success\",\r\n        });\r\n      },\r\n      function (err) {\r\n        console.log(err);\r\n        toast({\r\n          title: `Email has fail to send to ${emaildata.to_email}!`,\r\n          status: \"warning\",\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  const onSubmit = (data, e) => {\r\n    e.preventDefault();\r\n    //console.log(\"onSubmit\", isExpenseEditing);\r\n    let newData = {\r\n      ...data,\r\n    };\r\n    //console.log(\"newdata\", newData);\r\n    //console.log(\"isEditing\", isExpenseEditing);\r\n    if (isExpenseEditing) {\r\n      //console.log(\"edit\");\r\n      const { rec_id, tableData, ...editData } = newData;\r\n      updateExpenses({ id: editExpenseID, ...editData });\r\n      //attachments\r\n      expensesattachments\r\n        .filter((r) => r.attachmentid === formdata.attachmentid)\r\n        .forEach((rec) => {\r\n          const id = rec.id;\r\n          delExpensesAttachment(id);\r\n        });\r\n      files.forEach((rec) => {\r\n        const newData = {\r\n          attachmentid: formdata.attachmentid,\r\n          name: rec.name,\r\n          url: rec.preview,\r\n          type: rec.preview.split(\".\").pop(),\r\n        };\r\n        //console.log(\"addattach\", newData);\r\n        addExpensesAttachment(newData);\r\n      });\r\n    } else {\r\n      //console.log(\"new\", newData);\r\n      const newid = nanoid();\r\n      addExpenses({\r\n        ...newData,\r\n        empid: loginLevel.loginUserId,\r\n        name: loginLevel.loginUser,\r\n        attachmentid: newid,\r\n      });\r\n\r\n      files.forEach((rec) => {\r\n        const newData = {\r\n          attachmentid: newid,\r\n          name: rec.name,\r\n          url: rec.preview,\r\n          type: rec.preview.split(\".\").pop(),\r\n        };\r\n         addExpensesAttachment(newData);\r\n      });\r\n    }\r\n\r\n    // if (isExpenseEditing) {\r\n    //   const { rec_id, tableData, ...editData } = newData;\r\n    //   console.log(\"edit\", ...editData);\r\n    //   updateExpenses({ id: editExpenseID, ...editData });\r\n    // } else {\r\n    //   console.log(\"new\");\r\n    //   addExpenses({\r\n    //     ...newData,\r\n    //     empid: loginLevel.loginUserId,\r\n    //     name: loginLevel.loginUser,\r\n    //   });\r\n    //   handleSentEmail(data);\r\n    // }\r\n\r\n    handleDialogClose();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isExpenseEditing) {\r\n      setAttachmentId(formdata.attachmentid);\r\n      const newData = expensesattachments\r\n        .filter((rec) => rec.attachmentid === formdata.attachmentid)\r\n        .map((rec) => {\r\n          return {\r\n            name: rec.name,\r\n            preview: rec.url,\r\n          };\r\n        });\r\n\r\n      console.log(\"data\", newData);\r\n\r\n      setFiles(newData);\r\n    } else {\r\n      setFiles([]);\r\n    }\r\n  }, [expensesattachments]);\r\n\r\n  // useEffect(() => {\r\n  //   console.log(\"setvalue\");\r\n  //   setValue(\"attachment1_name\", files.length > 0 ? files[0].name : \"\");\r\n  //   setValue(\"attachment2_name\", files.length > 1 ? files[1].name : \"\");\r\n  //   setValue(\"attachment3_name\", files.length > 2 ? files[2].name : \"\");\r\n  // }, [files]);\r\n\r\n  return (\r\n    <div>\r\n      <Box size=\"x1\">\r\n        <Typography variant=\"h5\" component=\"h3\">\r\n          EXPENSES CLAIM FORM\r\n        </Typography>\r\n        <Typography component=\"p\">Expense Claim Application</Typography>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <Grid templateColumns=\"repeat(3, 1fr)\" gap={4}>\r\n            <GridItem colSpan={1}>\r\n              <div>\r\n                <Controller\r\n                  name=\"name\"\r\n                  control={control}\r\n                  defaultValue={loginLevel.loginUser}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Name\"\r\n                        id=\"margin-normal1\"\r\n                        name=\"name\"\r\n                        defaultValue={loginLevel.loginUser}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"date\"\r\n                  control={control}\r\n                  defaultValue={formdata.date}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Date\"\r\n                        type=\"date\"\r\n                        id=\"margin-normal2\"\r\n                        name=\"formdata.date\"\r\n                        value={value}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  rules={{ required: \"From Date is required\" }}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Controller\r\n                  name=\"purchased_from\"\r\n                  control={control}\r\n                  defaultValue={formdata.purchased_from}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Purchased From\"\r\n                        id=\"margin-normal3\"\r\n                        name=\"purchased_from\"\r\n                        defaultValue={formdata.purchased_from}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  // rules={{ required: \"Reason is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"description\"\r\n                  control={control}\r\n                  defaultValue={formdata.description}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Description\"\r\n                        id=\"margin-normal4\"\r\n                        name=\"description\"\r\n                        defaultValue={formdata.description}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  // rules={{ required: \"Reason is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"amount\"\r\n                  control={control}\r\n                  defaultValue={formdata.amount}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      // <TextField\r\n                      //   label=\"Amount\"\r\n                      //   type=\"number\"\r\n                      //   id=\"standard-number1\"\r\n                      //   name=\"amount\"\r\n                      //   defaultValue={formdata.amount}\r\n                      //   className={classes.textField}\r\n                      //   //onChange={onChange}\r\n                      //   onChange={(e) => {\r\n                      //     onChange(parseInt(e.target.value, 10));\r\n                      //   }}\r\n                      //   error={!!error}\r\n                      //   helperText={error ? error.message : null}\r\n                      // />\r\n                      <CurrencyTextField\r\n                        label=\"Amount\"\r\n                        variant=\"standard\"\r\n                        value={formdata.amount}\r\n                        currencySymbol=\"$\"\r\n                        outputFormat=\"string\"\r\n                        decimalCharacter=\".\"\r\n                        digitGroupSeparator=\",\"\r\n                        decimalPlaces=\"2\"\r\n                        className={classes.textField}\r\n                        id=\"standard-amount\"\r\n                        name=\"amount\"\r\n                        style={{ width: 100 }}\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(parseFloat(currency(e.target.value), 10));\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"remark\"\r\n                  control={control}\r\n                  defaultValue={formdata.remark}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Remark\"\r\n                        id=\"margin-normal5\"\r\n                        name=\"remark\"\r\n                        defaultValue={formdata.remark}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  // rules={{ required: \"Reason is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"status\"\r\n                  control={control}\r\n                  defaultValue={\r\n                    formdata.status === \"Pending\" ? \"Pending\" : formdata.status\r\n                  }\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Status\"\r\n                        id=\"margin-normal6\"\r\n                        name=\"status\"\r\n                        defaultValue={\r\n                          formdata.status === \"Pending\"\r\n                            ? \"Pending\"\r\n                            : formdata.status\r\n                        }\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Status is required\" }}\r\n                />\r\n              </div>\r\n              {/* <div>\r\n                <Controller\r\n                  name=\"attachment1_name\"\r\n                  control={control}\r\n                  defaultValue={files.length >= 1 ? files[0].name : \"\"}\r\n                  defaultValue={formdata.attachment1_name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Attachment #1\"\r\n                        id=\"margin-normal6\"\r\n                        name=\"attachment1_name\"\r\n                        defaultValue={files.length >= 1 ? files[0].name : \"\"}\r\n                        defaultValue={formdata.attachment1_name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                />\r\n              </div> */}\r\n              {/*  <div>\r\n                <Controller\r\n                  name=\"attachment2_name\"\r\n                  control={control}\r\n                  defaultValue={formdata.attachment2_name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Attachment #2\"\r\n                        id=\"margin-normal6\"\r\n                        name=\"attachment2_name\"\r\n                        defaultValue={formdata.attachment2_name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                />\r\n              </div> */}\r\n              {/* <div>\r\n                <Controller\r\n                  name=\"attachment3_name\"\r\n                  control={control}\r\n                  defaultValue={formdata.attachment3_name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Attachment #3\"\r\n                        id=\"margin-normal6\"\r\n                        name=\"attachment3_name\"\r\n                        defaultValue={formdata.attachment3_name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                />\r\n              </div> */}\r\n\r\n              {formdata.status === \"Pending\" && (\r\n                <div>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    //onClick={() => handleSubmit(onSubmit)()}\r\n                  >\r\n                    Save <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                </div>\r\n              )}\r\n            </GridItem>\r\n            <GridItem colSpan={2}>\r\n              <ImageUpload files={files} setFiles={setFiles} onDrop={onDrop} />\r\n            </GridItem>\r\n          </Grid>\r\n        </form>\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 400,\r\n  },\r\n}));\r\n\r\nexport default ExpenseForm;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\DaiylAllowanceForm.js",["1443"],"import React, { useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  TextField,\r\n  Paper,\r\n  Typography,\r\n  } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst initial_values = {\r\n  name: \"\",\r\n  period: \"\",\r\n  location: \"\",\r\n  manager_name: \"\",\r\n  status: \"Pending\",\r\n  no_of_days: 0,\r\n  amount: 0,\r\n};\r\n\r\nconst DailyAllowanceForm = () => {\r\n  let navigate = useNavigate();\r\n  const classes = useStyles();\r\n  const {\r\n    isDailyAllowanceEditing,\r\n    single_dailyallowance,\r\n    updateDailyAllowance,\r\n    addDailyAllowance,\r\n    editDailyAllowanceID,\r\n    loadDailyAllowances,\r\n    single_dailyallowance_loading,\r\n    dailyallowance_period,\r\n  } = useDailyAllowancesContext();\r\n  const { loadEmployees, employees } = useEmployeesContext();\r\n  const { name, period, location, manager_name, status, no_of_days, amount } =\r\n    single_dailyallowance || initial_values;\r\n  const { handleSubmit, control } = useForm();\r\n\r\n  useEffect(() => {\r\n    loadEmployees();\r\n  }, []);\r\n\r\n  const onSubmit = (data) => {\r\n    if (isDailyAllowanceEditing) {\r\n      updateDailyAllowance({ id: editDailyAllowanceID, ...data });\r\n    } else {\r\n      addDailyAllowance({ ...data });\r\n    }\r\n    loadDailyAllowances();\r\n    navigate(\"/batchdailyallowances\");\r\n  };\r\n\r\n  if (single_dailyallowance_loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n  return (\r\n    <div>\r\n      <Paper className={classes.root}>\r\n        <Typography variant=\"h5\" component=\"h3\">\r\n          DAILY ALLOWANCES CLAIM FORM\r\n        </Typography>\r\n        <Typography component=\"p\">\r\n          Daily Allowances Claim Application\r\n        </Typography>\r\n\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <div>\r\n            <Controller\r\n              name=\"name\"\r\n              control={control}\r\n              defaultValue={name}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Name\"\r\n                    id=\"margin-normal\"\r\n                    name=\"name\"\r\n                    defaultValue={name}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    {employees.map((e) => {\r\n                      return (\r\n                        <MenuItem key={e.name} value={e.name}>\r\n                          {e.name}\r\n                        </MenuItem>\r\n                      );\r\n                    })}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              rules={{ required: \"Name required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"period\"\r\n              control={control}\r\n              defaultValue={\r\n                isDailyAllowanceEditing ? period : dailyallowance_period\r\n              }\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Period\"\r\n                    id=\"margin-normal\"\r\n                    name=\"period\"\r\n                    defaultValue={\r\n                      isDailyAllowanceEditing ? period : dailyallowance_period\r\n                    }\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                );\r\n              }}\r\n              rules={{ required: \"Period is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"location\"\r\n              control={control}\r\n              defaultValue={location}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Location\"\r\n                    id=\"margin-normal\"\r\n                    name=\"location\"\r\n                    defaultValue={location}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  />\r\n                );\r\n              }}\r\n              rules={{ required: \"Purchased Date is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"manager_name\"\r\n              control={control}\r\n              defaultValue={manager_name}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Manager Name\"\r\n                    id=\"margin-normal\"\r\n                    name=\"manager_name\"\r\n                    defaultValue={manager_name}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  />\r\n                );\r\n              }}\r\n              // rules={{ required: \"Reason is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"no_of_days\"\r\n              control={control}\r\n              defaultValue={no_of_days}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"No Of Days\"\r\n                    type=\"number\"\r\n                    id=\"standard-number\"\r\n                    name=\"no_of_days\"\r\n                    defaultValue={no_of_days}\r\n                    className={classes.textField}\r\n                    //onChange={onChange}\r\n                    onChange={(e) => {\r\n                      onChange(parseInt(e.target.value, 10));\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  />\r\n                );\r\n              }}\r\n              //rules={{ required: \"IC No required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"amount\"\r\n              control={control}\r\n              defaultValue={amount}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Amount\"\r\n                    type=\"number\"\r\n                    id=\"standard-number\"\r\n                    name=\"amount\"\r\n                    defaultValue={amount}\r\n                    className={classes.textField}\r\n                    //onChange={onChange}\r\n                    onChange={(e) => {\r\n                      onChange(parseInt(e.target.value, 10));\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  />\r\n                );\r\n              }}\r\n              //rules={{ required: \"IC No required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"status\"\r\n              control={control}\r\n              defaultValue=\"Pending\"\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Status\"\r\n                    id=\"margin-normal\"\r\n                    name=\"status\"\r\n                    defaultValue={status}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"Pending\">Pending</MenuItem>\r\n                    <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n                    <MenuItem value=\"Approved\">Approved</MenuItem>\r\n                    <MenuItem value=\"Rejected\">Rejected</MenuItem>\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n            >\r\n              Submit <Icon className={classes.rightIcon}>send</Icon>\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 400,\r\n  },\r\n}));\r\n\r\nexport default DailyAllowanceForm;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\CurrencyTable.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveForm.js",["1444","1445","1446","1447"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  TextField,\r\n  Paper,\r\n  Typography,\r\n  Divider,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport * as emailjs from \"emailjs-com\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\n//import { useEmployees } from \"./employees/useEmployees\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\n//import { useLeaves } from \"./leaves/useLeaves\";\r\nimport { useAddLeaves } from \"./leaves/useAddLeaves\";\r\n//import { useDeleteLeaves } from \"./leaves/useDeleteLeaves\";\r\nimport { useUpdateLeaves } from \"./leaves/useUpdateLeaves\";\r\nimport { useLeavestypes } from \"./leavestypes/useLeavestypes\";\r\n\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\n\r\n// const initial_state = {\r\n//   name: \"\",\r\n//   to_date: \"\",\r\n//   from_date: \"\",\r\n//   reason: \"\",\r\n//   status: \"Pending\",\r\n//   no_of_days: 0,\r\n//   leave_bal: 0,\r\n//   reporting_email: \"\",\r\n// };\r\n\r\nconst LeaveForm = ({\r\n  formdata,\r\n  leavestate,\r\n  setFormdata,\r\n  handleDialogClose,\r\n}) => {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  //const { employees } = useEmployees();\r\n  //const { leaves, filter, setFilter, setLeaveId } = useLeaves();\r\n  const updateLeaves = useUpdateLeaves();\r\n  const addLeaves = useAddLeaves();\r\n  const { leavestypes, setLeaveId } = useLeavestypes();\r\n  //const [state, setState] = useState(initial_state);\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { handleSubmit, control } = useForm();\r\n  //const initialValues = Object.values(initial_state).join(\"\");\r\n  const { isLeaveEditing, editLeaveID } = useLeavesContext();\r\n\r\n  const handleSentEmail = (data) => {\r\n    const { from_date, to_date } = data;\r\n    //console.log(\"leave form\", loginLevel);\r\n    var emaildata = {\r\n      to_name: loginLevel.loginUser,\r\n      to_email: loginLevel.loginEmail,\r\n      message: `Your leave application from ${from_date} to ${to_date} has been successfully submitted for approval`,\r\n      cc_to: loginLevel.reporting_email,\r\n    };\r\n\r\n    emailjs.send(SERVICE_ID, TEMPLATE_ID, emaildata, USER_ID).then(\r\n      function (response) {\r\n        console.log(response.status, response.text);\r\n        toast({\r\n          title: `Email has sent successfully to ${emaildata.to_email}!`,\r\n          status: \"success\",\r\n        });\r\n      },\r\n      function (err) {\r\n        console.log(err);\r\n        toast({\r\n          title: `Email has fail to send to ${emaildata.to_email}!`,\r\n          status: \"warning\",\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    console.log(\"leave\", data);\r\n    if (isLeaveEditing) {\r\n      updateLeaves({ id: editLeaveID, ...data });\r\n      toast({\r\n        title: \"Your leave has been updated!\",\r\n        status: \"success\",\r\n      });\r\n    } else {\r\n      addLeaves({\r\n        ...data,\r\n        empid: loginLevel.loginUserId,\r\n        reporting_email: loginLevel.reporting_email,\r\n      });\r\n      handleSentEmail(data);\r\n    }\r\n\r\n    //history.push(\"/leave\");\r\n    handleDialogClose();\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   setState(initial_state);\r\n  //   setState({ ...formdata });\r\n  //   setState({ ...formdata });\r\n  //   console.log(\"laeve form\",state)\r\n  // }, [initialValues]);\r\n\r\n  // useEffect(() => {\r\n  //   setGroupId(\"Leaves\");\r\n  // }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Paper className={classes.root}>\r\n        <Typography variant=\"h5\" component=\"h3\">\r\n          LEAVE FORM\r\n        </Typography>\r\n        <Typography component=\"p\">Leave Application</Typography>\r\n        <Divider />\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <div>\r\n            <Controller\r\n              name=\"name\"\r\n              control={control}\r\n              defaultValue={loginLevel.loginUser}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Name\"\r\n                    id=\"margin-normal\"\r\n                    name=\"name\"\r\n                    //value={value}\r\n                    defaultValue={loginLevel.loginUser}\r\n                    className={classes.textField}\r\n                    onChange={(e) => {\r\n                      console.log(e.target.value);\r\n                      onChange(e.target.value);\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    //select\r\n                  >\r\n                    {/* {employees.map((e) => {\r\n                      return (\r\n                        <MenuItem key={e.name} value={e.name}>\r\n                          {e.name}\r\n                        </MenuItem>\r\n                      );\r\n                    })} */}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              // rules={{ required: \"Name required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"from_date\"\r\n              control={control}\r\n              defaultValue={formdata.from_date}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"From Date\"\r\n                    type=\"date\"\r\n                    id=\"margin-normal\"\r\n                    name=\"from_date\"\r\n                    defaultValue={formdata.from_date}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                );\r\n              }}\r\n              rules={{ required: \"From Date is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"to_date\"\r\n              control={control}\r\n              defaultValue={formdata.to_date}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"To Date\"\r\n                    id=\"margin-normal\"\r\n                    type=\"date\"\r\n                    name=\"to_date\"\r\n                    defaultValue={formdata.to_date}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                );\r\n              }}\r\n              rules={{ required: \"To Date is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"leave_bal\"\r\n              control={control}\r\n              defaultValue={leavestate.leave_bal}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    disable\r\n                    label=\"Leave Balance\"\r\n                    type=\"number\"\r\n                    id=\"standard-number\"\r\n                    name=\"leave_bal\"\r\n                    defaultValue={leavestate.leave_bal}\r\n                    className={classes.textField}\r\n                    //onChange={onChange}\r\n                    onChange={(e) => {\r\n                      onChange(parseInt(e.target.value, 10));\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                );\r\n              }}\r\n              //rules={{ required: \"IC No required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"no_of_days\"\r\n              control={control}\r\n              defaultValue={formdata.no_of_days}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"No Of Days\"\r\n                    type=\"number\"\r\n                    id=\"standard-number\"\r\n                    name=\"no_of_days\"\r\n                    defaultValue={formdata.no_of_days}\r\n                    className={classes.textField}\r\n                    //onChange={onChange}\r\n                    onChange={(e) => {\r\n                      onChange(parseFloat(e.target.value, 10));\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  />\r\n                );\r\n              }}\r\n              //rules={{ required: \"IC No required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"reason\"\r\n              control={control}\r\n              defaultValue={formdata.reason}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Reason\"\r\n                    id=\"margin-normal\"\r\n                    name=\"reason\"\r\n                    defaultValue={formdata.reason}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  />\r\n                );\r\n              }}\r\n              // rules={{ required: \"Reason is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"leavetype\"\r\n              control={control}\r\n              defaultValue={formdata.leavetype}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Type of Leave\"\r\n                    id=\"margin-normal\"\r\n                    name=\"leavetype\"\r\n                    defaultValue={formdata.leavetype}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    // InputProps={{\r\n                    //   readOnly: true,\r\n                    // }}\r\n                    select\r\n                  >\r\n                    {/* <MenuItem value=\"\">None</MenuItem> */}\r\n                    {leavestypes.map((rec) => {\r\n                      return (\r\n                        <MenuItem value={rec.description}>\r\n                          {rec.description}\r\n                        </MenuItem>\r\n                      );\r\n                    })}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <Controller\r\n              name=\"status\"\r\n              control={control}\r\n              defaultValue={formdata.status}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Status\"\r\n                    id=\"margin-normal\"\r\n                    name=\"status\"\r\n                    defaultValue={formdata.status}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                    // select\r\n                  >\r\n                    {/* <MenuItem value=\"Pending\">Pending</MenuItem>\r\n                    <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n                    <MenuItem value=\"Approve\">Approve</MenuItem>\r\n                    <MenuItem value=\"Reject\">Reject</MenuItem> */}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              onClick={handleSubmit(onSubmit)}\r\n            >\r\n              Submit <Icon className={classes.rightIcon}>send</Icon>\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 400,\r\n  },\r\n}));\r\n\r\nexport default LeaveForm;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableManager.js",["1448"],"import React, { useState, useMemo } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport {\r\n  //useSetRecoilState,\r\n  useRecoilValue,\r\n  useRecoilState,\r\n  //useRecoilValueLoadable,\r\n} from \"recoil\";\r\nimport {\r\n  allowsPeriodState,\r\n  allowsDataState,\r\n  //empidState,\r\n} from \"./data/atomdata\";\r\n//import { fetchDailyAllowancesSelector } from \"./data/selectordata\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n//import ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport DailyAllowsDetlsTable from \"./DailyAllowsDetlsTable\";\r\n\r\n//const FILTERSTRING = \"Submitted\";\r\n\r\nexport default function DailyAllowancesTable({\r\n  dailyallowancesdata,\r\n  setDailyAllowancesdata,\r\n  update_dailyallowance_error,\r\n  handleDialogClose,\r\n}) {\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  //const [tmpallowsdata, setTmpallowsdata] = useState([]);\r\n  const allows_period = useRecoilValue(allowsPeriodState);\r\n  //const allows_empid = useRecoilValue(empidState);\r\n  const [allowsdata, setAllowsdata] = useRecoilState(allowsDataState);\r\n  //const setEmpID = useSetRecoilState(empidState);\r\n  const title = `Site Allowances (${allows_period})`;\r\n  const {\r\n    //dailyallowances_loading,\r\n    //singlebatch_dailyallowance,\r\n    //singlebatch_dailyallowance_loading,\r\n    //deleteDailyAllowance,\r\n    updateDailyAllowance,\r\n    //setEditDailyAllowanceID,\r\n    //setIsDailyAllowanceEditingOn,\r\n    //setIsDailyAllowanceEditingOff,\r\n    //resetSingleDailyAllowance,\r\n    //dailyallowance_period,\r\n    //getSingleBatchDailyAllowance,\r\n  } = useDailyAllowancesContext();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"name\",\r\n        editable: \"never\",\r\n      },\r\n      { title: \"Period\", field: \"period\", editable: \"never\" },\r\n      { title: \"Location\", field: \"location\", editable: \"never\" },\r\n      { title: \"Manager Name\", field: \"manager\", editable: \"never\" },\r\n      {\r\n        title: \"No Of Days\",\r\n        field: \"no_of_days\",\r\n        type: \"numeric\",\r\n        editable: \"never\",\r\n      },\r\n      { title: \"Amount\", field: \"amount\", type: \"currency\", editable: \"never\" },\r\n      {\r\n        title: \"Status\",\r\n        field: \"status\",\r\n        editComponent: (props) => (\r\n          <TextField\r\n            //defaultValue={props.value || null}\r\n            onChange={(e) => props.onChange(e.target.value)}\r\n            style={{ width: 100 }}\r\n            value={props.value}\r\n            select\r\n          >\r\n            <MenuItem value=\"Pending\">Pending</MenuItem>\r\n            <MenuItem value=\"Approved\">Approved</MenuItem>\r\n            <MenuItem value=\"Rejected\">Rejected</MenuItem>\r\n            <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n          </TextField>\r\n        ),\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  // const Save_DailyAllowancesData = () => {\r\n  //   dailyallowancesdata.forEach((data) => {\r\n  //     const { id } = data;\r\n  //     if (id) {\r\n  //       const { id, rec_id, tableData, ...fields } = data;\r\n  //       updateDailyAllowance({ id, ...fields });\r\n  //     }\r\n  //   });\r\n\r\n  //   handleDialogClose();\r\n  // };\r\n\r\n  const Approve_DailyAllowancesData = () => {\r\n    dailyallowancesdata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        updateDailyAllowance({ id: rec.id, status: \"Approved\" });\r\n        //update leavesdata\r\n        if (!update_dailyallowance_error) {\r\n          const recdata = dailyallowancesdata.filter((r) => r.id === rec.id);\r\n          recdata[0].status = \"Approved\";\r\n        }\r\n      }\r\n    });\r\n    dailyallowancesdata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  const Reject_DailyAllowancesData = () => {\r\n    dailyallowancesdata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        updateDailyAllowance({ id: rec.id, status: \"Rejected\" });\r\n        //update leavesdata\r\n        if (!update_dailyallowance_error) {\r\n          const recdata = dailyallowancesdata.filter((r) => r.id === rec.id);\r\n          recdata[0].status = \"Rejected\";\r\n        }\r\n      }\r\n    });\r\n    dailyallowancesdata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={dailyallowancesdata}\r\n          title={title}\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <EditIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          // editable={{\r\n          //   onRowUpdate: (newData, oldData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         const dataUpdate = [...dailyallowancesdata];\r\n          //         const index = oldData.tableData.id;\r\n          //         dataUpdate[index] = newData;\r\n          //         setDailyAllowancesdata([...dataUpdate]);\r\n          //         //approve_Expense(newData);\r\n\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          // }}\r\n          options={{\r\n            filtering: true,\r\n            selection: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Approve_DailyAllowancesData}\r\n                  >\r\n                    Approve\r\n                  </Button>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Reject_DailyAllowancesData}\r\n                  >\r\n                    Reject\r\n                  </Button>\r\n                  {/* <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Save_DailyAllowancesData}\r\n                  >\r\n                    Update <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button> */}\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <div className={classes.dialog}>\r\n          <CustomDialog\r\n            isOpen={isDialogOpen}\r\n            handleClose={handleDialogClose}\r\n            title=\"\"\r\n            showButton={true}\r\n            isFullscreen={true}\r\n            isFullwidth={true}\r\n          >\r\n            <DailyAllowsDetlsTable\r\n              setAllowsdata={setAllowsdata}\r\n              allowsdata={allowsdata}\r\n              handleDialogClose={handleDialogClose}\r\n            />\r\n          </CustomDialog>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  dialog: {\r\n    width: 1000,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowsDetlsTableStaff.js",["1449","1450","1451","1452"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport * as emailjs from \"emailjs-com\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import { useIsFetching } from \"react-query\";\r\nimport { TextField, Icon, Grid, Button } from \"@material-ui/core\";\r\n//import { useDisclosure } from \"@chakra-ui/react\";\r\nimport { useRecoilValue, useRecoilState } from \"recoil\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport {\r\n  loginLevelState,\r\n  allowsDataState,\r\n  //allowsDataDetlsState,\r\n  empidState,\r\n  allowsPeriodState,\r\n  //allowsDataIdState,\r\n  //siteallowsTotalsState,\r\n} from \"./data/atomdata\";\r\n//import { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\n//import { useAddDailyAllowsDetls } from \"./dailyallowsdetls/useAddDailyAllowsDetls\";\r\nimport { useUpdateDailyAllowsDetls } from \"./dailyallowsdetls/useUpdateDailyAllowsDetls\";\r\nimport { useDeleteDailyAllowsDetls } from \"./dailyallowsdetls/useDeleteDailyAllowsDetls\";\r\nimport { useDailyAllowsDetlsBatch } from \"./dailyallowsdetls/useDailyAllowsDetlsBatch\";\r\nimport { useDailyAllows } from \"./dailyallows/useDailyAllows\";\r\n//import { useDailyAllowsDetls } from \"./dailyallowsdetls/useDailyAllowsDetls\";\r\nimport { useUpdateDailyAllows } from \"./dailyallows/useUpdateDailyAllows\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\n\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\n\r\nconst initial_totals = [\r\n  {\r\n    totalamount: 0,\r\n    totalbonus: 0,\r\n    totaldiem: 0,\r\n    totaldays: 0,\r\n  },\r\n];\r\n\r\nexport default function DailyAllowsDetlsTableStaff() {\r\n  let navigate = useNavigate();\r\n  const toast = useCustomToast();\r\n  const classes = useStyles();\r\n  //const isFetching = useIsFetching();\r\n  //const { dailyallowsdetls } = useDailyAllowsDetls()\r\n  const { dailyallows, setDailyAllowsId } = useDailyAllows();\r\n  const {\r\n    dailyallowsdetls,\r\n    setDailyAllowsDetlsId,\r\n    setDailyAllowsDetlsPeriod,\r\n    //isLoading,\r\n  } = useDailyAllowsDetlsBatch();\r\n  //const addDailyAllowsDetls = useAddDailyAllowsDetls();\r\n  const updateDailyAllowsDetls = useUpdateDailyAllowsDetls();\r\n  const deleteDailyAllowsDetls = useDeleteDailyAllowsDetls();\r\n  const updateDailyAllows = useUpdateDailyAllows();\r\n\r\n  // const [allowsDetlsTable, setAllowsDetlsTable] =\r\n  // useRecoilState(allowsDataDetlsState);\r\n  //console.log(\"detlstable\", );\r\n  //const [allowsDetlsdata, setAllowsDetilsdata] = useRecoilStateLoadable(fetchDailyAllowsDetlsSelector);\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  // const [allowsDetlsdata, setAllowsDetlsdata] =\r\n  //   useRecoilState(allowsDataDetlsState);\r\n  const allows_period = useRecoilValue(allowsPeriodState);\r\n  const allows_empid = useRecoilValue(empidState);\r\n  // const [siteallowsTotals, setSiteAllowsTotals] = useRecoilState(\r\n  //   siteallowsTotalsState\r\n  // );\r\n  const [allowsdata, setAllowsdata] = useRecoilState(allowsDataState);\r\n  //const [allowsdataId, setAllowsdataId] = useState(allowsDataIdState);\r\n  //const [tabledeldata, setTableDelData] = useState({});\r\n  //const [isCalc, setIsCalc] = useState(false);\r\n  //const [isBuild, setIsBuild] = useState(false);\r\n  const [totals, setTotals] = useState({ initial_totals });\r\n  const [isSubmitAlertOpen, setIsSubmitAlertOpen] = useState(false);\r\n  const [isExitAlertOpen, setIsExitAlertOpen] = useState(false);\r\n  //const [dailyallowsdata, setDailyAllowsData] = useState({});\r\n  //const totalsValues = Object.values(totals).join(\"\");\r\n  //const [isRowIndex, setIsRowIndex] = useState(\"\");\r\n\r\n  // const {\r\n  //   //dailyallowances,\r\n  //   //dailyallowsdetls,\r\n  //   loadEmpDailyAllowsDetls,\r\n  //   updateDailyAllowance,\r\n  //   //updateDailyAllowsDetl,\r\n  //   //deleteDailyAllowsDetl,\r\n  //   dailyallowsdetl_loading,\r\n  //   dailyallowsdetl_error,\r\n  // } = useDailyAllowancesContext();\r\n\r\n  const columns = useMemo(() => [\r\n    {\r\n      title: \"Date\",\r\n      field: \"date\",\r\n      type: \"date\",\r\n      dateSetting: { locale: \"en-GB\" },\r\n      // editable: \"never\",\r\n      cellStyle: {\r\n        width: 120,\r\n        maxWidth: 120,\r\n      },\r\n      editComponent: (props) => (\r\n        <TextField\r\n          defaultValue={props.value || null}\r\n          onChange={(e) => props.onChange(e.target.value)}\r\n          type=\"date\"\r\n        />\r\n      ),\r\n    },\r\n    // { title: \"District\", field: \"district\" },\r\n    { title: \"Operation Type\", field: \"typeoperation\" },\r\n    { title: \"Client\", field: \"client\" },\r\n    { title: \"Location/Rig\", field: \"location\" },\r\n    { title: \"Ticket No/Job No\", field: \"jobno\" },\r\n    { title: \"Operation Role\", field: \"crewoperation\" },\r\n    {\r\n      title: \"Job Bonus\",\r\n      field: \"jobbonus\",\r\n      type: \"currency\",\r\n      cellStyle: {\r\n        width: 8,\r\n        maxWidth: 8,\r\n      },\r\n      headerStyle: {\r\n        width: 8,\r\n        maxWidth: 8,\r\n      },\r\n    },\r\n    {\r\n      title: \"Per Diem\",\r\n      field: \"perdiem\",\r\n      type: \"currency\",\r\n      cellStyle: {\r\n        width: 8,\r\n        maxWidth: 8,\r\n      },\r\n      headerStyle: {\r\n        width: 8,\r\n        maxWidth: 8,\r\n      },\r\n    },\r\n    // { title: \"Delete\", field: \"isdelete\", type: \"boolean\" },\r\n  ],[]);\r\n\r\n  useEffect(() => {\r\n    setDailyAllowsId(allows_empid);\r\n    setDailyAllowsDetlsId(allows_empid);\r\n    setDailyAllowsDetlsPeriod(allows_period);\r\n    // setTimeout(() => {\r\n    //   setTotals((prevState) => ({\r\n    //     totalamount: dailyallows.amount,\r\n    //     totalbonus: dailyallows.totaljobbonus,\r\n    //     totaldiem: dailyallows.totalperdiem,\r\n    //     totaldays: dailyallows.no_of_days,\r\n    //   }));\r\n    // }, 3000);\r\n  }, [allows_empid, allows_period]);\r\n\r\n  // useEffect(() => {\r\n  //  if (allowsdata) {\r\n  //     handle_tempcalc();\r\n  //     setIsCalc(false);\r\n  //   }\r\n  // }, [isCalc]);\r\n\r\n  const handleSentEmail = (data) => {\r\n    const { period } = data;\r\n    //console.log(\"expense form\", loginLevel);\r\n    var emaildata = {\r\n      to_name: loginLevel.loginUser,\r\n      to_email: loginLevel.loginEmail,\r\n      message: `Your site allowances for the period ${period} has been successfully submitted for approval`,\r\n      cc_to: loginLevel.reporting_email,\r\n    };\r\n\r\n    emailjs.send(SERVICE_ID, TEMPLATE_ID, emaildata, USER_ID).then(\r\n      function (response) {\r\n        console.log(response.status, response.text);\r\n        toast({\r\n          title: `Email has sent successfully to ${emaildata.to_email}!`,\r\n          status: \"success\",\r\n        });\r\n      },\r\n      function (err) {\r\n        console.log(err);\r\n        toast({\r\n          title: `Email has fail to send to ${emaildata.to_email}!`,\r\n          status: \"warning\",\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  // const build_dailyallowsdata = () => {\r\n  //   const { id, jobbonus, perdiem } = dailyallowsdetls;\r\n  //   const data = dailyallowsdetls\r\n  //     .filter((r) => r.period === allows_period && r.empid === allows_empid)\r\n  //     .map((rec) => {\r\n  //       return rec.id, rec.jobbonus, rec.perdiem;\r\n  //     });\r\n  //   setDailyAllowsData(data);\r\n  //   console.log(\"dailydata\", dailyallowsdata);\r\n  // };\r\n\r\n  const update_AllowsDetls = (data, index) => {\r\n    const allowsdata = dailyallowsdetls;\r\n    const { id, rec_id, tableData, ...fields } = data;\r\n    updateDailyAllowsDetls({ id, ...fields });\r\n\r\n    //recalc\r\n    allowsdata[index].jobbonus = data.jobbonus;\r\n    allowsdata[index].perdiem = data.perdiem;\r\n    handle_tempcalc(allowsdata);\r\n    //save_siteallows();\r\n  };\r\n\r\n  // const save_siteallows = () => {\r\n  //   const { id } = allowsdata;\r\n\r\n  //   updateDailyAllows({\r\n  //     id: id,\r\n  //     ...allowsdata,\r\n  //     no_of_days: totals.totaldays,\r\n  //     amount: totals.totalamount,\r\n  //     totaljobbonus: totals.totalbonus,\r\n  //     totalperdiem: totals.totaldiem,\r\n  //   });\r\n  // };\r\n\r\n  // const save_AllowsDetls = (e) => {\r\n  //   e.preventDefault();\r\n  //   // handle calc\r\n  //   //handle_calc();\r\n\r\n  //   //save allows data details\r\n  //   const { id } = allowsdata;\r\n\r\n  //   updateDailyAllows({\r\n  //     id: id,\r\n  //     ...allowsdata,\r\n  //     no_of_days: totals.totaldays,\r\n  //     amount: totals.totalamount,\r\n  //     totaljobbonus: totals.totalbonus,\r\n  //     totalperdiem: totals.totaldiem,\r\n  //   });\r\n  //   toast({\r\n  //     title: \"Site Allowances table being saved!\",\r\n  //     status: \"success\",\r\n  //   });\r\n  // };\r\n\r\n  const submit_AllowsDetls = (e) => {\r\n    e.preventDefault();\r\n    handleSubmitAlertOpen();\r\n  };\r\n\r\n  const exit_AllowsDetls = (e) => {\r\n    e.preventDefault();\r\n    handleExitAlertOpen();\r\n  };\r\n\r\n  const handleOnSubmitConfirm = () => {\r\n    //save allows data details\r\n    const { id } = allowsdata;\r\n    updateDailyAllows({\r\n      id: id,\r\n      ...allowsdata,\r\n      no_of_days: totals.totaldays,\r\n      amount: totals.totalamount,\r\n      totaljobbonus: totals.totalbonus,\r\n      totalperdiem: totals.totaldiem,\r\n      status: \"Submitted\",\r\n    });\r\n    handleSentEmail(allowsdata);\r\n    navigate(\"/dailyallowancesstaff\");\r\n    toast({\r\n      title: \"Site Allowances table being submitted!\",\r\n      status: \"success\",\r\n    });\r\n  };\r\n\r\n  const handleOnExitConfirm = () => {\r\n    //save allows data details\r\n    // const { id } = allowsdata;\r\n    // updateDailyAllows({\r\n    //   id: id,\r\n    //   ...allowsdata,\r\n    //   no_of_days: totals.totaldays,\r\n    //   amount: totals.totalamount,\r\n    //   totaljobbonus: totals.totalbonus,\r\n    //   totalperdiem: totals.totaldiem,\r\n    // });\r\n    navigate(\"/dailyallowancesstaff\");\r\n    // toast({\r\n    //   title: \"Site Allowances table being submitted!\",\r\n    //   status: \"success\",\r\n    // });\r\n  };\r\n\r\n  const handleSubmitAlertOpen = () => {\r\n    setIsSubmitAlertOpen(true);\r\n  };\r\n\r\n  const handleSubmitAlertClose = () => {\r\n    setIsSubmitAlertOpen(false);\r\n  };\r\n\r\n  const handleExitAlertOpen = () => {\r\n    setIsExitAlertOpen(true);\r\n  };\r\n\r\n  const handleExitAlertClose = () => {\r\n    setIsExitAlertOpen(false);\r\n  };\r\n\r\n  // const handle_calc = () => {\r\n  //   if (dailyallowsdetls) {\r\n  //     const totbonus = dailyallowsdetls\r\n  //       .filter((r) => r.period === allows_period && r.empid === allows_empid)\r\n  //       .reduce((acc, item) => {\r\n  //         if (isNaN(item.jobbonus)) {\r\n  //           return acc;\r\n  //         } else {\r\n  //           return acc + item.jobbonus;\r\n  //         }\r\n  //       }, 0);\r\n  //     const totdiem = dailyallowsdetls\r\n  //       .filter((r) => r.period === allows_period && r.empid === allows_empid)\r\n  //       .reduce((acc, item) => {\r\n  //         if (isNaN(item.perdiem)) {\r\n  //           return acc;\r\n  //         } else {\r\n  //           return acc + item.perdiem;\r\n  //         }\r\n  //       }, 0);\r\n  //     const totdays = dailyallowsdetls\r\n  //       .filter((r) => r.period === allows_period && r.empid === allows_empid)\r\n  //       .reduce((acc, item) => {\r\n  //         let val = 0;\r\n  //         if (item.jobbonus > 0 || item.perdiem > 0) {\r\n  //           val = 1;\r\n  //         } else {\r\n  //           val = 0;\r\n  //         }\r\n  //         return acc + val;\r\n  //       }, 0);\r\n  //     const total = totbonus + totdiem;\r\n\r\n  //     setTimeout(() => {\r\n  //       setTotals({\r\n  //         totalamount: total,\r\n  //         totalbonus: totbonus,\r\n  //         totaldiem: totdiem,\r\n  //         totaldays: totdays,\r\n  //       });\r\n  //     }, 3000);\r\n  //     console.log(\"calc\", totdays, totals);\r\n  //   }\r\n  // };\r\n\r\n  const handle_tempcalc = (allowsdata) => {\r\n    if (allowsdata) {\r\n      const totbonus = allowsdata\r\n        .filter((r) => r.period === allows_period && r.empid === allows_empid)\r\n        .reduce((acc, item) => {\r\n          if (isNaN(item.jobbonus)) {\r\n            return acc;\r\n          } else {\r\n            return acc + item.jobbonus;\r\n          }\r\n        }, 0);\r\n      const totdiem = allowsdata\r\n        .filter((r) => r.period === allows_period && r.empid === allows_empid)\r\n        .reduce((acc, item) => {\r\n          if (isNaN(item.perdiem)) {\r\n            return acc;\r\n          } else {\r\n            return acc + item.perdiem;\r\n          }\r\n        }, 0);\r\n      const totdays = allowsdata\r\n        .filter((r) => r.period === allows_period && r.empid === allows_empid)\r\n        .reduce((acc, item) => {\r\n          let val = 0;\r\n          if (item.jobbonus > 0 || item.perdiem > 0) {\r\n            val = 1;\r\n          } else {\r\n            val = 0;\r\n          }\r\n          return acc + val;\r\n        }, 0);\r\n      const total = totbonus + totdiem;\r\n\r\n      const data = dailyallows\r\n        .filter((r) => r.period === allows_period && r.empid === allows_empid)\r\n        .map((rec) => {\r\n          return { ...rec };\r\n        });\r\n\r\n      updateDailyAllows({\r\n        id: data[0].id,\r\n        no_of_days: totdays,\r\n        amount: total,\r\n        totaljobbonus: totbonus,\r\n        totalperdiem: totdiem,\r\n      });\r\n      // setTimeout(() => {\r\n      //   setTotals({\r\n      //     totalamount: total,\r\n      //     totalbonus: totbonus,\r\n      //     totaldiem: totdiem,\r\n      //     totaldays: totdays,\r\n      //   });\r\n      // }, 3000);\r\n      // console.log(\"tempcalc\", totdays, totals);\r\n    }\r\n  };\r\n\r\n  // const update_SiteAllowsTotals = () => {\r\n  //   setSiteAllowsTotals({\r\n  //     totalamount: totals.totalamount,\r\n  //     totalbonus: dailyallowsdetls.reduce((acc, item) => {\r\n  //       if (isNaN(item.jobbonus)) {\r\n  //         return acc;\r\n  //       } else {\r\n  //         return acc + item.jobbonus;\r\n  //       }\r\n  //     }, 0),\r\n  //     totaldiem: totals.totaldiem,\r\n  //     totaldays: dailyallowsdetls.reduce((acc, item) => {\r\n  //       let val = 0;\r\n  //       if (item.jobbonus > 0 || item.perdiem > 0) {\r\n  //         val = 1;\r\n  //       } else {\r\n  //         val = 0;\r\n  //       }\r\n  //       return acc + val;\r\n  //     }, 0),\r\n  //   });\r\n  //   console.log(\"update\", siteallowsTotals);\r\n  // };\r\n\r\n  // const add_DailyAllowsDetl = async (data) => {\r\n  //   console.log(\"add\", data);\r\n  //   const { description, amount } = data;\r\n  //   addDailyAllowsDetl({\r\n  //     description: description,\r\n  //     amount: amount,\r\n  //     name: single_dailyallowance.name,\r\n  //     empid: single_dailyallowance.empid,\r\n  //     period: dailyallowance_period,\r\n  //   });\r\n  // };\r\n\r\n  const delete_AllowsDetl = (data, index) => {\r\n    const allowsdata = dailyallowsdetls;\r\n    const { id } = data;\r\n    deleteDailyAllowsDetls(id);\r\n    // toast({\r\n    //   title: \"Site Allowances details record being deleted!\",\r\n    //   status: \"warning\",\r\n    // });\r\n    //recalc\r\n    allowsdata.splice(index, 1);\r\n    handle_tempcalc(allowsdata);\r\n  };\r\n\r\n  //  setAllowsDetlsdata(dailyallowsdetls);\r\n\r\n  // console.log(\"load allows detls\", allowsDetlsdata);\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"75%\", paddingTop: \"5px\" }}>\r\n        {/* <h2>Site Allows Detils Table</h2> */}\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={dailyallowsdetls}\r\n          title=\"Daily Allowances Details\"\r\n          editable={{\r\n            // onRowAdd: (newData) =>\r\n            //   new Promise((resolve, reject) => {\r\n            //     // setTimeout(() => {\r\n            //     //   setAllowsdata([...allowsdata, newData]);\r\n            //     //   resolve();\r\n            //     // }, 1000);\r\n            //   }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataUpdate = [...dailyallowsdetls];\r\n                  const index = oldData.tableData.id;\r\n                  dataUpdate[index] = newData;\r\n                  //setDailyAllowsData([...dataUpdate]);\r\n\r\n                  update_AllowsDetls(newData, index);\r\n                  //handle_calc();\r\n                  //setAllowsDetlsTable([...dataUpdate]);\r\n                  //editable = dataUpdate;\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  //const dataDelete = [...allowsDetlsTable];\r\n                  const index = oldData.tableData.id;\r\n                  delete_AllowsDetl(oldData, index);\r\n                  //dataDelete.splice(index, 1);\r\n                  //setAllowsDetlsTable([...dataDelete]);\r\n\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            selection: false,\r\n            pageSize: 10,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  {/* <Button\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                      color=\"secondary\"\r\n                      className={classes.button}\r\n                      onClick={(e) => delete_AllowsDetls(e)}\r\n                    >\r\n                      delete\r\n                    </Button> */}\r\n                  {/* <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={(e) => handle_refresh(e)}\r\n                  >\r\n                    re-fresh\r\n                  </Button> */}\r\n                  {/* <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={(e) => handle_calc(e)}\r\n                  >\r\n                    re-calc\r\n                  </Button>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={(e) => save_AllowsDetls(e)}\r\n                  >\r\n                    Update all\r\n                  </Button> */}\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={(e) => submit_AllowsDetls(e)}\r\n                  >\r\n                    Submit <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={(e) => exit_AllowsDetls(e)}\r\n                  >\r\n                    Exit\r\n                  </Button>\r\n\r\n                  <div>\r\n                    <Grid\r\n                      container\r\n                      spacing={0}\r\n                      direction=\"row\"\r\n                      style={{ border: \"1px solid white\" }}\r\n                    >\r\n                      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                        <TextField\r\n                          label=\"Total Job Bonus\"\r\n                          variant=\"filled\"\r\n                          style={{ width: \"100%\" }}\r\n                          name=\"totalbonus\"\r\n                          value={\r\n                            dailyallows &&\r\n                            dailyallows\r\n                              .filter(\r\n                                (r) =>\r\n                                  r.period === allows_period &&\r\n                                  r.empid === allows_empid\r\n                              )\r\n                              .map((rec) => {\r\n                                return rec.totaljobbonus;\r\n                              })\r\n                          }\r\n                          type=\"currency\"\r\n                          className={classes.textField}\r\n                          InputLabelProps={{\r\n                            shrink: true,\r\n                          }}\r\n                        ></TextField>\r\n                        <TextField\r\n                          label=\"Total Diem\"\r\n                          variant=\"filled\"\r\n                          style={{ width: \"100%\" }}\r\n                          name=\"totaldiem\"\r\n                          value={\r\n                            dailyallows &&\r\n                            dailyallows\r\n                              .filter(\r\n                                (r) =>\r\n                                  r.period === allows_period &&\r\n                                  r.empid === allows_empid\r\n                              )\r\n                              .map((rec) => {\r\n                                return rec.totalperdiem;\r\n                              })\r\n                          }\r\n                          type=\"currency\"\r\n                          className={classes.textField}\r\n                          InputLabelProps={{\r\n                            shrink: true,\r\n                          }}\r\n                        ></TextField>\r\n\r\n                        <TextField\r\n                          label=\"No of Days\"\r\n                          variant=\"filled\"\r\n                          style={{ width: \"100%\" }}\r\n                          name=\"totaldays\"\r\n                          value={\r\n                            dailyallows &&\r\n                            dailyallows\r\n                              .filter(\r\n                                (r) =>\r\n                                  r.period === allows_period &&\r\n                                  r.empid === allows_empid\r\n                              )\r\n                              .map((rec) => {\r\n                                return rec.no_of_days;\r\n                              })\r\n                          }\r\n                          type=\"numeric\"\r\n                          className={classes.textField}\r\n                          InputLabelProps={{\r\n                            shrink: true,\r\n                          }}\r\n                        ></TextField>\r\n                        <TextField\r\n                          label=\"Total Amount\"\r\n                          variant=\"filled\"\r\n                          style={{ width: \"100%\" }}\r\n                          name=\"totalamount\"\r\n                          value={\r\n                            dailyallows &&\r\n                            dailyallows\r\n                              .filter(\r\n                                (r) =>\r\n                                  r.period === allows_period &&\r\n                                  r.empid === allows_empid\r\n                              )\r\n                              .map((rec) => {\r\n                                return rec.amount;\r\n                              })\r\n                          }\r\n                          type=\"currency\"\r\n                          className={classes.textField}\r\n                          InputLabelProps={{\r\n                            shrink: true,\r\n                          }}\r\n                        ></TextField>\r\n                      </div>\r\n                    </Grid>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n      <div>\r\n        <AlertDialogBox\r\n          onClose={handleSubmitAlertClose}\r\n          onConfirm={handleOnSubmitConfirm}\r\n          isOpen={isSubmitAlertOpen}\r\n          title=\"Site Allowances Batch\"\r\n        >\r\n          <h2>After submition for approval, no changes can be made.</h2>\r\n          <h2>Are you sure you want to submit ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n      <div>\r\n        <AlertDialogBox\r\n          onClose={handleExitAlertClose}\r\n          onConfirm={handleOnExitConfirm}\r\n          isOpen={isExitAlertOpen}\r\n          title=\"Site Allowances Batch\"\r\n        >\r\n          <h2>Are you sure you want to exit ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n      {/* <div>\r\n        <AlertDialogBox\r\n          onClose={onAlertDeleteClose}\r\n          onConfirm={handleOnAlertDeleteConfirm}\r\n          isOpen={isAlertDeleteOpen}\r\n          title=\"Site Allowances Batch\"\r\n        >\r\n          <h2>Are you sure you want to delete {isRowIndex} ?</h2>\r\n        </AlertDialogBox>\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n    width: 1500,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeFormNew.js",["1453","1454","1455","1456","1457","1458"],"import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  TextField,\r\n  Paper,\r\n  Typography,\r\n  Grid,\r\n  Divider,\r\n  Checkbox,\r\n  FormControlLabel,\r\n} from \"@material-ui/core\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { Controller, useForm, setValue } from \"react-hook-form\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\nimport { useAddEmployees } from \"./employees/useAddEmployees\";\r\nimport { useUpdateEmployees } from \"./employees/useUpdateEmployees\";\r\nimport { useDepartments } from \"./departments/useDepartments\";\r\nimport { useDesignations } from \"./designations/useDesignations\";\r\nimport App from \"../utils/firebase\";\r\n\r\n// import EmpFamily from \"./EmpFamily\";\r\n// import EmpEducations from \"./EmpEducations\";\r\n// import EmpExperiences from \"./EmpExperiences\";\r\n// import EmpTrainings from \"./EmpTrainings\";\r\n\r\nconst initial_values = {\r\n  name: \"\",\r\n  empno: \"\",\r\n  gender: \"\",\r\n  ic_no: \"\",\r\n  email: \"\",\r\n  age: 0,\r\n  birthdate: null,\r\n  address: \"\",\r\n  nationality: \"\",\r\n  basic_salary: 0,\r\n  salary_currency: \"BND\",\r\n  bank_name: \"\",\r\n  bank_acno: \"\",\r\n  tap_checkbox: true,\r\n  tap_acno: \"\",\r\n  scp_acno: \"\",\r\n  date_of_join: null,\r\n  date_of_resign: null,\r\n  leave_bal: 0,\r\n  leave_bf: 0,\r\n  leave_entitled: 0,\r\n  leave_cd: 0,\r\n  designation: \"\",\r\n  department: \"\",\r\n  passportno: \"\",\r\n  passport_expirydate: null,\r\n  workpermitno: \"\",\r\n  workpermit_expirydate: null,\r\n  siteallows_fee: 0,\r\n  perdiem_fee: 0,\r\n  role: 1,\r\n  password: \"abc123*\",\r\n  reporting_to: \"\",\r\n  reporting_email: \"\",\r\n};\r\n\r\nconst EmployeeFormNew = () => {\r\n  const classes = useStyles();\r\n  const {\r\n    isEditing,\r\n    single_employee,\r\n    //updateEmployee,\r\n    //addEmployee,\r\n    editEmployeeID,\r\n    single_employee_loading,\r\n  } = useEmployeesContext();\r\n  const {\r\n    name,\r\n    empno,\r\n    ic_no,\r\n    gender,\r\n    //age,\r\n    birthdate,\r\n    email,\r\n    address,\r\n    nationality,\r\n    basic_salary,\r\n    salary_currency,\r\n    bank_name,\r\n    bank_acno,\r\n    tap_checkbox,\r\n    tap_acno,\r\n    scp_acno,\r\n    leave_bal,\r\n    leave_bf,\r\n    leave_cd,\r\n    leave_entitled,\r\n    password,\r\n    date_of_join,\r\n    date_of_resign,\r\n    designation,\r\n    department,\r\n    passportno,\r\n    passport_expirydate,\r\n    workpermitno,\r\n    workpermit_expirydate,\r\n    siteallows_fee,\r\n    perdiem_fee,\r\n    reporting_to,\r\n    reporting_email,\r\n  } = single_employee || initial_values;\r\n  const addEmployees = useAddEmployees();\r\n  const updateEmployees = useUpdateEmployees();\r\n  const { employees } = useEmployees();\r\n  const { designations } = useDesignations();\r\n  const { departments } = useDepartments();\r\n  const [empage, setEmpage] = useState(0);\r\n  const [reportemail, setReportEmail] = useState(\"\");\r\n  //const [checktap, setCheckTap] = useState(false);\r\n  //const [alert, setAlert] = useState(false);\r\n  const { handleSubmit, control } = useForm();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  //console.log(\"emplevel\", loginLevel);\r\n\r\n  const calculateAge = (dob) => {\r\n    var today = new Date();\r\n    var birthDate = new Date(dob);\r\n    var age = today.getFullYear() - birthDate.getFullYear();\r\n    var m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      age--;\r\n    }\r\n    return age;\r\n  };\r\n\r\n  const handleReportingTo = (name) => {\r\n    const emp = employees\r\n      .filter((f) => f.name === name)\r\n      .map((r) => {\r\n        return { ...r };\r\n      });\r\n    setReportEmail(emp[0].email);\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    if (isEditing) {\r\n      updateEmployees({ id: editEmployeeID, ...data });\r\n    } else {\r\n      addEmployees({ password: \"abc123*\", role: 1, ...data });\r\n      try {\r\n        App.auth().createUserWithEmailAndPassword(email, \"abc123*\");\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    // setAlert(true);\r\n    // setTimeout(() => {\r\n    //   setAlert(false);\r\n    // }, 3000);\r\n    //loadEmployees();\r\n    // <Alert severity=\"success\">\r\n    //   <AlertTitle>Success</AlertTitle>\r\n    //   This is a success alert — <strong>check it out!</strong>\r\n    // </Alert>;\r\n    //history.push(\"/allemployees\");\r\n  };\r\n\r\n  if (single_employee_loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <Paper className={classes.root}>\r\n          <Grid container className={classes.root} spacing={15}>\r\n            <div>\r\n              <Typography variant=\"h5\" component=\"h3\">\r\n                EMPLOYEE FORM\r\n              </Typography>\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n              >\r\n                Submit <Icon className={classes.rightIcon}>send</Icon>\r\n              </Button>\r\n            </div>\r\n          </Grid>\r\n          <Divider className={classes.divider} />\r\n          <Grid item xs={12}>\r\n            <div>\r\n              <div>\r\n                <Controller\r\n                  name=\"name\"\r\n                  control={control}\r\n                  defaultValue={name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Name\"\r\n                        id=\"margin-normal\"\r\n                        name=\"name\"\r\n                        defaultValue={name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"empno\"\r\n                  control={control}\r\n                  defaultValue={empno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Emp No\"\r\n                        id=\"standard-empno\"\r\n                        defaultValue={empno}\r\n                        name=\"empno\"\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"email\"\r\n                  control={control}\r\n                  defaultValue={email}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Email\"\r\n                        id=\"margin-normal\"\r\n                        name=\"email\"\r\n                        defaultValue={email}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"ic_no\"\r\n                  control={control}\r\n                  defaultValue={ic_no}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"IC No\"\r\n                        id=\"margin-normal\"\r\n                        name=\"ic_no\"\r\n                        defaultValue={ic_no}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"birthdate\"\r\n                  control={control}\r\n                  defaultValue={birthdate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Birth Date\"\r\n                        id=\"margin-birthdate\"\r\n                        name=\"birthdate\"\r\n                        type=\"date\"\r\n                        defaultValue={birthdate}\r\n                        className={classes.textField}\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(parseInt(e.target.value, 10));\r\n                          let age = calculateAge(e.target.value);\r\n                          console.log(\"emp\", birthdate, age);\r\n                          setEmpage(age);\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"age\"\r\n                  control={control}\r\n                  defaultValue={empage}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Age\"\r\n                        type=\"number\"\r\n                        id=\"standard-number-age\"\r\n                        name=\"empage\"\r\n                        value={empage}\r\n                        className={classes.textField}\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(parseInt(e.target.value, 10));\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"passportno\"\r\n                  control={control}\r\n                  defaultValue={passportno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Passport No\"\r\n                        id=\"margin-normal\"\r\n                        name=\"passportno\"\r\n                        defaultValue={passportno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"passport_expirydate\"\r\n                  control={control}\r\n                  defaultValue={passport_expirydate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Passport Expiry Date\"\r\n                        id=\"margin-normal\"\r\n                        name=\"passport_expirydate\"\r\n                        type=\"date\"\r\n                        defaultValue={passport_expirydate}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"nationality\"\r\n                  control={control}\r\n                  defaultValue={nationality}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Nationality\"\r\n                        id=\"standard-nationality\"\r\n                        name=\"nationality\"\r\n                        defaultValue={nationality}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"gender\"\r\n                  control={control}\r\n                  defaultValue={gender}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Gender\"\r\n                        id=\"margin-normal\"\r\n                        name=\"gender\"\r\n                        defaultValue={gender}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        <MenuItem value=\"Male\">Male</MenuItem>\r\n                        <MenuItem value=\"Female\">Female</MenuItem>\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"address\"\r\n                  control={control}\r\n                  defaultValue={address}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Address\"\r\n                        id=\"standard-address\"\r\n                        name=\"address\"\r\n                        defaultValue={address}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <Divider className={classes.divider} />\r\n            <div>\r\n              <div>\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"basic_salary\"\r\n                    control={control}\r\n                    defaultValue={basic_salary}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Basic Salary\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"basic_pay\"\r\n                          defaultValue={basic_salary}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            onChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                        />\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"salary_currency\"\r\n                    control={control}\r\n                    defaultValue={salary_currency}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Currency\"\r\n                          id=\"standard-currency\"\r\n                          name=\"salary_currency\"\r\n                          defaultValue={salary_currency}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            onChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                          select\r\n                        >\r\n                          <MenuItem value=\"BND\">BND</MenuItem>\r\n                          <MenuItem value=\"USD\">USD</MenuItem>\r\n                          <MenuItem value=\"MYR\">MYR</MenuItem>\r\n                        </TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n              </div>\r\n              <div>\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"siteallows_fee\"\r\n                    control={control}\r\n                    defaultValue={siteallows_fee}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Site Allowances Fee\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"siteallows_fee\"\r\n                          defaultValue={siteallows_fee}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            onChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                        />\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"perdiem_fee\"\r\n                    control={control}\r\n                    defaultValue={perdiem_fee}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Per Diem Fee\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"perdiem_fee\"\r\n                          defaultValue={perdiem_fee}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            onChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                        />\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Controller\r\n                  name=\"tap_checkbox\"\r\n                  control={control}\r\n                  defaultValue={tap_checkbox}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Checkbox\r\n                            checked={tap_checkbox}\r\n                            onChange={onChange}\r\n                            name=\"tap_checkbox\"\r\n                          />\r\n                        }\r\n                        label=\"TAP/SCP Contribution\"\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"tap_acno\"\r\n                  control={control}\r\n                  defaultValue={tap_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"TAP Ac No\"\r\n                        id=\"margin-normal\"\r\n                        name=\"tap_acno\"\r\n                        defaultValue={tap_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"scp_acno\"\r\n                  control={control}\r\n                  defaultValue={scp_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"SCP Ac No\"\r\n                        id=\"margin-normal\"\r\n                        name=\"scp_acno\"\r\n                        defaultValue={scp_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"bank_name\"\r\n                  control={control}\r\n                  defaultValue={bank_name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Bank Name\"\r\n                        id=\"margin-normal\"\r\n                        name=\"bank_name\"\r\n                        defaultValue={bank_name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"bank_acno\"\r\n                  control={control}\r\n                  defaultValue={bank_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Bank Ac No\"\r\n                        id=\"margin-normal\"\r\n                        name=\"bank_acno\"\r\n                        defaultValue={bank_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  // rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"workpermitno\"\r\n                  control={control}\r\n                  defaultValue={workpermitno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Work Permit No\"\r\n                        id=\"margin-normal\"\r\n                        name=\"workpermitno\"\r\n                        defaultValue={workpermitno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"workpermit_expirydate\"\r\n                  control={control}\r\n                  defaultValue={workpermit_expirydate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Work Permit Expiry Date\"\r\n                        id=\"margin-normal\"\r\n                        name=\"workpermit_expirydate\"\r\n                        type=\"date\"\r\n                        defaultValue={workpermit_expirydate}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <Divider className={classes.divider} />\r\n              <div>\r\n                <Controller\r\n                  name=\"date_of_join\"\r\n                  control={control}\r\n                  defaultValue={date_of_join}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Joining Date\"\r\n                        id=\"margin-normal\"\r\n                        name=\"date_of_join\"\r\n                        type=\"date\"\r\n                        defaultValue={date_of_join}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"date_of_resign\"\r\n                  control={control}\r\n                  defaultValue={date_of_resign}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Resign Date\"\r\n                        id=\"margin-normal\"\r\n                        name=\"date_of_resign\"\r\n                        type=\"date\"\r\n                        defaultValue={date_of_resign}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"leave_entitled\"\r\n                  control={control}\r\n                  defaultValue={leave_entitled}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Annual Leaves Entitled\"\r\n                        id=\"standard-annualleave\"\r\n                        name=\"leave_entitled\"\r\n                        type=\"numeric\"\r\n                        defaultValue={leave_entitled}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"leave_bal\"\r\n                  control={control}\r\n                  defaultValue={leave_bal}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Leaves Balance\"\r\n                        id=\"standard-leavebal\"\r\n                        name=\"leave_bal\"\r\n                        type=\"numeric\"\r\n                        defaultValue={leave_bal}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"designation\"\r\n                  control={control}\r\n                  defaultValue={designation}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Designation\"\r\n                        id=\"margin-normal\"\r\n                        name=\"designation\"\r\n                        defaultValue={designation}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        {designations &&\r\n                          designations.map((r) => {\r\n                            return <MenuItem value={r.name}>{r.name}</MenuItem>;\r\n                          })}\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"department\"\r\n                  control={control}\r\n                  defaultValue={department}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Department\"\r\n                        id=\"margin-normal\"\r\n                        name=\"department\"\r\n                        defaultValue={department}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        {departments &&\r\n                          departments.map((r) => {\r\n                            return <MenuItem value={r.name}>{r.name}</MenuItem>;\r\n                          })}\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"reporting_to\"\r\n                  control={control}\r\n                  defaultValue={reporting_to}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Reporting To\"\r\n                        id=\"standard-reportingto\"\r\n                        name=\"reporting_to\"\r\n                        defaultValue={reporting_to}\r\n                        className={classes.textField}\r\n                        onChange={(e) => {\r\n                          onChange(e.target.value);\r\n                          handleReportingTo(e.target.value);\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        <MenuItem value=\"\">None</MenuItem>\r\n                        {employees &&\r\n                          employees.map((r) => {\r\n                            return <MenuItem value={r.name}>{r.name}</MenuItem>;\r\n                          })}\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"reporting_email\"\r\n                  control={control}\r\n                  defaultValue={reportemail}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Reporting Email\"\r\n                        id=\"standard-reportingemail\"\r\n                        name=\"reporting_email\"\r\n                        value={reportemail}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <Divider className={classes.divider} />\r\n            </div>\r\n          </Grid>\r\n          <Divider />\r\n        </Paper>\r\n      </form>\r\n\r\n      {/* <div>\r\n        <Grid xs={12}>\r\n          <EmpFamily />\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <EmpEducations />\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <EmpExperiences />\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <EmpTrainings />\r\n        </Grid>\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  divider: {\r\n    padding: 4,\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 350,\r\n  },\r\n}));\r\n\r\nexport default EmployeeFormNew;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableStaff.js",["1459","1460","1461","1462"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\n//import { Alert } from \"@material-ui/lab\";\r\n//import { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport {\r\n  allowsPeriodState,\r\n  allowsDataState,\r\n  allowsDataDetlsState,\r\n  allowsDataIdState,\r\n  empidState,\r\n  loginLevelState,\r\n} from \"./data/atomdata\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\nimport DailyAllowancesAddPeriod from \"./DailyAllowancesAddPeriod\";\r\nimport DailyAllowsDetlsTableStaff from \"./DailyAllowsDetlsTableStaff\";\r\nimport { useDailyAllows } from \"./dailyallows/useDailyAllows\";\r\n//import { useAddDailyAllows } from \"./dailyallows/useAddDailyAllows\";\r\n//import { useUpdateDailyAllows } from \"./dailyallows/useUpdateDailyAllows\";\r\nimport { useDeleteDailyAllows } from \"./dailyallows/useDeleteDailyAllows\";\r\nimport { useDeleteDailyAllowsDetls } from \"./dailyallowsdetls/useDeleteDailyAllowsDetls\";\r\nimport { useDailyAllowsDetlsBatch } from \"./dailyallowsdetls/useDailyAllowsDetlsBatch\";\r\n\r\nexport default function DailyAllowancesTableStaff() {\r\n  let navigate = useNavigate();\r\n  const toast = useCustomToast();\r\n  const classes = useStyles();\r\n  //const toast = useCustomToast();\r\n  const { dailyallows, dailyAllowsId, setDailyAllowsId } = useDailyAllows();\r\n  const { dailyallowsdetls, setDailyAllowsDetlsId, setDailyAllowsDetlsPeriod } =\r\n    useDailyAllowsDetlsBatch();\r\n  //const addDailyAllows = useAddDailyAllows();\r\n  //const updateDailyAllows = useUpdateDailyAllows();\r\n  const deleteDailyAllows = useDeleteDailyAllows();\r\n  const deleteDailyAllowsDetls = useDeleteDailyAllowsDetls();\r\n  const [loginLevel] = useRecoilState(loginLevelState);\r\n  const [isAddPeriodDialogOpen, setIsAddPeriodDialogOpen] = useState(false);\r\n  //const [tmpallowsdata, setTmpallowsdata] = useState([]);\r\n  const [allowsdata, setAllowsdata] = useRecoilState(allowsDataState);\r\n  const [isDeleteAlertOpen, setIsDeleteAlertOpen] = useState(false);\r\n  // const [allowsDetlsdata, setAllowsDetlsdata] =\r\n  useRecoilState(allowsDataDetlsState);\r\n  const [allows_period, setAllows_period] = useRecoilState(allowsPeriodState);\r\n  const [allows_empid, setAllows_empid] = useRecoilState(empidState);\r\n  const [allowsdataId, setAllowsdataId] = useState(allowsDataIdState);\r\n  //const [toLoadDetls, setToLoadDetls] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const [deletestate, setDeletestate] = useState({\r\n    id: \"\",\r\n    period: \"\",\r\n    empid: \"\",\r\n  });\r\n  const [isAllowsDetlDialogOpen, setIsAllowsDetlDialogOpen] = useState(false);\r\n  const title = `Site Allowances`;\r\n  const {\r\n    //loadEmpDailyAllowances,\r\n    loadEmpDailyAllowsDetls,\r\n    //dailyallowances_loading,\r\n    //dailyallowances_error,\r\n    //updateDailyAllowance,\r\n    //getSingleBatchDailyAllowsDetl,\r\n  } = useDailyAllowancesContext();\r\n\r\n  useEffect(() => {\r\n    setDailyAllowsId(loginLevel.loginUserId);\r\n  }, [dailyAllowsId]);\r\n\r\n  // useEffect(() => {\r\n  //   loadEmpDailyAllowances(loginLevel.loginUserId);\r\n  // }, [toLoad]);\r\n\r\n  // const myCustomSortingAlgorithm = {\r\n  //   ascending: (a, b) => a.period.length - b.period.length,\r\n  //   descending: (a, b) => b.period.length - a.period.length,\r\n  // };\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"name\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Period\",\r\n        field: \"period\",\r\n        editable: \"never\",\r\n      },\r\n      { title: \"Location\", field: \"location\", editable: \"never\" },\r\n      { title: \"Manager Name\", field: \"manager\", editable: \"never\" },\r\n      {\r\n        title: \"No Of Days\",\r\n        field: \"no_of_days\",\r\n        type: \"numeric\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Job Bonus\",\r\n        field: \"totaljobbonus\",\r\n        type: \"currency\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Per Diem\",\r\n        field: \"totalperdiem\",\r\n        type: \"currency\",\r\n        editable: \"never\",\r\n      },\r\n      { title: \"Amount\", field: \"amount\", type: \"currency\", editable: \"never\" },\r\n      { title: \"Status\", field: \"status\", editable: \"never\" },\r\n      // {\r\n      //   title: \"Status\",\r\n      //   field: \"status\",\r\n      //   editComponent: (props) => (\r\n      //     <TextField\r\n      //       //defaultValue={props.value || null}\r\n      //       onChange={(e) => props.onChange(e.target.value)}\r\n      //       style={{ width: 100 }}\r\n      //       value={props.value}\r\n      //       select\r\n      //     >\r\n      //       <MenuItem value=\"Pending\">Pending</MenuItem>\r\n      //       {/* <MenuItem value=\"Approve\">Approve</MenuItem>\r\n      //     <MenuItem value=\"Reject\">Reject</MenuItem>\r\n      //     <MenuItem value=\"Cancel\">Cancel</MenuItem> */}\r\n      //     </TextField>\r\n      //   ),\r\n      // },\r\n    ],\r\n    []\r\n  );\r\n\r\n  // const Save_DailyAllowancesData = () => {\r\n  //   dailyallows.forEach((data) => {\r\n  //     const { id } = data;\r\n  //     if (id) {\r\n  //       const { id, rec_id, tableData, ...fields } = data;\r\n  //       updateDailyAllowance({ id, ...fields });\r\n  //     }\r\n  //   });\r\n  //   //handleDialogClose();\r\n  //};\r\n\r\n  const update_SiteAllowsDetl = (data) => {\r\n    const {\r\n      id,\r\n      empid,\r\n      period,\r\n      no_of_days,\r\n      amount,\r\n      totaljobbonus,\r\n      totalperdiem,\r\n    } = data;\r\n\r\n    loadEmpDailyAllowsDetls(empid, period);\r\n\r\n    setAllows_period(period);\r\n    setAllows_empid(empid);\r\n    setAllowsdataId(id);\r\n    setAllows_period(period);\r\n    setAllows_empid(empid);\r\n    setAllowsdataId(id);\r\n    setAllowsdata({\r\n      ...allowsdata,\r\n      id: id,\r\n      no_of_days: no_of_days,\r\n      totaljobbonus: totaljobbonus,\r\n      totalperdiem: totalperdiem,\r\n      amount: amount,\r\n      period: period,\r\n      empid: empid,\r\n    });\r\n\r\n    //setIsAllowsDetlDialogOpen(true);\r\n    navigate(\"/singledailyallowsdetlsstaff\");\r\n  };\r\n\r\n  const delete_SiteAllows = (data) => {\r\n    const { id, period, empid } = data;\r\n    setDeletestate((prev) => (prev = { id: id, period: period, empid: empid }));\r\n    setDailyAllowsDetlsId(empid);\r\n    setDailyAllowsDetlsPeriod(period);\r\n    handleDeleteAlertOpen();\r\n  };\r\n\r\n  const handleDeleteAlertOpen = () => {\r\n    setIsDeleteAlertOpen(true);\r\n  };\r\n\r\n  const handleDeleteAlertClose = () => {\r\n    setIsDeleteAlertOpen(false);\r\n  };\r\n\r\n  const handleOnDeleteConfirm = (data) => {\r\n    const { id, period, empid } = deletestate;\r\n\r\n    //delete allows detls\r\n    //console.log(\"allowsdetls\", dailyallowsdetls);\r\n    dailyallowsdetls\r\n      .filter((f) => f.empid === empid)\r\n      .forEach((rec) => {\r\n        if (rec.period === period && rec.empid === empid) {\r\n          //console.log(\"del id\", rec.id);\r\n          deleteDailyAllowsDetls(rec.id);\r\n        }\r\n      });\r\n    //delete daily allows\r\n    deleteDailyAllows(id);\r\n    // toast({\r\n    //   title: `Site Allowances has been successfully deleted!`,\r\n    //   status: \"warning\",\r\n    // });\r\n  };\r\n\r\n  const add_SiteAllowsPeriod = () => {\r\n    handleAddPeriodDialogOpen();\r\n  };\r\n\r\n  const handleAddPeriodDialogOpen = () => {\r\n    setIsAddPeriodDialogOpen(true);\r\n  };\r\n\r\n  const handleAddPeriodDialogClose = () => {\r\n    setIsAddPeriodDialogOpen(false);\r\n  };\r\n\r\n  // const handleAllowsDetlDialogOpen = () => {\r\n  //   setIsAllowsDetlDialogOpen(true);\r\n  // };\r\n\r\n  const handleAllowsDetlDialogClose = () => {\r\n    //settoLoad(true);\r\n    setIsAllowsDetlDialogOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={dailyallows}\r\n          title={title}\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <EditIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          // editable={{\r\n          //   onRowUpdate: (newData, oldData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         // const dataUpdate = [...dailyallowances];\r\n          //         // const index = oldData.tableData.id;\r\n          //         // dataUpdate[index] = newData;\r\n          //         //setDailyAllowances([...dataUpdate]);\r\n          //         //approve_Expense(newData);\r\n          //         update_AllowsDetl();\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          // }}\r\n          actions={[\r\n            {\r\n              icon: \"add\",\r\n              tooltip: \"Add Record\",\r\n              isFreeAction: true,\r\n              onClick: (event, rowData) => {\r\n                add_SiteAllowsPeriod();\r\n              },\r\n            },\r\n            (rowData) => ({\r\n              disabled:\r\n                rowData.status === \"Approved\" || rowData.status === \"Submitted\",\r\n              icon: \"edit\",\r\n              tooltip: \"Edit Record\",\r\n              onClick: (event, rowData) => {\r\n                update_SiteAllowsDetl(rowData);\r\n              },\r\n            }),\r\n            (rowData) => ({\r\n              disabled:\r\n                rowData.status === \"Approved\" || rowData.status === \"Submitted\",\r\n              icon: \"delete\",\r\n              tooltip: \"Delete Record\",\r\n              onClick: (event, rowData) => {\r\n                delete_SiteAllows(rowData);\r\n              },\r\n            }),\r\n          ]}\r\n          options={{\r\n            filtering: true,\r\n            sorting: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  {error &&\r\n                    toast({\r\n                      title: \"Period already existed!\",\r\n                      status: \"warning\",\r\n                    })}\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <div className={classes.dialog}>\r\n          <CustomDialog\r\n            isOpen={isAddPeriodDialogOpen}\r\n            handleClose={handleAddPeriodDialogClose}\r\n            title=\"\"\r\n            showButton={true}\r\n            isFullscreen={false}\r\n            isFullwidth={false}\r\n          >\r\n            <DailyAllowancesAddPeriod\r\n              handleDialogClose={handleAddPeriodDialogClose}\r\n            />\r\n          </CustomDialog>\r\n        </div>\r\n        <div>\r\n          <CustomDialog\r\n            isOpen={isAllowsDetlDialogOpen}\r\n            handleClose={handleAllowsDetlDialogClose}\r\n            title=\"\"\r\n            showButton={true}\r\n            isFullscreen={false}\r\n            isFullwidth={false}\r\n          >\r\n            <DailyAllowsDetlsTableStaff\r\n              allowsdata={allowsdata}\r\n              allowsdataId={allowsdataId}\r\n              handleDialogClose={handleAllowsDetlDialogClose}\r\n            />\r\n          </CustomDialog>\r\n        </div>\r\n        <div>\r\n          <AlertDialogBox\r\n            onClose={handleDeleteAlertClose}\r\n            onConfirm={handleOnDeleteConfirm}\r\n            isOpen={isDeleteAlertOpen}\r\n            title=\"Delete Site Allowances Batch\"\r\n          >\r\n            <h2>Are you sure you want to delete ?</h2>\r\n          </AlertDialogBox>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n  dialog: {\r\n    width: 1000,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\user\\useUser.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\HocTablesUpdate.js",["1463","1464","1465","1466","1467","1468","1469","1470"],"import React, { useState, useMemo, useEffect } from \"react\";\r\n//import { Divider, Grid } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import { useHistory } from \"react-router-dom\";\r\nimport MaterialTable from \"material-table\";\r\nimport {\r\n  Box,\r\n  Container,\r\n  Divider,\r\n  Heading,\r\n  Grid,\r\n  GridItem,\r\n  Radio,\r\n  RadioGroup,\r\n  Stack,\r\n  Tabs,\r\n  TabList,\r\n  TabPanels,\r\n  Tab,\r\n  TabPanel,\r\n  useRadioGroup,\r\n} from \"@chakra-ui/react\";\r\nimport RadioCard from \"../helpers/RadioCard\";\r\n//import { useDepartments } from \"./departments/useDepartments\";\r\n//import { useDesignations } from \"./designations/useDesignations\";\r\n//import { useAllowances } from \"./allowances/useAllowances\";\r\n//import { useDeductions } from \"./deductions/useDeductions\";\r\n//import { useCurrency } from \"./currency/useCurrency\";\r\n//import { useTablesContext } from \"../context/tables_context\";\r\nimport { useHocwhat } from \"./hocwhat/useHocwhat\";\r\nimport { useUpdateHocwhat } from \"./hocwhat/useUpdateHocwhat\";\r\nimport { useDeleteHocwhat } from \"./hocwhat/useDeleteHocwhat\";\r\nimport { useAddHocwhat } from \"./hocwhat/useAddHocwhat\";\r\nimport { useHocwhatdetails } from \"./hocwhatdetails/useHocwhatdetails\";\r\nimport { useUpdateHocwhatdetails } from \"./hocwhatdetails/useUpdateHocwhatdetails\";\r\nimport { useDeleteHocwhatdetails } from \"./hocwhatdetails/useDeleteHocwhatdetails\";\r\nimport { useAddHocwhatdetails } from \"./hocwhatdetails/useAddWhatdetails\";\r\nimport { useHocwhy } from \"./hocwhy/useHocwhy\";\r\nimport { useUpdateHocwhy } from \"./hocwhy/useUpdateHocwhy\";\r\nimport { useDeleteHocwhy } from \"./hocwhy/useDeleteHocwhy\";\r\nimport { useAddHocwhy } from \"./hocwhy/useAddHocwhy\";\r\nimport { useHocwhydetails } from \"./hocwhydetails/useHocwhydetails\";\r\nimport { useUpdateHocwhydetails } from \"./hocwhydetails/useUpdateHocwhydetails\";\r\nimport { useDeleteHocwhydetails } from \"./hocwhydetails/useDeleteHocwhydetails\";\r\nimport { useAddHocwhydetails } from \"./hocwhydetails/useAddHocwhydetails\";\r\n\r\n//const HocWhyTable = React.lazy(() => import(\"./HocWhyTable\"));\r\n//const HocWhyDetailsTable = React.lazy(() => import(\"./HocWhyDetailsTable\"));\r\n//const HocWhatTable = React.lazy(() => import(\"./HocWhatTable\"));\r\n//const HocWhatDetailsTable = React.lazy(() => import(\"./HocWhatDetailsTable\"));\r\n//const HocLocationTable = React.lazy(() => import(\"./HocLocationTable\"));\r\n\r\nconst HocTablesUpdate = () => {\r\n  const classes = useStyles();\r\n  const { hocwhat } = useHocwhat();\r\n  const updateHocWhat = useUpdateHocwhat();\r\n  const deleteHocWhat = useDeleteHocwhat();\r\n  const addHocWhat = useAddHocwhat();\r\n  const { hocwhatdetails, setHocwhatdetailsId } = useHocwhatdetails();\r\n  const updateHocWhatdetails = useUpdateHocwhatdetails();\r\n  const deleteHocWhatdetails = useDeleteHocwhatdetails();\r\n  const addHocWhatdetails = useAddHocwhatdetails();\r\n  const { hocwhy, setHocwhyId } = useHocwhy();\r\n  const updateHocWhy = useUpdateHocwhy();\r\n  const deleteHocWhy = useDeleteHocwhy();\r\n  const addHocWhy = useAddHocwhy();\r\n  const { hocwhydetails, setHocwhydetailsId } = useHocwhydetails();\r\n  const updateHocWhydetails = useUpdateHocwhydetails();\r\n  const deleteHocWhydetails = useDeleteHocwhydetails();\r\n  const addHocWhydetails = useAddHocwhydetails();\r\n  const [categoryvalue, setCategoryvalue] = useState(\"Positive Act\");\r\n  const [selectedWhatRow, setSelectedWhatRow] = useState(\"\");\r\n  const [selectedWhyRow, setSelectedWhyRow] = useState(\"\");\r\n \r\n  const category = [\r\n    \"Positive Act\",\r\n    \"Unsafe Act\",\r\n    \"Unsafe Condition\",\r\n    \"Quality\",\r\n  ];\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Description\",\r\n        field: \"description\",\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const handleChange = (value) => {\r\n    setCategoryvalue(value);\r\n  };\r\n\r\n  \r\n  const { getRootProps, getRadioProps } = useRadioGroup({\r\n    name: \"framework\",\r\n    defaultValue: \"Positive Act\",\r\n    onChange: handleChange,\r\n  });\r\n  const group = getRootProps();\r\n\r\n  const update_HocWhat = (data) => {\r\n    const { id, rec_id, ...fields } = data;\r\n    updateHocWhat({ id, ...fields });\r\n  };\r\n\r\n  const add_HocWhat = (data) => {\r\n    console.log(\"whatdata\", data);\r\n    console.log(\"category\", categoryvalue);\r\n    var newData = {};\r\n    if (categoryvalue === \"Positive Act\") {\r\n      newData = { ...data, positiveact: true };\r\n    }\r\n    if (categoryvalue === \"Quality\") {\r\n      newData = { ...data, quality: true };\r\n    }\r\n    if (categoryvalue === \"Unsafe Act\") {\r\n      newData = { ...data, unsafeact: true, unsafecondition: true };\r\n    }\r\n    if (categoryvalue === \"Unsafe Condition\") {\r\n      newData = { ...data, unsafecondition: true, unsafeact: true };\r\n    }\r\n\r\n    addHocWhat(newData);\r\n  };\r\n\r\n  const delete_HocWhat = (data) => {\r\n    const { id } = data;\r\n    deleteHocWhat(id);\r\n  };\r\n\r\n  const update_HocWhatdetails = (data) => {\r\n    const { id, rec_id, ...fields } = data;\r\n    updateHocWhatdetails({ id, ...fields });\r\n  };\r\n\r\n  const add_HocWhatdetails = (data) => {\r\n    var newData = {};\r\n    if (categoryvalue === \"Positive Act\") {\r\n      newData = {\r\n        ...data,\r\n        positiveact: true,\r\n        what: selectedWhatRow.description,\r\n      };\r\n    }\r\n    if (categoryvalue === \"Quality\") {\r\n      newData = {\r\n        ...data,\r\n        quality: true,\r\n        what: selectedWhatRow.description,\r\n      };\r\n    }\r\n    if (categoryvalue === \"Unsafe Act\") {\r\n      newData = {\r\n        ...data,\r\n        unsafeact: true,\r\n        unsafecondition: true,\r\n        what: selectedWhatRow.description,\r\n      };\r\n    }\r\n    if (categoryvalue === \"Unsafe Condition\") {\r\n      newData = {\r\n        ...data,\r\n        unsafecondition: true,\r\n        unsafeact: true,\r\n        what: selectedWhatRow.description,\r\n      };\r\n    }\r\n\r\n    addHocWhatdetails(newData);\r\n  };\r\n\r\n  const delete_HocWhatdetails = (data) => {\r\n    const { id } = data;\r\n    deleteHocWhatdetails(id);\r\n  };\r\n\r\n  const onWhatSelectionChange = (selectedRows) => {\r\n    console.log(selectedRows);\r\n  };\r\n\r\n  const onWhatRowClick = (e, clickedRow) => {\r\n    setSelectedWhatRow(clickedRow);\r\n  };\r\n\r\n  const update_HocWhy = (data) => {\r\n    const { id, rec_id, ...fields } = data;\r\n    updateHocWhy({ id, ...fields });\r\n  };\r\n\r\n  const add_HocWhy = (data) => {\r\n    console.log(\"data\", data);\r\n    var newData = {};\r\n    if (categoryvalue === \"Positive Act\") {\r\n      newData = { ...data, positiveact: true };\r\n    }\r\n    if (categoryvalue === \"Quality\") {\r\n      newData = { ...data, quality: true };\r\n    }\r\n    if (categoryvalue === \"Unsafe Act\") {\r\n      newData = { ...data, unsafeact: true, unsafecondition: true };\r\n    }\r\n    if (categoryvalue === \"Unsafe Condition\") {\r\n      newData = { ...data, unsafecondition: true, unsafeact: true };\r\n    }\r\n    //console.log(\"newdata\", newData);\r\n    addHocWhy(newData);\r\n  };\r\n\r\n  const delete_HocWhy = (data) => {\r\n    const { id } = data;\r\n    deleteHocWhy(id);\r\n  };\r\n\r\n  const update_HocWhydetails = (data) => {\r\n    const { id, rec_id, ...fields } = data;\r\n    updateHocWhydetails({ id, ...fields });\r\n  };\r\n\r\n  const add_HocWhydetails = (data) => {\r\n    var newData = {};\r\n    // if (categoryvalue === \"Positive Act\") {\r\n    //   newData = { ...data, positiveact: true };\r\n    // }\r\n    // if (categoryvalue === \"Unsafe Act\") {\r\n    //   newData = { ...data, unsafeact: true, unsafecondition: true };\r\n    // }\r\n    // if (categoryvalue === \"Unsafe Condition\") {\r\n    //   newData = { ...data, unsafecondition: true, unsafeact: true };\r\n    // }\r\n    newData = { ...data, why: selectedWhyRow.description };\r\n    addHocWhydetails(newData);\r\n  };\r\n\r\n  const delete_HocWhydetails = (data) => {\r\n    const { id } = data;\r\n    deleteHocWhydetails(id);\r\n  };\r\n\r\n  const onWhySelectionChange = (selectedRows) => {\r\n    console.log(selectedRows);\r\n  };\r\n\r\n  const onWhyRowClick = (e, clickedRow) => {\r\n    setSelectedWhyRow(clickedRow);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setHocwhatdetailsId(selectedWhatRow.description);\r\n  }, [selectedWhatRow]);\r\n\r\n  useEffect(() => {\r\n    setHocwhydetailsId(selectedWhyRow.description);\r\n  }, [selectedWhyRow]);\r\n\r\n  useEffect(() => {\r\n    setSelectedWhatRow(\"\");\r\n    setSelectedWhyRow(\"\")\r\n    //console.log(\"whatrow\", selectedWhatRow)\r\n  }, [categoryvalue]);\r\n  \r\n\r\n  return (\r\n    <Container minW=\"container.lg\" minH={900}>\r\n      <Box pl={3}>\r\n        <Heading size=\"md\">HOC Category & Location</Heading>\r\n      </Box>\r\n      <Box py={2}>\r\n        <Divider borderWidth={1} borderColor=\"teal\" py={0} />\r\n      </Box>\r\n      <Box border=\"1px solid teal\" borderRadius={15} p={1} mt={2}>\r\n        <Stack direction=\"row\" {...group} p={2}>\r\n          {category.map((value) => {\r\n            const radio = getRadioProps({ value });\r\n            return (\r\n              <RadioCard key={value} {...radio}>\r\n                {value}\r\n              </RadioCard>\r\n            );\r\n          })}\r\n        </Stack>\r\n        {/* <RadioGroup\r\n          onChange={setType}\r\n          value={type}\r\n          marginLeft={2}\r\n          border=\"1px solid teal\"\r\n          borderRadius={15}\r\n          p={5}\r\n        >\r\n          <Stack direction=\"row\">\r\n            <Radio value=\"what\">What</Radio>\r\n            <Radio value=\"why\">Why</Radio>\r\n          </Stack>\r\n        </RadioGroup> */}\r\n        <Tabs >\r\n          <TabList>\r\n            <Tab>What</Tab>\r\n            <Tab>Why</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Stack>\r\n                <MaterialTable\r\n                  columns={columns}\r\n                  data={hocwhat.filter((r) => {\r\n                    // if (categoryvalue === \"Positive Act\") {\r\n                    //   return r.positiveact;\r\n                    // } else {\r\n                    //   return r.unsafeact;\r\n                    // }\r\n                    switch (categoryvalue) {\r\n                      case \"Positive Act\":\r\n                        return r.positiveact;\r\n                      case \"Quality\":\r\n                        return r.quality;\r\n                      default:\r\n                        return r.unsafeact;\r\n                    }\r\n                  })}\r\n                  title=\"What Table\"\r\n                  editable={{\r\n                    onRowAdd: (newData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          add_HocWhat(newData);\r\n                          resolve();\r\n                        }, 1000);\r\n                      }),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          update_HocWhat(newData);\r\n\r\n                          resolve();\r\n                        }, 1000);\r\n                      }),\r\n                    onRowDelete: (oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          delete_HocWhat(oldData);\r\n                          resolve();\r\n                        }, 1000);\r\n                      }),\r\n                  }}\r\n                  onRowClick={onWhatRowClick}\r\n                  onSelectionChange={onWhatSelectionChange}\r\n                  options={{\r\n                    filtering: true,\r\n                    pageSize: 5,\r\n                    selection: false,\r\n                    rowStyle: (row) =>\r\n                      row?.id === selectedWhatRow?.id\r\n                        ? { background: \"#e7e7e7\" }\r\n                        : {},\r\n                    headerStyle: {\r\n                      backgroundColor: \"#90CDF4\",\r\n                      color: \"primary\",\r\n                    },\r\n                    showTitle: true,\r\n                  }}\r\n                  //onSelectionChange={(rows) => handleSelectRow(rows)}\r\n                />\r\n\r\n                <MaterialTable\r\n                  columns={columns}\r\n                  data={hocwhatdetails}\r\n                  title={\r\n                    selectedWhatRow\r\n                      ? \"What Details: \" + selectedWhatRow?.description\r\n                      : \"What Details\"\r\n                  }\r\n                  editable={{\r\n                    onRowAdd: (newData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          add_HocWhatdetails(newData);\r\n                          resolve();\r\n                        }, 1000);\r\n                      }),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          update_HocWhatdetails(newData);\r\n\r\n                          resolve();\r\n                        }, 1000);\r\n                      }),\r\n                    onRowDelete: (oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          delete_HocWhatdetails(oldData);\r\n                          resolve();\r\n                        }, 1000);\r\n                      }),\r\n                  }}\r\n                  options={{\r\n                    filtering: true,\r\n                    pageSize: 5,\r\n                    headerStyle: {\r\n                      backgroundColor: \"#90CDF4\",\r\n                      color: \"primary\",\r\n                    },\r\n                    showTitle: true,\r\n                  }}\r\n                />\r\n              </Stack>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Stack>\r\n                <MaterialTable\r\n                  columns={columns}\r\n                  data={hocwhy.filter((r) => {\r\n                    // if (category === \"Positive Act\") {\r\n                    //   return r.positiveact;\r\n                    // } else {\r\n                    //   return r.unsafeact;\r\n                    // }\r\n                    switch (categoryvalue) {\r\n                      case \"Positive Act\":\r\n                        return r.positiveact;\r\n                      case \"Quality\":\r\n                        return r.quality;\r\n                      default:\r\n                        return r.unsafeact;\r\n                    }\r\n                  })}\r\n                  title=\"Why Table\"\r\n                  editable={{\r\n                    onRowAdd: (newData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          add_HocWhy(newData);\r\n                          resolve();\r\n                        }, 1000);\r\n                      }),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          update_HocWhy(newData);\r\n\r\n                          resolve();\r\n                        }, 1000);\r\n                      }),\r\n                    onRowDelete: (oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          delete_HocWhy(oldData);\r\n                          resolve();\r\n                        }, 1000);\r\n                      }),\r\n                  }}\r\n                  onRowClick={onWhyRowClick}\r\n                  onSelectionChange={onWhySelectionChange}\r\n                  options={{\r\n                    filtering: true,\r\n                    pageSize: 5,\r\n                    selection: false,\r\n                    rowStyle: (row) =>\r\n                      row?.id === selectedWhyRow?.id\r\n                        ? { background: \"#e7e7e7\" }\r\n                        : {},\r\n                    headerStyle: {\r\n                      backgroundColor: \"#90CDF4\",\r\n                      color: \"primary\",\r\n                    },\r\n                    showTitle: true,\r\n                  }}\r\n                  //onSelectionChange={(rows) => handleSelectRow(rows)}\r\n                />\r\n\r\n                <MaterialTable\r\n                  columns={columns}\r\n                  data={hocwhydetails}\r\n                  title={\r\n                    selectedWhyRow\r\n                      ? \"Why Details: \" + selectedWhyRow?.description\r\n                      : \"Why Details\"\r\n                  }\r\n                  editable={{\r\n                    onRowAdd: (newData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          add_HocWhydetails(newData);\r\n                          resolve();\r\n                        }, 1000);\r\n                      }),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          update_HocWhydetails(newData);\r\n\r\n                          resolve();\r\n                        }, 1000);\r\n                      }),\r\n                    onRowDelete: (oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          delete_HocWhydetails(oldData);\r\n                          resolve();\r\n                        }, 1000);\r\n                      }),\r\n                  }}\r\n                  options={{\r\n                    filtering: true,\r\n                    pageSize: 5,\r\n                    headerStyle: {\r\n                      backgroundColor: \"#90CDF4\",\r\n                      color: \"primary\",\r\n                    },\r\n                    showTitle: true,\r\n                  }}\r\n                />\r\n              </Stack>\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 400,\r\n  },\r\n  grid: {\r\n    padding: theme.spacing(3, 2),\r\n    // justifyContent: \"center\",\r\n  },\r\n  box: {\r\n    height: 100,\r\n    display: \"flex\",\r\n    border: \"1px solid black\",\r\n    padding: 8,\r\n  },\r\n}));\r\n\r\nexport default HocTablesUpdate;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\TablesUpdate.js",["1471"],"import React from \"react\";\r\nimport { Divider, Grid } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import { useHistory } from \"react-router-dom\";\r\n\r\n//import { useDepartments } from \"./departments/useDepartments\";\r\n//import { useDesignations } from \"./designations/useDesignations\";\r\n//import { useAllowances } from \"./allowances/useAllowances\";\r\n//import { useDeductions } from \"./deductions/useDeductions\";\r\n//import { useCurrency } from \"./currency/useCurrency\";\r\n\r\n//import { useTablesContext } from \"../context/tables_context\";\r\nimport UpdateAllowances from \"./AllowancesTable\";\r\nimport UpdateDeductions from \"./DeductionsTable\";\r\nimport UpdateDepartments from \"./DepartmentsTable\";\r\nimport UpdateDesignations from \"./DesignationsTable\";\r\nimport UpdateInstitutes from \"./InstitutesTable\";\r\nimport UpdateCurrency from \"./CurrencyTable\";\r\nimport UpdateGroups from \"./GroupsTable\";\r\nimport UpdateLeavestype from \"./LeavestypesTable\"\r\n\r\nconst TablesUpdate = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <Grid container alignItems=\"center\" className={classes.grid}>\r\n        <Grid xs={12}>\r\n          <h2>Tables Maintenance</h2>\r\n        </Grid>\r\n\r\n        <Grid xs={12}>\r\n          <UpdateAllowances />\r\n        </Grid>\r\n        <Divider />\r\n\r\n        <Grid xs={12}>\r\n          <UpdateDeductions />\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <UpdateDepartments />\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <UpdateDesignations />\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <UpdateInstitutes />\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <UpdateCurrency />\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <UpdateLeavestype />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 400,\r\n  },\r\n  grid: {\r\n    padding: theme.spacing(3, 2),\r\n    // justifyContent: \"center\",\r\n  },\r\n  box: {\r\n    height: 100,\r\n    display: \"flex\",\r\n    border: \"1px solid black\",\r\n    padding: 8,\r\n  },\r\n}));\r\n\r\nexport default TablesUpdate;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\useUpdateEmployees.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\TableForm.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payslips\\useUpdatePayslips.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\index.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmpJobhistory.js",["1472","1473","1474","1475","1476"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport {\r\n  Heading,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { AiFillEdit, AiFillDelete, AiOutlinePlus } from \"react-icons/ai\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useJobhistory } from \"./jobhistory/useJobhistory\";\r\nimport { useUpdateJobhistory } from \"./jobhistory/useUpdateJobhistory\";\r\nimport { useAddJobhistory } from \"./jobhistory/useAddJobhistory\";\r\nimport { useDeleteJobhistory } from \"./jobhistory/useDeleteJobhistory\";\r\nimport JobhistoryForm from \"./JobhistoryForm\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\n\r\nconst initial_jobhistory = {\r\n  empid: \"\",\r\n  name: \"\",\r\n  designation: \"\",\r\n  department: \"\",\r\n  status: \"\",\r\n  remark: \"\",\r\n  basicsalary: 0,\r\n  siteallows: 0,\r\n  isresign: false,\r\n};\r\n\r\nexport default function Emp_Jobhistory({\r\n  empid,\r\n  staffname,\r\n  basicsalary,\r\n  siteallows,\r\n  department,\r\n  designation,\r\n  jobhistorydata,\r\n  setJobhistorydata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const { jobhistory, filter, setFilter, setJobId } = useJobhistory();\r\n  //const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const updateJobhistory = useUpdateJobhistory();\r\n  const addJobhistory = useAddJobhistory();\r\n  const deleteJobhistory = useDeleteJobhistory();\r\n  const [state, setState] = useState({});\r\n  const [statustype, setStatusType] = useState(\"\");\r\n  const { editEmployeeID } = useEmployeesContext();\r\n  const {\r\n    isOpen: isJobOpen,\r\n    onOpen: onJobOpen,\r\n    onClose: onJobClose,\r\n  } = useDisclosure();\r\n  const {\r\n    isOpen: isAlertDeleteOpen,\r\n    onOpen: onAlertDeleteOpen,\r\n    onClose: onAlertDeleteClose,\r\n  } = useDisclosure();\r\n\r\n  const columns = useMemo(() => [\r\n    {\r\n      title: \"Designation\",\r\n      field: \"designation\",\r\n    },\r\n    {\r\n      title: \"Department\",\r\n      field: \"department\",\r\n    },\r\n    {\r\n      title: \"Effective Date\",\r\n      field: \"effectdate\",\r\n      type: \"date\",\r\n      dateSetting: { locale: \"en-GB\" },\r\n      editComponent: (props) => (\r\n        <TextField\r\n          defaultValue={props.value || new Date()}\r\n          onChange={(e) => props.onChange(e.target.value)}\r\n          type=\"date\"\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      title: \"Status\",\r\n      field: \"status\",\r\n    },\r\n    {\r\n      title: \"Remark\",\r\n      field: \"remark\",\r\n    },\r\n  ],[]);\r\n\r\n  useEffect(() => {\r\n    setJobId(editEmployeeID);\r\n  }, []);\r\n\r\n  const add_Jobhistory = (data) => {\r\n    console.log(\"addjob\", data);\r\n    addJobhistory({\r\n      ...data,\r\n    });\r\n  };\r\n\r\n  const delete_Jobhistory = (id) => {\r\n    deleteJobhistory(id);\r\n  };\r\n\r\n  const update_Jobhistory = (data) => {\r\n    const { id, rec_id, tableData, ...fields } = data;\r\n    updateJobhistory({ id, ...fields });\r\n  };\r\n\r\n  const handleAddJobhistory = () => {\r\n    const data = {\r\n      ...initial_jobhistory,\r\n      name: staffname,\r\n      empid: empid,\r\n      basicsalary: basicsalary,\r\n      siteallows: siteallows,\r\n      department: department,\r\n      designation: designation,\r\n    };\r\n    setState(data);\r\n    onJobOpen(true);\r\n  };\r\n\r\n  const handleUpdateJobhistory = (data) => {\r\n    setState(data);\r\n    onJobOpen(true);\r\n  };\r\n\r\n  const handleDeleteJobhistory = (rowData) => {\r\n    setState((prev) => (prev = { ...rowData }));\r\n    onAlertDeleteOpen();\r\n  };\r\n\r\n  const handleOnDeleteConfirm = () => {\r\n    const { id } = state;\r\n    delete_Jobhistory(id);\r\n    // toast({\r\n    //   title: \"Order being deleted!\",\r\n    //   status: \"warning\",\r\n    // });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={jobhistory}\r\n          title=\"Employment History\"\r\n          actions={[\r\n            {\r\n              icon: () => <AiOutlinePlus size=\"30px\" />,\r\n              tooltip: \"Add Record\",\r\n              isFreeAction: true,\r\n              onClick: (event, rowData) => {\r\n                setStatusType((prev) => (prev = \"add\"));\r\n                handleAddJobhistory(rowData);\r\n              },\r\n            },\r\n            (rowData) => ({\r\n              //disabled: rowData.status !== \"Pending\",\r\n              icon: () => <AiFillEdit size=\"30px\" />,\r\n              tooltip: \"Edit Record\",\r\n              onClick: (event, rowData) => {\r\n                setStatusType((prev) => (prev = \"edit\"));\r\n                handleUpdateJobhistory(rowData);\r\n              },\r\n            }),\r\n            (rowData) => ({\r\n              //disabled: rowData.status !== \"Pending\",\r\n              icon: () => <AiFillDelete />,\r\n              tooltip: \"Delete Record\",\r\n              onClick: (event, rowData) => {\r\n                handleDeleteJobhistory(rowData);\r\n              },\r\n            }),\r\n          ]}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n      <Modal\r\n        closeOnOverlayClick={false}\r\n        isOpen={isJobOpen}\r\n        onClose={onJobClose}\r\n        size=\"lg\"\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          {/* <ModalHeader>Product Form</ModalHeader> */}\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            <JobhistoryForm\r\n              state={state}\r\n              setState={setState}\r\n              statustype={statustype}\r\n              add_Item={add_Jobhistory}\r\n              update_Item={update_Jobhistory}\r\n              onJobClose={onJobClose}\r\n            />\r\n          </ModalBody>\r\n\r\n          {/* <ModalFooter>\r\n            <Button colorScheme=\"blue\" mr={3} onClick={onProductClose}>\r\n              Close\r\n            </Button>\r\n          </ModalFooter> */}\r\n        </ModalContent>\r\n      </Modal>\r\n      <AlertDialogBox\r\n        onClose={onAlertDeleteClose}\r\n        onConfirm={handleOnDeleteConfirm}\r\n        isOpen={isAlertDeleteOpen}\r\n        title=\"Delete Employment History\"\r\n      >\r\n        <Heading size=\"md\">\r\n          Are you sure you want to delete this history record ?\r\n        </Heading>\r\n      </AlertDialogBox>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\Payslip_Deductions.js",["1477","1478"],"import React, { useEffect, useMemo } from \"react\";\r\n\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, Icon, TextField, MenuItem } from \"@material-ui/core\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport {\r\n  payPeriodState,\r\n  //payPeriodEndMonthState,\r\n  payPeriodEmpIdState,\r\n  //payEarningDataState,\r\n} from \"./data/atomdata\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\n\r\nexport default function Payslip_Deductions({\r\n  //setCalc,\r\n  deductionsdata,\r\n  oldDeductionsdata,\r\n  setDeductionsdata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\r\n  const payPeriod = useRecoilValue(payPeriodState);\r\n  //const payEarningData = useRecoilValue(payEarningDataState);\r\n  const {\r\n    //payslipdeductions,\r\n    //payslip_deduction_amount,\r\n    //setPayslipDeductionAmount,\r\n    //loadPayslipDeductions,\r\n    addPayslipDeduction,\r\n    payslipdeductions_loading,\r\n    updatePayslipDeduction,\r\n    deletePayslipDeduction,\r\n    //updatePayslip,\r\n    //editPayslipID,\r\n    single_payslip,\r\n    payslip_period,\r\n    getSingleBatchPayslipDeductions,\r\n  } = usePayslipsContext();\r\n  //const { name, amount } = payslipdeductions;\r\n  const { deductions } = useTablesContext();\r\n\r\n  // const calc_Deduction = (data) => {\r\n  //   const sum = data.reduce((a, v) => (a = a + v.amount), 0);\r\n  //   setPayslipDeductionAmount(sum);\r\n  // };\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Description\",\r\n        field: \"description\",\r\n        editComponent: (props) => (\r\n          <TextField\r\n            //defaultValue={props.value || null}\r\n            onChange={(e) => props.onChange(e.target.value)}\r\n            style={{ width: 200 }}\r\n            value={props.value}\r\n            select\r\n          >\r\n            {deductions.map((r) => {\r\n              return <MenuItem value={r.name}>{r.name}</MenuItem>;\r\n            })}\r\n          </TextField>\r\n        ),\r\n      },\r\n      { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  }, []);\r\n\r\n  // const update_Payslip = () => {\r\n  //   const { rec_id, id, total_deductions, ...paydata } = single_payslip;\r\n  //   updatePayslip({\r\n  //     id: editPayslipID,\r\n  //     total_deductions: payslip_deduction_amount,\r\n  //     ...paydata,\r\n  //   });\r\n  //};\r\n\r\n  // const update_PayslipDeduction = async (data) => {\r\n  //   const { id, rec_id, empid, ...fields } = data;\r\n  //   updatePayslipDeduction({ id: data.id, empid: empid, ...fields });\r\n  //   update_Payslip();\r\n  //   getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  // const add_PayslipDeduction = (data) => {\r\n  //   const { description, amount } = data;\r\n  //   addPayslipDeduction({\r\n  //     description: description,\r\n  //     amount: amount,\r\n  //     name: single_payslip.name,\r\n  //     empid: single_payslip.empid,\r\n  //     period: single_payslip.period,\r\n  //   });\r\n  //   getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  //};\r\n\r\n  // const delete_PayslipDeduction = (data) => {\r\n  //   const { id } = data;\r\n  //   deletePayslipDeduction(id);\r\n  //   getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  const Save_DeductionsData = () => {\r\n    // delete unwanted data\r\n    console.log(\"update\", deductionsdata, oldDeductionsdata);\r\n    oldDeductionsdata.forEach((row) => {\r\n      const { id, rec_id } = row;\r\n      const res = deductionsdata.find((r) => r.rec_id === rec_id);\r\n      console.log(\"find\", id, res);\r\n      if (!res) {\r\n        deletePayslipDeduction(id);\r\n      }\r\n    });\r\n    //add or update new data\r\n\r\n    deductionsdata.forEach((data) => {\r\n      const { id, description, amount } = data;\r\n      if (id) {\r\n        const { id, rec_id, tableData, ...fields } = data;\r\n        updatePayslipDeduction({ id, ...fields });\r\n      } else {\r\n        addPayslipDeduction({\r\n          description: description,\r\n          amount: amount,\r\n          name: single_payslip.name,\r\n          empid: payPeriodEmpId,\r\n          period: payPeriod,\r\n        });\r\n      }\r\n    });\r\n    handleDialogClose();\r\n  };\r\n\r\n  if (payslipdeductions_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading... Expenses.</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={deductionsdata}\r\n          title=\"Deductions\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  setDeductionsdata([...deductionsdata, newData]);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataUpdate = [...deductionsdata];\r\n                  const index = oldData.tableData.id;\r\n                  dataUpdate[index] = newData;\r\n                  setDeductionsdata([...dataUpdate]);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataDelete = [...deductionsdata];\r\n                  const index = oldData.tableData.id;\r\n                  dataDelete.splice(index, 1);\r\n                  setDeductionsdata([...dataDelete]);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Save_DeductionsData}\r\n                  >\r\n                    Update <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDailyAllows.js",[],"D:\\react-myprojects\\hrms-demo\\src\\helpers\\ImageUpload.js",["1479","1480","1481","1482","1483","1484","1485","1486","1487","1488"],"import React, { useMemo, useState, useEffect } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Image,\r\n  IconButton,\r\n  HStack,\r\n  VStack,\r\n  Grid,\r\n  GridItem,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { FiEye, FiTrash2 } from \"react-icons/fi\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { viewImageState } from \"../components/data/atomdata\";\r\n\r\nconst FileViewers = React.lazy(() => import(\"../helpers/FileViewers\"));\r\n\r\nconst baseStyle = {\r\n  flex: 1,\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n  padding: \"20px\",\r\n  borderWidth: 2,\r\n  borderRadius: 2,\r\n  borderColor: \"#eeeeee\",\r\n  borderStyle: \"dashed\",\r\n  backgroundColor: \"#fafafa\",\r\n  color: \"#bdbdbd\",\r\n  outline: \"none\",\r\n  transition: \"border .24s ease-in-out\",\r\n};\r\n\r\nconst activeStyle = {\r\n  borderColor: \"#2196f3\",\r\n};\r\n\r\nconst acceptStyle = {\r\n  borderColor: \"#00e676\",\r\n};\r\n\r\nconst rejectStyle = {\r\n  borderColor: \"#ff1744\",\r\n};\r\n\r\nconst thumbsContainer = {\r\n  display: \"flex\",\r\n  flexDirection: \"row\",\r\n  flexWrap: \"wrap\",\r\n  marginTop: 16,\r\n};\r\n\r\nconst thumb = {\r\n  display: \"inline-flex\",\r\n  borderRadius: 2,\r\n  border: \"1px solid #eaeaea\",\r\n  marginBottom: 8,\r\n  marginRight: 8,\r\n  width: 100,\r\n  height: 100,\r\n  padding: 4,\r\n  boxSizing: \"border-box\",\r\n};\r\n\r\nconst thumbInner = {\r\n  display: \"flex\",\r\n  minWidth: 0,\r\n  overflow: \"hidden\",\r\n};\r\n\r\nconst img = {\r\n  display: \"block\",\r\n  width: \"auto\",\r\n  height: \"100%\",\r\n};\r\n\r\n// interface IImageUpload {\r\n// files: File[],\r\n// onDrop: (acceptedFiles: File[]) => void\r\n// }\r\n\r\nconst ImageUpload = ({ files, setFiles, onDrop }) => {\r\n  const [image, setImage] = useRecoilState(viewImageState);\r\n  const {\r\n    isOpen: isViewImageOpen,\r\n    onOpen: onViewImageOpen,\r\n    onClose: onViewImageClose,\r\n  } = useDisclosure();\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n  } = useDropzone({\r\n    accept: \"image/*,application/pdf\",\r\n    onDrop: onDrop,\r\n  });\r\n\r\n  const style = useMemo(\r\n    () => ({\r\n      ...baseStyle,\r\n      ...(isDragActive ? activeStyle : {}),\r\n      ...(isDragAccept ? acceptStyle : {}),\r\n      ...(isDragReject ? rejectStyle : {}),\r\n    }),\r\n    [isDragActive, isDragAccept, isDragReject]\r\n  );\r\n\r\n  const handleDelImage = (filename) => {\r\n    const newfiles = files.filter((r) => r.name !== filename);\r\n    setFiles((prev) => (prev = newfiles));\r\n  };\r\n\r\n  const handleViewImage = ({ preview, name }) => {\r\n    const newImage = { url: preview, name: name };\r\n    const oldImage = image.url;\r\n    setImage((prev) => newImage);\r\n    const type = preview.split(\".\").pop();\r\n    onViewImageOpen();\r\n  \r\n  };\r\n\r\n  // const thumbs = files.map((file) => (\r\n  // <div style={thumb} key={file.name}>\r\n  //   <div style={thumbInner}>\r\n  //     <img\r\n  //       alt={file.name}\r\n  //       src={file.preview}\r\n  //       style={img}\r\n  //     />\r\n  //   </div>\r\n  //   </div>\r\n  // ))\r\n\r\n  const Thumbs = () => {\r\n    return files.map((file) => {\r\n      \r\n      <Box\r\n        display=\"inline-flex\"\r\n        w=\"100%\"\r\n        h={150}\r\n        mb={8}\r\n        mr={8}\r\n        p={4}\r\n        border=\"1px solid #eaeaea\"\r\n        borderRadius={2}\r\n        key={file.name}\r\n      >\r\n        <HStack p={5}>\r\n          <Image\r\n            src={file.preview}\r\n            alt={file.name}\r\n            display=\"block\"\r\n            w=\"auto\"\r\n            h=\"100%\"\r\n          />\r\n          <VStack>\r\n            <IconButton\r\n              size=\"sm\"\r\n              aria-label=\"view image\"\r\n              icon={<FiEye />}\r\n              onClick={() =>\r\n                handleViewImage({ preview: file.preview, name: file.name })\r\n              }\r\n            />\r\n            <IconButton\r\n              size=\"sm\"\r\n              aria-label=\"delete image\"\r\n              icon={<FiTrash2 />}\r\n              onClick={() => handleDelImage(file.name)}\r\n            />\r\n          </VStack>\r\n        </HStack>\r\n      </Box>;\r\n    });\r\n  };\r\n\r\n  useEffect(\r\n    () => () =>\r\n      // Make sure to revoke the data uris to avoid memory leaks\r\n      files.forEach((file) => URL.revokeObjectURL(file.preview)),\r\n    [files]\r\n  );\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div {...getRootProps({ style })}>\r\n        <input {...getInputProps()} />\r\n        <p>Drag 'n' drop some files here, or click to select files.</p>\r\n      </div>\r\n      <aside style={thumbsContainer}>\r\n        {/* {<Thumbs />} */}\r\n        {files\r\n          .filter((rec) => rec.name !== undefined && rec.name !== null)\r\n          .map((file) => {\r\n            return (\r\n              <Box\r\n                display=\"inline-flex\"\r\n                w=\"100%\"\r\n                h={150}\r\n                mb={8}\r\n                mr={8}\r\n                p={4}\r\n                border=\"1px solid #eaeaea\"\r\n                borderRadius={2}\r\n                key={file.name}\r\n              >\r\n                <HStack p={5}>\r\n                  <Image\r\n                    src={file.preview}\r\n                    alt={file.name}\r\n                    display=\"block\"\r\n                    w=\"auto\"\r\n                    h=\"100%\"\r\n                  />\r\n                  <VStack>\r\n                    <IconButton\r\n                      size=\"sm\"\r\n                      aria-label=\"view image\"\r\n                      icon={<FiEye />}\r\n                      onClick={() =>\r\n                        handleViewImage({\r\n                          preview: file.preview,\r\n                          name: file.name,\r\n                        })\r\n                      }\r\n                    />\r\n                    <IconButton\r\n                      size=\"sm\"\r\n                      aria-label=\"delete image\"\r\n                      icon={<FiTrash2 />}\r\n                      onClick={() => handleDelImage(file.name)}\r\n                    />\r\n                  </VStack>\r\n                </HStack>\r\n              </Box>\r\n            );\r\n          })}\r\n      </aside>\r\n      <Modal\r\n        closeOnOverlayClick={false}\r\n        isOpen={isViewImageOpen}\r\n        onClose={onViewImageClose}\r\n        size=\"3xl\"\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>{image.name}</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody pb={6}>\r\n            <Box\r\n              display=\"inline-flex\"\r\n              w=\"100%\"\r\n              h=\"800\"\r\n              mb={8}\r\n              mr={8}\r\n              p={4}\r\n              border=\"1px solid #eaeaea\"\r\n              borderRadius={2}\r\n            >\r\n              <FileViewers imagefile={image} />\r\n            </Box>\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button onClick={onViewImageClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUpload;\r\n","D:\\react-myprojects\\hrms-demo\\src\\helpers\\CustomDialog.js",[],"D:\\react-myprojects\\hrms-demo\\src\\helpers\\AlertDialogBox.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\LeavestypesTable.js",["1489","1490"],"import React, { useMemo, useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useLeavestypes } from \"./leavestypes/useLeavestypes\";\r\nimport { useUpdateLeavestype } from \"./leavestypes/useUpdateLeavestype\";\r\nimport { useDeleteLeavestype } from \"./leavestypes/useDeleteLeavestype\";\r\nimport { useAddLeavestype } from \"./leavestypes/useAddLeavestype\";\r\n\r\nexport default function LeavestypesTable() {\r\n  const classes = useStyles();\r\n  const { leavestypes, setLeaveId } = useLeavestypes();\r\n  const updateLeavestype = useUpdateLeavestype();\r\n  const deleteLeavestype = useDeleteLeavestype();\r\n  const addLeavestype = useAddLeavestype();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Description\",\r\n        field: \"description\",\r\n      },\r\n    //   {\r\n    //     title: \"Deduct Leave\",\r\n    //     field: \"isdeductable\",\r\n    //   },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const update_Leavestype = (data) => {\r\n    const { id, rec_id, ...fields } = data;\r\n    updateLeavestype({ id, ...fields });\r\n  };\r\n\r\n  const add_Leavestype = (data) => {\r\n    //const newData = { ...data, grouptype: type };\r\n    addLeavestype(data);\r\n  };\r\n\r\n  const delete_Leavestype = (data) => {\r\n    const { id } = data;\r\n    deleteLeavestype(id);\r\n  };\r\n\r\n  //   useEffect(() => {\r\n  //     setGroupId(type);\r\n  //   }, [type]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={leavestypes}\r\n          title=\"Type Of Leaves\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  add_Leavestype(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  update_Leavestype(newData);\r\n\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  delete_Leavestype(oldData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\designations\\useDesignations.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\currency\\useAddCurrency.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\leavestypes\\useLeavestypes.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\useDailyAllowsDetlsBatch.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhydetails\\useAddHocwhydetails.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\ErrorPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\helpers\\useCustomToast.ts",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\JobhistoryForm.js",[],"D:\\react-myprojects\\hrms-demo\\src\\helpers\\FileViewers.js",["1491","1492"],"import React from \"react\";\r\nimport { Container } from \"@chakra-ui/react\";\r\nimport FileViewer from \"react-file-viewer\";\r\nimport { CustomErrorComponent } from \"custom-error\";\r\n\r\nconst file =\r\n  \"https://res.cloudinary.com/dlmzwvakr/image/upload/v1658736010/appsmiths/lmdthqsh4wjo43q02khv.pdf\";\r\nconst type = \"pdf\";\r\n\r\nconst FileViewers = (image) => {\r\n  console.log(\"viewer\", image.imagefile);\r\n  const onError = (e) => {\r\n    //logger.logError(e, \"error in file-viewer\");\r\n    console.log(e, \"Error in file-viewer\");\r\n  };\r\n  return (\r\n    <Container overflow maxW=\"6xl\">\r\n      <FileViewer\r\n        fileType={image.imagefile.url.split(\".\").pop()}\r\n        filePath={image.imagefile.url}\r\n        errorComponent={CustomErrorComponent}\r\n        onError={onError}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FileViewers;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\leavestypes\\useAddLeavestype.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\leavestypes\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\react-query\\constants.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\leavestypes\\useDeleteLeavestype.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\leavestypes\\useUpdateLeavestype.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\user-storage\\index.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\useDeleteJobhistory.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\useUpdateJobhistory.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\useJobhistory.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\useAddJobhistory.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\jobstatus\\useJobstatus.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\departments\\useDepartments.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\jobhistory\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\jobstatus\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\ClientsPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\PrivateRoute.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\UserAccessPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\pages\\DashboardPage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\GroupsTable.js",["1493"],"import React, { useMemo, useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useGroups } from \"./groups/useGroups\";\r\nimport { useUpdateGroup } from \"./groups/useUpdateGroup\";\r\nimport { useDeleteGroup } from \"./groups/useDeleteGroup\";\r\nimport { useAddGroup } from \"./groups/useAddGroup\";\r\n\r\nexport default function UpdateGroups({ type }) {\r\n  const classes = useStyles();\r\n  const { groups, setGroupId } = useGroups();\r\n  const updateGroup = useUpdateGroup();\r\n  const deleteGroup = useDeleteGroup();\r\n  const addGroup = useAddGroup();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Description\",\r\n        field: \"description\",\r\n      },\r\n      // {\r\n      //   title: \"Type\",\r\n      //   field: \"grouptype\",\r\n      // },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const update_Group = (data) => {\r\n    const { id, rec_id, ...fields } = data;\r\n    updateGroup({ id, ...fields });\r\n  };\r\n\r\n  const add_Group = (data) => {\r\n    const newData = { ...data, grouptype: type };\r\n    addGroup(newData);\r\n  };\r\n\r\n  const delete_Group = (data) => {\r\n    const { id } = data;\r\n    deleteGroup(id);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setGroupId(type)\r\n  },[type])\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={groups}\r\n          title={type + \" Types\" }\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  add_Group(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  update_Group(newData);\r\n\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  delete_Group(oldData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\InstitutesTable.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\DesignationsTable.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\DepartmentsTable.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\DeductionsTable.js",["1494"],"import React, { useEffect, useMemo } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport { usePayItems } from \"./payitems/usePayItems\";\r\nimport { useUpdatePayItems } from \"./payitems/useUpdatePayItems\";\r\nimport { useDeletePayItems } from \"./payitems/useDeletePayItems\";\r\nimport { useAddPayItems } from \"./payitems/useAddPayItems\";\r\n\r\nexport default function UpdateDeductions() {\r\n  const classes = useStyles();\r\n  const { payitems, setPayItemId } = usePayItems();\r\n  const updatePayItems = useUpdatePayItems();\r\n  const deletePayItems = useDeletePayItems();\r\n  const addPayItems = useAddPayItems();\r\n\r\n  const columns = useMemo(() => [\r\n    {\r\n      title: \"Name\",\r\n      field: \"name\",\r\n    },\r\n  ],[]);\r\n\r\n  const update_Deduction = (data) => {\r\n    const { id, rec_id, ...fields } = data;\r\n    updatePayItems({ id, ...fields });\r\n  };\r\n\r\n  const add_Deduction = (data) => {\r\n    const fields = { ...data, pay_type: \"Deductions\" };\r\n    addPayItems(fields);\r\n  };\r\n\r\n  const delete_Deduction = (data) => {\r\n    const { id } = data;\r\n    deletePayItems(id);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setPayItemId(\"Deductions\");\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={payitems}\r\n          title=\"Deductions\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  add_Deduction(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  update_Deduction(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  delete_Deduction(oldData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\AllowancesTable.js",["1495"],"import React, { useEffect, useMemo } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { usePayItems } from \"./payitems/usePayItems\";\r\nimport { useUpdatePayItems } from \"./payitems/useUpdatePayItems\";\r\nimport { useDeletePayItems } from \"./payitems/useDeletePayItems\";\r\nimport { useAddPayItems } from \"./payitems/useAddPayItems\";\r\n\r\nexport default function UpdateAllowances() {\r\n  const classes = useStyles();\r\n  const { payitems, setPayItemId } = usePayItems();\r\n  const updatePayItems = useUpdatePayItems();\r\n  const deletePayItems = useDeletePayItems();\r\n  const addPayItems = useAddPayItems();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"name\",\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const update_Allowance = (data) => {\r\n    const { id, rec_id, ...fields } = data;\r\n    updatePayItems({ id, ...fields });\r\n  };\r\n\r\n  const add_Allowance = async (data) => {\r\n    const fields = { ...data, pay_type: \"Allowances\" };\r\n    addPayItems(fields);\r\n  };\r\n\r\n  const delete_Allowance = (data) => {\r\n    const { id } = data;\r\n    deletePayItems(id);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setPayItemId(\"Allowances\");\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={payitems}\r\n          title=\"Allowances\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  add_Allowance(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  update_Allowance(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  delete_Allowance(oldData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhydetails\\useDeleteHocwhydetails.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhydetails\\useUpdateHocwhydetails.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhydetails\\useHocwhydetails.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhy\\useAddHocwhy.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhy\\useDeleteHocwhy.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhy\\useUpdateHocwhy.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhy\\useHocwhy.js",[],"D:\\react-myprojects\\hrms-demo\\src\\helpers\\RadioCard.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhatdetails\\useHocwhatdetails.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhatdetails\\useAddWhatdetails.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhatdetails\\useDeleteHocwhatdetails.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhatdetails\\useUpdateHocwhatdetails.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhat\\useAddHocwhat.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhat\\useDeleteHocwhat.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhat\\useHocwhat.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhat\\useUpdateHocwhat.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\Payslip_Earnings.js",["1496","1497"],"import React, {  useEffect, useMemo } from \"react\";\r\n\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, Icon, TextField, MenuItem } from \"@material-ui/core\";\r\n\r\n//import { useHistory} from \"react-router-dom\";\r\nimport {  useRecoilValue } from \"recoil\";\r\nimport {\r\n  payPeriodState,\r\n  //payPeriodEndMonthState,\r\n  payPeriodEmpIdState,\r\n  //payEarningDataState,\r\n} from \"./data/atomdata\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\n\r\nexport default function Payslip_Earnings({\r\n  //setCalc,\r\n  earningsdata,\r\n  oldEarningsdata,\r\n  setEarningsdata,\r\n  handleDialogClose,\r\n}) {\r\n  //let history = useHistory();\r\n   const classes = useStyles();\r\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\r\n  const payPeriod = useRecoilValue(payPeriodState);\r\n  //const payEarningData = useRecoilValue(payEarningDataState);\r\n  const {\r\n    //payslipearnings,\r\n    //payslip_earning_amount,\r\n    //setPayslipEarningAmount,\r\n    addPayslipEarning,\r\n    payslipearnings_loading,\r\n    updatePayslipEarning,\r\n    deletePayslipEarning,\r\n    //updatePayslip,\r\n    //editPayslipID,\r\n    single_payslip,\r\n    payslip_period,\r\n    getSingleBatchPayslipEarnings,\r\n  } = usePayslipsContext();\r\n\r\n  //const { name, amount } = payslipearnings;\r\n  const { allowances } = useTablesContext();\r\n\r\n  const columns = useMemo(()=>[\r\n    {\r\n      title: \"Description\",\r\n      field: \"description\",\r\n      editComponent: (props) => (\r\n        <TextField\r\n          //defaultValue={props.value || null}\r\n          onChange={(e) => props.onChange(e.target.value)}\r\n          style={{ width: 200 }}\r\n          value={props.value}\r\n          select\r\n        >\r\n          {allowances.map((r) => {\r\n            return <MenuItem value={r.name}>{r.name}</MenuItem>;\r\n          })}\r\n        </TextField>\r\n      ),\r\n    },\r\n    { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n  ],[]);\r\n\r\n  useEffect(() => {\r\n    getSingleBatchPayslipEarnings(single_payslip.empid, payslip_period);\r\n  }, []);\r\n\r\n  // const calc_Earning = (data) => {\r\n  //   const sum = data.reduce((a, v) => (a = a + v.amount), 0);\r\n  //   console.log(\"Earning\", data);\r\n  //   setPayslipEarningAmount(sum);\r\n  // };\r\n\r\n  // const update_Payslip = () => {\r\n  //   const { rec_id, id, total_earnings, ...paydata } = single_payslip;\r\n  //   updatePayslip({\r\n  //     id: editPayslipID,\r\n  //     total_earnings: payslip_earning_amount,\r\n  //     ...paydata,\r\n  //   });\r\n  //   setCalc(true);\r\n  // };\r\n\r\n  // const update_PayslipEarning = async (data) => {\r\n  //   const { id, rec_id, empid, ...fields } = data;\r\n  //   console.log(\"update\", data);\r\n  //   updatePayslipEarning({ id: data.id, empid: empid, ...fields });\r\n\r\n  //   update_Payslip();\r\n  //   getSingleBatchPayslipEarnings(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  // const add_PayslipEarning = (data) => {\r\n  //   console.log(\"add\", data);\r\n  //   const { description, amount } = data;\r\n  //   addPayslipEarning({\r\n  //     description: description,\r\n  //     amount: amount,\r\n  //     name: single_payslip.name,\r\n  //     empid: single_payslip.empid,\r\n  //     period: single_payslip.period,\r\n  //   });\r\n\r\n  //   getSingleBatchPayslipEarnings(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  // const delete_PayslipEarning = (data) => {\r\n  //   const { id } = data;\r\n  //   deletePayslipEarning(id);\r\n  //   getSingleBatchPayslipEarnings(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  const Save_EarningsData = () => {\r\n    // delete unwanted data\r\n    console.log(\"update\", earningsdata, oldEarningsdata);\r\n    oldEarningsdata.forEach((row) => {\r\n      const { id, rec_id } = row;\r\n      const res = earningsdata.find((r) => r.rec_id === rec_id);\r\n      console.log(\"find\", id, res);\r\n      if (!res) {\r\n        deletePayslipEarning(id);\r\n      }\r\n    });\r\n    //add or update new data\r\n\r\n    earningsdata.forEach((data) => {\r\n      const { id, description, amount } = data;\r\n      if (id) {\r\n        const { id, rec_id, tableData, ...fields } = data;\r\n        updatePayslipEarning({ id, ...fields });\r\n      } else {\r\n        addPayslipEarning({\r\n          description: description,\r\n          amount: amount,\r\n          name: single_payslip.name,\r\n          empid: payPeriodEmpId,\r\n          period: payPeriod,\r\n        });\r\n      }\r\n    });\r\n\r\n    handleDialogClose();\r\n  };\r\n\r\n  if (payslipearnings_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading... Incomes.</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={earningsdata}\r\n          title=\"Income\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  setEarningsdata([...earningsdata, newData]);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataUpdate = [...earningsdata];\r\n                  const index = oldData.tableData.id;\r\n                  dataUpdate[index] = newData;\r\n                  setEarningsdata([...dataUpdate]);\r\n\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataDelete = [...earningsdata];\r\n                  const index = oldData.tableData.id;\r\n                  dataDelete.splice(index, 1);\r\n                  setEarningsdata([...dataDelete]);\r\n\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Save_EarningsData}\r\n                  >\r\n                    Update <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\helpers\\CardLayout2.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\Payslip_ViewDeductions.js",["1498"],"import React, { useEffect, useMemo } from \"react\";\r\n\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport {\r\n  payPeriodState,\r\n  //payPeriodEndMonthState,\r\n  payPeriodEmpIdState,\r\n} from \"./data/atomdata\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\n//import { useTablesContext } from \"../context/tables_context\";\r\n\r\nexport default function PayslipViewDeductions() {\r\n  const classes = useStyles();\r\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\r\n  const payPeriod = useRecoilValue(payPeriodState);\r\n\r\n  const {\r\n    payslipdeductions,\r\n    //payslip_deduction_amount,\r\n    //setPayslipDeductionAmount,\r\n    //loadPayslipDeductions,\r\n    //addPayslipDeduction,\r\n    payslipdeductions_loading,\r\n    //updatePayslipDeduction,\r\n    //deletePayslipDeduction,\r\n    //updatePayslip,\r\n    //editPayslipID,\r\n    //single_payslip,\r\n    //payslip_period,\r\n    getSingleBatchPayslipDeductions,\r\n  } = usePayslipsContext();\r\n  //const { name, amount } = payslipdeductions;\r\n  //const { deductions } = useTablesContext();\r\n\r\n  // const calc_Deduction = (data) => {\r\n  //   const sum = data.reduce((a, v) => (a = a + v.amount), 0);\r\n  //   setPayslipDeductionAmount(sum);\r\n  // };\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"description\",\r\n      },\r\n      { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    getSingleBatchPayslipDeductions(payPeriodEmpId, payPeriod);\r\n  }, []);\r\n\r\n  // const update_Payslip = () => {\r\n  //   const { rec_id, id, total_deductions, ...paydata } = single_payslip;\r\n  //   updatePayslip({\r\n  //     id: editPayslipID,\r\n  //     total_deductions: payslip_deduction_amount,\r\n  //     ...paydata,\r\n  //   });\r\n  // };\r\n\r\n  // const update_PayslipDeduction = async (data) => {\r\n  //   const { id, rec_id, empid, ...fields } = data;\r\n  //   updatePayslipDeduction({ id: data.id, empid: empid, ...fields });\r\n  //   update_Payslip();\r\n  //   getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  // const add_PayslipDeduction = (data) => {\r\n  //   const { description, amount } = data;\r\n  //   addPayslipDeduction({\r\n  //     description: description,\r\n  //     amount: amount,\r\n  //     name: single_payslip.name,\r\n  //     empid: single_payslip.empid,\r\n  //     period: single_payslip.period,\r\n  //   });\r\n  //   getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  // const delete_PayslipDeduction = (data) => {\r\n  //   const { id } = data;\r\n  //   deletePayslipDeduction(id);\r\n  //   getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  if (payslipdeductions_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading... Expenses.</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={payslipdeductions}\r\n          title=\"Expense\"\r\n          options={{\r\n            search: false,\r\n            toolbar: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\Payslip_ViewEarnings.js",["1499"],"import React, { useEffect, useMemo } from \"react\";\r\n\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport {\r\n  payPeriodState,\r\n  //payPeriodEndMonthState,\r\n  payPeriodEmpIdState,\r\n} from \"./data/atomdata\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\n\r\nconst PayslipViewEarnings = ({ setCalc }) => {\r\n  //let history = useHistory();\r\n  //const [load, setLoad] = useState(true);\r\n  const classes = useStyles();\r\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\r\n  const payPeriod = useRecoilValue(payPeriodState);\r\n  const {\r\n    payslipearnings,\r\n    //payslip_earning_amount,\r\n    //setPayslipEarningAmount,\r\n    //addPayslipEarning,\r\n    payslipearnings_loading,\r\n    //updatePayslipEarning,\r\n    //deletePayslipEarning,\r\n    //updatePayslip,\r\n    //editPayslipID,\r\n    //single_payslip,\r\n    //payslip_period,\r\n    getSingleBatchPayslipEarnings,\r\n  } = usePayslipsContext();\r\n\r\n  //const { description, amount } = payslipearnings;\r\n  //const { allowances } = useTablesContext();\r\n  //console.log(\"recoil\", payPeriod, payPeriodEmpId);\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"description\",\r\n      },\r\n      { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    getSingleBatchPayslipEarnings(payPeriodEmpId, payPeriod);\r\n  }, []);\r\n\r\n  // const calc_Earning = (data) => {\r\n  //   const sum = data.reduce((a, v) => (a = a + v.amount), 0);\r\n  //   console.log(\"Earning\", data);\r\n  //   setPayslipEarningAmount(sum);\r\n  // };\r\n\r\n  // const update_Payslip = () => {\r\n  //   const { rec_id, id, total_earnings, ...paydata } = single_payslip;\r\n  //   updatePayslip({\r\n  //     id: editPayslipID,\r\n  //     total_earnings: payslip_earning_amount,\r\n  //     ...paydata,\r\n  //   });\r\n  //   setCalc(true);\r\n  //};\r\n\r\n  if (payslipearnings_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading... Incomes.</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={payslipearnings}\r\n          title=\"Income\"\r\n          options={{\r\n            search: false,\r\n            toolbar: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n\r\nexport default PayslipViewEarnings;\r\n","D:\\react-myprojects\\hrms-demo\\src\\helpers\\CardLayout.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\useDeleteDailyAllowsDetls.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDeleteDailyAllows.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesAddPeriod.js",["1500","1501","1502","1503"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { differenceInDays, addDays } from \"date-fns\";\r\nimport { Heading } from \"@chakra-ui/react\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport clsx from \"clsx\";\r\nimport { Button, Paper, Grid, Icon, TextField } from \"@material-ui/core\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { siteallowsState, loginLevelState } from \"./data/atomdata\";\r\n//import { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\nimport { useDailyAllows } from \"./dailyallows/useDailyAllows\";\r\nimport { useAddDailyAllows } from \"./dailyallows/useAddDailyAllows\";\r\n//import { useDailyAllowsDetls } from \"./dailyallowsdetls/useDailyAllowsDetls\";\r\nimport { useAddDailyAllowsDetls } from \"./dailyallowsdetls/useAddDailyAllowsDetls\";\r\n\r\n//const drawerWidth = 240;\r\n//const selectYear = [{ name: \"2021\" }, { name: \"2022\" }];\r\n// const selectMonth = [\r\n//   { name: \"January\" },\r\n//   { name: \"February\" },\r\n//   { name: \"March\" },\r\n//   { name: \"April\" },\r\n//   { name: \"May\" },\r\n//   { name: \"June\" },\r\n// ];\r\n\r\nconst DailyAllowancesAddPeriod = ({ handleDialogClose }) => {\r\n  let date = new Date();\r\n  //let longMonth = date.toLocaleString(\"en-us\", { month: \"long\" });\r\n  //console.log(\"date\", date, longMonth);\r\n  const classes = useStyles();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const toast = useCustomToast();\r\n  const { dailyallows, setDailyAllowsId } = useDailyAllows();\r\n  //const { dailyallowsdetls } = useDailyAllowsDetls();\r\n  const addDailyAllows = useAddDailyAllows();\r\n  const addDailyAllowsDetls = useAddDailyAllowsDetls();\r\n  const [input, setInput] = useRecoilState(siteallowsState);\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  //const [allowsPeriod, setAllowsPeriod] = useState(\"\");\r\n  //const [alert, setAlert] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  // const { dailyallowances, addDailyAllowance, addDailyAllowsDetl } =\r\n  //   useDailyAllowancesContext();\r\n  // function daysInMonth(month, year) {\r\n  //   return new Date(year, month, 0).getDate();\r\n  // }\r\n\r\n  useEffect(() => {\r\n    setInput({\r\n      ...input,\r\n      empid: loginLevel.loginUserId,\r\n      name: loginLevel.loginUser,\r\n      jobbonus: loginLevel.siteallows_fee,\r\n      perdiem: loginLevel.perdiem_fee,\r\n      manager: loginLevel.reporting_to,\r\n      client: \"\",\r\n    });\r\n    setDailyAllowsId(loginLevel.loginUserId);\r\n  }, []);\r\n\r\n  // const periodExists = (data) => {\r\n  //   console.log('add period', data)\r\n  //   return dailyallows.some(function (el) {\r\n  //     return el.period === data && el.empid === loginLevel.loginUserId;\r\n  //   });\r\n  // };\r\n\r\n  const periodExists = (data) => {\r\n    var lExist = false;\r\n    const startday = parseInt(data.substring(8, 10));\r\n    const endday = parseInt(data.substring(11, 13));\r\n    const existdata = dailyallows.filter((rec) =>\r\n      rec.period.toLowerCase().match(data.substring(0, 8))\r\n    );\r\n    //console.log(\"existdata\", existdata);\r\n    if (existdata.length > 0) {\r\n      existdata.forEach((rec) => {\r\n        const fromday = parseInt(rec.period.substring(8, 10));\r\n        const today = parseInt(rec.period.substring(11, 13));\r\n        if (startday >= fromday && startday <= today) {\r\n          lExist = true;\r\n        }\r\n        if (endday >= fromday && endday <= today) {\r\n          lExist = true;\r\n        }\r\n      });\r\n    }\r\n    return lExist;\r\n  };\r\n\r\n  const buildSiteAllows = () => {\r\n    const period =\r\n      input.fromdate.substring(0, 4) +\r\n      \"-\" +\r\n      input.fromdate.substring(5, 7) +\r\n      \"-\" +\r\n      input.fromdate.substring(8, 10) +\r\n      \"/\" +\r\n      input.todate.substring(8, 10);\r\n\r\n    const isExist = periodExists(period);\r\n    //console.log(\"isexist\", isExist);\r\n    if (isExist) {\r\n      toast({\r\n        title: \"Site Allowance period is existed!\",\r\n        status: \"warning\",\r\n      });\r\n      // setError(true);\r\n      return null;\r\n    }\r\n\r\n    // build siteallowsbatch\r\n\r\n    const diffInDays = differenceInDays(\r\n      new Date(input.todate),\r\n      new Date(input.fromdate)\r\n    );\r\n\r\n    let amount = 0,\r\n      jobbonus = 0,\r\n      perdiem = 0;\r\n    for (let i = 0; i <= diffInDays; i++) {\r\n      jobbonus = jobbonus + Number(input.jobbonus);\r\n      perdiem = perdiem + Number(input.perdiem);\r\n      amount = amount + Number(input.jobbonus) + Number(input.perdiem);\r\n      const data = addDays(new Date(input.fromdate), i);\r\n      addDailyAllowsDetls({\r\n        empid: loginLevel.loginUserId,\r\n        name: loginLevel.loginUser,\r\n        period: period,\r\n        date: data,\r\n        district: input.district,\r\n        typeoperation: input.typeoperation,\r\n        client: input.client,\r\n        location: input.location,\r\n        jobno: input.jobno,\r\n        crewoperation: input.crewoperation,\r\n        jobbonus: input.jobbonus,\r\n        perdiem: input.perdiem,\r\n        status: \"Pending\",\r\n      });\r\n    }\r\n    //add daily allowances batch\r\n    addDailyAllows({\r\n      period: period,\r\n      location: input.location,\r\n      manager: input.manager,\r\n      name: loginLevel.loginUser,\r\n      empid: loginLevel.loginUserId,\r\n      status: \"Pending\",\r\n      no_of_days: diffInDays + 1,\r\n      amount: amount,\r\n      totaljobbonus: jobbonus,\r\n      totalperdiem: perdiem,\r\n      fromdate: input.fromdate,\r\n      todate: input.todate,\r\n    });\r\n\r\n    // dailyallowances.push({\r\n    //   period: period,\r\n    //   location: input.location,\r\n    //   manager: input.manager,\r\n    //   name: loginLevel.loginUser,\r\n    //   empid: loginLevel.loginUserId,\r\n    //   status: \"Pending\",\r\n    //   no_of_days: diffInDays,\r\n    //   amount: amount,\r\n    // });\r\n    handleDialogClose();\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    e.preventDefault();\r\n    const { name, type, value } = e.target;\r\n    const val = type === \"number\" ? parseFloat(value) : value;\r\n    setInput({ ...input, [name]: val });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const period =\r\n      input.fromdate.substring(0, 4) + \"-\" + input.fromdate.substring(5, 7);\r\n    setInput({\r\n      ...input,\r\n      period: period,\r\n    });\r\n\r\n    buildSiteAllows();\r\n  };\r\n\r\n  return (\r\n    <Paper\r\n      className={fixedHeightPaper}\r\n      style={{ backgroundColor: \"secondary\" }}\r\n    >\r\n      <form onSubmit={(e) => handleSubmit(e)}>\r\n        <Grid\r\n          container\r\n          spacing={0}\r\n          direction=\"row\"\r\n          alignItems=\"center\"\r\n          justify=\"center\"\r\n          style={{ border: \"1px solid white\" }}\r\n        >\r\n          <Heading as=\"h2\" size=\"lg\" color=\"blue\" p={5}>\r\n            Build Site Allowances\r\n          </Heading>\r\n        </Grid>\r\n        <Grid\r\n          container\r\n          spacing={0}\r\n          direction=\"row\"\r\n          alignItems=\"center\"\r\n          justify=\"center\"\r\n          style={{ border: \"1px solid white\" }}\r\n        >\r\n          <div>\r\n            <Grid\r\n              item\r\n              sm={12}\r\n              style={{ border: \"1px solid white\" }}\r\n              align=\"left\"\r\n            >\r\n              {/* <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                <TextField\r\n                  label=\"Year\"\r\n                  id=\"margin-normal\"\r\n                  name=\"year\"\r\n                  required\r\n                  defaultValue={input.year}\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                  style={{ width: \"100%\", marginTop: 10, marginLeft: 10 }}\r\n                  error={!!error}\r\n                  helperText={error ? error.message : null}\r\n                  select\r\n                >\r\n                  {selectYear.map((item) => {\r\n                    return <MenuItem value={item.name}>{item.name}</MenuItem>;\r\n                  })}\r\n                </TextField>\r\n                <TextField\r\n                  label=\"Month\"\r\n                  id=\"margin-normal\"\r\n                  name=\"month\"\r\n                  required\r\n                  defaultValue={input.month}\r\n                  style={{ width: \"100%\", marginTop: 10, marginLeft: 0 }}\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                  error={!!error}\r\n                  helperText={error ? error.message : null}\r\n                  select\r\n                >\r\n                  {selectMonth.map((item) => {\r\n                    return <MenuItem value={item.name}>{item.name}</MenuItem>;\r\n                  })}\r\n                </TextField>\r\n              </div> */}\r\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                <TextField\r\n                  label=\"From Date\"\r\n                  variant=\"filled\"\r\n                  required\r\n                  style={{ width: \"100%\" }}\r\n                  name=\"fromdate\"\r\n                  value={input.fromdate}\r\n                  type=\"date\"\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                <TextField\r\n                  label=\"To Date\"\r\n                  variant=\"filled\"\r\n                  required\r\n                  style={{ width: \"100%\" }}\r\n                  name=\"todate\"\r\n                  value={input.todate}\r\n                  type=\"date\"\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                {/* <TextField\r\n                  label=\"Period\"\r\n                  variant=\"filled\"\r\n                  required\r\n                  style={{ width: \"100%\" }}\r\n                  name=\"period\"\r\n                  value={input.period}\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                ></TextField> */}\r\n                {/* <Divider className={classes.divider} /> */}\r\n                <TextField\r\n                  label=\"Manager\"\r\n                  variant=\"filled\"\r\n                  required\r\n                  style={{ width: \"100%\" }}\r\n                  name=\"manager\"\r\n                  value={input.manager}\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                ></TextField>\r\n              </div>\r\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                {/* <TextField\r\n                  label=\"District\"\r\n                  variant=\"filled\"\r\n                  //required\r\n                  value={input.district}\r\n                  style={{ width: \"100%\" }}\r\n                  name=\"district\"\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                ></TextField> */}\r\n                <TextField\r\n                  label=\"Location/Rig\"\r\n                  variant=\"filled\"\r\n                  required\r\n                  value={input.location}\r\n                  style={{ width: \"100%\" }}\r\n                  name=\"location\"\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                ></TextField>\r\n              </div>\r\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                <TextField\r\n                  label=\"Operation Type\"\r\n                  variant=\"filled\"\r\n                  required\r\n                  value={input.typeoperation}\r\n                  style={{ width: \"100%\" }}\r\n                  name=\"typeoperation\"\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                ></TextField>\r\n              </div>\r\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                <TextField\r\n                  label=\"Client\"\r\n                  variant=\"filled\"\r\n                  required\r\n                  value={input.client}\r\n                  style={{ width: \"100%\" }}\r\n                  name=\"client\"\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                ></TextField>\r\n              </div>\r\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                <TextField\r\n                  label=\"Ticket No/Job No\"\r\n                  variant=\"filled\"\r\n                  required\r\n                  value={input.jobno}\r\n                  style={{ width: \"100%\" }}\r\n                  name=\"jobno\"\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                ></TextField>\r\n              </div>\r\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                <TextField\r\n                  label=\"Operation Role\"\r\n                  variant=\"filled\"\r\n                  required\r\n                  value={input.creqoperation}\r\n                  style={{ width: \"100%\" }}\r\n                  name=\"crewoperation\"\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                ></TextField>\r\n              </div>\r\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                <TextField\r\n                  label=\"Job Bonus\"\r\n                  variant=\"filled\"\r\n                  required\r\n                  value={input.jobbonus}\r\n                  style={{ width: \"100%\" }}\r\n                  name=\"jobbonus\"\r\n                  type=\"number\"\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n                <TextField\r\n                  label=\"Per Diem\"\r\n                  variant=\"filled\"\r\n                  required\r\n                  value={input.perdiem}\r\n                  style={{ width: \"100%\" }}\r\n                  name=\"perdiem\"\r\n                  type=\"number\"\r\n                  className={classes.textField}\r\n                  onChange={(e) => handleChange(e)}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n            </Grid>\r\n          </div>\r\n        </Grid>\r\n        <Grid\r\n          container\r\n          spacing={0}\r\n          direction=\"row\"\r\n          alignItems=\"center\"\r\n          justify=\"center\"\r\n          style={{ border: \"1px solid white\" }}\r\n        >\r\n          <div>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n            >\r\n              Build <Icon className={classes.rightIcon}>send</Icon>\r\n            </Button>\r\n          </div>\r\n          <div>\r\n            {error &&\r\n              toast({\r\n                title: \"Period already existed!\",\r\n                status: \"warning\",\r\n              })}\r\n          </div>\r\n        </Grid>\r\n      </form>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  container: {\r\n    margin: 0,\r\n    padding: 0,\r\n    width: \"80vw\",\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"repeat(auto-fill,250px)\",\r\n    gridAutoRows: \"10px\",\r\n    position: \"absolute\",\r\n    left: \"50%\",\r\n    transform: \"translateX(-50%)\",\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"primary\",\r\n  },\r\n  fixedHeight: {\r\n    height: 800,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(0),\r\n    // display: \"flex\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n    border: \"1px solid\",\r\n    width: \"100%\",\r\n    color: \"primary\",\r\n    bcakgroundColor: \"black\",\r\n  },\r\n  card: {\r\n    backgroundColor: \"black\",\r\n  },\r\n  section: {\r\n    width: \"95vw\",\r\n    margin: \"5rem auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n  },\r\n  underline: {\r\n    width: \"5rem\",\r\n    height: \"0.25rem\",\r\n    marginBottom: \"1.25rem\",\r\n    background: \"var(--clr-primary-5)\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n  },\r\n  title: {\r\n    marginbottom: \"4rem\",\r\n    textAlign: \"center\",\r\n  },\r\n  jobscenter: {\r\n    width: \"80vw\",\r\n    margin: \"0 auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n    flexDirection: \"row\",\r\n  },\r\n  btncontainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    marginBottom: \"4rem\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  jobbtn: {\r\n    background: \"transparent\",\r\n    borderColor: \"transparent\",\r\n    textTransform: \"capitalize\",\r\n    fontSize: \"1.25rem\",\r\n    letterSpacing: \"var(--spacing)\",\r\n    margin: \"0 0.5rem\",\r\n    transition: \"var(--transition)\",\r\n    cursor: \"pointer\",\r\n    padding: \"0.25rem 0\",\r\n    lineHeight: \"1\",\r\n    outlineColor: \"var(--clr-primary-10)\",\r\n    \"&:hover\": {\r\n      color: \"var(--clr-primary-5)\",\r\n      boxShadow: \"0 2px var(--clr-primary-5)\",\r\n    },\r\n  },\r\n  activebtn: {\r\n    color: \"var(--clr-primary-5)\",\r\n    boxShadow: \"0 2px var(--clr-primary-5)\",\r\n  },\r\n  jobinfo: {\r\n    fontWeight: \"400\",\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  formLabel: {\r\n    fontSize: 12,\r\n    textAlign: \"left\",\r\n    marginLeft: 8,\r\n    marginTop: 8,\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 200,\r\n  },\r\n}));\r\n\r\nexport default DailyAllowancesAddPeriod;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\designations\\useAddDesignations.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\departments\\useAddDepartments.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\groups\\useAddGroup.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\institutes\\useAddInstitutes.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\useAddPayItems.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\useDeletePayItems.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhydetails\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhy\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhatdetails\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hocwhat\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\useAddDailyAllowsDetls.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useAddDailyAllows.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\usePayItems.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\useUpdatePayItems.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\departments\\useDeleteDepartments.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\departments\\useUpdateDepartments.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\designations\\useDeleteDesignations.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\designations\\useUpdateDesignations.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\institutes\\useDeleteInstitutes.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\institutes\\useInstitutes.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\institutes\\useUpdateInstitutes.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\groups\\useUpdateGroup.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\groups\\useDeleteGroup.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\groups\\useGroups.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payitems\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\groups\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\useAddEmployees.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\useEmployees.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useUpdateDailyAllows.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallowsdetls\\useUpdateDailyAllowsDetls.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\currency\\useDeleteCurrency.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\currency\\useUpdateCurrency.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\currency\\useCurrency.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmpTrainings.js",["1504","1505","1506","1507"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { TextField, MenuItem } from \"@material-ui/core\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\n//import { useTrainingsContext } from \"../context/trainings_context\";\r\nimport { useTrainings } from \"./trainings/useTrainings\";\r\nimport { useInstitutes } from \"./institutes/useInstitutes\";\r\nimport { useUpdateTrainings } from \"./trainings/useUpdateTrainings\";\r\nimport { useAddTrainings } from \"./trainings/useAddTrainings\";\r\nimport { useDeleteTrainings } from \"./trainings/useDeleteTrainings\";\r\n\r\nexport default function Emp_Training({\r\n  trainingdata,\r\n  setTrainingdata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const { trainings, setTrainingId } = useTrainings();\r\n  const { institutes } = useInstitutes();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const updateTrainings = useUpdateTrainings();\r\n  const addTrainings = useAddTrainings();\r\n  const deleteTrainings = useDeleteTrainings();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n  // const {\r\n  //   //getSingleBatchTraining,\r\n  //   //singlebatch_training,\r\n  //   //addTraining,\r\n  //   //deleteTraining,\r\n  //   //updateTraining,\r\n  //   //singlebatch_training_loading,\r\n  // } = useTrainingsContext();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Institute\",\r\n        field: \"institute\",\r\n        editComponent: (props) => (\r\n          <TextField\r\n            //defaultValue={props.value || null}\r\n            onChange={(e) => props.onChange(e.target.value)}\r\n            style={{ width: 100 }}\r\n            value={props.value}\r\n            select\r\n          >\r\n            <MenuItem value=\"\">None</MenuItem>\r\n            {institutes.length > 0 &&\r\n              institutes.map((r) => {\r\n                return <MenuItem value={r.name}>{r.name}</MenuItem>;\r\n              })}\r\n          </TextField>\r\n        ),\r\n      },\r\n      {\r\n        title: \"Course\",\r\n        field: \"course\",\r\n      },\r\n      {\r\n        title: \"From Date\",\r\n        field: \"from_date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n        editComponent: (props) => (\r\n          <TextField\r\n            defaultValue={props.value || new Date()}\r\n            onChange={(e) => props.onChange(e.target.value)}\r\n            type=\"date\"\r\n          />\r\n        ),\r\n      },\r\n      {\r\n        title: \"To Date\",\r\n        field: \"to_date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n        editComponent: (props) => (\r\n          <TextField\r\n            defaultValue={props.value || new Date()}\r\n            onChange={(e) => props.onChange(e.target.value)}\r\n            type=\"date\"\r\n          />\r\n        ),\r\n      },\r\n      {\r\n        title: \"Expiry Date\",\r\n        field: \"expiry_date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n        editComponent: (props) => (\r\n          <TextField\r\n            defaultValue={props.value || new Date()}\r\n            onChange={(e) => props.onChange(e.target.value)}\r\n            type=\"date\"\r\n          />\r\n        ),\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    setTrainingId(editEmployeeID);\r\n  }, []);\r\n\r\n  const add_Training = (data) => {\r\n    addTrainings({\r\n      ...data,\r\n      name: loginLevel.loginUser,\r\n      empid: editEmployeeID,\r\n    });\r\n  };\r\n\r\n  const delete_Training = (data) => {\r\n    const { id } = data;\r\n    deleteTrainings(id);\r\n  };\r\n\r\n  const update_Training = (data) => {\r\n    const { id, rec_id, tableData, ...fields } = data;\r\n    updateTrainings({ id, ...fields });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={trainings}\r\n          title=\"Training\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  add_Training(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  update_Training(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  delete_Training(oldData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useAddLeaves.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmpExperiences.js",["1508","1509"],"import React, { useEffect, useMemo } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\nimport { useExperiences } from \"./experiences/useExperiences\";\r\nimport { useUpdateExperiences } from \"./experiences/useUpdateExperiences\";\r\nimport { useAddExperiences } from \"./experiences/useAddExperiences\";\r\nimport { useDeleteExperiences } from \"./experiences/useDeleteExperiences\";\r\n\r\nexport default function Emp_Experiences({\r\n  experiencedata,\r\n  setExperiencedata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const { experiences, setExperienceId } = useExperiences();\r\n  const updateExperiences = useUpdateExperiences();\r\n  const addExperiences = useAddExperiences();\r\n  const deleteExperiences = useDeleteExperiences();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n\r\n  const columns = useMemo(() => [\r\n    {\r\n      title: \"Company\",\r\n      field: \"company\",\r\n    },\r\n    {\r\n      title: \"Location\",\r\n      field: \"location\",\r\n    },\r\n    {\r\n      title: \"Position\",\r\n      field: \"position\",\r\n    },\r\n    {\r\n      title: \"From Date\",\r\n      field: \"from_date\",\r\n      type: \"date\",\r\n      editComponent: (props) => (\r\n        <TextField\r\n          defaultValue={props.value || new Date()}\r\n          onChange={(e) => props.onChange(e.target.value)}\r\n          type=\"date\"\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      title: \"To Date\",\r\n      field: \"to_date\",\r\n      type: \"date\",\r\n      editComponent: (props) => (\r\n        <TextField\r\n          defaultValue={props.value || new Date()}\r\n          onChange={(e) => props.onChange(e.target.value)}\r\n          type=\"date\"\r\n        />\r\n      ),\r\n    },\r\n    { title: \"Remark\", field: \"remark\" },\r\n  ],[]);\r\n\r\n  useEffect(() => {\r\n    setExperienceId(editEmployeeID);\r\n  }, []);\r\n\r\n  const update_Experience = (data) => {\r\n    const { id, rec_id, tableData, ...fields } = data;\r\n    updateExperiences({ id, ...fields });\r\n  };\r\n\r\n  const add_Experience = (data) => {\r\n    addExperiences({ ...data, empid: editEmployeeID });\r\n  };\r\n\r\n  const delete_Experience = (data) => {\r\n    const { id } = data;\r\n    deleteExperiences(id);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={experiences}\r\n          title=\"Experience\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  add_Experience(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  update_Experience(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  delete_Experience(oldData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useUpdateLeaves.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\expensesattachments\\useDeleteExpensesAttachment.js",["1510"],"import { useMutation, useQueryClient } from \"react-query\";\r\nimport { expensesattachments_url } from \"../../utils/constants\";\r\nimport { useCustomToast } from \"../../helpers/useCustomToast\";\r\n\r\nasync function deleteExpensesAttachment(id) {\r\n  await fetch(expensesattachments_url, {\r\n    method: \"DELETE\",\r\n    body: JSON.stringify({ id: id }),\r\n  });\r\n}\r\n\r\nexport function useDeleteExpensesAttachment(data) {\r\n  const queryClient = useQueryClient();\r\n  const toast = useCustomToast();\r\n\r\n  const { mutate } = useMutation((data) => deleteExpensesAttachment(data), {\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries(\"expensesattachments\");\r\n    //   toast({\r\n    //     title: \"Expense attachment record being deleted!\",\r\n    //     status: \"warning\",\r\n    //   });\r\n    },\r\n  });\r\n\r\n  return mutate;\r\n}\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\expensesattachments\\useUpdateExpensesAttachment.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\expensesattachments\\useAddExpensesAttachment.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\expensesattachments\\useExpensesAttachments.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useAddExpenses.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmpEducations.js",["1511"],"import React, { useEffect, useMemo } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useEducations } from \"./educations/useEducations\";\r\nimport { useUpdateEducations } from \"./educations/useUpdateEducations\";\r\nimport { useAddEducations } from \"./educations/useAddEducations\";\r\nimport { useDeleteEducations } from \"./educations/useDeleteEducations\";\r\n\r\nexport default function Emp_Educations({\r\n  educationdata,\r\n  setEducationdata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const { educations, setEducationId } = useEducations();\r\n  const updateEducations = useUpdateEducations();\r\n  const addEducations = useAddEducations();\r\n  const deleteEducations = useDeleteEducations();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n\r\n  const columns = useMemo(() => [\r\n    {\r\n      title: \"Institution\",\r\n      field: \"institution\",\r\n    },\r\n    {\r\n      title: \"Course\",\r\n      field: \"course\",\r\n    },\r\n    {\r\n      title: \"From Date\",\r\n      field: \"from_date\",\r\n      type: \"date\",\r\n      dateSetting: { locale: \"en-GB\" },\r\n      editComponent: (props) => (\r\n        <TextField\r\n          defaultValue={props.value || new Date()}\r\n          onChange={(e) => props.onChange(e.target.value)}\r\n          type=\"date\"\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      title: \"To Date\",\r\n      field: \"to_date\",\r\n      type: \"date\",\r\n      dateSetting: { locale: \"en-GB\" },\r\n      editComponent: (props) => (\r\n        <TextField\r\n          defaultValue={props.value || new Date()}\r\n          onChange={(e) => props.onChange(e.target.value)}\r\n          type=\"date\"\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      title: \"Archievement\",\r\n      field: \"archievement\",\r\n    },\r\n\r\n    { title: \"Grade\", field: \"grade\" },\r\n    {\r\n      title: \"Remark\",\r\n      field: \"remark\",\r\n    },\r\n  ],[]);\r\n\r\n  useEffect(() => {\r\n    setEducationId(editEmployeeID);\r\n  }, []);\r\n\r\n  const update_Education = (data) => {\r\n    const { id, rec_id, tableData, ...fields } = data;\r\n    updateEducations({ id, ...fields });\r\n  };\r\n\r\n  const add_Education = (data) => {\r\n    addEducations({ ...data, empid: editEmployeeID });\r\n  };\r\n\r\n  const delete_Education = (data) => {\r\n    const { id } = data;\r\n    deleteEducations(id);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={educations}\r\n          title=\"Education\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  add_Education(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  update_Education(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  // const dataDelete = [...educationdata];\r\n                  // const index = oldData.tableData.id;\r\n                  // dataDelete.splice(index, 1);\r\n                  delete_Education(oldData);\r\n\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useUpdateExpenses.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useDeleteExpenses.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmpFamily.js",["1512","1513"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { TextField, MenuItem } from \"@material-ui/core\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\n\r\nimport { useFamily } from \"./family/useFamily\";\r\nimport { useUpdateFamily } from \"./family/useUpdateFamily\";\r\nimport { useAddFamily } from \"./family/useAddFamily\";\r\nimport { useDeleteFamily } from \"./family/useDeleteFamily\";\r\n\r\nexport default function Emp_Family() {\r\n  const classes = useStyles();\r\n  const { family, setFamilyId } = useFamily();\r\n  const updateFamily = useUpdateFamily();\r\n  const addFamily = useAddFamily();\r\n  const deleteFamily = useDeleteFamily();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n\r\n  const columns = useMemo(() => [\r\n    {\r\n      title: \"Name\",\r\n      field: \"name\",\r\n    },\r\n    {\r\n      title: \"Relationship\",\r\n      field: \"relationship\",\r\n      editComponent: (props) => (\r\n        <TextField\r\n          //defaultValue={props.value || null}\r\n          onChange={(e) => props.onChange(e.target.value)}\r\n          style={{ width: 100 }}\r\n          value={props.value}\r\n          select\r\n        >\r\n          <MenuItem value=\"Father\">Father</MenuItem>\r\n          <MenuItem value=\"Mother\">Mother</MenuItem>\r\n          <MenuItem value=\"Husband\">Husband</MenuItem>\r\n          <MenuItem value=\"Wife\">Wife</MenuItem>\r\n          <MenuItem value=\"Daughter\">Daughter</MenuItem>\r\n          <MenuItem value=\"Son\">Son</MenuItem>\r\n          <MenuItem value=\"Son-in-law\">Son-in-law</MenuItem>\r\n          <MenuItem value=\"Daughter-in-law\">Daughter-in-law</MenuItem>\r\n        </TextField>\r\n      ),\r\n    },\r\n    {\r\n      title: \"BIrth Date\",\r\n      field: \"birth_date\",\r\n      type: \"date\",\r\n      dateSetting: { locale: \"en-GB\" },\r\n      editComponent: (props) => (\r\n        <TextField\r\n          defaultValue={props.value || null}\r\n          onChange={(e) => props.onChange(e.target.value)}\r\n          type=\"date\"\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      title: \"Phone\",\r\n      field: \"phone\",\r\n    },\r\n    { title: \"Age\", field: \"age\", type: \"numeric\" },\r\n  ],[]);\r\n\r\n  const update_Family = (data) => {\r\n    const { id, rec_id, tableData, ...fields } = data;\r\n    updateFamily({ id, ...fields });\r\n  };\r\n\r\n  const add_Family = (data) => {\r\n    addFamily({ ...data, empid: editEmployeeID });\r\n  };\r\n\r\n  const delete_Family = (data) => {\r\n    const { id } = data;\r\n    deleteFamily(id);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setFamilyId(editEmployeeID);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={family}\r\n          title=\"Family\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  // setFamilydata([...familydata, newData]);\r\n                  add_Family(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  update_Family(newData);\r\n\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  delete_Family(oldData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\expensesattachments\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\useDeleteTrainings.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\useDeleteExperiences.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\useAddExperiences.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\useUpdateExperiences.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\useExperiences.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\useAddTrainings.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\useUpdateTrainings.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\useTrainings.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\useDeleteEducations.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\useAddEducations.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\useUpdateEducations.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\useEducations.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\family\\useAddFamily.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\family\\useDeleteFamily.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\family\\useUpdateFamily.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\family\\useFamily.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\trainings\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\experiences\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\educations\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\family\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\Example.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTable.js",["1514","1515","1516"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport BuildOutlinedIcon from \"@material-ui/icons/BuildOutlined\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { payrunState, payrunIdState, payrunStatusState } from \"./data/atomdata\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\n//import { useExpensesContext } from \"../context/expenses_context\";\r\n//import { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\nimport { usePayrun } from \"./payrun/usePayrun\";\r\nimport { usePayslipsBatch } from \"./payslips/usePayslipsBatch\";\r\nimport { useDeletePayrun } from \"./payrun/useDeletePayrun\";\r\nimport { useExpensesPayrun } from \"./expenses/useExpensesPayrun\";\r\nimport { useUpdateExpenses } from \"./expenses/useUpdateExpenses\";\r\nimport { useDailyAllowsPayrun } from \"./dailyallows/useDailyAllowsPayrun\";\r\nimport { useUpdateDailyAllows } from \"./dailyallows/useUpdateDailyAllows\";\r\n\r\n//const FILTERSTRING = \"Pending\";\r\n\r\nexport default function PayslipTable() {\r\n  let navigate = useNavigate();\r\n  const toast = useCustomToast();\r\n  const classes = useStyles();\r\n  const { payrun } = usePayrun();\r\n  const { payslipsbatch, setPSBPayrunId } = usePayslipsBatch();\r\n  const { expensespayrun, setExpPayrunId } = useExpensesPayrun();\r\n  const { dailyallowspayrun, setDailyAllowsPayrunId } = useDailyAllowsPayrun();\r\n  const updateExpenses = useUpdateExpenses();\r\n  const deletePayrun = useDeletePayrun();\r\n  const updateDailyAllows = useUpdateDailyAllows();\r\n  const [input, setInput] = useRecoilState(payrunState);\r\n  //const [isLoadInput, setIsLoadInput] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const [deletestate, setDeletestate] = useState({ id: \"\", payrun: \"\" });\r\n  const [payrunId, setPayrunId] = useRecoilState(payrunIdState);\r\n  const [payrunstatus, setPayrunStatus] = useRecoilState(payrunStatusState);\r\n  // const { loadPeriodExpenses, periodexpenses, updateExpense } =\r\n  //   useExpensesContext();\r\n  // const {\r\n  //   getSingleBatchDailyAllowance,\r\n  //   singlebatchdailyallowance,\r\n  //   updateDailyAllowance,\r\n  //   deleteDailyAllowance,\r\n  // } = useDailyAllowancesContext();\r\n  const {\r\n    //payrun,\r\n    //getPayrun,\r\n    payrun_loading,\r\n    payrun_error,\r\n    getSinglePayslip,\r\n    setEditPayslipID,\r\n    setIsPayslipEditingOn,\r\n    //single_payslip,\r\n    setPayslipPeriod,\r\n    //deletePayrun,\r\n    deletePayslip,\r\n    //pending_payslips,\r\n    //loadPendingPayslips,\r\n  } = usePayslipsContext();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      // { title: \"Period\", field: \"period\" },\r\n      {\r\n        title: \"Payrun Batch\",\r\n        field: \"payrun\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n      },\r\n      // {\r\n      //   title: \"Pay Date\",\r\n      //   field: \"pay_date\",\r\n      //   type: \"date\",\r\n      //   dateSetting: { locale: \"en-GB\" },\r\n      // },\r\n      { title: \"Total Wages\", field: \"totalwages\", type: \"currency\" },\r\n      { title: \"TAP Amount\", field: \"totaltap\", type: \"currency\" },\r\n      { title: \"SCP Amount\", field: \"totalscp\", type: \"currency\" },\r\n      { title: \"Site Allowances\", field: \"totalsitesallows\", type: \"currency\" },\r\n      {\r\n        title: \"Expenses Claims\",\r\n        field: \"totalexpensesclaims\",\r\n        type: \"currency\",\r\n      },\r\n      { title: \"Total Allowances\", field: \"totalallows\", type: \"currency\" },\r\n      { title: \"Total Deductions\", field: \"totaldeducts\", type: \"currency\" },\r\n      { title: \"Total Payroll\", field: \"totalpayroll\", type: \"currency\" },\r\n      { title: \"Status\", field: \"status\" },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    setPSBPayrunId(\"XXX\");\r\n    setDailyAllowsPayrunId(\"XXX\");\r\n  }, []);\r\n  // useEffect(() => {\r\n  //   if (single_payslip.payrun) {\r\n  //     console.log(\"single_payslip\", single_payslip);\r\n  //   }\r\n  // }, [single_payslip]);\r\n\r\n  const handleAlertOpen = () => {\r\n    setIsAlertOpen(true);\r\n  };\r\n\r\n  const handleAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const update_Input = async (data) => {\r\n    console.log(\"input\", data);\r\n\r\n    setInput({\r\n      ...input,\r\n      id: data.id,\r\n      payfreq: data.payfreq,\r\n      fromdate: data.fromdate,\r\n      todate: data.todate,\r\n      paydate: data.paydate,\r\n      period: data.period,\r\n      payrun: data.payrun,\r\n      totalwages: data.totalwages,\r\n      totaltap: data.totaltap,\r\n      totalscp: data.totalscp,\r\n      totalallows: data.totalallows,\r\n      totaldeducts: data.totaldeducts,\r\n      totalpayroll: data.totalpayroll,\r\n      status: data.status,\r\n    });\r\n\r\n    setInput({\r\n      ...input,\r\n      id: data.id,\r\n      payfreq: data.payfreq,\r\n      fromdate: data.fromdate,\r\n      todate: data.todate,\r\n      paydate: data.paydate,\r\n      period: data.period,\r\n      payrun: data.payrun,\r\n      totalwages: data.totalwages,\r\n      totaltap: data.totaltap,\r\n      totalscp: data.totalscp,\r\n      totalallows: data.totalallows,\r\n      totaldeducts: data.totaldeducts,\r\n      totalpayroll: data.totalpayroll,\r\n      status: data.status,\r\n    });\r\n    console.log(\"payrun\", input);\r\n  };\r\n\r\n  const update_Payslip = async (data) => {\r\n    const { id, payrun } = data;\r\n    setPayrunId(id);\r\n    setPayrunStatus(data.status);\r\n    setPayslipPeriod(payrun); //save to recoil\r\n    setEditPayslipID(id);\r\n    setIsPayslipEditingOn();\r\n    getSinglePayslip(id);\r\n    navigate(\"/payrunbatch\");\r\n  };\r\n\r\n  const delete_Payslip = (data) => {\r\n    const { id, payrun } = data;\r\n    setDeletestate({ id: id, payrun: payrun });\r\n    setPSBPayrunId(payrun);\r\n    setExpPayrunId(payrun);\r\n    setDailyAllowsPayrunId(payrun);\r\n    //loadPeriodExpenses(payrun);\r\n    //getSingleBatchDailyAllowance(payrun);\r\n    handleAlertOpen();\r\n  };\r\n\r\n  const handleOnDeleteConfirm = (data) => {\r\n    console.log(\"payslip delete\", deletestate);\r\n    const { id, payrun } = deletestate;\r\n\r\n    //load period expenses\r\n    //loadPeriodExpenses(payrun);\r\n\r\n    //delete allows detls\r\n    payslipsbatch &&\r\n      payslipsbatch.forEach((rec) => {\r\n        if (rec.payrun === payrun) {\r\n          deletePayslip(rec.id);\r\n        }\r\n      });\r\n\r\n    //unpaid expenses\r\n    expensespayrun &&\r\n      expensespayrun.forEach((rec) => {\r\n        if (rec.payrun === payrun) {\r\n          updateExpenses({ id: rec.id, payrun: \"\" });\r\n        }\r\n      });\r\n\r\n    //delete dailyallows\r\n    dailyallowspayrun &&\r\n      dailyallowspayrun.forEach((rec) => {\r\n        if (rec.payrun === payrun) {\r\n          updateDailyAllows({ id: rec.id, payrun: \"\" });\r\n        }\r\n      });\r\n\r\n    //delete payrun\r\n    deletePayrun(id);\r\n    toast({\r\n      title: `Payroll Batch being deleted!`,\r\n      status: \"warning\",\r\n    });\r\n    //getPayrun();\r\n  };\r\n\r\n  if (payrun_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading.....Payslips</h2>\r\n      </div>\r\n    );\r\n  }\r\n  if (payrun_error) {\r\n    return (\r\n      <div>\r\n        <h2>Internet connection problem!</h2>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={payrun}\r\n          title=\"Payroll\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <EditIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n            Build: (props) => <BuildOutlinedIcon />,\r\n          }}\r\n          actions={[\r\n            (rowData) => ({\r\n              //disabled: rowData.status !== \"Pending\",\r\n              icon: \"edit\",\r\n              position: \"row\",\r\n              tooltip: \"Edit Record\",\r\n              onClick: (event, rowData) => {\r\n                update_Input(rowData);\r\n                update_Payslip(rowData);\r\n              },\r\n            }),\r\n            (rowData) => ({\r\n              disabled: rowData.status === \"Approved\",\r\n              icon: \"delete\",\r\n              tooltip: \"Delete Record\",\r\n              position: \"row\",\r\n              onClick: (event, rowData) => {\r\n                //delete_Payslip(rowData);\r\n                delete_Payslip(rowData);\r\n              },\r\n            }),\r\n\r\n            // {\r\n            //   icon: \"add\",\r\n            //   tooltip: \"Add Record\",\r\n            //   isFreeAction: true,\r\n            //   onClick: (event, rowData) => {\r\n            //     add_Payslip(rowData);\r\n            //   },\r\n            // },\r\n          ]}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"black\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                {/* <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={(e) => handleVerifyPayslipData(e)}\r\n                  >\r\n                    Verify <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                </div> */}\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <AlertDialogBox\r\n          onClose={handleAlertClose}\r\n          onConfirm={handleOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete Payslip Batch\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTableStaff.js",["1517","1518"],"import React, { useEffect, useState, useMemo } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport PrintIcon from \"@material-ui/icons/Print\";\r\nimport BuildOutlinedIcon from \"@material-ui/icons/BuildOutlined\";\r\n//import { useHistory } from \"react-router-dom\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport {\r\n  //payPeriodState,\r\n  //payPeriodEndMonthState,\r\n  //payPeriodEmpIdState,\r\n  loginLevelState,\r\n} from \"./data/atomdata\";\r\n//import { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { usePayslips } from \"./payslips/usePayslips\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\nimport PrintPayslip from \"./PrintPayslip\";\r\n\r\n// const PrintPayslip = React.lazy(() =>\r\n//   import(\"./PrintPayslip\")\r\n// );\r\n//const PrintPayslip = React.lazy(() => import(\"./PrintPayslip\"));\r\n\r\nexport default function PayslipTable() {\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { employees } = useEmployees();\r\n  const { payslips, setPayslipId } = usePayslips();\r\n  const [isLoad, setIsLoad] = useState(true);\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"name\",\r\n      },\r\n      { title: \"Period\", field: \"payrun\" },\r\n      // {\r\n      //   title: \"Date\",\r\n      //   field: \"date\",\r\n      //   type: \"date\",\r\n      //   dateSetting: { locale: \"en-GB\" },\r\n      // },\r\n      { title: \"Basic Pay\", field: \"wages_bnd\", type: \"currency\" },\r\n      { title: \"TAP Amount\", field: \"tap_amount_bnd\", type: \"currency\" },\r\n      { title: \"SCP Amount\", field: \"scp_amount_bnd\", type: \"currency\" },\r\n      { title: \"Site Allowances\", field: \"site_allows_bnd\", type: \"currency\" },\r\n      {\r\n        title: \"Expenses Claims\",\r\n        field: \"expenses_claims_bnd\",\r\n        type: \"currency\",\r\n      },\r\n      { title: \"Allowances\", field: \"total_allowances_bnd\", type: \"currency\" },\r\n      { title: \"Deductions\", field: \"total_deductions_bnd\", type: \"currency\" },\r\n      { title: \"Nett Pay\", field: \"nett_pay_bnd\", type: \"currency\" },\r\n      // { title: \"Bank Name\", field: \"bank_name\" },\r\n      // { title: \"Bank AC No\", field: \"bank_accno\" },\r\n      { title: \"Status\", field: \"status\" },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const exportPdfTable = ({ data, emp }) => {\r\n    PrintPayslip({ data, emp });\r\n  };\r\n\r\n  const print_Payslip = async (data) => {\r\n    const { empid } = data.rowData;\r\n    const emp = employees\r\n      .filter((f) => f.id === empid)\r\n      .map((r) => {\r\n        return { ...r };\r\n      });\r\n    exportPdfTable({ data, emp });\r\n  };\r\n\r\n  // const update_Payslip = async (data) => {\r\n  //   const { id } = data;\r\n  //   setPayPeriodEmpId(id); //save to recoil\r\n  //   setEditPayslipID(id);\r\n  //   setIsPayslipEditingOn();\r\n  //   getSinglePayslip(id);\r\n  //   history.push(\"/singlepayslip\");\r\n  //};\r\n\r\n  // const add_Payslip = async (data) => {\r\n  //   const { id } = data;\r\n  //   resetSinglePayslip();\r\n  //   setEditPayslipID(\"\");\r\n  //   setIsPayslipEditingOff();\r\n  //   history.push(\"/singlepayslip\");\r\n  // };\r\n\r\n  // const delete_Payslip = (data) => {\r\n  //   const { id } = data;\r\n  //   setEditPayslipID(id);\r\n  //   deletePayslip(id);\r\n  //   loadPayslips();\r\n  //};\r\n\r\n  useEffect(() => {\r\n    setPayslipId(loginLevel.loginUserId);\r\n    setIsLoad(true);\r\n  }, [isLoad]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          //data={payslips}\r\n          data={payslips\r\n            .filter((r) => r.empid === loginLevel.loginUserId)\r\n            .sort((a, b) =>\r\n              a.payrun > b.payrun ? -1 : b.payrun > a.payrun ? 1 : 0\r\n            )}\r\n          title=\"Payslips\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <EditIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n            Build: (props) => <BuildOutlinedIcon />,\r\n            Print: (props) => <PrintIcon />,\r\n          }}\r\n          actions={[\r\n            {\r\n              icon: \"print\",\r\n              tooltip: \"Print Payslip\",\r\n              onClick: (event, rowData) => {\r\n                print_Payslip({ rowData });\r\n              },\r\n            },\r\n            // {\r\n            //   icon: \"delete\",\r\n            //   tooltip: \"Delete Record\",\r\n            //   onClick: (event, rowData) => {\r\n            //     delete_Payslip(rowData);\r\n            //   },\r\n            // },\r\n            // {\r\n            //   icon: \"add\",\r\n            //   tooltip: \"Add Record\",\r\n            //   isFreeAction: true,\r\n            //   onClick: (event, rowData) => {\r\n            //     add_Payslip(rowData);\r\n            //   },\r\n            // },\r\n          ]}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesPeriods.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableStaff.js",["1519","1520","1521"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { TextField, MenuItem } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport CheckCircleOutlineOutlinedIcon from \"@material-ui/icons/CheckCircleOutlineOutlined\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\n//import { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\nimport { useExpenses } from \"./expenses/useExpenses\";\r\n//import { useAddExpenses } from \"./expenses/useAddExpenses\";\r\nimport { useDeleteExpenses } from \"./expenses/useDeleteExpenses\";\r\n//import { useUpdateExpenses } from \"./expenses/useUpdateExpenses\";\r\nimport { useExpensesAttachments } from \"./expensesattachments/useExpensesAttachments\";\r\nimport { useDeleteExpensesAttachment } from \"./expensesattachments/useDeleteExpensesAttachment\";\r\n\r\nconst initial_form = {\r\n  name: \"\",\r\n  date: \"\",\r\n  purchased_from: \"\",\r\n  description: \"\",\r\n  status: \"Pending\",\r\n  amount: 0,\r\n};\r\n\r\nexport default function ExpenseTable() {\r\n  const classes = useStyles();\r\n  //const toast = useCustomToast();\r\n  //const [isLoad, setIsLoad] = useState(false);\r\n  const { expenses, setFilter, setExpenseId } = useExpenses();\r\n  //const updateExpenses = useUpdateExpenses();\r\n  //const addExpenses = useAddExpenses();\r\n  const deleteExpenses = useDeleteExpenses();\r\n  const { expensesattachments, setAttachmentId } = useExpensesAttachments();\r\n  const deleteExpensesAttachment = useDeleteExpensesAttachment();\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  //const [expensesdata, setExpensesdata] = useState([]);\r\n  //const [alertSuccess, setAlertSuccess] = useState(false);\r\n  const [formdata, setFormdata] = useState(initial_form);\r\n  const [expattachId, setExpattachId] = useState(\"\");\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  //const { editEmployeeID } = useEmployeesContext();\r\n  const {\r\n    //expenses,\r\n    editExpenseID,\r\n    //updateExpense,\r\n    //addExpense,\r\n    //deleteExpense,\r\n    setEditExpenseID,\r\n    setIsExpenseEditingOn,\r\n    setIsExpenseEditingOff,\r\n  } = useExpensesContext();\r\n\r\n  \r\n  const columns = useMemo(() => [\r\n    { title: \"Name\", field: \"name\", editable: \"never\" },\r\n    {\r\n      title: \"Date\",\r\n      field: \"date\",\r\n      type: \"date\",\r\n      dateSetting: { locale: \"en-GB\" },\r\n      editable: \"never\",\r\n    },\r\n\r\n    {\r\n      title: \"Description\",\r\n      field: \"description\",\r\n      editable: \"never\",\r\n    },\r\n    { title: \"Amount\", field: \"amount\", type: \"currency\", editable: \"never\" },\r\n    {\r\n      title: \"Status\",\r\n      field: \"status\",\r\n      editComponent: (props) => (\r\n        <TextField\r\n          //defaultValue={props.value || null}\r\n          onChange={(e) => props.onChange(e.target.value)}\r\n          style={{ width: 100 }}\r\n          value={props.value}\r\n          select\r\n        >\r\n          <MenuItem value=\"Pending\">Pending</MenuItem>\r\n          <MenuItem value=\"Approve\">Approve</MenuItem>\r\n          <MenuItem value=\"Reject\">Reject</MenuItem>\r\n          <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n        </TextField>\r\n      ),\r\n    },\r\n  ],[]);\r\n\r\n  useEffect(() => {\r\n    setExpenseId(loginLevel.loginUserId);\r\n  }, []);\r\n\r\n  const add_Expense = async (data) => {\r\n    // const { id } = data;\r\n    setFormdata(initial_form);\r\n    setFormdata(initial_form);\r\n    setIsExpenseEditingOff();\r\n    handleDialogOpen();\r\n    // history.push(\"/singleexpense\");\r\n  };\r\n\r\n  const update_Expense = async (data) => {\r\n    const { id } = data;\r\n    setFormdata({ ...data });\r\n    setFormdata({ ...data });\r\n    setEditExpenseID(id);\r\n    setIsExpenseEditingOn();\r\n    handleDialogOpen();\r\n\r\n    // history.push(\"/singleexpense\");\r\n  };\r\n\r\n  const delete_Expense = (data) => {\r\n    const { id, attachmentid } = data;\r\n    setEditExpenseID(id);\r\n    setAttachmentId(attachmentid);\r\n    setExpattachId(attachmentid);\r\n    handleAlertOpen();\r\n\r\n    // deleteExpense(id);\r\n    // loadExpenses();\r\n  };\r\n\r\n  const handleDialogOpen = () => {\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n  };\r\n\r\n  const handleAlertOpen = () => {\r\n    setIsAlertOpen(true);\r\n  };\r\n\r\n  const handleAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleOnDeleteConfirm = () => {\r\n    const id = editExpenseID;\r\n    deleteExpenses(id);\r\n    expensesattachments\r\n      .filter((r) => r.attachmentid === expattachId)\r\n      .forEach((rec) => {\r\n        const id = rec.id;\r\n        deleteExpensesAttachment(id);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={expenses.sort((a, b) =>\r\n            a.date < b.date ? 1 : b.date < a.date ? -1 : 0\r\n          )}\r\n          title=\"Expenses Claims Application\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <CheckCircleOutlineOutlinedIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          // editable={{\r\n          //   onRowUpdate: (newData, oldData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         const dataUpdate = [...expensesdata];\r\n          //         const index = oldData.tableData.id;\r\n          //         dataUpdate[index] = newData;\r\n          //         setExpensesdata([...dataUpdate]);\r\n          //         //approve_Expense(newData);\r\n\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          // }}\r\n          actions={[\r\n            (rowData) => ({\r\n              //disabled: rowData.status !== \"Pending\",\r\n              icon: \"edit\",\r\n              tooltip: \"Edit Record\",\r\n              onClick: (event, rowData) => {\r\n                update_Expense(rowData);\r\n              },\r\n            }),\r\n            (rowData) => ({\r\n              disabled: rowData.status !== \"Pending\",\r\n              icon: \"delete\",\r\n              tooltip: \"Delete Record\",\r\n              onClick: (event, rowData) => {\r\n                delete_Expense(rowData);\r\n              },\r\n            }),\r\n            {\r\n              icon: \"add\",\r\n              tooltip: \"Add Record\",\r\n              isFreeAction: true,\r\n              onClick: (event, rowData) => {\r\n                add_Expense(rowData);\r\n              },\r\n            },\r\n          ]}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <CustomDialog\r\n          isOpen={isDialogOpen}\r\n          handleClose={handleDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <ExpenseForm\r\n            formdata={formdata}\r\n            setFormdata={setFormdata}\r\n            handleDialogClose={handleDialogClose}\r\n          />\r\n        </CustomDialog>\r\n\r\n        <AlertDialogBox\r\n          onClose={handleAlertClose}\r\n          onConfirm={handleOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete Expenses\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableAdmin.js",["1522"],"import React, { useState, useMemo } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { TextField, MenuItem } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport LeaveFormAdmin from \"./LeaveFormAdmin\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useLeaves } from \"./leaves/useLeaves\";\r\n//import { useAddLeaves } from \"./leaves/useAddLeaves\";\r\nimport { useDeleteLeaves } from \"./leaves/useDeleteLeaves\";\r\n//import { useUpdateLeaves } from \"./leaves/useUpdateLeaves\";\r\n\r\nconst initial_form = {\r\n  name: \"\",\r\n  to_date: \"\",\r\n  from_date: \"\",\r\n  reason: \"\",\r\n  status: \"Pending\",\r\n  no_of_days: 0,\r\n  leave_bal: 0,\r\n};\r\n\r\nexport default function LeaveTable() {\r\n  const classes = useStyles();\r\n  const { leaves, setLeaveId } = useLeaves();\r\n  //const updateLeaves = useUpdateLeaves();\r\n  //const addLeaves = useAddLeaves();\r\n  const deleteLeaves = useDeleteLeaves();\r\n  const [formdata, setFormdata] = useState(initial_form);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  //const { loadEmployees } = useEmployeesContext();\r\n  const {\r\n    // leaves,\r\n    editLeaveID,\r\n    //leaves_loading,\r\n    //deleteLeave,\r\n    //loadLeaves,\r\n    getSingleLeave,\r\n    setEditLeaveID,\r\n    setIsLeaveEditingOn,\r\n    setIsLeaveEditingOff,\r\n    resetSingleLeave,\r\n  } = useLeavesContext();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"name\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"From Date\",\r\n        field: \"from_date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"To Date\",\r\n        field: \"to_date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Leave Balance\",\r\n        field: \"leave_bal\",\r\n        type: \"numeric\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"No of Days\",\r\n        field: \"no_of_days\",\r\n        type: \"numeric\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Reason\",\r\n        field: \"reason\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Status\",\r\n        field: \"status\",\r\n        editComponent: (props) => (\r\n          <TextField\r\n            //defaultValue={props.value || null}\r\n            onChange={(e) => props.onChange(e.target.value)}\r\n            style={{ width: 100 }}\r\n            value={props.value}\r\n            select\r\n          >\r\n            <MenuItem value=\"Pending\">Pending</MenuItem>\r\n            <MenuItem value=\"Approve\">Approve</MenuItem>\r\n            <MenuItem value=\"Reject\">Reject</MenuItem>\r\n            <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n          </TextField>\r\n        ),\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  // useEffect(() => {\r\n  //   setLeaveId(editLeaveID);\r\n  // }, []);\r\n\r\n  const update_Leave = async (data) => {\r\n    const { id } = data;\r\n    setFormdata({ ...data });\r\n    setEditLeaveID(id);\r\n    setIsLeaveEditingOn();\r\n    getSingleLeave(id);\r\n    handleDialogOpen();\r\n    //history.push(\"/singleleave\");\r\n  };\r\n\r\n  const add_Leave = async (data) => {\r\n    // const { id } = data;\r\n    setFormdata({ ...data });\r\n    resetSingleLeave();\r\n    setEditLeaveID(\"\");\r\n    setIsLeaveEditingOff();\r\n    handleDialogOpen();\r\n    //history.push(\"/singleleave\");\r\n  };\r\n\r\n  // const delete_Leave = (data) => {\r\n  //   const { id } = data;\r\n  //   setEditLeaveID(id);\r\n  //   handleAlertOpen();\r\n  //   //deleteLeave(id);\r\n  //   //loadLeaves();\r\n  // };\r\n\r\n  const handleDialogOpen = () => {\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n  };\r\n\r\n  // const handleAlertOpen = () => {\r\n  //   setIsAlertOpen(true);\r\n  // };\r\n\r\n  const handleAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleOnDeleteConfirm = () => {\r\n    const id = editLeaveID;\r\n    deleteLeaves(id);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={leaves}\r\n          title=\"Leave Application\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <AddIcon />,\r\n            View: (props) => <VisibilityIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          actions={[\r\n            {\r\n              icon: () => <VisibilityIcon />,\r\n              tooltip: \"Edit Record\",\r\n              onClick: (event, rowData) => {\r\n                update_Leave(rowData);\r\n              },\r\n            },\r\n            // {\r\n            //   icon: \"delete\",\r\n            //   tooltip: \"Delete Record\",\r\n            //   onClick: (event, rowData) => {\r\n            //     delete_Leave(rowData);\r\n            //   },\r\n            // },\r\n            {\r\n              icon: \"add\",\r\n              tooltip: \"Add Record\",\r\n              isFreeAction: true,\r\n              onClick: (event, rowData) => {\r\n                add_Leave(rowData);\r\n              },\r\n            },\r\n          ]}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n        />\r\n        <CustomDialog\r\n          isOpen={isDialogOpen}\r\n          handleClose={handleDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscree={false}\r\n        >\r\n          <LeaveFormAdmin\r\n            formdata={formdata}\r\n            setFormdata={setFormdata}\r\n            handleDialogClose={handleDialogClose}\r\n          />\r\n        </CustomDialog>\r\n\r\n        <AlertDialogBox\r\n          onClose={handleAlertClose}\r\n          onConfirm={handleOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete Expenses\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableStaff.js",["1523","1524","1525","1526","1527"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { TextField, MenuItem } from \"@material-ui/core\";\r\nimport {\r\n  Box,\r\n  Heading,\r\n  Grid,\r\n  GridItem,\r\n  HStack,\r\n  Select,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport LeaveForm from \"./LeaveForm\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\n//import CustomAlertDialog from \"../helpers/CustomAlertDialog\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useLeaves } from \"./leaves/useLeaves\";\r\n//import { useAddLeaves } from \"./leaves/useAddLeaves\";\r\nimport { useDeleteLeaves } from \"./leaves/useDeleteLeaves\";\r\n//import { useUpdateLeaves } from \"./leaves/useUpdateLeaves\";\r\n//import { useSingleEmployee } from \"./employees/useSingleEmployee\";\r\nimport { usePeriods } from \"./periods/usePeriods\";\r\n\r\nconst initial_form = {\r\n  name: \"\",\r\n  to_date: \"\",\r\n  from_date: \"\",\r\n  reason: \"\",\r\n  leavetype: \"Annual Leave\",\r\n  status: \"Pending\",\r\n  no_of_days: 0,\r\n  leave_bal: 0,\r\n};\r\n\r\n// const AlertBox = ({ isOpen, onClose, cancelRef, heading, children }) => {\r\n//   return (\r\n//     <AlertDialog\r\n//       isOpen={isOpen}\r\n//       leastDestructiveRef={cancelRef}\r\n//       onClose={onClose}\r\n//     >\r\n//       <AlertDialogOverlay>\r\n//         <AlertDialogContent>\r\n//           <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n//             {heading}\r\n//           </AlertDialogHeader>\r\n\r\n//           <AlertDialogBody>{children}</AlertDialogBody>\r\n\r\n//           <AlertDialogFooter>\r\n//             <Button ref={cancelRef} onClick={onClose}>\r\n//               Cancel\r\n//             </Button>\r\n//             <Button colorScheme=\"red\" onClick={onClose} ml={3}>\r\n//               Delete\r\n//             </Button>\r\n//           </AlertDialogFooter>\r\n//         </AlertDialogContent>\r\n//       </AlertDialogOverlay>\r\n//     </AlertDialog>\r\n//   );\r\n// };\r\n\r\nexport default function LeaveTableStaff() {\r\n  const classes = useStyles();\r\n  //const { singleemployee, setSingleEmployeeId } = useSingleEmployee();\r\n  const { leaves, setLeaveYr, setLeaveId } = useLeaves();\r\n  const { periods } = usePeriods();\r\n  //const updateLeaves = useUpdateLeaves();\r\n  //const addLeaves = useAddLeaves();\r\n  const deleteLeaves = useDeleteLeaves();\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  //const [alertSuccess, setAlertSuccess] = useState(false);\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const [formdata, setFormdata] = useState(initial_form);\r\n  const [leavestate, setLeaveState] = useState({});\r\n  const [isLoad, setIsLoad] = useState(true);\r\n  //const { editEmployeeID } = useEmployeesContext();\r\n  const {\r\n    editLeaveID,\r\n    setEditLeaveID,\r\n    setIsLeaveEditingOn,\r\n    setIsLeaveEditingOff,\r\n  } = useLeavesContext();\r\n  //const [isOpen, setIsOpen] = React.useState(false);\r\n  //const [isLeaveYear, setLeaveYear] = useState(true);\r\n  //const onClose = () => setIsOpen(false);\r\n  //const cancelRef = React.useRef();\r\n  const [selectleaveyear, setSelectLeaveYear] = useState(\"\");\r\n  const currentyear = new Date().getFullYear();\r\n  //const YEAR = new Date().getFullYear();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"name\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"From Date\",\r\n        field: \"from_date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"To Date\",\r\n        field: \"to_date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Leave Balance\",\r\n        field: \"leave_bal\",\r\n        type: \"numeric\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"No of Days\",\r\n        field: \"no_of_days\",\r\n        type: \"numeric\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Reason\",\r\n        field: \"reason\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Type of Leaves\",\r\n        field: \"leavetype\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Status\",\r\n        field: \"status\",\r\n        editComponent: (props) => (\r\n          <TextField\r\n            //defaultValue={props.value || null}\r\n            onChange={(e) => props.onChange(e.target.value)}\r\n            style={{ width: 100 }}\r\n            value={props.value}\r\n            select\r\n          >\r\n            <MenuItem value=\"Pending\">Pending</MenuItem>\r\n            <MenuItem value=\"Approved\">Approved</MenuItem>\r\n            <MenuItem value=\"Rejected\">Rejected</MenuItem>\r\n            <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n          </TextField>\r\n        ),\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    setSelectLeaveYear(currentyear);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setLeaveId(loginLevel.loginUserId);\r\n    setLeaveYr(selectleaveyear ? selectleaveyear : currentyear);\r\n    setIsLoad(false);\r\n  }, [isLoad]);\r\n\r\n  useEffect(() => {\r\n    if (leaves) {\r\n      Calc_Leave();\r\n    }\r\n  }, [JSON.stringify(leaves)]);\r\n\r\n  const Calc_Leave = () => {\r\n    // console.log(\r\n    //   \"calc leave\",\r\n    //   selectleaveyear,\r\n    //   typeof selectleaveyear,\r\n    //   typeof currentyear,\r\n    //   currentyear,\r\n    //   selectleaveyear === currentyear\r\n    // );\r\n    const { leave_bf, leave_entitled, leave_cd } = loginLevel;\r\n    const leaveTaken = leaves.reduce((acc, item) => {\r\n      if (item.status === \"Approved\" && item.leavetype === \"Annual Leave\") {\r\n        return acc + item.no_of_days;\r\n      } else {\r\n        return acc;\r\n      }\r\n    }, 0);\r\n    const leavePending = leaves.reduce((acc, item) => {\r\n      if (item.status === \"Pending\") {\r\n        return acc + item.no_of_days;\r\n      } else {\r\n        return acc;\r\n      }\r\n    }, 0);\r\n    const leaveOthers = leaves.reduce((acc, item) => {\r\n      if (item.status === \"Approved\" && item.leavetype !== \"Annual Leave\") {\r\n        return acc + item.no_of_days;\r\n      } else {\r\n        return acc;\r\n      }\r\n    }, 0);\r\n    const leaveEntitled = isNaN(leave_entitled) ? 0 : leave_entitled;\r\n    const leaveBf = isNaN(leave_bf) ? 0 : leave_bf;\r\n    const leaveCd = isNaN(leave_cd) ? 0 : leave_cd;\r\n    const leaveTotal = leaveBf + leaveEntitled;\r\n    const bal = leaveBf + leaveEntitled - leaveCd - leaveTaken;\r\n    const rec = {\r\n      leave_bf: leaveBf,\r\n      leave_entitled: leaveEntitled,\r\n      leave_total: leaveTotal,\r\n      leave_cd: leaveCd,\r\n      leave_taken: leaveTaken + leaveCd,\r\n      leave_pending: leavePending,\r\n      leave_bal: bal,\r\n      leave_others: leaveOthers,\r\n    };\r\n    setLeaveState((prev) => (prev = rec));\r\n    //console.log(\"leavestate\", leavestate)\r\n  };\r\n\r\n  const update_Leave = async (data) => {\r\n    const { id } = data;\r\n    setFormdata({ ...data });\r\n    setFormdata({ ...data });\r\n    setEditLeaveID(id);\r\n    setIsLeaveEditingOn();\r\n    handleDialogOpen();\r\n    //history.push(\"/singleleave\");\r\n  };\r\n\r\n  const add_Leave = async (data) => {\r\n    // const { id } = data;\r\n    setEditLeaveID(\"\");\r\n    setFormdata(initial_form);\r\n    setIsLeaveEditingOff();\r\n    handleDialogOpen();\r\n    //history.push(\"/singleleave\");\r\n  };\r\n\r\n  const delete_Leave = (data) => {\r\n    const { id } = data;\r\n\r\n    setEditLeaveID(id);\r\n    setIsAlertOpen(true);\r\n    //handleAlertOpen();\r\n    //deleteLeave(id);\r\n    //loadLeaves();\r\n  };\r\n\r\n  const handleDialogOpen = () => {\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n\r\n    // if (isLeaveEditing) {\r\n    //   loadEmpLeaves(editEmployeeID);\r\n    // }\r\n  };\r\n\r\n  // const handleAlertOpen = () => {\r\n  //   setIsAlertOpen(true);\r\n  // };\r\n\r\n  const handleAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleOnDeleteConfirm = () => {\r\n    const id = editLeaveID;\r\n    deleteLeaves(id);\r\n  };\r\n\r\n  const UpdateLeaveYear = (e) => {\r\n    setSelectLeaveYear((prev) => (prev = parseInt(e.target.value)));\r\n    //Calc_Leave()\r\n    setIsLoad(true);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n      <Box>\r\n        <HStack mb={2}>\r\n          <Box>\r\n            <Heading size=\"md\">YEAR: </Heading>\r\n          </Box>\r\n          <Select\r\n            value={selectleaveyear}\r\n            fontSize={20}\r\n            maxWidth={100}\r\n            onChange={(e) => UpdateLeaveYear(e)}\r\n          >\r\n            {periods.map((row) => {\r\n              return (\r\n                <option key={row.period} value={row.period}>\r\n                  {row.period}\r\n                </option>\r\n              );\r\n            })}\r\n          </Select>\r\n        </HStack>\r\n      </Box>\r\n      <Box>\r\n        <Grid\r\n          p={1}\r\n          h=\"120px\"\r\n          //templateRows=\"repeat(2, 1fr)\"\r\n          templateColumns=\"repeat(14, 1fr)\"\r\n          gap={2}\r\n          border=\"1px solid blue\"\r\n          bg=\"gray.200\"\r\n        >\r\n          <GridItem colSpan={2} align=\"center\">\r\n            <Heading pt={2} size=\"xs\">\r\n              Leave Entitlement\r\n            </Heading>\r\n          </GridItem>\r\n          <GridItem colSpan={2} align=\"center\">\r\n            <Heading pt={2} size=\"xs\">\r\n              Leave Carried Forward\r\n            </Heading>\r\n          </GridItem>\r\n          <GridItem colSpan={2} align=\"center\">\r\n            <Heading pt={2} size=\"xs\">\r\n              Total Leaves Days\r\n            </Heading>\r\n          </GridItem>\r\n          <GridItem colSpan={2} align=\"center\">\r\n            <Heading pt={2} size=\"xs\">\r\n              Leave Taken\r\n            </Heading>\r\n          </GridItem>\r\n          <GridItem colSpan={2} align=\"center\">\r\n            <Heading pt={2} size=\"xs\">\r\n              Leave Pending\r\n            </Heading>\r\n          </GridItem>\r\n          <GridItem colSpan={2} align=\"center\">\r\n            <Heading pt={2} size=\"xs\">\r\n              Balance Leave Days\r\n            </Heading>\r\n          </GridItem>\r\n          <GridItem colSpan={2} align=\"center\">\r\n            <Heading pt={2} size=\"xs\">\r\n              Others\r\n            </Heading>\r\n          </GridItem>\r\n\r\n          <GridItem colSpan={2} bg=\"white\" align=\"center\">\r\n            <Text fontSize=\"20\">\r\n              {selectleaveyear === currentyear ? leavestate.leave_entitled : 0}\r\n            </Text>\r\n          </GridItem>\r\n          <GridItem colSpan={2} bg=\"white\" align=\"center\">\r\n            <Text fontSize=\"20\">\r\n              {selectleaveyear === currentyear ? leavestate.leave_bf : 0}\r\n            </Text>\r\n          </GridItem>\r\n          <GridItem colSpan={2} bg=\"white\" align=\"center\">\r\n            <Text fontSize=\"20\">\r\n              {selectleaveyear === currentyear ? leavestate.leave_total : 0}\r\n            </Text>\r\n          </GridItem>\r\n          <GridItem colSpan={2} bg=\"white\" align=\"center\">\r\n            <Text fontSize=\"20\">{leavestate.leave_taken}</Text>\r\n          </GridItem>\r\n          <GridItem colSpan={2} bg=\"white\" align=\"center\">\r\n            <Text fontSize=\"20\">{leavestate.leave_pending}</Text>\r\n          </GridItem>\r\n          <GridItem colSpan={2} bg=\"white\" align=\"center\">\r\n            <Text fontSize=\"20\">\r\n              {selectleaveyear === currentyear ? leavestate.leave_bal : 0}\r\n            </Text>\r\n          </GridItem>\r\n          <GridItem colSpan={2} bg=\"white\" align=\"center\">\r\n            <Text fontSize=\"20\">\r\n              {selectleaveyear === currentyear ? leavestate.leave_others : 0}\r\n            </Text>\r\n          </GridItem>\r\n        </Grid>\r\n      </Box>\r\n      <Box maxW=\"100%\" pt={5} h={600} overflow=\"scroll\">\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={leaves}\r\n          title=\"Leave Application\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <EditIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          // editable={{\r\n          //   isEditable: (rowData) => rowData.status === \"Pending\",\r\n          //   isDeletable: (rowData) => rowData.status === \"Pending\",\r\n          //   onRowAdd: (newData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         add_Leave(newData);\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          //   onRowUpdate: (newData, oldData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         update_Leave(newData);\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          //   onRowDelete: (oldData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         delete_Leave(oldData);\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          // }}\r\n          actions={[\r\n            (rowData) => ({\r\n              disabled: rowData.status !== \"Pending\",\r\n              icon: \"edit\",\r\n              tooltip: \"Edit Record\",\r\n              onClick: (event, rowData) => {\r\n                update_Leave(rowData);\r\n              },\r\n            }),\r\n            (rowData) => ({\r\n              disabled: rowData.status !== \"Pending\",\r\n              icon: \"delete\",\r\n              tooltip: \"Delete Record\",\r\n              onClick: (event, rowData) => {\r\n                delete_Leave(rowData);\r\n              },\r\n            }),\r\n            {\r\n              icon: \"add\",\r\n              tooltip: \"Add Record\",\r\n              isFreeAction: true,\r\n              onClick: (event, rowData) => {\r\n                add_Leave(rowData);\r\n              },\r\n            },\r\n          ]}\r\n          options={{\r\n            filtering: true,\r\n            paging: false,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <CustomDialog\r\n          isOpen={isDialogOpen}\r\n          handleClose={handleDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <LeaveForm\r\n            formdata={formdata}\r\n            leavestate={leavestate}\r\n            setFormdata={setFormdata}\r\n            handleDialogClose={handleDialogClose}\r\n          />\r\n        </CustomDialog>\r\n\r\n        {/* <CustomAlertDialog\r\n          isOpen={isAlertOpen}\r\n          cancelRef={cancelRef}\r\n          onClose={handleAlertClose}\r\n          onConfirm={handleOnDeleteConfirm}\r\n          title=\"DELETE\"\r\n        >\r\n          <Heading size=\"sm\">Are you sure you want to delete ?</Heading>\r\n        </CustomAlertDialog> */}\r\n        <AlertDialogBox\r\n          onClose={handleAlertClose}\r\n          onConfirm={handleOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete Leave\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n        {/* <AlertBox\r\n          isOpen={isOpen}\r\n          leastDestructiveRef={cancelRef}\r\n          onClose={() => onClose()}\r\n          heading=\"DELETE\"\r\n        >\r\n          <h2>Are you sure you want to delete?</h2>\r\n        </AlertBox> */}\r\n      </Box>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTable.js",["1528"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { TextField, MenuItem } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport CheckCircleOutlineOutlinedIcon from \"@material-ui/icons/CheckCircleOutlineOutlined\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\n\r\nexport default function ExpenseTable() {\r\n  const classes = useStyles();\r\n  //const [isLoad, setIsLoad] = useState(false);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const [expensesdata, setExpensesdata] = useState([]);\r\n  //const { loadEmployees } = useEmployeesContext();\r\n  const {\r\n    expenses,\r\n    editExpenseID,\r\n    //updateExpense,\r\n    //expenses_loading,\r\n    deleteExpense,\r\n    loadExpenses,\r\n    getSingleExpense,\r\n    setEditExpenseID,\r\n    setIsExpenseEditingOn,\r\n    setIsExpenseEditingOff,\r\n    resetSingleExpense,\r\n  } = useExpensesContext();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      { title: \"Name\", field: \"name\", editable: \"never\" },\r\n      {\r\n        title: \"From Date\",\r\n        field: \"from_date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"To Date\",\r\n        field: \"to_date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Description\",\r\n        field: \"description\",\r\n        editable: \"never\",\r\n      },\r\n      { title: \"Amount\", field: \"amount\", type: \"currency\", editable: \"never\" },\r\n      {\r\n        title: \"Status\",\r\n        field: \"status\",\r\n        editComponent: (props) => (\r\n          <TextField\r\n            //defaultValue={props.value || null}\r\n            onChange={(e) => props.onChange(e.target.value)}\r\n            style={{ width: 100 }}\r\n            value={props.value}\r\n            select\r\n          >\r\n            <MenuItem value=\"Pending\">Pending</MenuItem>\r\n            <MenuItem value=\"Approve\">Approve</MenuItem>\r\n            <MenuItem value=\"Reject\">Reject</MenuItem>\r\n            <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n          </TextField>\r\n        ),\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    setExpensesdata(expenses);\r\n    //console.log(expensesdata)\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   loadEmployees();\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   if (expenses) {\r\n  //     setExpensesdata(expenses);\r\n  //     console.log(\"expenses\", expenses, expensesdata)\r\n  //   } else {\r\n  //     setIsLoad(!isLoad);\r\n  //   }\r\n  // }, [isLoad]);\r\n\r\n  const add_Expense = async (data) => {\r\n    // const { id } = data;\r\n    resetSingleExpense();\r\n    setEditExpenseID(\"\");\r\n    setIsExpenseEditingOff();\r\n    handleDialogOpen();\r\n    // history.push(\"/singleexpense\");\r\n  };\r\n\r\n  // const approve_Expense = async (data) => {\r\n  //   console.log(\"approve\", data);\r\n  //   const { id, rec_id, ...fields } = data;\r\n  //   updateExpense({ id, ...fields });\r\n  //   // loadExpenses();\r\n  // };\r\n\r\n  const update_Expense = async (data) => {\r\n    const { id } = data;\r\n    setEditExpenseID(id);\r\n    setIsExpenseEditingOn();\r\n    getSingleExpense(id);\r\n    handleDialogOpen();\r\n    // history.push(\"/singleexpense\");\r\n  };\r\n\r\n  const delete_Expense = (data) => {\r\n    const { id } = data;\r\n    setEditExpenseID(id);\r\n    handleAlertOpen();\r\n\r\n    // deleteExpense(id);\r\n    // loadExpenses();\r\n  };\r\n\r\n  const handleDialogOpen = () => {\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n    loadExpenses();\r\n  };\r\n\r\n  const handleAlertOpen = () => {\r\n    setIsAlertOpen(true);\r\n  };\r\n\r\n  const handleAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleOnDeleteConfirm = () => {\r\n    const id = editExpenseID;\r\n    deleteExpense(id);\r\n    loadExpenses();\r\n  };\r\n\r\n  // if (expenses_loading) {\r\n  //   return (\r\n  //     <div>\r\n  //       <h2>Loading...Expenses</h2>\r\n  //     </div>\r\n  //   );\r\n  // }\r\n  if (!expensesdata) {\r\n    return (\r\n      <div>\r\n        <h2>Loading...Expenses</h2>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={expensesdata}\r\n          title=\"Expenses Claims Application\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <CheckCircleOutlineOutlinedIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          editable={{\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataUpdate = [...expensesdata];\r\n                  const index = oldData.tableData.id;\r\n                  dataUpdate[index] = newData;\r\n                  setExpensesdata([...dataUpdate]);\r\n                  //approve_Expense(newData);\r\n\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          actions={[\r\n            {\r\n              icon: \"edit\",\r\n              tooltip: \"Edit Record\",\r\n              onClick: (event, rowData) => {\r\n                update_Expense(rowData);\r\n              },\r\n            },\r\n            {\r\n              icon: \"delete\",\r\n              tooltip: \"Delete Record\",\r\n              onClick: (event, rowData) => {\r\n                delete_Expense(rowData);\r\n              },\r\n            },\r\n            {\r\n              icon: \"add\",\r\n              tooltip: \"Add Record\",\r\n              isFreeAction: true,\r\n              onClick: (event, rowData) => {\r\n                add_Expense(rowData);\r\n              },\r\n            },\r\n          ]}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n        />\r\n        <CustomDialog\r\n          isOpen={isDialogOpen}\r\n          handleClose={handleDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscree={false}\r\n          isFullwidth={false}\r\n        >\r\n          <ExpenseForm handleDialogClose={handleDialogClose} />\r\n        </CustomDialog>\r\n\r\n        <AlertDialogBox\r\n          onClose={handleAlertClose}\r\n          onConfirm={handleOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete Expenses\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\HocTable.js",["1529","1530","1531","1532","1533","1534","1535","1536","1537","1538","1539","1540","1541","1542","1543","1544","1545","1546","1547","1548","1549","1550","1551"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { format, getYear, getMonth } from \"date-fns\";\r\nimport * as moment from \"moment\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Divider,\r\n  //Grid,\r\n  Heading,\r\n  HStack,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  //ModalHeader,\r\n  //ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Select,\r\n  SimpleGrid,\r\n  Tabs,\r\n  TabList,\r\n  TabPanels,\r\n  Tab,\r\n  TabPanel,\r\n  //Text,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport CheckCircleOutlineOutlinedIcon from \"@material-ui/icons/CheckCircleOutlineOutlined\";\r\n//import { useCustomToast } from \"../helpers/useCustomToast\";\r\n//import { useExpensesContext } from \"../context/expenses_context\";\r\nimport HocForm from \"./HocForm\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\nimport { useHoc } from \"./hoc/useHoc\";\r\n//import { useAddHoc } from \"./hoc/useAddHoc\";\r\nimport { useDeleteHoc } from \"./hoc/useDeleteHoc\";\r\n//import { useUpdateHoc } from \"./hoc/useUpdateHoc\";\r\n\r\nconst initial_form = {\r\n  findings: \"\",\r\n  category: \"\",\r\n  what: \"\",\r\n  what_details: \"\",\r\n  why: \"\",\r\n  why_details: \"\",\r\n  discussion: \"No\",\r\n  action: \"\",\r\n  isfollowup: \"No\",\r\n  isworkrelated: \"No\",\r\n  raisedby: \"\",\r\n  email: \"\",\r\n  raisedon: null,\r\n  company: \"APPSMITH SUTERA\",\r\n  location: \" \",\r\n};\r\n\r\nexport default function HocTable({ year, month }) {\r\n  const classes = useStyles();\r\n  //const toast = useCustomToast();\r\n  //const [isLoad, setIsLoad] = useState(false);\r\n  const { hoc, setHocId, setYearId } = useHoc();\r\n  //const updateHoc = useUpdateHoc();\r\n  //const addHoc = useAddHoc();\r\n  const deleteHoc = useDeleteHoc();\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  //const [hocdata, setHocdata] = useState([]);\r\n  //const [alertSuccess, setAlertSuccess] = useState(false);\r\n  const [formdata, setFormdata] = useState(initial_form);\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const [isEditId, setIsEditId] = useState(\"\");\r\n\r\n  //console.log(\"hoctable\", year, month);\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Findings\",\r\n        field: \"findings\",\r\n        editable: \"never\",\r\n        cellStyle: {\r\n          minWidth: 200,\r\n          maxWidth: 200,\r\n        },\r\n      },\r\n      {\r\n        title: \"Risks\",\r\n        field: \"risks\",\r\n        editable: \"never\",\r\n        cellStyle: {\r\n          minWidth: 150,\r\n          maxWidth: 150,\r\n        },\r\n      },\r\n      {\r\n        title: \"Type/Category\",\r\n        field: \"category\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"What\",\r\n        field: \"what\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"What Details\",\r\n        field: \"what_details\",\r\n        editable: \"never\",\r\n        cellStyle: {\r\n          minWidth: 150,\r\n          maxWidth: 150,\r\n        },\r\n      },\r\n      {\r\n        title: \"Why\",\r\n        field: \"why\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Why Details\",\r\n        field: \"why_details\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Discussion\",\r\n        field: \"discussion\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Action\",\r\n        field: \"action\",\r\n        editable: \"never\",\r\n        cellStyle: {\r\n          minWidth: 200,\r\n          maxWidth: 200,\r\n        },\r\n      },\r\n      {\r\n        title: \"Follow-up required?\",\r\n        field: \"isfollowup\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Work Related?\",\r\n        field: \"isworkrelated\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Raised By\",\r\n        field: \"raisedby\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Raised On\",\r\n        field: \"raisedon\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Company\",\r\n        field: \"company\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Location\",\r\n        field: \"location\",\r\n        editable: \"never\",\r\n      },\r\n      // {\r\n      //   title: \"Department\",\r\n      //   field: \"department\",\r\n      //   editable: \"never\",\r\n      // },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    //console.log(\"loginid\", loginLevel.loginUserId)\r\n    setHocId(loginLevel.loginUserId);\r\n    setYearId(year);\r\n  }, []);\r\n\r\n  const add_Hoc = async (data) => {\r\n    //const { id } = data;\r\n    let today = format(new Date(), \"yyyy-MM-dd\");\r\n    //console.log(\"today\", today);\r\n    setIsEditId((prev) => (prev = \"\"));\r\n    setFormdata(\r\n      (prev) =>\r\n        (prev = {\r\n          ...data,\r\n          raisedby: loginLevel.loginUser,\r\n          email: loginLevel.loginEmail,\r\n          company: \"APPSMITHS SUTERA\",\r\n          raisedon: today,\r\n        })\r\n    );\r\n    //setFormdata(initial_form);\r\n    //setIsHocEditingOff();\r\n    handleDialogOpen();\r\n    // history.push(\"/singleexpense\");\r\n  };\r\n\r\n  const update_Hoc = async (data) => {\r\n    console.log(\"hoc\", data);\r\n    const { id } = data;\r\n    setIsEditId((prev) => (prev = id));\r\n    setFormdata((prev) => (prev = { ...data }));\r\n    //setFormdata({ ...data });\r\n    //setHocId(prev => prev = id)\r\n    //setEditHocID(id);\r\n    //setIsExpenseEditingOn();\r\n    handleDialogOpen();\r\n\r\n    // history.push(\"/singleexpense\");\r\n  };\r\n\r\n  const delete_Hoc = (data) => {\r\n    const { id } = data;\r\n    setIsEditId((prev) => (prev = id));\r\n    handleAlertOpen();\r\n\r\n    // deleteExpense(id);\r\n    // loadExpenses();\r\n  };\r\n\r\n  const handleDialogOpen = () => {\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n  };\r\n\r\n  const handleAlertOpen = () => {\r\n    setIsAlertOpen(true);\r\n  };\r\n\r\n  const handleAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleOnDeleteConfirm = () => {\r\n    //const id = isEditId;\r\n    deleteHoc(isEditId);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={hoc\r\n            .filter(\r\n              (r) =>\r\n                // getYear(new Date(r.raisedon)) === year &&\r\n                getMonth(new Date(r.raisedon)) === month\r\n            )\r\n            .sort((a, b) =>\r\n              a.raisedon < b.raisedon ? 1 : b.raisedon < a.raisedon ? -1 : 0\r\n            )}\r\n          title=\"HOC Tables\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <CheckCircleOutlineOutlinedIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          // editable={{\r\n          //   onRowUpdate: (newData, oldData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         const dataUpdate = [...expensesdata];\r\n          //         const index = oldData.tableData.id;\r\n          //         dataUpdate[index] = newData;\r\n          //         setExpensesdata([...dataUpdate]);\r\n          //         //approve_Expense(newData);\r\n\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          // }}\r\n          actions={[\r\n            (rowData) => ({\r\n              icon: \"edit\",\r\n              tooltip: \"Edit Record\",\r\n              onClick: (event, rowData) => {\r\n                update_Hoc(rowData);\r\n              },\r\n            }),\r\n            (rowData) => ({\r\n              icon: \"delete\",\r\n              tooltip: \"Delete Record\",\r\n              onClick: (event, rowData) => {\r\n                delete_Hoc(rowData);\r\n              },\r\n            }),\r\n            {\r\n              icon: \"add\",\r\n              tooltip: \"Add Record\",\r\n              isFreeAction: true,\r\n              onClick: (event, rowData) => {\r\n                add_Hoc(rowData);\r\n              },\r\n            },\r\n          ]}\r\n          options={{\r\n            filtering: true,\r\n            pageSize: 10,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <CustomDialog\r\n          isOpen={isDialogOpen}\r\n          handleClose={handleDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n          isEditId={isEditId}\r\n        >\r\n          <HocForm\r\n            formdata={formdata}\r\n            setFormdata={setFormdata}\r\n            handleDialogClose={handleDialogClose}\r\n            isNew={false}\r\n          />\r\n        </CustomDialog>\r\n\r\n        <AlertDialogBox\r\n          onClose={handleAlertClose}\r\n          onConfirm={handleOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete HOC\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\HocTableStaffView.js",["1552","1553","1554","1555","1556","1557","1558","1559","1560","1561"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Divider,\r\n  //Grid,\r\n  Heading,\r\n  HStack,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  //ModalHeader,\r\n  //ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Select,\r\n  SimpleGrid,\r\n  Tabs,\r\n  TabList,\r\n  TabPanels,\r\n  Tab,\r\n  TabPanel,\r\n  //Text,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport HocTable from \"./HocTable\";\r\nimport { usePeriods } from \"./periods/usePeriods\";\r\n\r\nconst HocTableStaffView = () => {\r\n  const currentyear = new Date().getFullYear();\r\n  const currentmonth = new Date().getMonth();\r\n  const { periods} = usePeriods()\r\n  const [selecthocyear, setSelectHocYear] = useState(\"\");\r\n  \r\n\r\n  useEffect(() => {\r\n    setSelectHocYear(currentyear);\r\n  }, []);\r\n\r\n  return (\r\n    <Box padding={0}>\r\n      <HStack>\r\n        <Box>\r\n          <Heading as=\"h2\" size=\"md\">\r\n            HOC Table\r\n          </Heading>\r\n        </Box>\r\n        <Box alignSelf=\"flex-end\">\r\n          <HStack>\r\n            <Select\r\n              value={selecthocyear}\r\n              fontSize={20}\r\n              onChange={(e) => setSelectHocYear(e.target.value)}\r\n            >\r\n              {periods.map((row) => {\r\n                return (\r\n                  <option key={row.period} value={row.period}>\r\n                    {row.period}\r\n                  </option>\r\n                );\r\n              })}\r\n            </Select>\r\n            {/* <Box size=\"xl\" py={2}>\r\n                <Button\r\n                  colorScheme=\"teal\"\r\n                  variant=\"solid\"\r\n                  onClick={() => handleExportHoc2Excel()}\r\n                >\r\n                  Export To Excel\r\n                </Button>\r\n              </Box> */}\r\n          </HStack>\r\n        </Box>\r\n      </HStack>\r\n      <Divider />\r\n      <Box\r\n        maxW=\"full\"\r\n        padding=\"4\"\r\n        width=\"100%\"\r\n        height=\"auto\"\r\n        borderColor=\"blue.500\"\r\n        borderWidth=\"1px\"\r\n        borderRadius=\"lg\"\r\n        overflow=\"scroll\"\r\n      >\r\n        <Tabs defaultIndex={currentmonth} isLazy>\r\n          <TabList>\r\n            <Tab>January</Tab>\r\n            <Tab>February</Tab>\r\n            <Tab>March</Tab>\r\n            <Tab>April</Tab>\r\n            <Tab>May</Tab>\r\n            <Tab>June</Tab>\r\n            <Tab>July</Tab>\r\n            <Tab>August</Tab>\r\n            <Tab>September</Tab>\r\n            <Tab>October</Tab>\r\n            <Tab>November</Tab>\r\n            <Tab>December</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <HocTable\r\n                year={selecthocyear ? selecthocyear : currentyear}\r\n                month={0}\r\n              />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <HocTable\r\n                year={selecthocyear ? selecthocyear : currentyear}\r\n                month={1}\r\n              />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <HocTable\r\n                year={selecthocyear ? selecthocyear : currentyear}\r\n                month={2}\r\n              />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <HocTable\r\n                year={selecthocyear ? selecthocyear : currentyear}\r\n                month={3}\r\n              />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <HocTable\r\n                year={selecthocyear ? selecthocyear : currentyear}\r\n                month={4}\r\n              />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <HocTable\r\n                year={selecthocyear ? selecthocyear : currentyear}\r\n                month={5}\r\n              />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <HocTable\r\n                year={selecthocyear ? selecthocyear : currentyear}\r\n                month={6}\r\n              />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <HocTable\r\n                year={selecthocyear ? selecthocyear : currentyear}\r\n                month={7}\r\n              />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <HocTable\r\n                year={selecthocyear ? selecthocyear : currentyear}\r\n                month={8}\r\n              />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <HocTable\r\n                year={selecthocyear ? selecthocyear : currentyear}\r\n                month={9}\r\n              />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <HocTable\r\n                year={selecthocyear ? selecthocyear : currentyear}\r\n                month={10}\r\n              />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <HocTable\r\n                year={selecthocyear ? selecthocyear : currentyear}\r\n                month={11}\r\n              />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default HocTableStaffView;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeDirector.js",["1562","1563","1564","1565","1566"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\n//import dayjs from \"dayjs\";\r\nimport {\r\n  Box,\r\n  Container,\r\n  Divider,\r\n  //Flex,\r\n  //Grid,\r\n  Heading,\r\n  HStack,\r\n  SimpleGrid,\r\n  Select,\r\n  //Stack,\r\n  Tabs,\r\n  TabList,\r\n  TabPanels,\r\n  Tab,\r\n  TabPanel,\r\n} from \"@chakra-ui/react\";\r\n//import CardLayout from \"../helpers/CardLayout\";\r\n//import CardLayout2 from \"../helpers/CardLayout2\";\r\n//import CardLayout4 from \"../helpers/CardLayout4\";\r\n//import Copyright from \"./Copyright\";\r\n//import { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { useRecoilState } from \"recoil\";\r\n//import { loginLevelState } from \"./data/atomdata\";\r\n//import BarChart from \"../helpers/BarChart\";\r\n//import BarChartStack from \"../helpers/BarChartStack\";\r\n\r\n//import EmployeeTableLeaveView from \"./EmployeeTableLeaveView\";\r\n//import ExpensesTableViewSummary from \"./ExpenseTableViewSummary\";\r\n//import ExpenseSummaryTableView from \"./ExpensesSummaryTableView\";\r\n//import LeavesTableViewSummary from \"./LeavesTableViewSummary\";\r\n//import HocTableViewSummary from \"./HocTableViewSummary\";\r\n//import SummaryTableView from \"../helpers/SummaryTableView\";\r\n//import DailyAllowanceTableViewSummary from \"./DailyAllowancesTableViewSummary\";\r\n//import PayslipTableViewSummary from \"./PayslipTableViewSummary\";\r\n//import PayslipSummaryTableView from \"./PayslipSummaryTableView\";\r\n//import LeavesTableApproval from \"./LeaveTableApproval\";\r\n//import { useExpensesPeriod } from \"./expenses/useExpensesPeriod\";\r\nimport { usePeriods } from \"./periods/usePeriods\";\r\nconst LeaveTableApproval = React.lazy(() => import(\"./LeaveTableApproval\"));\r\nconst EmployeeTableLeaveView = React.lazy(() =>\r\n  import(\"./EmployeeTableLeaveView\")\r\n);\r\nconst ExpenseTableViewSummary = React.lazy(() =>\r\n  import(\"./ExpenseTableViewSummary\")\r\n);\r\nconst PayslipTableViewSummary = React.lazy(() =>\r\n  import(\"./PayslipTableViewSummary\")\r\n);\r\nconst DailyAllowancesTableViewSummary = React.lazy(() =>\r\n  import(\"./DailyAllowancesTableViewSummary\")\r\n);\r\nconst HocTableViewSummary = React.lazy(() => import(\"./HocTableViewSummary\"));\r\nconst LeavesTableViewSummary = React.lazy(() =>\r\n  import(\"./LeavesTableViewSummary\")\r\n);\r\nconst Export2ExcelDialog = React.lazy(() => import(\"./Export2ExcelDialog\"));\r\n\r\nconst drawerWidth = 240;\r\n\r\n//const FILTERSTRING = \"Pending\";\r\n\r\nconst initial_expdata = [\r\n  {\r\n    jan: 0,\r\n    feb: 0,\r\n    mar: 0,\r\n    apr: 0,\r\n    may: 0,\r\n    jun: 0,\r\n    jul: 0,\r\n    aug: 0,\r\n    sep: 0,\r\n    oct: 0,\r\n    nov: 0,\r\n    dec: 0,\r\n  },\r\n];\r\n\r\nconst HomeManager = () => {\r\n  const classes = useStyles();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  //const { expensesperiod, setExpPeriodId } = useExpensesPeriod();\r\n  //const [expdata, setExpData] = useState(initial_expdata);\r\n   const [selectleaveyear, setSelectLeaveYear] = useState(\"\");\r\n   const [selectexpenseyear, setSelectExpenseYear] = useState(\"\");\r\n   const [selectsiteallowsyear, setSelectSiteAllowsYear] = useState(\"\");\r\n   const [selectpayrollyear, setSelectPayrollYear] = useState(\"\");\r\n   const [selecthocyear, setSelectHocYear] = useState(\"\");\r\n  const currentyear = new Date().getFullYear();\r\n  const currentmonth = new Date().getMonth();\r\n  const { periods} = usePeriods()\r\n\r\n  // const Build_ExpData = () => {\r\n  //   const currentmonth = new Date().getMonth();\r\n\r\n  //   for (var i = 1; i <= currentmonth; i++) {\r\n  //     expdata[i] = i;\r\n  //   }\r\n  //   console.log(\"date\", currentyear, currentmonth, expdata);\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   Build_ExpData();\r\n  // }, []);\r\n\r\n   useEffect(() => {\r\n     setSelectLeaveYear(currentyear);\r\n     setSelectExpenseYear(currentyear);\r\n     setSelectSiteAllowsYear(currentyear);\r\n     setSelectPayrollYear(currentyear);\r\n     setSelectHocYear(currentyear);\r\n   }, []);\r\n  \r\n  return (\r\n    // <div>\r\n    //   <div className={classes.appBarSpacer} />\r\n    //   <div style={{ paddingLeft: 50 }}>\r\n    //     <h2>Welcome {loginLevel.loginUser}!</h2>\r\n    //     <h3>Dashboard</h3>\r\n    //   </div>\r\n    <Container maxW=\"full\" mt=\"100\">\r\n      <Box\r\n        //minW=\"100%\"\r\n        padding=\"4\"\r\n        width=\"full\"\r\n        height=\"800\"\r\n        borderColor=\"blue.500\"\r\n        borderWidth=\"1px\"\r\n        borderRadius=\"lg\"\r\n        //overflow=\"scroll\"\r\n      >\r\n        <Tabs>\r\n          <TabList>\r\n            <Tab>Employees</Tab>\r\n            <Tab>Leaves</Tab>\r\n            <Tab>Expenses</Tab>\r\n            <Tab>Site Allowances</Tab>\r\n            <Tab>Payroll</Tab>\r\n            <Tab>HOC History</Tab>\r\n            <Tab>Leaves Approval</Tab>\r\n          </TabList>\r\n\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"full\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid>\r\n                  <Box>\r\n                    <Heading as=\"h2\" size=\"lg\">\r\n                      Employees\r\n                    </Heading>\r\n                  </Box>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs isLazy>\r\n                      {/* <TabList>\r\n                        <Tab>Details</Tab>\r\n                      </TabList> */}\r\n                      <TabPanels>\r\n                        <TabPanel>\r\n                          <EmployeeTableLeaveView />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"100%\"\r\n                padding=\"4\"\r\n                width=\"full\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid w=\"168vh\">\r\n                  <HStack>\r\n                    <Box>\r\n                      <Heading as=\"h2\" size=\"lg\">\r\n                        Leaves\r\n                      </Heading>\r\n                    </Box>\r\n                    <Box alignSelf=\"flex-end\">\r\n                      <HStack>\r\n                        <Select\r\n                          value={selectleaveyear}\r\n                          fontSize={20}\r\n                          onChange={(e) => setSelectLeaveYear(e.target.value)}\r\n                        >\r\n                          {periods.map((row) => {\r\n                            return (\r\n                              <option key={row.period} value={row.period}>\r\n                                {row.period}\r\n                              </option>\r\n                            );\r\n                          })}\r\n                        </Select>\r\n                        {/* <Box size=\"xl\" py={2}>\r\n                          <Text fontSize=\"lg\">\r\n                            <ExportLeave2Excel\r\n                              filename=\"leave\"\r\n                              dataset={dataset}\r\n                              title=\"Leave\"\r\n                            />\r\n                          </Text>\r\n                        </Box> */}\r\n                      </HStack>\r\n                    </Box>\r\n                  </HStack>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs defaultIndex={currentmonth} isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                          <Tab>Summary</Tab> */}\r\n                        <Tab>January</Tab>\r\n                        <Tab>February</Tab>\r\n                        <Tab>March</Tab>\r\n                        <Tab>April</Tab>\r\n                        <Tab>May</Tab>\r\n                        <Tab>June</Tab>\r\n                        <Tab>July</Tab>\r\n                        <Tab>August</Tab>\r\n                        <Tab>September</Tab>\r\n                        <Tab>October</Tab>\r\n                        <Tab>November</Tab>\r\n                        <Tab>December</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Expenses for the Month\"\r\n                    barchartdata={expchartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={1}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={2}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={3}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={4}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={5}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={6}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={7}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={8}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={9}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={10}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={11}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={12}\r\n                          />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"x3\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid w=\"168vh\">\r\n                  <HStack>\r\n                    <Box>\r\n                      <Heading as=\"h2\" size=\"lg\">\r\n                        Expenses Claims\r\n                      </Heading>\r\n                    </Box>\r\n                    <Box alignSelf=\"flex-end\">\r\n                      <HStack>\r\n                        <Select\r\n                          value={selectexpenseyear}\r\n                          fontSize={20}\r\n                          onChange={(e) => setSelectExpenseYear(e.target.value)}\r\n                        >\r\n                          {periods.map((row) => {\r\n                            return (\r\n                              <option key={row.period} value={row.period}>\r\n                                {row.period}\r\n                              </option>\r\n                            );\r\n                          })}\r\n                        </Select>\r\n                        {/* <Box size=\"xl\" py={2}>\r\n                          <Text fontSize=\"lg\">\r\n                            <ExportLeave2Excel\r\n                              filename=\"leave\"\r\n                              dataset={dataset}\r\n                              title=\"Leave\"\r\n                            />\r\n                          </Text>\r\n                        </Box> */}\r\n                      </HStack>\r\n                    </Box>\r\n                  </HStack>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs defaultIndex={currentmonth} isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                          <Tab>Summary</Tab> */}\r\n                        <Tab>January</Tab>\r\n                        <Tab>February</Tab>\r\n                        <Tab>March</Tab>\r\n                        <Tab>April</Tab>\r\n                        <Tab>May</Tab>\r\n                        <Tab>June</Tab>\r\n                        <Tab>July</Tab>\r\n                        <Tab>August</Tab>\r\n                        <Tab>September</Tab>\r\n                        <Tab>October</Tab>\r\n                        <Tab>November</Tab>\r\n                        <Tab>December</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Expenses for the Month\"\r\n                    barchartdata={expchartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <ExpenseSummaryTableView year={currentyear} />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={1}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={2}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={3}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={4}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={5}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={6}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={7}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={8}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={9}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={10}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={11}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={12}\r\n                          />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"x3\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid w=\"168vh\">\r\n                  <HStack>\r\n                    <Box>\r\n                      <Heading as=\"h2\" size=\"lg\">\r\n                        Site Allowances\r\n                      </Heading>\r\n                    </Box>\r\n                    <Box alignSelf=\"flex-end\">\r\n                      <HStack>\r\n                        <Select\r\n                          value={selectsiteallowsyear}\r\n                          fontSize={20}\r\n                          onChange={(e) =>\r\n                            setSelectSiteAllowsYear(e.target.value)\r\n                          }\r\n                        >\r\n                          {periods.map((row) => {\r\n                            return (\r\n                              <option key={row.period} value={row.period}>\r\n                                {row.period}\r\n                              </option>\r\n                            );\r\n                          })}\r\n                        </Select>\r\n                        {/* <Box size=\"xl\" py={2}>\r\n                          <Text fontSize=\"lg\">\r\n                            <ExportLeave2Excel\r\n                              filename=\"leave\"\r\n                              dataset={dataset}\r\n                              title=\"Leave\"\r\n                            />\r\n                          </Text>\r\n                        </Box> */}\r\n                      </HStack>\r\n                    </Box>\r\n                  </HStack>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs defaultIndex={currentmonth} isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                <Tab>Summary</Tab> */}\r\n                        <Tab>January</Tab>\r\n                        <Tab>February</Tab>\r\n                        <Tab>March</Tab>\r\n                        <Tab>April</Tab>\r\n                        <Tab>May</Tab>\r\n                        <Tab>June</Tab>\r\n                        <Tab>July</Tab>\r\n                        <Tab>August</Tab>\r\n                        <Tab>September</Tab>\r\n                        <Tab>October</Tab>\r\n                        <Tab>November</Tab>\r\n                        <Tab>December</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Site Allowances for the Month\"\r\n                    barchartdata={paychartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"01\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"02\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"03\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"04\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"05\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"06\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"07\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"08\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"09\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"10\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"11\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"12\"\r\n                          />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"x3\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid>\r\n                  <Box>\r\n                    <Heading as=\"h2\" size=\"lg\">\r\n                      Payroll\r\n                    </Heading>\r\n                  </Box>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                <Tab>Summary</Tab> */}\r\n                        <Tab>Approved</Tab>\r\n                        <Tab>Verified</Tab>\r\n                        <Tab>Pending</Tab>\r\n                        <Tab>Rejected</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Payroll for the Month\"\r\n                    barchartdata={paychartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <PayslipSummaryTableView year={currentyear} status=\"Approved\" />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <PayslipTableViewSummary status=\"Approved\" />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <PayslipTableViewSummary status=\"Verified\" />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <PayslipTableViewSummary status=\"Pending\" />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <PayslipTableViewSummary status=\"Rejected\" />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"100%\"\r\n                padding=\"4\"\r\n                width=\"full\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid w=\"168vh\">\r\n                  <HStack>\r\n                    <Box>\r\n                      <Heading as=\"h2\" size=\"lg\">\r\n                        HOC History\r\n                      </Heading>\r\n                    </Box>\r\n                    <Box alignSelf=\"flex-end\">\r\n                      <HStack>\r\n                        <Select\r\n                          value={selecthocyear}\r\n                          fontSize={20}\r\n                          onChange={(e) => setSelectHocYear(e.target.value)}\r\n                        >\r\n                          {periods.map((row) => {\r\n                            return (\r\n                              <option key={row.period} value={row.period}>\r\n                                {row.period}\r\n                              </option>\r\n                            );\r\n                          })}\r\n                        </Select>\r\n                        {/* <Box size=\"xl\" py={2}>\r\n                          <Text fontSize=\"lg\">\r\n                            <ExportLeave2Excel\r\n                              filename=\"leave\"\r\n                              dataset={dataset}\r\n                              title=\"Leave\"\r\n                            />\r\n                          </Text>\r\n                        </Box> */}\r\n                      </HStack>\r\n                    </Box>\r\n                  </HStack>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs defaultIndex={currentmonth} isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                          <Tab>Summary</Tab> */}\r\n                        <Tab>January</Tab>\r\n                        <Tab>February</Tab>\r\n                        <Tab>March</Tab>\r\n                        <Tab>April</Tab>\r\n                        <Tab>May</Tab>\r\n                        <Tab>June</Tab>\r\n                        <Tab>July</Tab>\r\n                        <Tab>August</Tab>\r\n                        <Tab>September</Tab>\r\n                        <Tab>October</Tab>\r\n                        <Tab>November</Tab>\r\n                        <Tab>December</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Expenses for the Month\"\r\n                    barchartdata={expchartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={1}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={2}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={3}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={4}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={5}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={6}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={7}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={8}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={9}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={10}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={11}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={12}\r\n                          />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"full\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <LeaveTableApproval />\r\n              </Box>\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n    // </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default HomeManager;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeStaff.js",["1567","1568"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\n//import { useHistory } from \"react-router-dom\";\r\nimport { Box, Stack } from \"@chakra-ui/react\";\r\nimport { Container } from \"@material-ui/core\";\r\n//import CardLayout from \"../helpers/CardLayout\";\r\nimport CardLayout2 from \"../helpers/CardLayout2\";\r\n//import CardLayout3 from \"../helpers/CardLayout3\";\r\nimport Copyright from \"./Copyright\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\n\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\n//import { useLeavesContext } from \"../context/leaves_context\";\r\n//import { useExpensesContext } from \"../context/expenses_context\";\r\n//import { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\nimport LeaveTableViewStaff from \"./LeaveTableViewStaff\";\r\nimport TrainingsTableViewStaff from \"./TrainingsTableViewStaff\";\r\nimport LeaveTableAdmin from \"./LeaveTableManager\";\r\nimport ExpenseTableViewStaff from \"./ExpenseTableViewStaff\";\r\nimport ExpenseTableAdmin from \"./ExpenseTableAdmin\";\r\n//import PayslipTableViewStaff from \"./PayslipTableViewStaff\";\r\nimport PayslipTableAdmin from \"./PayslipTableAdmin\";\r\n//import DailyAllowancesTableViewStaff from \"./DailyAllowancesTableViewStaff\";\r\nimport DailyAllowancesTableAdmin from \"./DailyAllowancesTableAdmin\";\r\n//import OnLeavesViewStaff from \"./OnLeavesViewStaff\";\r\nimport WPExpiryViewStaff from \"./WPExpiryViewStaff\";\r\n//import { useEmployees } from \"./employees/useEmployees\";\r\n//import { useSingleEmployee } from \"./employees/useSingleEmployee\";\r\nimport { useLeavesPeriod } from \"./leaves/useLeavesPeriod\";\r\n\r\nconst drawerWidth = 240;\r\nconst YEAR = new Date().getFullYear();\r\nconst FILTERSTRING = \"Pending\";\r\n\r\nconst HomeStaff = () => {\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const [loginLevel] = useRecoilState(loginLevelState);\r\n  //const { employees, setFilter, setEmployeeId } = useEmployees();\r\n  //const { singleemployee, setSingleEmployeeId } = useSingleEmployee();\r\n  const [leavesdata, setLeavesdata] = useState([]);\r\n  const { leavesperiod, setLeavePeriodYrId } = useLeavesPeriod();\r\n  const [isLeaveDialogOpen, setIsLeaveDialogOpen] = useState(false);\r\n  const [expensesdata, setExpensesdata] = useState([]);\r\n  const [isExpenseDialogOpen, setIsExpenseDialogOpen] = useState(false);\r\n  const [payslipsdata, setPayslipsdata] = useState([]);\r\n  const [isPayslipDialogOpen, setIsPayslipDialogOpen] = useState(false);\r\n  const [dailyallowancesdata, setDailyAllowancesdata] = useState([]);\r\n  const [isDailyAllowancesDialogOpen, setIsDailyAllowancesDialogOpen] =\r\n    useState(false);\r\n\r\n  //const { leaves } = useLeavesContext();\r\n  //const { expenses } = useExpensesContext();\r\n  //const { payslips } = usePayslipsContext();\r\n  const { loadPendingDailyAllowances } = useDailyAllowancesContext();\r\n  const { setEditEmployeeID, setIsEditingOn } = useEmployeesContext();\r\n\r\n  // const handleLeaveDialogOpen = () => {\r\n  //   setLeavesdata([]);\r\n  //   setLeavesdata([...leaves]);\r\n  //   setIsLeaveDialogOpen(true);\r\n  // };\r\n\r\n  const handleLeaveDialogClose = () => {\r\n    setIsLeaveDialogOpen(false);\r\n    //loadPendingLeaves(FILTERSTRING);\r\n  };\r\n\r\n  // const handleExpenseDialogOpen = () => {\r\n  //   setExpensesdata([]);\r\n  //   setExpensesdata([...expenses]);\r\n  //   setIsExpenseDialogOpen(true);\r\n  // };\r\n\r\n  const handleExpenseDialogClose = () => {\r\n    setIsExpenseDialogOpen(false);\r\n    //loadPendingExpenses(FILTERSTRING);\r\n  };\r\n\r\n  // const handlePayslipDialogOpen = () => {\r\n  //   setPayslipsdata([]);\r\n  //   setPayslipsdata([...payslips]);\r\n  //   setIsPayslipDialogOpen(true);\r\n  // };\r\n\r\n  const handlePayslipDialogClose = () => {\r\n    setIsPayslipDialogOpen(false);\r\n    //loadPendingPayslips(FILTERSTRING);\r\n  };\r\n\r\n  // const handleDailyAllowancesDialogOpen = () => {\r\n  //   setDailyAllowancesdata([]);\r\n  //   setDailyAllowancesdata([...dailyallowances]);\r\n  //   setIsDailyAllowancesDialogOpen(true);\r\n  // };\r\n\r\n  const handleDailyAllowancesDialogClose = () => {\r\n    setIsDailyAllowancesDialogOpen(false);\r\n    loadPendingDailyAllowances(FILTERSTRING);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setEditEmployeeID(loginLevel.loginUserId);\r\n    setIsEditingOn();\r\n    setLeavePeriodYrId(YEAR);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.appBarSpacer} />\r\n      <div style={{ paddingLeft: 50 }}>\r\n        {/* <h2>Welcome Staff {loginLevel.loginUser}!</h2>\r\n        <h3>Dashboard</h3> */}\r\n      </div>\r\n      <Container maxWidth=\"xl\" className={classes.container}>\r\n        <Stack direction=\"column\">\r\n          <Box>\r\n            <CardLayout2>\r\n              <LeaveTableViewStaff />\r\n            </CardLayout2>\r\n          </Box>\r\n          <Box>\r\n            <CardLayout2>\r\n              <ExpenseTableViewStaff />\r\n            </CardLayout2>\r\n          </Box>\r\n          <Box>\r\n            <CardLayout2>\r\n              <TrainingsTableViewStaff />\r\n            </CardLayout2>\r\n          </Box>\r\n\r\n          <Box>\r\n            <CardLayout2>\r\n              <WPExpiryViewStaff />\r\n            </CardLayout2>\r\n          </Box>\r\n        </Stack>\r\n        <Box pt={4}>\r\n          <Copyright />\r\n        </Box>\r\n        <CustomDialog\r\n          isOpen={isLeaveDialogOpen}\r\n          handleClose={handleLeaveDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <LeaveTableAdmin\r\n            setLeavesdata={setLeavesdata}\r\n            leavesdata={leavesdata}\r\n            handleDialogClose={handleLeaveDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isExpenseDialogOpen}\r\n          handleClose={handleExpenseDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <ExpenseTableAdmin\r\n            setExpensesdata={setExpensesdata}\r\n            expensesdata={expensesdata}\r\n            handleDialogClose={handleExpenseDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isPayslipDialogOpen}\r\n          handleClose={handlePayslipDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={true}\r\n          isFullwidth={false}\r\n        >\r\n          <PayslipTableAdmin\r\n            setPayslipsdata={setPayslipsdata}\r\n            payslipsdata={payslipsdata}\r\n            handleDialogClose={handlePayslipDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isDailyAllowancesDialogOpen}\r\n          handleClose={handleDailyAllowancesDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={true}\r\n          isFullwidth={false}\r\n        >\r\n          <DailyAllowancesTableAdmin\r\n            setDailyAllowancesdata={setDailyAllowancesdata}\r\n            dailyallowancesdata={dailyallowancesdata}\r\n            handleDialogClose={handleDailyAllowancesDialogClose}\r\n          />\r\n        </CustomDialog>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default HomeStaff;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeAdminManager.js",["1569","1570","1571","1572","1573"],"import React, { useState, useEffect } from \"react\";\r\n//import { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\n//import dayjs from \"dayjs\";\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Divider,\r\n  //Grid,\r\n  Heading,\r\n  HStack,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  //ModalHeader,\r\n  //ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Select,\r\n  SimpleGrid,\r\n  Tabs,\r\n  TabList,\r\n  TabPanels,\r\n  Tab,\r\n  TabPanel,\r\n  //Text,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\n//import CardLayout from \"../helpers/CardLayout\";\r\n//import CardLayout2 from \"../helpers/CardLayout2\";\r\n//import CardLayout4 from \"../helpers/CardLayout4\";\r\n//import Copyright from \"./Copyright\";\r\n//import { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { useRecoilState } from \"recoil\";\r\n//import { loginLevelState } from \"./data/atomdata\";\r\n//import BarChart from \"../helpers/BarChart\";\r\n//import BarChartStack from \"../helpers/BarChartStack\";\r\n//import EmployeeTableLeaveView from \"./EmployeeTableLeaveView\";\r\n//import ExpensesTableViewSummary from \"./ExpenseTableViewSummary\";\r\n//import ExpenseSummaryTableView from \"./ExpensesSummaryTableView\";\r\n//import LeavesTableViewSummary from \"./LeavesTableViewSummary\";\r\n//import HocTableViewSummary from \"./HocTableViewSummary\";\r\n//import SummaryTableView from \"../helpers/SummaryTableView\";\r\n//import DailyAllowanceTableViewSummary from \"./DailyAllowancesTableViewSummary\";\r\n//import PayslipTableViewSummary from \"./PayslipTableViewSummary\";\r\n//import PayslipSummaryTableView from \"./PayslipSummaryTableView\";\r\n//import { useExpensesPeriod } from \"./expenses/useExpensesPeriod\";\r\n//import LeavesTableApproval from \"./LeaveTableApproval\";\r\n//import ExportLeave2Excel from \"./ExportLeave2Excel\";\r\n//import ExportHoc2Excel from \"./ExportHoc2Excel\";\r\n//import Export2ExcelDialog from \"./Export2ExcelDialog\";\r\nimport { useHoc } from \"./hoc/useHoc\";\r\nimport { usePeriods } from \"./periods/usePeriods\";\r\nconst LeaveTableApproval = React.lazy(() =>\r\n  import(\"./LeaveTableApproval\")\r\n);\r\nconst EmployeeTableLeaveView = React.lazy(() =>\r\n  import(\"./EmployeeTableLeaveView\")\r\n);\r\nconst ExpenseTableViewSummary = React.lazy(() =>\r\n  import(\"./ExpenseTableViewSummary\")\r\n);\r\nconst PayslipTableViewSummary = React.lazy(() =>\r\n  import(\"./PayslipTableViewSummary\")\r\n);\r\nconst DailyAllowancesTableViewSummary = React.lazy(() =>\r\n  import(\"./DailyAllowancesTableViewSummary\")\r\n);\r\nconst HocTableViewSummary = React.lazy(() => import(\"./HocTableViewSummary\"));\r\nconst LeavesTableViewSummary = React.lazy(() =>\r\n  import(\"./LeavesTableViewSummary\")\r\n);\r\nconst Export2ExcelDialog = React.lazy(() => import(\"./Export2ExcelDialog\"));\r\n//const drawerWidth = 240;\r\n\r\n//const FILTERSTRING = \"Pending\";\r\n\r\n\r\nconst initial_exp2excel = {\r\n  year: \"\",\r\n  month: \"\",\r\n  type: \"\",\r\n  title: \"\",\r\n  filename: \"\",\r\n};\r\n\r\nconst HomeAdminManager = () => {\r\n  //const classes = useStyles();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  //const { expensesperiod, setExpPeriodId } = useExpensesPeriod();\r\n  //const [expdata, setExpData] = useState(initial_expdata);\r\n  const [selectleaveyear, setSelectLeaveYear] = useState(\"\");\r\n  const [selectexpenseyear, setSelectExpenseYear] = useState(\"\");\r\n  const [selectsiteallowsyear, setSelectSiteAllowsYear] = useState(\"\");\r\n  const [selectpayrollyear, setSelectPayrollYear] = useState(\"\");\r\n  const [selecthocyear, setSelectHocYear] = useState(\"\");\r\n  const [exp2excelstate, setExp2excelstate] = useState(initial_exp2excel);\r\n  const currentyear = new Date().getFullYear();\r\n  const currentmonth = new Date().getMonth();\r\n  const { periods} = usePeriods()\r\n  const { hoc, filter, setFilter, setHocId } = useHoc();\r\n  const {\r\n    isOpen: isExport2ExcelOpen,\r\n    onOpen: onExport2ExcelOpen,\r\n    onClose: onExport2ExcelClose,\r\n  } = useDisclosure();\r\n\r\n  const handleExportHoc2Excel = () => {\r\n    setExp2excelstate(\r\n      (prev) =>\r\n        (prev = {\r\n          year: currentyear,\r\n          month: currentmonth,\r\n          type: \"HOC\",\r\n          title: \"Hoc\",\r\n          filename: \"hoc\",\r\n        })\r\n    );\r\n    onExport2ExcelOpen();\r\n  };\r\n  \r\n\r\n  useEffect(() => {\r\n    setSelectLeaveYear(currentyear);\r\n    setSelectExpenseYear(currentyear);\r\n    setSelectSiteAllowsYear(currentyear);\r\n    setSelectPayrollYear(currentyear);\r\n    setSelectHocYear(currentyear);\r\n  }, []);\r\n\r\n  return (\r\n    <Container maxW=\"full\" mt=\"100\">\r\n      <Box\r\n        //minW=\"100%\"\r\n        padding=\"4\"\r\n        width=\"full\"\r\n        height=\"800\"\r\n        borderColor=\"blue.500\"\r\n        borderWidth=\"1px\"\r\n        borderRadius=\"lg\"\r\n        //overflow=\"scroll\"\r\n      >\r\n        <Tabs>\r\n          <TabList>\r\n            <Tab>Employees</Tab>\r\n            <Tab>Leaves</Tab>\r\n            <Tab>Expenses</Tab>\r\n            <Tab>Site Allowances</Tab>\r\n            <Tab>Payroll</Tab>\r\n            <Tab>HOC History</Tab>\r\n            <Tab>Leaves Approval</Tab>\r\n          </TabList>\r\n\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"full\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid>\r\n                  <Box>\r\n                    <Heading as=\"h2\" size=\"lg\">\r\n                      Employees\r\n                    </Heading>\r\n                  </Box>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs isLazy>\r\n                      {/* <TabList>\r\n                        <Tab>Details</Tab>\r\n                      </TabList> */}\r\n                      <TabPanels>\r\n                        <TabPanel>\r\n                          <EmployeeTableLeaveView />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"100%\"\r\n                padding=\"4\"\r\n                width=\"full\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid w=\"168vh\">\r\n                  <HStack>\r\n                    <Box>\r\n                      <Heading as=\"h2\" size=\"lg\">\r\n                        Leaves\r\n                      </Heading>\r\n                    </Box>\r\n                    <Box alignSelf=\"flex-end\">\r\n                      <HStack>\r\n                        <Select\r\n                          value={selectleaveyear}\r\n                          fontSize={20}\r\n                          onChange={(e) => setSelectLeaveYear(e.target.value)}\r\n                        >\r\n                          {periods.map((row) => {\r\n                            return (\r\n                              <option key={row.period} value={row.period}>\r\n                                {row.period}\r\n                              </option>\r\n                            );\r\n                          })}\r\n                        </Select>\r\n                        {/* <Box size=\"xl\" py={2}>\r\n                          <Text fontSize=\"lg\">\r\n                            <ExportLeave2Excel\r\n                              filename=\"leave\"\r\n                              dataset={dataset}\r\n                              title=\"Leave\"\r\n                            />\r\n                          </Text>\r\n                        </Box> */}\r\n                      </HStack>\r\n                    </Box>\r\n                  </HStack>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs defaultIndex={currentmonth} isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                          <Tab>Summary</Tab> */}\r\n                        <Tab>January</Tab>\r\n                        <Tab>February</Tab>\r\n                        <Tab>March</Tab>\r\n                        <Tab>April</Tab>\r\n                        <Tab>May</Tab>\r\n                        <Tab>June</Tab>\r\n                        <Tab>July</Tab>\r\n                        <Tab>August</Tab>\r\n                        <Tab>September</Tab>\r\n                        <Tab>October</Tab>\r\n                        <Tab>November</Tab>\r\n                        <Tab>December</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Expenses for the Month\"\r\n                    barchartdata={expchartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={1}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={2}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={3}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={4}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={5}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={6}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={7}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={8}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={9}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={10}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={11}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={12}\r\n                          />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"x3\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid w=\"168vh\">\r\n                  <HStack>\r\n                    <Box>\r\n                      <Heading as=\"h2\" size=\"lg\">\r\n                        Expenses Claims\r\n                      </Heading>\r\n                    </Box>\r\n                    <Box alignSelf=\"flex-end\">\r\n                      <HStack>\r\n                        <Select\r\n                          value={selectexpenseyear}\r\n                          fontSize={20}\r\n                          onChange={(e) => setSelectExpenseYear(e.target.value)}\r\n                        >\r\n                          {periods.map((row) => {\r\n                            return (\r\n                              <option key={row.period} value={row.period}>\r\n                                {row.period}\r\n                              </option>\r\n                            );\r\n                          })}\r\n                        </Select>\r\n                        {/* <Box size=\"xl\" py={2}>\r\n                          <Text fontSize=\"lg\">\r\n                            <ExportLeave2Excel\r\n                              filename=\"leave\"\r\n                              dataset={dataset}\r\n                              title=\"Leave\"\r\n                            />\r\n                          </Text>\r\n                        </Box> */}\r\n                      </HStack>\r\n                    </Box>\r\n                  </HStack>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs defaultIndex={currentmonth} isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                          <Tab>Summary</Tab> */}\r\n                        <Tab>January</Tab>\r\n                        <Tab>February</Tab>\r\n                        <Tab>March</Tab>\r\n                        <Tab>April</Tab>\r\n                        <Tab>May</Tab>\r\n                        <Tab>June</Tab>\r\n                        <Tab>July</Tab>\r\n                        <Tab>August</Tab>\r\n                        <Tab>September</Tab>\r\n                        <Tab>October</Tab>\r\n                        <Tab>November</Tab>\r\n                        <Tab>December</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Expenses for the Month\"\r\n                    barchartdata={expchartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <ExpenseSummaryTableView year={currentyear} />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={1}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={2}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={3}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={4}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={5}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={6}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={7}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={8}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={9}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={10}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={11}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={12}\r\n                          />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"x3\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid w=\"168vh\">\r\n                  <HStack>\r\n                    <Box>\r\n                      <Heading as=\"h2\" size=\"lg\">\r\n                        Site Allowances\r\n                      </Heading>\r\n                    </Box>\r\n                    <Box alignSelf=\"flex-end\">\r\n                      <HStack>\r\n                        <Select\r\n                          value={selectsiteallowsyear}\r\n                          fontSize={20}\r\n                          onChange={(e) =>\r\n                            setSelectSiteAllowsYear(e.target.value)\r\n                          }\r\n                        >\r\n                          {periods.map((row) => {\r\n                            return (\r\n                              <option key={row.period} value={row.period}>\r\n                                {row.period}\r\n                              </option>\r\n                            );\r\n                          })}\r\n                        </Select>\r\n                        {/* <Box size=\"xl\" py={2}>\r\n                          <Text fontSize=\"lg\">\r\n                            <ExportLeave2Excel\r\n                              filename=\"leave\"\r\n                              dataset={dataset}\r\n                              title=\"Leave\"\r\n                            />\r\n                          </Text>\r\n                        </Box> */}\r\n                      </HStack>\r\n                    </Box>\r\n                  </HStack>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs defaultIndex={currentmonth} isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                <Tab>Summary</Tab> */}\r\n                        <Tab>January</Tab>\r\n                        <Tab>February</Tab>\r\n                        <Tab>March</Tab>\r\n                        <Tab>April</Tab>\r\n                        <Tab>May</Tab>\r\n                        <Tab>June</Tab>\r\n                        <Tab>July</Tab>\r\n                        <Tab>August</Tab>\r\n                        <Tab>September</Tab>\r\n                        <Tab>October</Tab>\r\n                        <Tab>November</Tab>\r\n                        <Tab>December</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Site Allowances for the Month\"\r\n                    barchartdata={paychartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"01\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"02\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"03\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"04\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"05\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"06\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"07\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"08\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"09\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"10\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"11\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"12\"\r\n                          />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"x3\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid>\r\n                  <Box>\r\n                    <Heading as=\"h2\" size=\"lg\">\r\n                      Payroll\r\n                    </Heading>\r\n                  </Box>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                <Tab>Summary</Tab> */}\r\n                        <Tab>Approved</Tab>\r\n                        <Tab>Verified</Tab>\r\n                        <Tab>Pending</Tab>\r\n                        <Tab>Rejected</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Payroll for the Month\"\r\n                    barchartdata={paychartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <PayslipSummaryTableView year={currentyear} status=\"Approved\" />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <PayslipTableViewSummary status=\"Approved\" />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <PayslipTableViewSummary status=\"Verified\" />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <PayslipTableViewSummary status=\"Pending\" />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <PayslipTableViewSummary status=\"Rejected\" />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"100%\"\r\n                padding=\"4\"\r\n                width=\"full\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid w=\"168vh\">\r\n                  <HStack>\r\n                    <Box>\r\n                      <Heading as=\"h2\" size=\"lg\">\r\n                        HOC History\r\n                      </Heading>\r\n                    </Box>\r\n                    <Box alignSelf=\"flex-end\">\r\n                      <HStack>\r\n                        <Select\r\n                          value={selecthocyear}\r\n                          fontSize={20}\r\n                          onChange={(e) => setSelectHocYear(e.target.value)}\r\n                        >\r\n                          {periods.map((row) => {\r\n                            return (\r\n                              <option key={row.period} value={row.period}>\r\n                                {row.period}\r\n                              </option>\r\n                            );\r\n                          })}\r\n                        </Select>\r\n                        <Box size=\"xl\" py={2}>\r\n                          <Button\r\n                            colorScheme=\"teal\"\r\n                            variant=\"solid\"\r\n                            onClick={() => handleExportHoc2Excel()}\r\n                          >\r\n                            Export To Excel\r\n                          </Button>\r\n                        </Box>\r\n                      </HStack>\r\n                    </Box>\r\n                  </HStack>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs defaultIndex={currentmonth} isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                          <Tab>Summary</Tab> */}\r\n                        <Tab>January</Tab>\r\n                        <Tab>February</Tab>\r\n                        <Tab>March</Tab>\r\n                        <Tab>April</Tab>\r\n                        <Tab>May</Tab>\r\n                        <Tab>June</Tab>\r\n                        <Tab>July</Tab>\r\n                        <Tab>August</Tab>\r\n                        <Tab>September</Tab>\r\n                        <Tab>October</Tab>\r\n                        <Tab>November</Tab>\r\n                        <Tab>December</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Expenses for the Month\"\r\n                    barchartdata={expchartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={1}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={2}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={3}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={4}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={5}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary year={currentyear} month={6} />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={7}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={8}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={9}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={10}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={11}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={12}\r\n                          />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"full\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <LeaveTableApproval />\r\n              </Box>\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n        <Modal\r\n          closeOnOverlayClick={false}\r\n          isOpen={isExport2ExcelOpen}\r\n          onClose={onExport2ExcelClose}\r\n          size=\"md\"\r\n        >\r\n          <ModalOverlay />\r\n          <ModalContent>\r\n            <ModalCloseButton />\r\n            <ModalBody>\r\n              <Export2ExcelDialog\r\n                state={exp2excelstate}\r\n                setState={setExp2excelstate}\r\n                dataset={hoc}\r\n                onClose={onExport2ExcelClose}\r\n              />\r\n            </ModalBody>\r\n          </ModalContent>\r\n        </Modal>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   root: {\r\n//     display: \"flex\",\r\n//   },\r\n//   toolbar: {\r\n//     paddingRight: 24, // keep right padding when drawer closed\r\n//   },\r\n//   toolbarIcon: {\r\n//     display: \"flex\",\r\n//     alignItems: \"center\",\r\n//     justifyContent: \"flex-end\",\r\n//     padding: \"0 8px\",\r\n//     ...theme.mixins.toolbar,\r\n//   },\r\n//   appBar: {\r\n//     zIndex: theme.zIndex.drawer + 1,\r\n//     transition: theme.transitions.create([\"width\", \"margin\"], {\r\n//       easing: theme.transitions.easing.sharp,\r\n//       duration: theme.transitions.duration.leavingScreen,\r\n//     }),\r\n//   },\r\n//   appBarShift: {\r\n//     marginLeft: drawerWidth,\r\n//     width: `calc(100% - ${drawerWidth}px)`,\r\n//     transition: theme.transitions.create([\"width\", \"margin\"], {\r\n//       easing: theme.transitions.easing.sharp,\r\n//       duration: theme.transitions.duration.enteringScreen,\r\n//     }),\r\n//   },\r\n//   menuButton: {\r\n//     marginRight: 36,\r\n//   },\r\n//   menuButtonHidden: {\r\n//     display: \"none\",\r\n//   },\r\n//   title: {\r\n//     flexGrow: 1,\r\n//   },\r\n//   drawerPaper: {\r\n//     position: \"relative\",\r\n//     whiteSpace: \"nowrap\",\r\n//     width: drawerWidth,\r\n//     transition: theme.transitions.create(\"width\", {\r\n//       easing: theme.transitions.easing.sharp,\r\n//       duration: theme.transitions.duration.enteringScreen,\r\n//     }),\r\n//   },\r\n//   drawerPaperClose: {\r\n//     overflowX: \"hidden\",\r\n//     transition: theme.transitions.create(\"width\", {\r\n//       easing: theme.transitions.easing.sharp,\r\n//       duration: theme.transitions.duration.leavingScreen,\r\n//     }),\r\n//     width: theme.spacing(7),\r\n//     [theme.breakpoints.up(\"sm\")]: {\r\n//       width: theme.spacing(9),\r\n//     },\r\n//   },\r\n//   appBarSpacer: theme.mixins.toolbar,\r\n//   content: {\r\n//     flexGrow: 1,\r\n//     height: \"100vh\",\r\n//     overflow: \"auto\",\r\n//   },\r\n//   container: {\r\n//     paddingTop: theme.spacing(4),\r\n//     paddingBottom: theme.spacing(4),\r\n//   },\r\n//   paper: {\r\n//     padding: theme.spacing(2),\r\n//     display: \"flex\",\r\n//     overflow: \"auto\",\r\n//     flexDirection: \"column\",\r\n//   },\r\n//   fixedHeight: {\r\n//     height: 240,\r\n//   },\r\n// }));\r\n\r\nexport default HomeAdminManager;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeManager.js",["1574","1575","1576","1577","1578","1579","1580","1581"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\n//import dayjs from \"dayjs\";\r\nimport { format } from \"date-fns\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Divider,\r\n  //Flex,\r\n  //Grid,\r\n  Heading,\r\n  HStack,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  //ModalHeader,\r\n  //ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  SimpleGrid,\r\n  Select,\r\n  //Stack,\r\n  Tabs,\r\n  TabList,\r\n  TabPanels,\r\n  Tab,\r\n  TabPanel,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\n//import CardLayout from \"../helpers/CardLayout\";\r\n//import CardLayout2 from \"../helpers/CardLayout2\";\r\n//import CardLayout4 from \"../helpers/CardLayout4\";\r\n//import Copyright from \"./Copyright\";\r\n//import { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { useRecoilState } from \"recoil\";\r\n//import { loginLevelState } from \"./data/atomdata\";\r\n//import BarChart from \"../helpers/BarChart\";\r\n//import BarChartStack from \"../helpers/BarChartStack\";\r\n\r\n//import EmployeeTableLeaveView from \"./EmployeeTableLeaveView\";\r\n//import ExpensesTableViewSummary from \"./ExpenseTableViewSummary\";\r\n//import ExpenseSummaryTableView from \"./ExpensesSummaryTableView\";\r\n//import LeavesTableViewSummary from \"./LeavesTableViewSummary\";\r\n//import HocTableViewSummary from \"./HocTableViewSummary\";\r\n//import SummaryTableView from \"../helpers/SummaryTableView\";\r\n//import DailyAllowanceTableViewSummary from \"./DailyAllowancesTableViewSummary\";\r\n//import PayslipTableViewSummary from \"./PayslipTableViewSummary\";\r\n//import PayslipSummaryTableView from \"./PayslipSummaryTableView\";\r\n//import { useExpensesPeriod } from \"./expenses/useExpensesPeriod\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { HiOutlineFolderAdd } from \"react-icons/hi\";\r\nimport { useHoc } from \"./hoc/useHoc\";\r\nimport { usePeriods } from \"./periods/usePeriods\";\r\nconst EmployeeTableLeaveView = React.lazy(() =>\r\n  import(\"./EmployeeTableLeaveView\")\r\n);\r\nconst ExpenseTableViewSummary = React.lazy(() =>\r\n  import(\"./ExpenseTableViewSummary\")\r\n);\r\nconst PayslipTableViewSummary = React.lazy(() =>\r\n  import(\"./PayslipTableViewSummary\")\r\n);\r\nconst DailyAllowancesTableViewSummary = React.lazy(() =>\r\n  import(\"./DailyAllowancesTableViewSummary\")\r\n);\r\nconst HocTableViewSummary = React.lazy(() => import(\"./HocTableViewSummary\"));\r\nconst LeavesTableViewSummary = React.lazy(() =>\r\n  import(\"./LeavesTableViewSummary\")\r\n);\r\nconst Export2ExcelDialog = React.lazy(() => import(\"./Export2ExcelDialog\"));\r\n\r\nconst HocForm = React.lazy(() => import(\"./HocForm\"));\r\n\r\nconst drawerWidth = 240;\r\n\r\n//const FILTERSTRING = \"Pending\";\r\n\r\nconst initial_expdata = [\r\n  {\r\n    jan: 0,\r\n    feb: 0,\r\n    mar: 0,\r\n    apr: 0,\r\n    may: 0,\r\n    jun: 0,\r\n    jul: 0,\r\n    aug: 0,\r\n    sep: 0,\r\n    oct: 0,\r\n    nov: 0,\r\n    dec: 0,\r\n  },\r\n];\r\n\r\nconst initial_hocform = {\r\n  findings: \"\",\r\n  category: \"\",\r\n  what: \"\",\r\n  what_details: \"\",\r\n  why: \"\",\r\n  why_details: \"\",\r\n  discussion: \"No\",\r\n  action: \"\",\r\n  isfollowup: \"No\",\r\n  isworkrelated: \"No\",\r\n  raisedby: \"\",\r\n  email: \"\",\r\n  raisedon: null,\r\n  company: \"APPSMITH SUTERA\",\r\n  location: \" \",\r\n};\r\n\r\nconst initial_exp2excel = {\r\n  year: \"\",\r\n  month: \"\",\r\n  type: \"\",\r\n  title: \"\",\r\n  filename: \"\",\r\n};\r\n\r\nconst HomeManager = () => {\r\n  const classes = useStyles();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  //const { expensesperiod, setExpPeriodId } = useExpensesPeriod();\r\n  //const [expdata, setExpData] = useState(initial_expdata);\r\n  const [selectleaveyear, setSelectLeaveYear] = useState(\"\");\r\n  const [selectexpenseyear, setSelectExpenseYear] = useState(\"\");\r\n  const [selectsiteallowsyear, setSelectSiteAllowsYear] = useState(\"\");\r\n  const [selectpayrollyear, setSelectPayrollYear] = useState(\"\");\r\n  const [selecthocyear, setSelectHocYear] = useState(\"\");\r\n  const [formdata, setFormdata] = useState(initial_hocform);\r\n  const [exp2excelstate, setExp2excelstate] = useState(initial_exp2excel);\r\n  const currentyear = new Date().getFullYear();\r\n  const currentmonth = new Date().getMonth();\r\n  const { periods} = usePeriods()\r\n  const { hoc, filter, setFilter, setHocId } = useHoc();\r\n\r\n  const {\r\n    isOpen: isExport2ExcelOpen,\r\n    onOpen: onExport2ExcelOpen,\r\n    onClose: onExport2ExcelClose,\r\n  } = useDisclosure();\r\n\r\n  const {\r\n    isOpen: isNewHOCOpen,\r\n    onOpen: onNewHOCOpen,\r\n    onClose: onNewHOCClose,\r\n  } = useDisclosure();\r\n\r\n  const handleExportHoc2Excel = () => {\r\n    setExp2excelstate(\r\n      (prev) =>\r\n        (prev = {\r\n          year: currentyear,\r\n          month: currentmonth,\r\n          type: \"HOC\",\r\n          title: \"Hoc\",\r\n          filename: \"hoc\",\r\n        })\r\n    );\r\n    onExport2ExcelOpen();\r\n  };\r\n\r\n  const handleNewHOC = () => {\r\n    let today = format(new Date(), \"yyyy-MM-dd\");\r\n    //console.log(\"today\", today);\r\n    setFormdata(\r\n      (prev) =>\r\n        (prev = {\r\n          ...initial_hocform,\r\n          //raisedby: loginLevel.loginUser,\r\n          //email: loginLevel.loginEmail,\r\n          company: \"APPSMITHS SUTERA\",\r\n          raisedon: today,\r\n        })\r\n    );\r\n    onNewHOCOpen();\r\n  };\r\n\r\n  const handleHOCDialogClose = () => {\r\n    console.log(\"hoc\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSelectLeaveYear(currentyear);\r\n    setSelectExpenseYear(currentyear);\r\n    setSelectSiteAllowsYear(currentyear);\r\n    setSelectPayrollYear(currentyear);\r\n    setSelectHocYear(currentyear);\r\n  }, []);\r\n\r\n  return (\r\n    // <div>\r\n    //   <div className={classes.appBarSpacer} />\r\n    //   <div style={{ paddingLeft: 50 }}>\r\n    //     <h2>Welcome {loginLevel.loginUser}!</h2>\r\n    //     <h3>Dashboard</h3>\r\n    //   </div>\r\n    <Container maxW=\"full\" mt=\"100\">\r\n      <Box\r\n        //minW=\"100%\"\r\n        padding=\"4\"\r\n        width=\"full\"\r\n        height=\"800\"\r\n        borderColor=\"blue.500\"\r\n        borderWidth=\"1px\"\r\n        borderRadius=\"lg\"\r\n        //overflow=\"scroll\"\r\n      >\r\n        <Tabs>\r\n          <TabList>\r\n            <Tab>Employees</Tab>\r\n            <Tab>Leaves</Tab>\r\n            <Tab>Expenses</Tab>\r\n            <Tab>Site Allowances</Tab>\r\n            <Tab>Payroll</Tab>\r\n            <Tab>HOC History</Tab>\r\n          </TabList>\r\n\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"full\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid>\r\n                  <Box>\r\n                    <Heading as=\"h2\" size=\"lg\">\r\n                      Employees\r\n                    </Heading>\r\n                  </Box>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs isLazy>\r\n                      {/* <TabList>\r\n                        <Tab>Details</Tab>\r\n                      </TabList> */}\r\n                      <TabPanels>\r\n                        <TabPanel>\r\n                          <EmployeeTableLeaveView />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"100%\"\r\n                padding=\"4\"\r\n                width=\"full\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid w=\"168vh\">\r\n                  <HStack>\r\n                    <Box>\r\n                      <Heading as=\"h2\" size=\"lg\">\r\n                        Leaves\r\n                      </Heading>\r\n                    </Box>\r\n                    <Box alignSelf=\"flex-end\">\r\n                      <HStack>\r\n                        <Select\r\n                          value={selectleaveyear}\r\n                          fontSize={20}\r\n                          onChange={(e) => setSelectLeaveYear(e.target.value)}\r\n                        >\r\n                          {periods.map((row) => {\r\n                            return (\r\n                              <option key={row.period} value={row.period}>\r\n                                {row.period}\r\n                              </option>\r\n                            );\r\n                          })}\r\n                        </Select>\r\n                        {/* <Box size=\"xl\" py={2}>\r\n                          <Text fontSize=\"lg\">\r\n                            <ExportLeave2Excel\r\n                              filename=\"leave\"\r\n                              dataset={dataset}\r\n                              title=\"Leave\"\r\n                            />\r\n                          </Text>\r\n                        </Box> */}\r\n                      </HStack>\r\n                    </Box>\r\n                  </HStack>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs defaultIndex={currentmonth} isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                          <Tab>Summary</Tab> */}\r\n                        <Tab>January</Tab>\r\n                        <Tab>February</Tab>\r\n                        <Tab>March</Tab>\r\n                        <Tab>April</Tab>\r\n                        <Tab>May</Tab>\r\n                        <Tab>June</Tab>\r\n                        <Tab>July</Tab>\r\n                        <Tab>August</Tab>\r\n                        <Tab>September</Tab>\r\n                        <Tab>October</Tab>\r\n                        <Tab>November</Tab>\r\n                        <Tab>December</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Expenses for the Month\"\r\n                    barchartdata={expchartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={1}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={2}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={3}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={4}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={5}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={6}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={7}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={8}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={9}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={10}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={11}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <LeavesTableViewSummary\r\n                            year={\r\n                              selectleaveyear ? selectleaveyear : currentyear\r\n                            }\r\n                            month={12}\r\n                          />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"x3\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid w=\"168vh\">\r\n                  <HStack>\r\n                    <Box>\r\n                      <Heading as=\"h2\" size=\"lg\">\r\n                        Expenses Claims\r\n                      </Heading>\r\n                    </Box>\r\n                    <Box alignSelf=\"flex-end\">\r\n                      <HStack>\r\n                        <Select\r\n                          value={selectexpenseyear}\r\n                          fontSize={20}\r\n                          onChange={(e) => setSelectExpenseYear(e.target.value)}\r\n                        >\r\n                          {periods.map((row) => {\r\n                            return (\r\n                              <option key={row.period} value={row.period}>\r\n                                {row.period}\r\n                              </option>\r\n                            );\r\n                          })}\r\n                        </Select>\r\n                        {/* <Box size=\"xl\" py={2}>\r\n                          <Text fontSize=\"lg\">\r\n                            <ExportLeave2Excel\r\n                              filename=\"leave\"\r\n                              dataset={dataset}\r\n                              title=\"Leave\"\r\n                            />\r\n                          </Text>\r\n                        </Box> */}\r\n                      </HStack>\r\n                    </Box>\r\n                  </HStack>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs defaultIndex={currentmonth} isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                          <Tab>Summary</Tab> */}\r\n                        <Tab>January</Tab>\r\n                        <Tab>February</Tab>\r\n                        <Tab>March</Tab>\r\n                        <Tab>April</Tab>\r\n                        <Tab>May</Tab>\r\n                        <Tab>June</Tab>\r\n                        <Tab>July</Tab>\r\n                        <Tab>August</Tab>\r\n                        <Tab>September</Tab>\r\n                        <Tab>October</Tab>\r\n                        <Tab>November</Tab>\r\n                        <Tab>December</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Expenses for the Month\"\r\n                    barchartdata={expchartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <ExpenseSummaryTableView year={currentyear} />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={1}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={2}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={3}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={4}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={5}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={6}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={7}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={8}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={9}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={10}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={11}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <ExpenseTableViewSummary\r\n                            year={\r\n                              selectexpenseyear\r\n                                ? selectexpenseyear\r\n                                : currentyear\r\n                            }\r\n                            month={12}\r\n                          />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"x3\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid w=\"168vh\">\r\n                  <HStack>\r\n                    <Box>\r\n                      <Heading as=\"h2\" size=\"lg\">\r\n                        Site Allowances\r\n                      </Heading>\r\n                    </Box>\r\n                    <Box alignSelf=\"flex-end\">\r\n                      <HStack>\r\n                        <Select\r\n                          value={selectsiteallowsyear}\r\n                          fontSize={20}\r\n                          onChange={(e) =>\r\n                            setSelectSiteAllowsYear(e.target.value)\r\n                          }\r\n                        >\r\n                          {periods.map((row) => {\r\n                            return (\r\n                              <option key={row.period} value={row.period}>\r\n                                {row.period}\r\n                              </option>\r\n                            );\r\n                          })}\r\n                        </Select>\r\n                        {/* <Box size=\"xl\" py={2}>\r\n                          <Text fontSize=\"lg\">\r\n                            <ExportLeave2Excel\r\n                              filename=\"leave\"\r\n                              dataset={dataset}\r\n                              title=\"Leave\"\r\n                            />\r\n                          </Text>\r\n                        </Box> */}\r\n                      </HStack>\r\n                    </Box>\r\n                  </HStack>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs defaultIndex={currentmonth} isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                <Tab>Summary</Tab> */}\r\n                        <Tab>January</Tab>\r\n                        <Tab>February</Tab>\r\n                        <Tab>March</Tab>\r\n                        <Tab>April</Tab>\r\n                        <Tab>May</Tab>\r\n                        <Tab>June</Tab>\r\n                        <Tab>July</Tab>\r\n                        <Tab>August</Tab>\r\n                        <Tab>September</Tab>\r\n                        <Tab>October</Tab>\r\n                        <Tab>November</Tab>\r\n                        <Tab>December</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Site Allowances for the Month\"\r\n                    barchartdata={paychartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"01\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"02\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"03\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"04\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"05\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"06\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"07\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"08\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"09\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"10\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"11\"\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <DailyAllowancesTableViewSummary\r\n                            year={\r\n                              selectsiteallowsyear\r\n                                ? selectsiteallowsyear\r\n                                : currentyear\r\n                            }\r\n                            month=\"12\"\r\n                          />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"x3\"\r\n                padding=\"4\"\r\n                width=\"100%\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid>\r\n                  <Box>\r\n                    <Heading as=\"h2\" size=\"lg\">\r\n                      Payroll\r\n                    </Heading>\r\n                  </Box>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                <Tab>Summary</Tab> */}\r\n                        <Tab>Approved</Tab>\r\n                        <Tab>Verified</Tab>\r\n                        <Tab>Pending</Tab>\r\n                        <Tab>Rejected</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Payroll for the Month\"\r\n                    barchartdata={paychartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <PayslipSummaryTableView year={currentyear} status=\"Approved\" />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <PayslipTableViewSummary status=\"Approved\" />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <PayslipTableViewSummary status=\"Verified\" />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <PayslipTableViewSummary status=\"Pending\" />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <PayslipTableViewSummary status=\"Rejected\" />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Box\r\n                maxW=\"100%\"\r\n                padding=\"4\"\r\n                width=\"full\"\r\n                height=\"700\"\r\n                borderColor=\"blue.500\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"scroll\"\r\n              >\r\n                <SimpleGrid w=\"168vh\">\r\n                  <HStack>\r\n                    <Box>\r\n                      <Heading as=\"h2\" size=\"lg\">\r\n                        HOC History\r\n                      </Heading>\r\n                    </Box>\r\n                    <Box alignSelf=\"flex-end\">\r\n                      <HStack>\r\n                        <Select\r\n                          value={selecthocyear}\r\n                          fontSize={20}\r\n                          onChange={(e) => setSelectHocYear(e.target.value)}\r\n                        >\r\n                          {periods.map((row) => {\r\n                            return (\r\n                              <option key={row.period} value={row.period}>\r\n                                {row.period}\r\n                              </option>\r\n                            );\r\n                          })}\r\n                        </Select>\r\n                        <Box size=\"xl\" py={2}>\r\n                          <Button\r\n                            colorScheme=\"teal\"\r\n                            variant=\"solid\"\r\n                            onClick={() => handleExportHoc2Excel()}\r\n                          >\r\n                            Export To Excel\r\n                          </Button>\r\n                        </Box>\r\n                        <Box size=\"xl\" py={2}>\r\n                          <Button\r\n                            leftIcon={<HiOutlineFolderAdd size=\"30\" />}\r\n                            colorScheme=\"teal\"\r\n                            variant=\"solid\"\r\n                            onClick={() => handleNewHOC()}\r\n                          >\r\n                            New HOC\r\n                          </Button>\r\n                        </Box>\r\n                      </HStack>\r\n                    </Box>\r\n                  </HStack>\r\n                  <Divider />\r\n                  <Box>\r\n                    <Tabs defaultIndex={currentmonth} isLazy>\r\n                      <TabList>\r\n                        {/* <Tab>Chart</Tab>\r\n                          <Tab>Summary</Tab> */}\r\n                        <Tab>January</Tab>\r\n                        <Tab>February</Tab>\r\n                        <Tab>March</Tab>\r\n                        <Tab>April</Tab>\r\n                        <Tab>May</Tab>\r\n                        <Tab>June</Tab>\r\n                        <Tab>July</Tab>\r\n                        <Tab>August</Tab>\r\n                        <Tab>September</Tab>\r\n                        <Tab>October</Tab>\r\n                        <Tab>November</Tab>\r\n                        <Tab>December</Tab>\r\n                      </TabList>\r\n                      <TabPanels>\r\n                        {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Expenses for the Month\"\r\n                    barchartdata={expchartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={1}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={2}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={3}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={4}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={5}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={6}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={7}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={8}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={9}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={10}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={11}\r\n                          />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                          <HocTableViewSummary\r\n                            year={selecthocyear ? selecthocyear : currentyear}\r\n                            month={12}\r\n                          />\r\n                        </TabPanel>\r\n                      </TabPanels>\r\n                    </Tabs>\r\n                  </Box>\r\n                  <Divider />\r\n                </SimpleGrid>\r\n              </Box>\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n        <Modal\r\n          closeOnOverlayClick={false}\r\n          isOpen={isExport2ExcelOpen}\r\n          onClose={onExport2ExcelClose}\r\n          size=\"md\"\r\n        >\r\n          <ModalOverlay />\r\n          <ModalContent>\r\n            <ModalCloseButton />\r\n            <ModalBody>\r\n              <Export2ExcelDialog\r\n                state={exp2excelstate}\r\n                setState={setExp2excelstate}\r\n                dataset={hoc}\r\n                onClose={onExport2ExcelClose}\r\n              />\r\n            </ModalBody>\r\n          </ModalContent>\r\n        </Modal>\r\n        <CustomDialog\r\n          isOpen={isNewHOCOpen}\r\n          handleClose={onNewHOCClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n          isEditId=\"\"\r\n        >\r\n          <HocForm\r\n            formdata={formdata}\r\n            setFormdata={setFormdata}\r\n            handleDialogClose={onNewHOCClose}\r\n            isNew={true}\r\n          />\r\n        </CustomDialog>\r\n      </Box>\r\n    </Container>\r\n    // </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default HomeManager;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\HomeAdmin.js",["1582","1583","1584","1585"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\n//import { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Divider,\r\n  Heading,\r\n  HStack,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  //ModalHeader,\r\n  //ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Stack,\r\n  Select,\r\n  SimpleGrid,\r\n  Tabs,\r\n  TabList,\r\n  TabPanels,\r\n  Tab,\r\n  TabPanel,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { Container } from \"@material-ui/core\";\r\n//import { useEmployees } from \"./employees/useEmployees\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { useRecoilState } from \"recoil\";\r\n//import { loginLevelState } from \"./data/atomdata\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\nimport { usePeriods } from \"./periods/usePeriods\";\r\n//import CardLayout from \"../helpers/CardLayout\";\r\nimport CardLayout2 from \"../helpers/CardLayout2\";\r\n//import CardLayout3 from \"../helpers/CardLayout3\";\r\nimport LeaveTableViewAdmin from \"./LeaveTableViewAdmin\";\r\nimport LeaveTableAdmin from \"./LeaveTableManager\";\r\n//import ExpenseTableView from \"./ExpenseTableView\";\r\nimport ExpenseTableAdmin from \"./ExpenseTableAdmin\";\r\n//import PayslipTableView from \"./PayslipTableView\";\r\nimport PayslipTableAdmin from \"./PayslipTableAdmin\";\r\nimport HocTableViewSummary from \"./HocTableViewSummary\";\r\n//import DailyAllowancesTableView from \"./DailyAllowancesTableView\";\r\nimport DailyAllowancesTableAdmin from \"./DailyAllowancesTableAdmin\";\r\nimport TrainingsTableViewAdmin from \"./TrainingsTableViewAdmin\";\r\nimport WPExpiryViewAdmin from \"./WPExpiryViewAdmin\";\r\nimport EmployeeTableLeaveView from \"./EmployeeTableLeaveView\";\r\nimport LeavesTableViewSummary from \"./LeavesTableViewSummary\";\r\nimport Copyright from \"../components/Copyright\";\r\nimport { useHoc } from \"./hoc/useHoc\";\r\n\r\n//const Copyright  = React.lazy(()=> import(\"../components/Copyright\"));\r\n//const CardLayout = React.lazy(() => import(\"../helpers/CardLayout\"));\r\n//const CardLayout2 = React.lazy(() => import(\"../helpers/CardLayout2\"));\r\n//const CardLayout3 = React.lazy(() => import(\"../helpers/CardLayout3\"));\r\nconst Export2ExcelDialog = React.lazy(() => import(\"./Export2ExcelDialog\"));\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst FILTERSTRING = \"Pending\";\r\n\r\nconst initial_exp2excel = {\r\n  year: \"\",\r\n  month: \"\",\r\n  type: \"\",\r\n  title: \"\",\r\n  filename: \"\",\r\n};\r\n\r\nconst EmployeeView = () => {\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  //const { employees } = useEmployees();\r\n  //const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const [exp2excelstate, setExp2excelstate] = useState(initial_exp2excel);\r\n  const [leavesdata, setLeavesdata] = useState([]);\r\n  const [isLeaveDialogOpen, setIsLeaveDialogOpen] = useState(false);\r\n  const [expensesdata, setExpensesdata] = useState([]);\r\n  const [isExpenseDialogOpen, setIsExpenseDialogOpen] = useState(false);\r\n  const [payslipsdata, setPayslipsdata] = useState([]);\r\n  const [isPayslipDialogOpen, setIsPayslipDialogOpen] = useState(false);\r\n  const [dailyallowancesdata, setDailyAllowancesdata] = useState([]);\r\n  const [isDailyAllowancesDialogOpen, setIsDailyAllowancesDialogOpen] =\r\n    useState(false);\r\n\r\n  const { loadPendingLeaves } = useLeavesContext();\r\n  const { loadPendingExpenses } = useExpensesContext();\r\n  const { loadPendingPayslips } = usePayslipsContext();\r\n  const { loadPendingDailyAllowances } = useDailyAllowancesContext();\r\n  const [selectleaveyear, setSelectLeaveYear] = useState(\"\");\r\n  const [selecthocyear, setSelectHocYear] = useState(\"\");\r\n  const currentyear = new Date().getFullYear();\r\n  const currentmonth = new Date().getMonth();\r\n  const { periods} = usePeriods()\r\n  const { hoc, filter, setFilter, setHocId } = useHoc();\r\n  const {\r\n    isOpen: isExport2ExcelOpen,\r\n    onOpen: onExport2ExcelOpen,\r\n    onClose: onExport2ExcelClose,\r\n  } = useDisclosure();\r\n\r\n  // const handleLeaveDialogOpen = () => {\r\n  //   setLeavesdata([]);\r\n  //   setLeavesdata([...leaves]);\r\n  //   setIsLeaveDialogOpen(true);\r\n  // };\r\n\r\n  const handleLeaveDialogClose = () => {\r\n    setIsLeaveDialogOpen(false);\r\n    loadPendingLeaves(FILTERSTRING);\r\n  };\r\n\r\n  // const handleExpenseDialogOpen = () => {\r\n  //   setExpensesdata([]);\r\n  //   setExpensesdata([...expenses]);\r\n  //   setIsExpenseDialogOpen(true);\r\n  // };\r\n\r\n  const handleExpenseDialogClose = () => {\r\n    setIsExpenseDialogOpen(false);\r\n    loadPendingExpenses(FILTERSTRING);\r\n  };\r\n\r\n  // const handlePayslipDialogOpen = () => {\r\n  //   setPayslipsdata([]);\r\n  //   setPayslipsdata([...payslips]);\r\n  //   setIsPayslipDialogOpen(true);\r\n  //};\r\n\r\n  const handlePayslipDialogClose = () => {\r\n    setIsPayslipDialogOpen(false);\r\n    loadPendingPayslips(FILTERSTRING);\r\n  };\r\n\r\n  // const handleDailyAllowancesDialogOpen = () => {\r\n  //   setDailyAllowancesdata([]);\r\n  //   setDailyAllowancesdata([...dailyallowances]);\r\n  //   setIsDailyAllowancesDialogOpen(true);\r\n  // };\r\n\r\n  const handleDailyAllowancesDialogClose = () => {\r\n    setIsDailyAllowancesDialogOpen(false);\r\n    loadPendingDailyAllowances(FILTERSTRING);\r\n  };\r\n\r\n  const handleExportHoc2Excel = () => {\r\n    setExp2excelstate(\r\n      (prev) =>\r\n        (prev = {\r\n          year: currentyear,\r\n          month: currentmonth,\r\n          type: \"HOC\",\r\n          title: \"Hoc\",\r\n          filename: \"hoc\",\r\n        })\r\n    );\r\n    onExport2ExcelOpen();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSelectLeaveYear(currentyear);\r\n    setSelectHocYear(currentyear);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.appBarSpacer} />\r\n      <div style={{ paddingLeft: 50 }}>\r\n        {/* <h2>Welcome {loginLevel.loginUser}!</h2>\r\n        <h3>Dashboard</h3> */}\r\n      </div>\r\n      <Container maxWidth=\"full\" className={classes.container}>\r\n        <Stack direction=\"column\">\r\n          <Box>\r\n            <CardLayout2>\r\n              <React.Suspense fallback={<div>Loading...</div>}>\r\n                <LeaveTableViewAdmin />\r\n              </React.Suspense>\r\n            </CardLayout2>\r\n          </Box>\r\n          <Box>\r\n            <CardLayout2>\r\n              <WPExpiryViewAdmin />\r\n            </CardLayout2>\r\n          </Box>\r\n          <Box>\r\n            <CardLayout2>\r\n              <TrainingsTableViewAdmin />\r\n            </CardLayout2>\r\n          </Box>\r\n          <Box\r\n            maxW=\"x3\"\r\n            padding=\"4\"\r\n            width=\"100%\"\r\n            height=\"750\"\r\n            borderColor=\"blue.500\"\r\n            borderWidth=\"1px\"\r\n            borderRadius=\"lg\"\r\n            overflow=\"scroll\"\r\n          >\r\n            <Tabs>\r\n              <TabList>\r\n                <Tab>Employees</Tab>\r\n                <Tab>Leaves</Tab>\r\n                <Tab>HOC History</Tab>\r\n              </TabList>\r\n              <TabPanels>\r\n                <TabPanel>\r\n                  <Box\r\n                    maxW=\"full\"\r\n                    padding=\"4\"\r\n                    width=\"100%\"\r\n                    height=\"700\"\r\n                    borderColor=\"blue.500\"\r\n                    borderWidth=\"1px\"\r\n                    borderRadius=\"lg\"\r\n                    overflow=\"scroll\"\r\n                  >\r\n                    <SimpleGrid>\r\n                      <Box>\r\n                        <Heading as=\"h2\" size=\"lg\">\r\n                          Employees\r\n                        </Heading>\r\n                      </Box>\r\n                      <Divider />\r\n                      <Box>\r\n                        <Tabs isLazy>\r\n                          {/* <TabList>\r\n                            <Tab>Details</Tab>\r\n                          </TabList> */}\r\n                          <TabPanels>\r\n                            <TabPanel>\r\n                              <EmployeeTableLeaveView />\r\n                            </TabPanel>\r\n                          </TabPanels>\r\n                        </Tabs>\r\n                      </Box>\r\n                      <Divider />\r\n                    </SimpleGrid>\r\n                  </Box>\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <Box\r\n                    maxW=\"100%\"\r\n                    padding=\"4\"\r\n                    width=\"full\"\r\n                    height=\"700\"\r\n                    borderColor=\"blue.500\"\r\n                    borderWidth=\"1px\"\r\n                    borderRadius=\"lg\"\r\n                    overflow=\"scroll\"\r\n                  >\r\n                    <SimpleGrid w=\"168vh\">\r\n                      <HStack>\r\n                        <Box>\r\n                          <Heading as=\"h2\" size=\"lg\">\r\n                            Leaves\r\n                          </Heading>\r\n                        </Box>\r\n                        <Box alignSelf=\"flex-end\">\r\n                          <HStack>\r\n                            <Select\r\n                              value={selectleaveyear}\r\n                              fontSize={20}\r\n                              onChange={(e) =>\r\n                                setSelectLeaveYear(e.target.value)\r\n                              }\r\n                            >\r\n                              {periods.map((row) => {\r\n                                return (\r\n                                  <option key={row.period} value={row.period}>\r\n                                    {row.period}\r\n                                  </option>\r\n                                );\r\n                              })}\r\n                            </Select>\r\n                            {/* <Box size=\"xl\" py={2}>\r\n                              <Text fontSize=\"lg\">\r\n                                <ExportLeave2Excel\r\n                                  filename=\"leave\"\r\n                                  dataset={dataset}\r\n                                  title=\"Leave\"\r\n                                />\r\n                              </Text>\r\n                            </Box> */}\r\n                          </HStack>\r\n                        </Box>\r\n                      </HStack>\r\n                      <Divider />\r\n                      <Box>\r\n                        <Tabs defaultIndex={currentmonth} isLazy>\r\n                          <TabList>\r\n                            {/* <Tab>Chart</Tab>\r\n                          <Tab>Summary</Tab> */}\r\n                            <Tab>January</Tab>\r\n                            <Tab>February</Tab>\r\n                            <Tab>March</Tab>\r\n                            <Tab>April</Tab>\r\n                            <Tab>May</Tab>\r\n                            <Tab>June</Tab>\r\n                            <Tab>July</Tab>\r\n                            <Tab>August</Tab>\r\n                            <Tab>September</Tab>\r\n                            <Tab>October</Tab>\r\n                            <Tab>November</Tab>\r\n                            <Tab>December</Tab>\r\n                          </TabList>\r\n                          <TabPanels>\r\n                            {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Expenses for the Month\"\r\n                    barchartdata={expchartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={1}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={2}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={3}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={4}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={5}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={6}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={7}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={8}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={9}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={10}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={11}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={12}\r\n                              />\r\n                            </TabPanel>\r\n                          </TabPanels>\r\n                        </Tabs>\r\n                      </Box>\r\n                      <Divider />\r\n                    </SimpleGrid>\r\n                  </Box>\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <Box\r\n                    maxW=\"100%\"\r\n                    padding=\"4\"\r\n                    width=\"full\"\r\n                    height=\"700\"\r\n                    borderColor=\"blue.500\"\r\n                    borderWidth=\"1px\"\r\n                    borderRadius=\"lg\"\r\n                    overflow=\"scroll\"\r\n                  >\r\n                    <SimpleGrid w=\"168vh\">\r\n                      <HStack>\r\n                        <Box>\r\n                          <Heading as=\"h2\" size=\"lg\">\r\n                            HOC History\r\n                          </Heading>\r\n                        </Box>\r\n                        <Box alignSelf=\"flex-end\">\r\n                          <HStack>\r\n                            <Select\r\n                              value={selecthocyear}\r\n                              fontSize={20}\r\n                              onChange={(e) => setSelectHocYear(e.target.value)}\r\n                            >\r\n                              {periods.map((row) => {\r\n                                return (\r\n                                  <option key={row.period} value={row.period}>\r\n                                    {row.period}\r\n                                  </option>\r\n                                );\r\n                              })}\r\n                            </Select>\r\n                            <Box size=\"xl\" py={2}>\r\n                              <Button\r\n                                colorScheme=\"teal\"\r\n                                variant=\"solid\"\r\n                                onClick={() => handleExportHoc2Excel()}\r\n                              >\r\n                                Export To Excel\r\n                              </Button>\r\n                            </Box>\r\n                          </HStack>\r\n                        </Box>\r\n                      </HStack>\r\n                      <Divider />\r\n                      <Box>\r\n                        <Tabs defaultIndex={currentmonth} isLazy>\r\n                          <TabList>\r\n                            {/* <Tab>Chart</Tab>\r\n                          <Tab>Summary</Tab> */}\r\n                            <Tab>January</Tab>\r\n                            <Tab>February</Tab>\r\n                            <Tab>March</Tab>\r\n                            <Tab>April</Tab>\r\n                            <Tab>May</Tab>\r\n                            <Tab>June</Tab>\r\n                            <Tab>July</Tab>\r\n                            <Tab>August</Tab>\r\n                            <Tab>September</Tab>\r\n                            <Tab>October</Tab>\r\n                            <Tab>November</Tab>\r\n                            <Tab>December</Tab>\r\n                          </TabList>\r\n                          <TabPanels>\r\n                            {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Expenses for the Month\"\r\n                    barchartdata={expchartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={1}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={2}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={3}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={4}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={5}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={6}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={7}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={8}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={9}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={10}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={11}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <HocTableViewSummary\r\n                                year={\r\n                                  selecthocyear ? selecthocyear : currentyear\r\n                                }\r\n                                month={12}\r\n                              />\r\n                            </TabPanel>\r\n                          </TabPanels>\r\n                        </Tabs>\r\n                      </Box>\r\n                      <Divider />\r\n                    </SimpleGrid>\r\n                  </Box>\r\n                </TabPanel>\r\n              </TabPanels>\r\n            </Tabs>\r\n          </Box>\r\n        </Stack>\r\n\r\n        <Box pt={4}>\r\n          <Copyright />\r\n        </Box>\r\n        <CustomDialog\r\n          isOpen={isLeaveDialogOpen}\r\n          handleClose={handleLeaveDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <LeaveTableAdmin\r\n            setLeavesdata={setLeavesdata}\r\n            leavesdata={leavesdata}\r\n            handleDialogClose={handleLeaveDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isExpenseDialogOpen}\r\n          handleClose={handleExpenseDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <ExpenseTableAdmin\r\n            setExpensesdata={setExpensesdata}\r\n            expensesdata={expensesdata}\r\n            handleDialogClose={handleExpenseDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isPayslipDialogOpen}\r\n          handleClose={handlePayslipDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={true}\r\n          isFullwidth={false}\r\n        >\r\n          <PayslipTableAdmin\r\n            setPayslipsdata={setPayslipsdata}\r\n            payslipsdata={payslipsdata}\r\n            handleDialogClose={handlePayslipDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isDailyAllowancesDialogOpen}\r\n          handleClose={handleDailyAllowancesDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={true}\r\n          isFullwidth={false}\r\n        >\r\n          <DailyAllowancesTableAdmin\r\n            setDailyAllowancesdata={setDailyAllowancesdata}\r\n            dailyallowancesdata={dailyallowancesdata}\r\n            handleDialogClose={handleDailyAllowancesDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <Modal\r\n          closeOnOverlayClick={false}\r\n          isOpen={isExport2ExcelOpen}\r\n          onClose={onExport2ExcelClose}\r\n          size=\"md\"\r\n        >\r\n          <ModalOverlay />\r\n          <ModalContent>\r\n            <ModalCloseButton />\r\n            <ModalBody>\r\n              <Export2ExcelDialog\r\n                state={exp2excelstate}\r\n                setState={setExp2excelstate}\r\n                dataset={hoc}\r\n                onClose={onExport2ExcelClose}\r\n              />\r\n            </ModalBody>\r\n          </ModalContent>\r\n        </Modal>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default EmployeeView;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\AllEmployeesTable.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\HomeOpsSpvr.js",["1586","1587","1588","1589","1590"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\n//import { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Divider,\r\n  Heading,\r\n  HStack,\r\n  Stack,\r\n  Select,\r\n  SimpleGrid,\r\n  Tabs,\r\n  TabList,\r\n  TabPanels,\r\n  Tab,\r\n  TabPanel,\r\n} from \"@chakra-ui/react\";\r\nimport {  Container } from \"@material-ui/core\";\r\n//import CardLayout from \"../helpers/CardLayout\";\r\n//import CardLayout2 from \"../helpers/CardLayout2\";\r\n//import CardLayout3 from \"../helpers/CardLayout3\";\r\nimport Copyright from \"./Copyright\";\r\n//import { useEmployees } from \"./employees/useEmployees\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { useRecoilState } from \"recoil\";\r\n//import { loginLevelState } from \"./data/atomdata\";\r\nimport { usePeriods } from \"./periods/usePeriods\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\n//import LeaveTableViewAdmin from \"./LeaveTableViewAdmin\";\r\n//import LeaveTableAdmin from \"./LeaveTableManager\";\r\n//import ExpenseTableView from \"./ExpenseTableView\";\r\n//import ExpenseTableAdmin from \"./ExpenseTableAdmin\";\r\n//import PayslipTableView from \"./PayslipTableView\";\r\n//import PayslipTableAdmin from \"./PayslipTableAdmin\";\r\n//import DailyAllowancesTableView from \"./DailyAllowancesTableView\";\r\n//import DailyAllowancesTableAdmin from \"./DailyAllowancesTableAdmin\";\r\n//import DailyAllowanceTableViewSummary from \"./DailyAllowancesTableViewSummary\";\r\n//import TrainingsTableViewAdmin from \"./TrainingsTableViewAdmin\";\r\n//import WPExpiryViewAdmin from \"./WPExpiryViewAdmin\";\r\n//import EmployeeTableLeaveView from \"./EmployeeTableLeaveView\";\r\n//import LeavesTableViewSummary from \"./LeavesTableViewSummary\";\r\n//import LeavesTableApproval from \"./LeaveTableApproval\";\r\n//import DailyAllowancesTableApproval from \"./DailyAllowancesTableVeryfy\";\r\n\r\nconst LeaveTableAdmin = React.lazy(() => import(\"./LeaveTableAdmin\"));\r\nconst ExpenseTableAdmin = React.lazy(() => import(\"./ExpenseTableAdmin\"));\r\n// const PayslipTableAdmin = React.lazy(() =>\r\n//   import(\"./PayslipTableAdmin\")\r\n// );\r\nconst DailyAllowancesTableAdmin = React.lazy(() =>\r\n  import(\"./DailyAllowancesTableAdmin\")\r\n);\r\nconst DailyAllowancesTableViewSummary = React.lazy(() =>\r\n  import(\"./DailyAllowancesTableViewSummary\")\r\n);\r\nconst LeavesTableViewSummary = React.lazy(() =>\r\n  import(\"./LeavesTableViewSummary\")\r\n);\r\nconst LeaveTableApproval = React.lazy(() => import(\"./LeaveTableApproval\"));\r\nconst DailyAllowancesTableVerify = React.lazy(() => import(\"./DailyAllowancesTableVerify\"));\r\n\r\n\r\n\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst FILTERSTRING = \"Pending\";\r\n\r\nconst EmployeeView = () => {\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  //const { employees } = useEmployees();\r\n  //const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const [leavesdata, setLeavesdata] = useState([]);\r\n  const [isLeaveDialogOpen, setIsLeaveDialogOpen] = useState(false);\r\n  const [expensesdata, setExpensesdata] = useState([]);\r\n  const [isExpenseDialogOpen, setIsExpenseDialogOpen] = useState(false);\r\n  const [payslipsdata, setPayslipsdata] = useState([]);\r\n  const [isPayslipDialogOpen, setIsPayslipDialogOpen] = useState(false);\r\n  const [dailyallowancesdata, setDailyAllowancesdata] = useState([]);\r\n  const [isDailyAllowancesDialogOpen, setIsDailyAllowancesDialogOpen] =\r\n    useState(false);\r\n  const { periods} = usePeriods()\r\n  const {  loadPendingLeaves } = useLeavesContext();\r\n  const {  loadPendingExpenses } = useExpensesContext();\r\n  const {  loadPendingPayslips } = usePayslipsContext();\r\n  const {  loadPendingDailyAllowances } =\r\n    useDailyAllowancesContext();\r\n  const [selectleaveyear, setSelectLeaveYear] = useState(\"\");\r\n  const [selectsiteallowsyear, setSelectSiteAllowsYear] = useState(\"\");\r\n  const currentyear = new Date().getFullYear();\r\n  const currentmonth = new Date().getMonth();\r\n\r\n  // const handleLeaveDialogOpen = () => {\r\n  //   setLeavesdata([]);\r\n  //   setLeavesdata([...leaves]);\r\n  //   setIsLeaveDialogOpen(true);\r\n  // };\r\n\r\n  const handleLeaveDialogClose = () => {\r\n    setIsLeaveDialogOpen(false);\r\n    loadPendingLeaves(FILTERSTRING);\r\n  };\r\n\r\n  // const handleExpenseDialogOpen = () => {\r\n  //   setExpensesdata([]);\r\n  //   setExpensesdata([...expenses]);\r\n  //   setIsExpenseDialogOpen(true);\r\n  // };\r\n\r\n  const handleExpenseDialogClose = () => {\r\n    setIsExpenseDialogOpen(false);\r\n    loadPendingExpenses(FILTERSTRING);\r\n  };\r\n\r\n  // const handlePayslipDialogOpen = () => {\r\n  //   setPayslipsdata([]);\r\n  //   setPayslipsdata([...payslips]);\r\n  //   setIsPayslipDialogOpen(true);\r\n  // };\r\n\r\n  const handlePayslipDialogClose = () => {\r\n    setIsPayslipDialogOpen(false);\r\n    loadPendingPayslips(FILTERSTRING);\r\n  };\r\n\r\n  // const handleDailyAllowancesDialogOpen = () => {\r\n  //   setDailyAllowancesdata([]);\r\n  //   setDailyAllowancesdata([...dailyallowances]);\r\n  //   setIsDailyAllowancesDialogOpen(true);\r\n  //};\r\n\r\n  const handleDailyAllowancesDialogClose = () => {\r\n    setIsDailyAllowancesDialogOpen(false);\r\n    loadPendingDailyAllowances(FILTERSTRING);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSelectLeaveYear(currentyear);\r\n    setSelectSiteAllowsYear(currentyear);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.appBarSpacer} />\r\n      <div style={{ paddingLeft: 50 }}>\r\n        {/* <h2>Welcome {loginLevel.loginUser}!</h2>\r\n        <h3>Dashboard</h3> */}\r\n      </div>\r\n      <Container maxWidth=\"full\" className={classes.container}>\r\n        <Stack direction=\"column\">\r\n          {/* <Box>\r\n            <CardLayout2>\r\n              <LeaveTableViewAdmin />\r\n            </CardLayout2>\r\n          </Box> */}\r\n          {/* <Box>\r\n            <CardLayout2>\r\n              <WPExpiryViewAdmin />\r\n            </CardLayout2>\r\n          </Box> */}\r\n          {/* <Box>\r\n            <CardLayout2>\r\n              <TrainingsTableViewAdmin />\r\n            </CardLayout2>\r\n          </Box> */}\r\n          <Box\r\n            maxW=\"x3\"\r\n            padding=\"4\"\r\n            width=\"100%\"\r\n            height=\"750\"\r\n            borderColor=\"blue.500\"\r\n            borderWidth=\"1px\"\r\n            borderRadius=\"lg\"\r\n            overflow=\"scroll\"\r\n          >\r\n            <Tabs>\r\n              <TabList>\r\n                {/* <Tab>Employees</Tab> */}\r\n                <Tab>Leaves</Tab>\r\n                <Tab>Site Allowances</Tab>\r\n                <Tab>Leaves Approval</Tab>\r\n                <Tab>Site Allows Verify</Tab>\r\n              </TabList>\r\n              <TabPanels>\r\n                {/* <TabPanel>\r\n                  <Box\r\n                    maxW=\"full\"\r\n                    padding=\"4\"\r\n                    width=\"100%\"\r\n                    height=\"700\"\r\n                    borderColor=\"blue.500\"\r\n                    borderWidth=\"1px\"\r\n                    borderRadius=\"lg\"\r\n                    overflow=\"scroll\"\r\n                  >\r\n                    <SimpleGrid>\r\n                      <Box>\r\n                        <Heading as=\"h2\" size=\"lg\">\r\n                          Employees\r\n                        </Heading>\r\n                      </Box>\r\n                      <Divider />\r\n                      <Box>\r\n                        <Tabs isLazy>\r\n                          <TabPanels>\r\n                            <TabPanel>\r\n                              <EmployeeTableLeaveView />\r\n                            </TabPanel>\r\n                          </TabPanels>\r\n                        </Tabs>\r\n                      </Box>\r\n                      <Divider />\r\n                    </SimpleGrid>\r\n                  </Box>\r\n                </TabPanel> */}\r\n                <TabPanel>\r\n                  <Box\r\n                    maxW=\"100%\"\r\n                    padding=\"4\"\r\n                    width=\"full\"\r\n                    height=\"700\"\r\n                    borderColor=\"blue.500\"\r\n                    borderWidth=\"1px\"\r\n                    borderRadius=\"lg\"\r\n                    overflow=\"scroll\"\r\n                  >\r\n                    <SimpleGrid w=\"168vh\">\r\n                      <HStack>\r\n                        <Box>\r\n                          <Heading as=\"h2\" size=\"lg\">\r\n                            Leaves\r\n                          </Heading>\r\n                        </Box>\r\n                        <Box alignSelf=\"flex-end\">\r\n                          <HStack>\r\n                            <Select\r\n                              value={selectleaveyear}\r\n                              fontSize={20}\r\n                              onChange={(e) =>\r\n                                setSelectLeaveYear(e.target.value)\r\n                              }\r\n                            >\r\n                              {periods.map((row) => {\r\n                                return (\r\n                                  <option key={row.period} value={row.period}>\r\n                                    {row.period}\r\n                                  </option>\r\n                                );\r\n                              })}\r\n                            </Select>\r\n                            {/* <Box size=\"xl\" py={2}>\r\n                              <Text fontSize=\"lg\">\r\n                                <ExportLeave2Excel\r\n                                  filename=\"leave\"\r\n                                  dataset={dataset}\r\n                                  title=\"Leave\"\r\n                                />\r\n                              </Text>\r\n                            </Box> */}\r\n                          </HStack>\r\n                        </Box>\r\n                      </HStack>\r\n                      <Divider />\r\n                      <Box>\r\n                        <Tabs defaultIndex={currentmonth} isLazy>\r\n                          <TabList>\r\n                            {/* <Tab>Chart</Tab>\r\n                          <Tab>Summary</Tab> */}\r\n                            <Tab>January</Tab>\r\n                            <Tab>February</Tab>\r\n                            <Tab>March</Tab>\r\n                            <Tab>April</Tab>\r\n                            <Tab>May</Tab>\r\n                            <Tab>June</Tab>\r\n                            <Tab>July</Tab>\r\n                            <Tab>August</Tab>\r\n                            <Tab>September</Tab>\r\n                            <Tab>October</Tab>\r\n                            <Tab>November</Tab>\r\n                            <Tab>December</Tab>\r\n                          </TabList>\r\n                          <TabPanels>\r\n                            {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Expenses for the Month\"\r\n                    barchartdata={expchartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={1}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={2}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={3}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={4}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={5}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={6}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={7}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={8}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={9}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={10}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={11}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <LeavesTableViewSummary\r\n                                year={\r\n                                  selectleaveyear\r\n                                    ? selectleaveyear\r\n                                    : currentyear\r\n                                }\r\n                                month={12}\r\n                              />\r\n                            </TabPanel>\r\n                          </TabPanels>\r\n                        </Tabs>\r\n                      </Box>\r\n                      <Divider />\r\n                    </SimpleGrid>\r\n                  </Box>\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <Box\r\n                    maxW=\"x3\"\r\n                    padding=\"4\"\r\n                    width=\"100%\"\r\n                    height=\"700\"\r\n                    borderColor=\"blue.500\"\r\n                    borderWidth=\"1px\"\r\n                    borderRadius=\"lg\"\r\n                    overflow=\"scroll\"\r\n                  >\r\n                    <SimpleGrid w=\"168vh\">\r\n                      <HStack>\r\n                        <Box>\r\n                          <Heading as=\"h2\" size=\"lg\">\r\n                            Site Allowances\r\n                          </Heading>\r\n                        </Box>\r\n                        <Box alignSelf=\"flex-end\">\r\n                          <HStack>\r\n                            <Select\r\n                              value={selectsiteallowsyear}\r\n                              fontSize={20}\r\n                              onChange={(e) =>\r\n                                setSelectSiteAllowsYear(e.target.value)\r\n                              }\r\n                            >\r\n                              {periods.map((row) => {\r\n                                return (\r\n                                  <option key={row.period} value={row.period}>\r\n                                    {row.period}\r\n                                  </option>\r\n                                );\r\n                              })}\r\n                            </Select>\r\n                            {/* <Box size=\"xl\" py={2}>\r\n                              <Text fontSize=\"lg\">\r\n                                <ExportLeave2Excel\r\n                                  filename=\"leave\"\r\n                                  dataset={dataset}\r\n                                  title=\"Leave\"\r\n                                />\r\n                              </Text>\r\n                            </Box> */}\r\n                          </HStack>\r\n                        </Box>\r\n                      </HStack>\r\n                      <Divider />\r\n                      <Box>\r\n                        <Tabs defaultIndex={currentmonth} isLazy>\r\n                          <TabList>\r\n                            {/* <Tab>Chart</Tab>\r\n                <Tab>Summary</Tab> */}\r\n                            <Tab>January</Tab>\r\n                            <Tab>February</Tab>\r\n                            <Tab>March</Tab>\r\n                            <Tab>April</Tab>\r\n                            <Tab>May</Tab>\r\n                            <Tab>June</Tab>\r\n                            <Tab>July</Tab>\r\n                            <Tab>August</Tab>\r\n                            <Tab>September</Tab>\r\n                            <Tab>October</Tab>\r\n                            <Tab>November</Tab>\r\n                            <Tab>December</Tab>\r\n                          </TabList>\r\n                          <TabPanels>\r\n                            {/* <TabPanel>\r\n                  <BarChart\r\n                    heading=\"Site Allowances for the Month\"\r\n                    barchartdata={paychartdata}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <SummaryTableView columns={columns} data={data} />\r\n                </TabPanel> */}\r\n                            <TabPanel>\r\n                              <DailyAllowancesTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"01\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowancesTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"02\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowancesTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"03\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowancesTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"04\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowancesTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"05\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowancesTableViewSummary\r\n                                year={currentyear}\r\n                                month=\"06\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowancesTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"07\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowancesTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"08\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowancesTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"09\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowancesTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"10\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowancesTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"11\"\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                              <DailyAllowancesTableViewSummary\r\n                                year={\r\n                                  selectsiteallowsyear\r\n                                    ? selectsiteallowsyear\r\n                                    : currentyear\r\n                                }\r\n                                month=\"12\"\r\n                              />\r\n                            </TabPanel>\r\n                          </TabPanels>\r\n                        </Tabs>\r\n                      </Box>\r\n                      <Divider />\r\n                    </SimpleGrid>\r\n                  </Box>\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <Box\r\n                    maxW=\"full\"\r\n                    padding=\"4\"\r\n                    width=\"100%\"\r\n                    height=\"700\"\r\n                    borderColor=\"blue.500\"\r\n                    borderWidth=\"1px\"\r\n                    borderRadius=\"lg\"\r\n                    overflow=\"scroll\"\r\n                  >\r\n                    <LeaveTableApproval />\r\n                  </Box>\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <Box\r\n                    maxW=\"full\"\r\n                    padding=\"4\"\r\n                    width=\"100%\"\r\n                    height=\"700\"\r\n                    borderColor=\"blue.500\"\r\n                    borderWidth=\"1px\"\r\n                    borderRadius=\"lg\"\r\n                    overflow=\"scroll\"\r\n                  >\r\n                    <DailyAllowancesTableVerify />\r\n                  </Box>\r\n                </TabPanel>\r\n              </TabPanels>\r\n            </Tabs>\r\n          </Box>\r\n        </Stack>\r\n\r\n        <Box pt={4}>\r\n          <Copyright />\r\n        </Box>\r\n        <CustomDialog\r\n          isOpen={isLeaveDialogOpen}\r\n          handleClose={handleLeaveDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <LeaveTableAdmin\r\n            setLeavesdata={setLeavesdata}\r\n            leavesdata={leavesdata}\r\n            handleDialogClose={handleLeaveDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isExpenseDialogOpen}\r\n          handleClose={handleExpenseDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <ExpenseTableAdmin\r\n            setExpensesdata={setExpensesdata}\r\n            expensesdata={expensesdata}\r\n            handleDialogClose={handleExpenseDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        {/* <CustomDialog\r\n          isOpen={isPayslipDialogOpen}\r\n          handleClose={handlePayslipDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={true}\r\n          isFullwidth={false}\r\n        >\r\n          <PayslipTableAdmin\r\n            setPayslipsdata={setPayslipsdata}\r\n            payslipsdata={payslipsdata}\r\n            handleDialogClose={handlePayslipDialogClose}\r\n          />\r\n        </CustomDialog> */}\r\n        <CustomDialog\r\n          isOpen={isDailyAllowancesDialogOpen}\r\n          handleClose={handleDailyAllowancesDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={true}\r\n          isFullwidth={false}\r\n        >\r\n          <DailyAllowancesTableAdmin\r\n            setDailyAllowancesdata={setDailyAllowancesdata}\r\n            dailyallowancesdata={dailyallowancesdata}\r\n            handleDialogClose={handleDailyAllowancesDialogClose}\r\n          />\r\n        </CustomDialog>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default EmployeeView;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\payslips\\usePayslipsBatch.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\PaySummary.js",["1591"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport currency from \"currency.js\";\r\n//import PrintPaySummary from \"./PrintPaySummary\";\r\nimport {\r\n  Box,\r\n  //Heading,\r\n  //Text,\r\n  //Table,\r\n  //Thead,\r\n  //Tbody,\r\n  //Tr,\r\n  //Th,\r\n  //Td,\r\n  //chakra,\r\n} from \"@chakra-ui/react\";\r\n//import { TriangleDownIcon, TriangleUpIcon } from \"@chakra-ui/icons\";\r\nimport MaterialTable from \"material-table\";\r\nimport { Grid, TextField } from \"@material-ui/core\";\r\n//import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\n//import { formatPriceZero } from \"../helpers/Utils\";\r\nimport { payrunState } from \"./data/atomdata\";\r\n//import { usePayslipsContext } from \"../context/payslips_context\";\r\n//import { ComponentToPrint } from \"./ComponentToPrint\";\r\n//import PaySummaryTable from \"./PaySummaryTable\";\r\n\r\n// const initial_state = [\r\n//   {\r\n//     totalwages: 0,\r\n//     totaltap: 0,\r\n//     totalscp: 0,\r\n//     totalallows: 0,\r\n//     totaldeducts: 0,\r\n//     totalpayroll: 0,\r\n//   },\r\n// ];\r\n\r\nconst PaySummary = ({ singlebatchpayslip }) => {\r\n  //const classes = useStyles();\r\n  //const componentRef = useRef();\r\n  //const [state, setState] = useState(initial_state);\r\n  const [payrundata, setPayrundata] = useRecoilState(payrunState);\r\n  //const [payrunstatus, setPayrunStatus] = useRecoilState(payrunStatusState);\r\n  const [isCalc, setIsCalc] = useState(true);\r\n  //const { payrun, updatePayrun, payslip_period } = usePayslipsContext();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"name\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Wages\",\r\n        field: \"wages_bnd\",\r\n        editable: \"never\",\r\n        type: \"currency\",\r\n      },\r\n      {\r\n        title: \"TAP Amount\",\r\n        field: \"tap_amount_bnd\",\r\n        editable: \"never\",\r\n        type: \"currency\",\r\n      },\r\n      {\r\n        title: \"SCP Amount\",\r\n        field: \"scp_amount_bnd\",\r\n        editable: \"never\",\r\n        type: \"currency\",\r\n      },\r\n      {\r\n        title: \"Site Allows\",\r\n        field: \"site_allows_bnd\",\r\n        editable: \"never\",\r\n        type: \"currency\",\r\n      },\r\n      {\r\n        title: \"Exps Claims\",\r\n        field: \"expenses_claims_bnd\",\r\n        editable: \"never\",\r\n        type: \"currency\",\r\n      },\r\n      {\r\n        title: \"Allowances\",\r\n        field: \"total_allowances_bnd\",\r\n        editable: \"never\",\r\n        type: \"currency\",\r\n      },\r\n      {\r\n        title: \"Deductions\",\r\n        field: \"total_deductions_bnd\",\r\n        editable: \"never\",\r\n        type: \"currency\",\r\n      },\r\n      {\r\n        title: \"Nett Pay\",\r\n        field: \"nett_pay_bnd\",\r\n        editable: \"never\",\r\n        type: \"currency\",\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  // const columns1 = [\r\n  //   {\r\n  //     Header: \"Name\",\r\n  //     accessor: \"name\",\r\n  //   },\r\n  //   {\r\n  //     Header: \"Wages\",\r\n  //     accessor: \"wages_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n\r\n  //   {\r\n  //     Header: \"TAP Amount\",\r\n  //     accessor: \"tap_amount_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  //   {\r\n  //     Header: \"SCP Amount\",\r\n  //     accessor: \"scp_amount_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  //   {\r\n  //     Header: \"Site Allows\",\r\n  //     accessor: \"site_allows_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  //   {\r\n  //     Header: \"Exps Claims\",\r\n  //     accessor: \"expenses_claims_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  //   {\r\n  //     Header: \"Allowances\",\r\n  //     accessor: \"total_allowances_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  //   {\r\n  //     Header: \"Deductions\",\r\n  //     accessor: \"total_deductions_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  //   {\r\n  //     Header: \"Nett Pay\",\r\n  //     accessor: \"nett_pay_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  // ];\r\n\r\n  // const exportPdfTable = () => {\r\n  //   PrintPaySummary((singlebatchpayslip = { singlebatchpayslip }));\r\n  // };\r\n\r\n  const handleCalcTotals = () => {\r\n    const data = singlebatchpayslip;\r\n    const totalwages = data.reduce((acc, item) => {\r\n      return acc + item.wages_bnd;\r\n    }, 0);\r\n    const totalsitesallows = data.reduce((acc, item) => {\r\n      return acc + item.site_allows_bnd;\r\n    }, 0);\r\n    const totalexpclaims = data.reduce((acc, item) => {\r\n      return acc + item.expenses_claims_bnd;\r\n    }, 0);\r\n    const totalallows = data.reduce((acc, item) => {\r\n      return acc + item.total_allowances_bnd;\r\n    }, 0);\r\n    const totaldeducts = data.reduce((acc, item) => {\r\n      return acc + item.total_deductions_bnd;\r\n    }, 0);\r\n    const totaltap = data.reduce((acc, item) => {\r\n      return acc + item.tap_amount_bnd;\r\n    }, 0);\r\n    const totalscp = data.reduce((acc, item) => {\r\n      return acc + item.scp_amount_bnd;\r\n    }, 0);\r\n    const totalpayroll = data.reduce((acc, item) => {\r\n      return acc + item.nett_pay_bnd;\r\n    }, 0);\r\n\r\n    setPayrundata({\r\n      ...payrundata,\r\n      totalpayroll: totalpayroll,\r\n      totalwages: totalwages,\r\n      totaltap: totaltap,\r\n      totalscp: totalscp,\r\n      totalallows: totalallows,\r\n      totaldeducts: totaldeducts,\r\n      totalsitesallows: totalsitesallows,\r\n      totalexpensesclaims: totalexpclaims,\r\n    });\r\n    // payrun\r\n    //   .filter((r) => r.payrun === payslip_period)\r\n    //   .map((rec) => {\r\n    //     //update payrun\r\n    //     return updatePayrun({\r\n    //       id: rec.id,\r\n    //       totalpayroll: totalpayroll,\r\n    //       totalwages: totalwages,\r\n    //       totaltap: totaltap,\r\n    //       totalscp: totalscp,\r\n    //       totalallows: totalallows,\r\n    //       totaldeducts: totaldeducts,\r\n    //       totalsitesallows: totalsitesallows,\r\n    //       totalexpensesclaims: totalexpclaims,\r\n    //     });\r\n    //   });\r\n    // console.log(\"payrundata\", payrundata);\r\n    // console.log(\r\n    //   \"totals\",\r\n    //   totalpayroll,\r\n    //   totalwages,\r\n    //   totaltap,\r\n    //   totalscp,\r\n    //   totalallows,\r\n    //   totaldeducts\r\n    // );\r\n  };\r\n\r\n  // const handleSaveCalcTotals = (e) => {\r\n  //   e.preventDefault();\r\n  //   handleCalcTotals();\r\n  //};\r\n\r\n  useEffect(() => {\r\n    handleCalcTotals();\r\n    setIsCalc(false);\r\n  }, [isCalc]);\r\n\r\n  return (\r\n    <div>\r\n      {/* <div style={{ display: \"none\" }}> */}\r\n      <div>\r\n        {/* <div style={{ border: \"1px solid black\" }} align=\"center\">\r\n          <button onClick={() => exportPdfTable()}>\r\n            <Heading size=\"sm\">Print Payroll Summary Report!</Heading>\r\n          </button>\r\n        </div> */}\r\n        {/* <div>\r\n          <div style={{ display: \"none\" }}>\r\n            <ComponentToPrint ref={componentRef} />\r\n          </div>\r\n          <button onClick={handlePrint}>Print this out!</button>\r\n        </div> */}\r\n      </div>\r\n      <form>\r\n        <Grid container direction=\"row\" style={{ border: \"1px solid black\" }}>\r\n          <Grid\r\n          // item\r\n          // sm={12}\r\n          // align=\"center\"\r\n          // style={{ border: \"1px solid black\" }}\r\n          >\r\n            <div>\r\n              {/* <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              style={{ marginLeft: 5 }}\r\n              onClick={(e) => handleSaveCalcTotals(e)}\r\n            >\r\n              Save <Icon className={classes.rightIcon}>send</Icon>\r\n            </Button> */}\r\n              {/* <Heading size=\"sm\">Summary</Heading> */}\r\n              {/* <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                style={{ marginLeft: 5 }}\r\n                onClick={(e) => handle_Print(e)}\r\n              >\r\n                Print <Icon className={classes.rightIcon}>send</Icon>\r\n              </Button> */}\r\n              {/* <div>\r\n                <ReactToPrint\r\n                  trigger={(e) => {\r\n                    handle_Print(e);\r\n                  }}\r\n                  content={() => this.componentRef}\r\n                />\r\n                <ComponentToPrint ref={(el) => (this.componentRef = el)} />\r\n              </div> */}\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container direction=\"row\" style={{ border: \"1px solid white\" }}>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Period\"\r\n                name=\"period\"\r\n                variant=\"filled\"\r\n                type=\"text\"\r\n                value={payrundata.period}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Pay Run Batch\"\r\n                name=\"payrun\"\r\n                variant=\"filled\"\r\n                type=\"text\"\r\n                value={payrundata.payrun}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Status\"\r\n                name=\"status\"\r\n                variant=\"filled\"\r\n                value={payrundata.status}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Payroll Total\"\r\n                name=\"paytotal\"\r\n                variant=\"filled\"\r\n                type=\"number\"\r\n                value={currency(payrundata.totalpayroll)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container direction=\"row\" style={{ border: \"1px solid white\" }}>\r\n          <Grid\r\n            item\r\n            sm={12}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            {/* <Box h=\"400\" overflow=\"scroll\">\r\n              <PaySummaryTable columns={columns} data={singlebatchpayslip} />\r\n            </Box> */}\r\n            <Box h=\"400\" w=\"full\" overflow=\"scroll\">\r\n              <MaterialTable\r\n                columns={columns}\r\n                data={singlebatchpayslip}\r\n                title=\"Payroll\"\r\n                options={{\r\n                  filtering: false,\r\n                  search: false,\r\n                  toolbar: false,\r\n                  paging: false,\r\n                  headerStyle: {\r\n                    backgroundColor: \"lightblue\",\r\n                    color: \"primary\",\r\n                  },\r\n                  showTitle: false,\r\n                }}\r\n              />\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container direction=\"row\" style={{ border: \"1px solid white\" }}>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total Wages\"\r\n                name=\"totalwages\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totalwages)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total TAP\"\r\n                name=\"totaltap\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totaltap)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total SCP\"\r\n                name=\"totalscp\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totalscp)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total Sites Allows\"\r\n                name=\"totalsitesallows\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totalsiteallows)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total Expenses Claims\"\r\n                name=\"totalsitesallows\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totalexpensesclaims)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total Allowances\"\r\n                name=\"totalallows\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totalallows)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total Deductions\"\r\n                name=\"totaldeducts\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totaldeducts)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total Payroll\"\r\n                name=\"totalpayroll\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totalpayroll)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   root: {\r\n//     flexGrow: 1,\r\n//   },\r\n//   button: {\r\n//     margin: theme.spacing(1),\r\n//   },\r\n//   container: {\r\n//     margin: 0,\r\n//     padding: 0,\r\n//     width: \"80vw\",\r\n//     display: \"grid\",\r\n//     gridTemplateColumns: \"repeat(auto-fill,250px)\",\r\n//     gridAutoRows: \"10px\",\r\n//     position: \"absolute\",\r\n//     left: \"50%\",\r\n//     transform: \"translateX(-50%)\",\r\n//     justifyContent: \"center\",\r\n//     backgroundColor: \"primary\",\r\n//   },\r\n//   fixedHeight: {\r\n//     height: 800,\r\n//   },\r\n//   paper: {\r\n//     padding: theme.spacing(10),\r\n//     // display: \"flex\",\r\n//     display: \"flex\",\r\n//     overflow: \"auto\",\r\n//     flexDirection: \"column\",\r\n//     border: \"1px solid\",\r\n//     width: \"100%\",\r\n//     color: \"primary\",\r\n//     bcakgroundColor: \"black\",\r\n//   },\r\n//   card: {\r\n//     backgroundColor: \"black\",\r\n//   },\r\n//   section: {\r\n//     width: \"80vw\",\r\n//     margin: \"1rem auto\",\r\n//     maxWidth: \"var(--max-width)\",\r\n//   },\r\n//   underline: {\r\n//     width: \"5rem\",\r\n//     height: \"0.25rem\",\r\n//     marginBottom: \"1.25rem\",\r\n//     background: \"var(--clr-primary-5)\",\r\n//     marginLeft: \"auto\",\r\n//     marginRight: \"auto\",\r\n//   },\r\n//   title: {\r\n//     marginbottom: \"4rem\",\r\n//     textAlign: \"center\",\r\n//   },\r\n//   jobscenter: {\r\n//     width: \"80vw\",\r\n//     margin: \"0 auto\",\r\n//     maxWidth: \"var(--max-width)\",\r\n//     flexDirection: \"row\",\r\n//   },\r\n//   btncontainer: {\r\n//     display: \"flex\",\r\n//     flexDirection: \"row\",\r\n//     justifyContent: \"center\",\r\n//     marginBottom: \"4rem\",\r\n//     flexWrap: \"wrap\",\r\n//   },\r\n//   jobbtn: {\r\n//     background: \"transparent\",\r\n//     borderColor: \"transparent\",\r\n//     textTransform: \"capitalize\",\r\n//     fontSize: \"1.25rem\",\r\n//     letterSpacing: \"var(--spacing)\",\r\n//     margin: \"0 0.5rem\",\r\n//     transition: \"var(--transition)\",\r\n//     cursor: \"pointer\",\r\n//     padding: \"0.25rem 0\",\r\n//     lineHeight: \"1\",\r\n//     outlineColor: \"var(--clr-primary-10)\",\r\n//     \"&:hover\": {\r\n//       color: \"var(--clr-primary-5)\",\r\n//       boxShadow: \"0 2px var(--clr-primary-5)\",\r\n//     },\r\n//   },\r\n//   activebtn: {\r\n//     color: \"var(--clr-primary-5)\",\r\n//     boxShadow: \"0 2px var(--clr-primary-5)\",\r\n//   },\r\n//   jobinfo: {\r\n//     fontWeight: \"400\",\r\n//   },\r\n//   divider: {\r\n//     // Theme Color, or use css color in quote\r\n//     background: \"white\",\r\n//   },\r\n//   textField: {\r\n//     marginLeft: theme.spacing(1),\r\n//     marginRight: theme.spacing(1),\r\n//     width: 350,\r\n//   },\r\n//   divContainer: {\r\n//     display: \"flex\",\r\n//     flexDirection: \"row\",\r\n//   },\r\n// }));\r\n\r\nexport default PaySummary;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\PrintPaySummary.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableViewManager.js",["1592","1593","1594","1595"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  //useSetRecoilState,\r\n  useRecoilValue,\r\n  //useRecoilState,\r\n  //useRecoilValueLoadable,\r\n} from \"recoil\";\r\nimport {\r\n  allowsPeriodState,\r\n  //allowsDataState,\r\n  //empidState,\r\n} from \"./data/atomdata\";\r\n//import { fetchDailyAllowancesSelector } from \"./data/selectordata\";\r\n//import AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\n//import DeleteIcon from \"@material-ui/icons/Delete\";\r\n//import CheckIcon from \"@material-ui/icons/Check\";\r\n//import SearchIcon from \"@material-ui/icons/Search\";\r\n//import ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\n//import { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\n//import DailyAllowsDetlsTable from \"./DailyAllowsDetlsTable\";\r\nimport { useDailyAllowsStatus } from \"./dailyallows/useDailyAllowsStatus\";\r\n\r\nconst FILTERSTRING = \"Verified\";\r\n\r\nexport default function DailyAllowancesTable() {\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  //const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  //const [tmpallowsdata, setTmpallowsdata] = useState([]);\r\n  const allows_period = useRecoilValue(allowsPeriodState);\r\n  //const allows_empid = useRecoilValue(empidState);\r\n  //const [allowsdata, setAllowsdata] = useRecoilState(allowsDataState);\r\n  const { dailyallowsstatus, setDailyAllowsStatusId } = useDailyAllowsStatus();\r\n  //const setEmpID = useSetRecoilState(empidState);\r\n  const title = `Site Allowances (${allows_period})`;\r\n  //const {\r\n  //dailyallowances,\r\n  //loadPendingDailyAllowances,\r\n  //singlebatch_dailyallowance,\r\n  //inglebatch_dailyallowance_loading,\r\n  //deleteDailyAllowance,\r\n  //setEditDailyAllowanceID,\r\n  //setIsDailyAllowanceEditingOn,\r\n  //setIsDailyAllowanceEditingOff,\r\n  //resetSingleDailyAllowance,\r\n  //dailyallowance_period,\r\n  //getSingleBatchDailyAllowance,\r\n  //} = useDailyAllowancesContext();\r\n\r\n  const columns = useMemo(() => [\r\n    {\r\n      title: \"Name\",\r\n      field: \"name\",\r\n    },\r\n    { title: \"Period\", field: \"period\" },\r\n    { title: \"Location\", field: \"location\" },\r\n    { title: \"Manager\", field: \"manager\" },\r\n    { title: \"Days\", field: \"no_of_days\", type: \"numeric\" },\r\n    { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n    { title: \"Status\", field: \"status\" },\r\n  ],[]);\r\n\r\n  // useEffect(() => {\r\n  //   setDailyAllowsStatusId(FILTERSTRING);\r\n  // }, []);\r\n\r\n  //const handleDialogOpen = () => {\r\n  //console.log(\"allowsdetls\", allowsdata, allowsdataRef, singlebatch_dailyallowsdetl);\r\n  //setAllowsdata({ singlebatch_dailyallowsdetl });\r\n  //setIsDialogOpen(true);\r\n  //};\r\n\r\n  //const handleDialogClose = () => {\r\n  //setIsDialogOpen(false);\r\n  //getSingleBatchDailyAllowance(dailyallowance_period);\r\n  //};\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={dailyallowsstatus\r\n            .filter((r)=>r.status === \"Submitted\" || r.status === \"Verified\")\r\n          }\r\n          title={title}\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"black\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n  dialog: {\r\n    width: 1000,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTableAdmin.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\PayForm.js",["1596","1597","1598","1599"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  //ButtonGroup,\r\n  Grid,\r\n  //GridItem,\r\n  Icon,\r\n  //Input,\r\n  TextField,\r\n  //FormControlLabel,\r\n  Divider,\r\n  //ListSubheader,\r\n  //MenuItem,\r\n  //Select,\r\n  NativeSelect,\r\n  InputLabel,\r\n} from \"@material-ui/core\";\r\nimport { Box, Checkbox, Heading, Text } from \"@chakra-ui/react\";\r\nimport currency from \"currency.js\";\r\n//import CurrencyTextField from \"@unicef/material-ui-currency-textfield\";\r\n//import { Autocomplete } from \"@material-ui/lab\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { usePayslipsBatch } from \"./payslips/usePayslipsBatch\";\r\n//import { useUpdatePayslips } from \"./payslips/useUpdatePayslips\";\r\n//import { usePayslipsContext } from \"../context/payslips_context\";\r\n//import { useAllowances } from \"./allowances/useAllowances\";\r\n\r\nconst initial_state = [\r\n  {\r\n    name: \"\",\r\n    period: \"\",\r\n    date: \"\",\r\n    payrun: \"\",\r\n    bank_name: \"\",\r\n    bank_acno: \"\",\r\n    tap_acno: \"\",\r\n    scp_acno: \"\",\r\n    empid: \"\",\r\n    status: \"\",\r\n    allows_type1: \" \",\r\n    allows_type1amt: 0,\r\n    allows_type2: \" \",\r\n    allows_type2amt: 0,\r\n    allows_type3: \" \",\r\n    allows_type3amt: 0,\r\n    allows_type4: \" \",\r\n    allows_type4amt: 0,\r\n    allows_type5: \" \",\r\n    allows_type5amt: 0,\r\n    allows_type6: \" \",\r\n    allows_type6amt: 0,\r\n    allows_type7: \" \",\r\n    allows_type7amt: 0,\r\n    allows_type8: \" \",\r\n    allows_type8amt: 0,\r\n    deducts_type1: \" \",\r\n    deducts_type1amt: 0,\r\n    deducts_type2: \" \",\r\n    deducts_type2amt: 0,\r\n    deducts_type3: \" \",\r\n    deducts_type3amt: 0,\r\n    deducts_type4: \" \",\r\n    deducts_type4amt: 0,\r\n    deducts_type5: \" \",\r\n    deducts_type5amt: 0,\r\n    deducts_type6: \" \",\r\n    deducts_type6amt: 0,\r\n    deducts_type7: \" \",\r\n    deducts_type7amt: 0,\r\n    deducts_type8: \" \",\r\n    deducts_type8amt: 0,\r\n    tap_checkbox: false,\r\n    salary_currency: \" \",\r\n    currency_rate: 1,\r\n\r\n    wages: 0,\r\n    nett_pay: 0,\r\n    tap_amount: 0,\r\n    scp_amount: 0,\r\n    total_allowances: 0,\r\n    total_deductions: 0,\r\n    site_allows: 0,\r\n    expenses_claims: 0,\r\n\r\n    nett_pay_bnd: 0,\r\n    wages_bnd: 0,\r\n    site_allows_bnd: 0,\r\n    expenses_claims_bnd: 0,\r\n    tap_amount_bnd: 0,\r\n    scp_amount_bnd: 0,\r\n    total_allowances_bnd: 0,\r\n    total_deductions_bnd: 0,\r\n  },\r\n];\r\n\r\nconst PayForm = ({\r\n  formdata,\r\n  setFormdata,\r\n  loadFormdata,\r\n  setLoadFormdata,\r\n  payitems,\r\n  //setLoadUpdatedata,\r\n  rowindex,\r\n  //isCalc,\r\n  isStart,\r\n  //setIsStart,\r\n  //setIsCalc,\r\n  singlebatchpayslip,\r\n}) => {\r\n  const classes = useStyles();\r\n  const [state, setState] = useState(initial_state);\r\n  //const { allowances } = useAllowances();\r\n  //const { payslipsbatch, psbpayrunId, setPSBPayrunId } = usePayslipsBatch();\r\n  //const updatePayslips = useUpdatePayslips();\r\n  //const { singlebatchpayslip } = usePayslipsContext();\r\n  const [isLoad, setIsLoad] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setState((prev) => (prev = { ...formdata }));\r\n    setLoadFormdata(false);\r\n  }, [loadFormdata]);\r\n\r\n  useEffect(() => {\r\n    if (state) {\r\n      handleCalc();\r\n      setIsLoad(false);\r\n    }\r\n  }, [isLoad]);\r\n\r\n  const Update_Empdata = ({ name, value }) => {\r\n    let data = singlebatchpayslip[rowindex];\r\n    data[name] = value;\r\n    data.tableData.checked = true;\r\n    //console.log(\"update data\", data);\r\n    //console.log(\"update payslip\", singlebatchpayslip[rowindex]);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    e.preventDefault();\r\n\r\n    const { name, type, value } = e.target;\r\n    let val =\r\n      type === \"number\"\r\n        ? isNaN(value) || value === undefined\r\n          ? 0\r\n          : parseFloat(value)\r\n        : value;\r\n\r\n    //setFormInput({ [name]: val });\r\n    setState((prev) => (prev = { ...state, [name]: val }));\r\n    Update_Empdata({ name: name, value: val });\r\n    setIsLoad(true);\r\n  };\r\n\r\n  const handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    handleCalc();\r\n  };\r\n\r\n  const handleCalc = (e) => {\r\n    //console.log(\"start\", isStart)\r\n    if (isStart) {\r\n      return;\r\n    }\r\n    if (!usePayslipsBatch) {\r\n      return;\r\n    }\r\n    if (!singlebatchpayslip) {\r\n      return;\r\n    }\r\n    if (!state) {\r\n      return;\r\n    }\r\n    var wages = 0,\r\n      totalTAP = 0,\r\n      totalSCP = 0,\r\n      nettPay = 0.0,\r\n      allows = 0,\r\n      deducts = 0,\r\n      siteallows = 0,\r\n      expsclaims = 0,\r\n      wagesbnd = 0,\r\n      totalTAPbnd = 0,\r\n      totalSCPbnd = 0,\r\n      nettPaybnd = 0,\r\n      allowsbnd = 0,\r\n      deductsbnd = 0,\r\n      siteallowsbnd = 0,\r\n      expsclaimsbnd = 0;\r\n    let data = singlebatchpayslip[rowindex];\r\n    if (!data) {\r\n      return false;\r\n    }\r\n    wages = isNaN(state.wages) || state.wages === undefined ? 0 : state.wages;\r\n    totalTAP = state.tap_checkbox ? Math.ceil(wages * 0.05) : 0;\r\n    totalSCP = state.tap_checkbox\r\n      ? Math.round((wages + Number.EPSILON) * 0.035 * 100) / 100\r\n      : 0;\r\n    if (totalSCP > 98) {\r\n      totalSCP = 98;\r\n    }\r\n    //console.log(\"scp\", totalSCP);\r\n    siteallows = parseFloat(isNaN(state.site_allows) ? 0 : state.site_allows);\r\n    expsclaims = parseFloat(\r\n      isNaN(state.expenses_claims) ? 0 : state.expenses_claims\r\n    );\r\n\r\n    allows =\r\n      parseFloat(isNaN(state.allows_type3amt) ? 0 : state.allows_type3amt) +\r\n      parseFloat(isNaN(state.allows_type4amt) ? 0 : state.allows_type4amt) +\r\n      parseFloat(isNaN(state.allows_type5amt) ? 0 : state.allows_type5amt) +\r\n      parseFloat(isNaN(state.allows_type6amt) ? 0 : state.allows_type6amt) +\r\n      parseFloat(isNaN(state.allows_type7amt) ? 0 : state.allows_type7amt) +\r\n      parseFloat(isNaN(state.allows_type8amt) ? 0 : state.allows_type8amt);\r\n\r\n    deducts =\r\n      parseFloat(isNaN(state.deducts_type1amt) ? 0 : state.deducts_type1amt) +\r\n      parseFloat(isNaN(state.deducts_type2amt) ? 0 : state.deducts_type2amt) +\r\n      parseFloat(isNaN(state.deducts_type3amt) ? 0 : state.deducts_type3amt) +\r\n      parseFloat(isNaN(state.deducts_type4amt) ? 0 : state.deducts_type4amt) +\r\n      parseFloat(isNaN(state.deducts_type5amt) ? 0 : state.deducts_type5amt) +\r\n      parseFloat(isNaN(state.deducts_type6amt) ? 0 : state.deducts_type6amt) +\r\n      parseFloat(isNaN(state.deducts_type7amt) ? 0 : state.deducts_type7amt) +\r\n      parseFloat(isNaN(state.deducts_type8amt) ? 0 : state.deducts_type8amt);\r\n\r\n    allows = isNaN(allows) ? 0 : allows;\r\n    deducts = isNaN(deducts) ? 0 : deducts;\r\n\r\n    nettPay =\r\n      wages + siteallows + expsclaims - totalTAP - totalSCP + allows - deducts;\r\n\r\n    if (state.currency === \"BND\") {\r\n      wagesbnd = wages;\r\n      allowsbnd = allows;\r\n      deductsbnd = deducts;\r\n      totalTAPbnd = totalTAP;\r\n      totalSCPbnd = totalSCP;\r\n      siteallowsbnd = siteallows;\r\n      expsclaimsbnd = expsclaims;\r\n      nettPaybnd = nettPay;\r\n    } else {\r\n      wagesbnd =\r\n        Math.round((wages + Number.EPSILON) * state.currency_rate * 100) / 100;\r\n      allowsbnd =\r\n        Math.round((allows + Number.EPSILON) * state.currency_rate * 100) / 100;\r\n      deductsbnd =\r\n        Math.round((deducts + Number.EPSILON) * state.currency_rate * 100) /\r\n        100;\r\n      totalTAPbnd =\r\n        Math.round((totalTAP + Number.EPSILON) * state.currency_rate * 100) /\r\n        100;\r\n      totalSCPbnd =\r\n        Math.round((totalSCP + Number.EPSILON) * state.currency_rate * 100) /\r\n        100;\r\n      siteallowsbnd =\r\n        Math.round((siteallows + Number.EPSILON) * state.currency_rate * 100) /\r\n        100;\r\n      expsclaimsbnd =\r\n        Math.round((expsclaims + Number.EPSILON) * state.currency_rate * 100) /\r\n        100;\r\n      nettPaybnd =\r\n        Math.round((nettPay + Number.EPSILON) * state.currency_rate * 100) /\r\n        100;\r\n    }\r\n\r\n    setState(\r\n      (prev) =>\r\n        (prev = {\r\n          ...state,\r\n          wages: wages,\r\n          total_allowances: allows,\r\n          total_deductions: deducts,\r\n          tap_amount: totalTAP,\r\n          scp_amount: totalSCP,\r\n          site_allows: siteallows,\r\n          expenses_claims: expsclaims,\r\n          nett_pay: nettPay,\r\n          wages_bnd: wagesbnd,\r\n          total_allowances_bnd: allowsbnd,\r\n          total_deductions_bnd: deductsbnd,\r\n          tap_amount_bnd: totalTAPbnd,\r\n          scp_amount_bnd: totalSCPbnd,\r\n          site_allows_bnd: siteallowsbnd,\r\n          expenses_claims_bnd: expsclaimsbnd,\r\n          nett_pay_bnd: nettPaybnd,\r\n        })\r\n    );\r\n\r\n    //update employee data\r\n    //data.wages = state.wages;\r\n    data.tap_amount = totalTAP;\r\n    data.scp_amount = totalSCP;\r\n    data.total_allowances = allows;\r\n    data.total_deductions = deducts;\r\n    data.site_allows = siteallows;\r\n    data.expenses_claims = expsclaims;\r\n    data.nett_pay = nettPay;\r\n    data.wages_bnd = wagesbnd;\r\n    data.tap_amount_bnd = totalTAPbnd;\r\n    data.scp_amount_bnd = totalSCPbnd;\r\n    data.site_allows_bnd = siteallowsbnd;\r\n    data.expenses_claims_bnd = expsclaimsbnd;\r\n    data.total_allowances_bnd = allowsbnd;\r\n    data.total_deductions_bnd = deductsbnd;\r\n    data.nett_pay_bnd = nettPaybnd;\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleFormSubmit}>\r\n      <Grid container direction=\"row\" style={{ border: \"1px solid white\" }}>\r\n        <Grid item sm={4} align=\"center\" style={{ border: \"1px solid white\" }}>\r\n          <Text as=\"u\" fontSize=\"md\">\r\n            <Heading size=\"sm\">Allowances</Heading>\r\n          </Text>\r\n        </Grid>\r\n\r\n        <Grid item sm={4} align=\"center\" style={{ border: \"1px solid white\" }}>\r\n          <Text as=\"u\" fontSize=\"md\">\r\n            <Heading size=\"sm\">Deductions</Heading>\r\n          </Text>\r\n        </Grid>\r\n        <Grid item sm={4} align=\"center\" style={{ border: \"1px solid white\" }}>\r\n          <Text as=\"u\" fontSize=\"md\">\r\n            <Heading size=\"sm\">Summary</Heading>\r\n            <Heading size=\"sm\">({state.name})</Heading>\r\n          </Text>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container direction=\"row\" style={{ border: \"1px solid white\" }}>\r\n        <Grid item sm={4} align=\"center\" style={{ border: \"1px solid white\" }}>\r\n          <Grid container direction=\"row\" style={{ border: \"1px solid white\" }}>\r\n            <Grid\r\n              item\r\n              sm={8}\r\n              align=\"center\"\r\n              style={{ border: \"1px solid white\" }}\r\n            >\r\n              <Box>\r\n                <Text fontSize=\"sm\">Description</Text>\r\n              </Box>\r\n              <div>\r\n                <TextField\r\n                  label=\"Allowance\"\r\n                  name=\"allows_type1\"\r\n                  variant=\"filled\"\r\n                  type=\"text\"\r\n                  value={state.allows_type1}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Allowance\"\r\n                  name=\"allows_type2\"\r\n                  variant=\"filled\"\r\n                  type=\"text\"\r\n                  displayEmpty\r\n                  defaultValue=\"\"\r\n                  value={state.allows_type2}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Allowance\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"allows_type3\"\r\n                  value={state.allows_type3}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Allowances\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Allowance\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"allows_type4\"\r\n                  value={state.allows_type4}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Allowances\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Allowance\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"allows_type5\"\r\n                  value={state.allows_type5}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Allowances\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Allowance\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"allows_type6\"\r\n                  value={state.allows_type6}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Allowances\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Allowance\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"allows_type7\"\r\n                  value={state.allows_type7}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Allowances\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Allowance\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"allows_type8\"\r\n                  value={state.allows_type8}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Allowances\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <Box p={2}>\r\n                <Checkbox\r\n                  isInvalid={!state.tap_checkbox}\r\n                  isChecked={state.tap_checkbox}\r\n                  colorScheme=\"red\"\r\n                  size=\"md\"\r\n                >\r\n                  <Heading size=\"sm\">TAP/SCP Contribution</Heading>\r\n                </Checkbox>\r\n              </Box>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              sm={4}\r\n              align=\"center\"\r\n              style={{ border: \"1px solid white\" }}\r\n            >\r\n              <Box>\r\n                <Text fontSize=\"sm\">\r\n                  {state.salary_currency ? state.salary_currency : \"BND\"}\r\n                </Text>\r\n              </Box>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"site_allows\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.site_allows}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"expenses_claims\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.expenses_claims}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"allows_type3amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  max=\"9999\"\r\n                  step=\"any\"\r\n                  value={state.allows_type3amt}\r\n                  onChange={(e) => {\r\n                    handleChange(e);\r\n                  }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  errorText={\"\"}\r\n                ></TextField>\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"allows_type4amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.allows_type4amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"allows_type5amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.allows_type5amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"allows_type6amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.allows_type6amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"allows_type7amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.allows_type7amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"allows_type8amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.allows_type8amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item sm={4} align=\"center\" style={{ border: \"1px solid white\" }}>\r\n          <Grid container direction=\"row\" style={{ border: \"1px solid white\" }}>\r\n            <Grid\r\n              item\r\n              sm={8}\r\n              align=\"center\"\r\n              style={{ border: \"1px solid white\" }}\r\n            >\r\n              <Box>\r\n                <Text fontSize=\"sm\">Description</Text>\r\n              </Box>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Deduction\r\n                </InputLabel>\r\n\r\n                <NativeSelect\r\n                  name=\"deducts_type1\"\r\n                  value={state.deducts_type1}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Deductions\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Deduction\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"deducts_type2\"\r\n                  value={state.deducts_type2}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Deductions\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Deduction\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"deducts_type3\"\r\n                  value={state.deducts_type3}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Deductions\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Deduction\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"deducts_type4\"\r\n                  value={state.deducts_type4}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Deductions\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Deduction\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"deducts_type5\"\r\n                  value={state.deducts_type5}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Deductions\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Deduction\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"deducts_type6\"\r\n                  value={state.deducts_type6}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Deductions\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Deduction\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"deducts_type7\"\r\n                  value={state.deducts_type7}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Deductions\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Deduction\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"deducts_type8\"\r\n                  value={state.deducts_type8}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Deductions\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              {state.salary_currency !== \"BND\" && (\r\n                <Box p={2}>\r\n                  <Text fontSize=\"md\">\r\n                    <Heading size=\"sm\">\r\n                      Exchange Rate: {state.currency_rate}\r\n                    </Heading>\r\n                  </Text>\r\n                </Box>\r\n              )}\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              sm={4}\r\n              align=\"center\"\r\n              style={{ border: \"1px solid white\" }}\r\n            >\r\n              <Box>\r\n                <Text fontSize=\"sm\">\r\n                  {state.salary_currency ? state.salary_currency : \"BND\"}\r\n                </Text>\r\n              </Box>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"deducts_type1amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  inputProps={{ minLength: 0 }}\r\n                  value={state.deducts_type1amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"deducts_type2amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.deducts_type2amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"deducts_type3amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.deducts_type3amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"deducts_type4amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.deducts_type4amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"deducts_type5amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.deducts_type5amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"deducts_type6amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.deducts_type6amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"deducts_type7amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.deducts_type7amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"deducts_type8amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.deducts_type8amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item sm={4} align=\"center\" style={{ border: \"1px solid white\" }}>\r\n          <Grid container direction=\"row\" style={{ border: \"1px solid white\" }}>\r\n            {/* <div>\r\n            <h3>{state.name}</h3>\r\n          </div> */}\r\n            <Grid\r\n              item\r\n              sm={\r\n                !state.salary_currency || state.salary_currency === \"BND\"\r\n                  ? 12\r\n                  : 6\r\n              }\r\n              align=\"center\"\r\n              style={{ border: \"1px solid white\" }}\r\n            >\r\n              <Box>\r\n                <Text fontSize=\"sm\">\r\n                  {state.salary_currency ? state.salary_currency : \"BND\"}\r\n                </Text>\r\n              </Box>\r\n              <Divider variant=\"fullWidth\" className={classes.divider} />\r\n              <div>\r\n                <TextField\r\n                  label=\"Wages\"\r\n                  name=\"wages\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.wages}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  // InputProps={{\r\n                  //   readOnly: true,\r\n                  //   min: 0,\r\n                  // }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"TAP Amount\"\r\n                  name=\"tap_amount\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  value={currency(state.tap_amount)}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"SCP Amount\"\r\n                  name=\"scp_amount\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  value={currency(state.scp_amount)}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Site Allowances\"\r\n                  name=\"siteallows\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  value={currency(state.site_allows)}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Expenses Claims\"\r\n                  name=\"expclaims\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  value={currency(state.expenses_claims)}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Total Allowances\"\r\n                  name=\"total_allowances\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  value={currency(state.total_allowances)}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Total Deductions\"\r\n                  name=\"total_deductions\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  value={currency(state.total_deductions)}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Nett Pay\"\r\n                  name=\"nett_pay\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  value={currency(state.nett_pay)}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              {/* <div>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={state.tap_checkbox}\r\n                  onChange={handleChange}\r\n                  name=\"tap_checkbox\"\r\n                />\r\n              }\r\n              label=\"TAP/SCP Contribution\"\r\n            />\r\n          </div> */}\r\n              <div>\r\n                {/* <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.button}\r\n                  style={{ marginLeft: 10 }}\r\n                  onClick={handleCalc}\r\n                >\r\n                  Calc <Icon className={classes.rightIcon}>send</Icon>\r\n                </Button> */}\r\n              </div>\r\n            </Grid>\r\n\r\n            {state.salary_currency && state.salary_currency !== \"BND\" && (\r\n              <Grid\r\n                item\r\n                sm={6}\r\n                align=\"center\"\r\n                style={{ border: \"1px solid white\" }}\r\n              >\r\n                <Divider variant=\"fullWidth\" className={classes.divider} />\r\n                <Box>\r\n                  <Text fontSize=\"sm\">\r\n                    {\" \"}\r\n                    {state.salary_currency ? \"BND\" : \"BND\"}\r\n                  </Text>\r\n                </Box>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Wages\"\r\n                    name=\"wages\"\r\n                    variant=\"filled\"\r\n                    type=\"number\"\r\n                    value={currency(state.wages_bnd)}\r\n                    onChange={handleChange}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n\r\n                <div>\r\n                  <TextField\r\n                    label=\"TAP Amount\"\r\n                    name=\"tap_amount\"\r\n                    variant=\"filled\"\r\n                    type=\"number\"\r\n                    value={currency(state.tap_amount_bnd)}\r\n                    onChange={handleChange}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"SCP Amount\"\r\n                    name=\"scp_amount\"\r\n                    variant=\"filled\"\r\n                    type=\"number\"\r\n                    value={currency(state.scp_amount_bnd)}\r\n                    onChange={handleChange}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Site Allowances\"\r\n                    name=\"siteallows\"\r\n                    variant=\"filled\"\r\n                    type=\"number\"\r\n                    value={currency(state.site_allows_bnd)}\r\n                    onChange={handleChange}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Expenses Claims\"\r\n                    name=\"expclaims\"\r\n                    variant=\"filled\"\r\n                    type=\"number\"\r\n                    value={currency(state.expenses_claims_bnd)}\r\n                    onChange={handleChange}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Total Allowances\"\r\n                    name=\"total_allowances\"\r\n                    variant=\"filled\"\r\n                    type=\"number\"\r\n                    value={currency(state.total_allowances_bnd)}\r\n                    onChange={handleChange}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Total Deductions\"\r\n                    name=\"total_deductions\"\r\n                    variant=\"filled\"\r\n                    type=\"number\"\r\n                    value={currency(state.total_deductions_bnd)}\r\n                    onChange={handleChange}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Nett Pay\"\r\n                    name=\"nett_pay\"\r\n                    variant=\"filled\"\r\n                    type=\"number\"\r\n                    value={currency(state.nett_pay_bnd)}\r\n                    onChange={handleChange}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n        {/* <button>Submit</button> */}\r\n      </Grid>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  container: {\r\n    margin: 0,\r\n    padding: 0,\r\n    width: \"80vw\",\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"repeat(auto-fill,250px)\",\r\n    gridAutoRows: \"10px\",\r\n    position: \"absolute\",\r\n    left: \"50%\",\r\n    transform: \"translateX(-50%)\",\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"primary\",\r\n  },\r\n  fixedHeight: {\r\n    height: 800,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(10),\r\n    // display: \"flex\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n    border: \"1px solid\",\r\n    width: \"100%\",\r\n    color: \"primary\",\r\n    bcakgroundColor: \"black\",\r\n  },\r\n  card: {\r\n    backgroundColor: \"black\",\r\n  },\r\n  section: {\r\n    width: \"80vw\",\r\n    margin: \"1rem auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n  },\r\n  underline: {\r\n    width: \"5rem\",\r\n    height: \"0.25rem\",\r\n    marginBottom: \"1.25rem\",\r\n    background: \"var(--clr-primary-5)\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n  },\r\n  title: {\r\n    marginbottom: \"4rem\",\r\n    textAlign: \"center\",\r\n  },\r\n  jobscenter: {\r\n    width: \"80vw\",\r\n    margin: \"0 auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n    flexDirection: \"row\",\r\n  },\r\n  btncontainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    marginBottom: \"4rem\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  jobbtn: {\r\n    background: \"transparent\",\r\n    borderColor: \"transparent\",\r\n    textTransform: \"capitalize\",\r\n    fontSize: \"1.25rem\",\r\n    letterSpacing: \"var(--spacing)\",\r\n    margin: \"0 0.5rem\",\r\n    transition: \"var(--transition)\",\r\n    cursor: \"pointer\",\r\n    padding: \"0.25rem 0\",\r\n    lineHeight: \"1\",\r\n    outlineColor: \"var(--clr-primary-10)\",\r\n    \"&:hover\": {\r\n      color: \"var(--clr-primary-5)\",\r\n      boxShadow: \"0 2px var(--clr-primary-5)\",\r\n    },\r\n  },\r\n  activebtn: {\r\n    color: \"var(--clr-primary-5)\",\r\n    boxShadow: \"0 2px var(--clr-primary-5)\",\r\n  },\r\n  jobinfo: {\r\n    fontWeight: \"400\",\r\n  },\r\n  divider: {\r\n    // Theme Color, or use css color in quote\r\n    background: \"white\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 350,\r\n  },\r\n  divContainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n  },\r\n  formLabel: {\r\n    fontSize: 12,\r\n    textAlign: \"left\",\r\n    marginLeft: 8,\r\n    marginTop: 5,\r\n  },\r\n}));\r\n\r\nexport default PayForm;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableView.js",["1600","1601"],"import React, { useState, useMemo } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { useExpenses } from \"./expenses/useExpenses\";\r\nimport { GrFormView } from \"react-icons/gr\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\nimport ExpenseFormView from \"./ExpenseFormView\";\r\n\r\n//const FILTERSTRING = \"Pending\";\r\n\r\nconst initial_form = {\r\n  name: \"\",\r\n  date: \"\",\r\n  purchased_from: \"\",\r\n  description: \"\",\r\n  status: \"Pending\",\r\n  amount: 0,\r\n  attachment1_name: \"\",\r\n  attachment1_url: \"\",\r\n  attachment2_name: \"\",\r\n  attachment2_url: \"\",\r\n  attachment3_name: \"\",\r\n  attachment3_url: \"\",\r\n};\r\n\r\nexport default function ExpenseTableView() {\r\n  const classes = useStyles();\r\n  //const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  //const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  //const { loadEmployees } = useEmployeesContext();\r\n  const { expenses } = useExpenses();\r\n  const [formdata, setFormdata] = useState(initial_form);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const {\r\n    //expenses,\r\n    editExpenseID,\r\n    //updateExpense,\r\n    //addExpense,\r\n    //deleteExpense,\r\n    setEditExpenseID,\r\n    setIsExpenseEditingOn,\r\n    setIsExpenseEditingOff,\r\n  } = useExpensesContext();\r\n  // const {\r\n  //   //expenses,\r\n  //   addExpense,\r\n  //   expenses_loading,\r\n  //   updateExpense,\r\n  //   deleteExpense,\r\n  //   loadPendingExpenses,\r\n  //   getSingleExpense,\r\n  //   setEditExpenseID,\r\n  //   setIsExpenseEditingOn,\r\n  //   setIsExpenseEditingOff,\r\n  //   resetSingleExpense,\r\n  // } = useExpensesContext();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"name\",\r\n      },\r\n      {\r\n        title: \"Date\",\r\n        field: \"date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n      },\r\n\r\n      { title: \"Description\", field: \"description\" },\r\n      { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n      { title: \"Status\", field: \"status\" },\r\n    ],\r\n    []\r\n  );\r\n\r\n  // useEffect(() => {\r\n  //   loadPendingExpenses(FILTERSTRING);\r\n  // }, []);\r\n\r\n  // const handleDialogOpen = () => {\r\n  //   setIsDialogOpen(true);\r\n  //};\r\n\r\n  // const handleDialogClose = () => {\r\n  //   setIsDialogOpen(false);\r\n  //   //loadPendingExpenses(FILTERSTRING);\r\n  // };\r\n\r\n  // const handleAlertOpen = () => {\r\n  //   setIsAlertOpen(true);\r\n  // };\r\n\r\n  // const handleAlertClose = () => {\r\n  //   setIsAlertOpen(false);\r\n  // };\r\n\r\n  const View_Expenses = (data) => {\r\n    const { id } = data;\r\n    setFormdata({ ...data });\r\n    setFormdata((prev) => (prev = { ...data }));\r\n    setEditExpenseID(id);\r\n    setIsExpenseEditingOn();\r\n    handleDialogOpen();\r\n  };\r\n\r\n  const handleDialogOpen = () => {\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={expenses\r\n            .filter((r) => r.status === \"Pending\")\r\n            .map((rec) => {\r\n              return { ...rec };\r\n            })}\r\n          title=\"Expenses Claims Application\"\r\n          actions={[\r\n            (rowData) => ({\r\n              icon: () => <GrFormView size=\"33px\" />,\r\n              tooltip: \"View\",\r\n              onClick: (event, rowData) => {\r\n                View_Expenses(rowData);\r\n              },\r\n            }),\r\n          ]}\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </div>\r\n      <CustomDialog\r\n        isOpen={isDialogOpen}\r\n        handleClose={handleDialogClose}\r\n        title=\"\"\r\n        showButton={true}\r\n        isFullscreen={false}\r\n        isFullwidth={false}\r\n      >\r\n        <ExpenseFormView\r\n          formdata={formdata}\r\n          setFormdata={setFormdata}\r\n          handleDialogClose={handleDialogClose}\r\n        />\r\n      </CustomDialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTableViewManager.js",["1602","1603","1604"],"import React, { useEffect, useMemo } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\n//import {\r\n//payPeriodState,\r\n//payPeriodEndMonthState,\r\n//payPeriodEmpIdState,\r\n//} from \"./data/atomdata\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport ApprovalManagerScreen from \"./ApprovalManagerScreen\";\r\n\r\nconst FILTERSTRING = \"Verified\";\r\n\r\nexport default function PayslipTableVIew() {\r\n  //et history = useHistory();\r\n  const classes = useStyles();\r\n  const {\r\n    batchpayrun,\r\n    getBatchPayrun,\r\n    //batchpayrun_loading,\r\n    //batchpayrun_error,\r\n    //loadPendingPayslips,\r\n  } = usePayslipsContext();\r\n  //const { loadEmployees, employees } = useEmployeesContext();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Batch\",\r\n        field: \"payrun\",\r\n        editable: \"never\",\r\n      },\r\n      // { title: \"Period\", field: \"period\", editable: \"never\" },\r\n      // {\r\n      //   title: \"PayDate\",\r\n      //   field: \"pay_date\",\r\n      //   type: \"date\",\r\n      //   dateSetting: { locale: \"en-GB\" },\r\n      //   editable: \"never\",\r\n      // },\r\n      {\r\n        title: \"Wages\",\r\n        field: \"totalwages\",\r\n        type: \"currency\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"TAP Amount\",\r\n        field: \"totaltap\",\r\n        type: \"currency\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"SCP Amount\",\r\n        field: \"totalscp\",\r\n        type: \"currency\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Site Allowances\",\r\n        field: \"totalsitesallows\",\r\n        type: \"currency\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Expenses Claims\",\r\n        field: \"totalexpensesclaims\",\r\n        type: \"currency\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Allowances\",\r\n        field: \"totalallows\",\r\n        type: \"currency\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Deductions\",\r\n        field: \"totaldeducts\",\r\n        type: \"currency\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Payroll\",\r\n        field: \"totalpayroll\",\r\n        type: \"currency\",\r\n        editable: \"never\",\r\n      },\r\n      // { title: \"Bank Name\", field: \"bank_name\" },\r\n      // { title: \"Bank AC No\", field: \"bank_accno\" },\r\n      { title: \"Status\", field: \"status\", editable: \"never\" },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    getBatchPayrun(FILTERSTRING);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={batchpayrun}\r\n          title=\"Payslips\"\r\n       \r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"black\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDailyAllowsStatus.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableManager.js",["1605"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { TextField, MenuItem, Button, Icon } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport * as emailjs from \"emailjs-com\";\r\n//import { useRecoilState } from \"recoil\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport CheckCircleOutlineOutlinedIcon from \"@material-ui/icons/CheckCircleOutlineOutlined\";\r\n//import { loginLevelState } from \"./data/atomdata\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\nimport { useExpenses } from \"./expenses/useExpenses\";\r\n\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\nconst ADMINMANAGER_EMAIL = process.env.ADMINMANAGER_EMAIL;\r\nconst FILTERSTRING = \"Pending\";\r\n\r\nexport default function ExpenseTable({\r\n  setExpensesdata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  //const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  //const [isLoad, setIsLoad] = useState(false);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const { employees } = useEmployees();\r\n  const { expenses } = useExpenses();\r\n  const {\r\n    editExpenseID,\r\n    updateExpense,\r\n    update_expense_error,\r\n    //expenses_loading,\r\n    deleteExpense,\r\n    loadPendingExpenses,\r\n  } = useExpensesContext();\r\n\r\n  const expensesdata = expenses.filter((r)=>r.status === \"Pending\")\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      { title: \"Name\", field: \"name\", editable: \"never\" },\r\n      {\r\n        title: \"Date\",\r\n        field: \"date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Description\",\r\n        field: \"description\",\r\n        editable: \"never\",\r\n      },\r\n      { title: \"Amount\", field: \"amount\", type: \"currency\", editable: \"never\" },\r\n      {\r\n        title: \"Status\",\r\n        field: \"status\",\r\n        editComponent: (props) => (\r\n          <TextField\r\n            //defaultValue={props.value || null}\r\n            onChange={(e) => props.onChange(e.target.value)}\r\n            style={{ width: 100 }}\r\n            value={props.value}\r\n            select\r\n          >\r\n            <MenuItem value=\"Pending\">Pending</MenuItem>\r\n            <MenuItem value=\"Approve\">Approve</MenuItem>\r\n            <MenuItem value=\"Reject\">Reject</MenuItem>\r\n            <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n          </TextField>\r\n        ),\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  // useEffect(() => {\r\n  //   setExpensesdata(expenses);\r\n  //   console.log(expensesdata)\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   loadEmployees();\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   if (expenses) {\r\n  //     setExpensesdata(expenses);\r\n  //     console.log(\"expenses\", expenses, expensesdata)\r\n  //   } else {\r\n  //     setIsLoad(!isLoad);\r\n  //   }\r\n  // }, [isLoad]);\r\n\r\n  // const handleExpenseFormDialogOpen = () => {\r\n  //   setIsDialogOpen(true);\r\n  // };\r\n\r\n  const handleExpenseFormDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n    loadPendingExpenses(FILTERSTRING);\r\n  };\r\n\r\n  // const handleExpenseFormAlertOpen = () => {\r\n  //   setIsAlertOpen(true);\r\n  // };\r\n\r\n  const handleExpenseFormAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleExpenseFormOnDeleteConfirm = () => {\r\n    const id = editExpenseID;\r\n    deleteExpense(id);\r\n    loadPendingExpenses(FILTERSTRING);\r\n  };\r\n\r\n  const handleSentEmail = (data, result) => {\r\n    const { date, empid, name } = data;\r\n    const emp = employees\r\n      .filter((f) => f.id === empid)\r\n      .map((r) => {\r\n        return { ...r };\r\n      });\r\n    // console.log(\"leave form\", emp[0].email, data);\r\n    var emaildata = {\r\n      to_name: name,\r\n      to_email: emp[0].email,\r\n      message: `Your expenses claim application dated on ${date} has been ${result}!`,\r\n      cc_to: ADMINMANAGER_EMAIL,\r\n    };\r\n\r\n    emailjs.send(SERVICE_ID, TEMPLATE_ID, emaildata, USER_ID).then(\r\n      function (response) {\r\n        console.log(response.status, response.text);\r\n        toast({\r\n          title: `Email has sent successfully to ${emaildata.to_email}!`,\r\n          status: \"success\",\r\n        });\r\n      },\r\n      function (err) {\r\n        console.log(err);\r\n        toast({\r\n          title: `Email has fail to send to ${emaildata.to_email}!`,\r\n          status: \"warning\",\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  // const Save_ExpenseData = () => {\r\n  //   expensesdata.forEach((data) => {\r\n  //     const { id } = data;\r\n  //     if (id) {\r\n  //       const { id, rec_id, tableData, ...fields } = data;\r\n  //       updateExpense({ id, ...fields });\r\n  //     }\r\n  //   });\r\n\r\n  //   handleDialogClose();\r\n  //};\r\n\r\n  const Approve_ExpenseData = () => {\r\n    expensesdata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        updateExpense({ id: rec.id, status: \"Approved\" });\r\n        //update leavesdata\r\n        if (!update_expense_error) {\r\n          const recdata = expensesdata.filter((r) => r.id === rec.id);\r\n          recdata[0].status = \"Approved\";\r\n        }\r\n        //sent email\r\n        handleSentEmail(rec, \"Approved\");\r\n      }\r\n    });\r\n    expensesdata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  const Reject_ExpenseData = () => {\r\n    expensesdata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        updateExpense({ id: rec.id, status: \"Rejected\" });\r\n        //update leavesdata\r\n        if (!update_expense_error) {\r\n          const recdata = expensesdata.filter((r) => r.id === rec.id);\r\n          recdata[0].status = \"Rejected\";\r\n        }\r\n        //sent email\r\n        handleSentEmail(rec, \"Rejected\");\r\n      }\r\n    });\r\n    expensesdata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  if (!expensesdata) {\r\n    return (\r\n      <div>\r\n        <h2>Loading...Expenses</h2>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={expensesdata}\r\n          title=\"Expenses Claims Application\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <CheckCircleOutlineOutlinedIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          // editable={{\r\n          //   onRowUpdate: (newData, oldData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         const dataUpdate = [...expensesdata];\r\n          //         const index = oldData.tableData.id;\r\n          //         dataUpdate[index] = newData;\r\n          //         setExpensesdata([...dataUpdate]);\r\n          //         //approve_Expense(newData);\r\n\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          // }}\r\n          options={{\r\n            filtering: true,\r\n            selection: true,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Approve_ExpenseData}\r\n                  >\r\n                    Approve <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Reject_ExpenseData}\r\n                  >\r\n                    Reject <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                  {/* <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Save_ExpenseData}\r\n                  >\r\n                    Update <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button> */}\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <CustomDialog\r\n          isOpen={isDialogOpen}\r\n          handleClose={handleExpenseFormDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscree={false}\r\n        >\r\n          <ExpenseForm handleDialogClose={handleExpenseFormDialogClose} />\r\n        </CustomDialog>\r\n\r\n        <AlertDialogBox\r\n          onClose={handleExpenseFormAlertClose}\r\n          onConfirm={handleExpenseFormOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete Expenses\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableViewManager.js",["1606","1607","1608","1609","1610"],"import React, { useMemo, useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { TextField, MenuItem } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\nimport { useLeaves } from \"./leaves/useLeaves\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\n\r\nconst FILTERSTRING = \"Pending\";\r\n\r\nexport default function LeaveTableView() {\r\n  const classes = useStyles();\r\n  //const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  //const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const { leaves} = useLeaves()\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  //const { loadEmployees } = useEmployeesContext();\r\n  // const {\r\n  //   leaves,\r\n  //   leaves_error,\r\n  //   editLeaveID,\r\n  //   leaves_loading,\r\n  //   deleteLeave,\r\n  //   loadPendingLeaves,\r\n  //   getSingleLeave,\r\n  //   setEditLeaveID,\r\n  //   setIsLeaveEditingOn,\r\n  //   setIsLeaveEditingOff,\r\n  //   resetSingleLeave,\r\n  // } = useLeavesContext();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"name\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"From\",\r\n        field: \"from_date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"To\",\r\n        field: \"to_date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n        editable: \"never\",\r\n      },\r\n      { title: \"Days\", field: \"no_of_days\", editable: \"never\" },\r\n      {\r\n        title: \"Status\",\r\n        field: \"status\",\r\n        editComponent: (props) => (\r\n          <TextField\r\n            //defaultValue={props.value || null}\r\n            onChange={(e) => props.onChange(e.target.value)}\r\n            style={{ width: 100 }}\r\n            value={props.value}\r\n            select\r\n          >\r\n            <MenuItem value=\"Pending\">Pending</MenuItem>\r\n            <MenuItem value=\"Approve\">Approve</MenuItem>\r\n            <MenuItem value=\"Reject\">Reject</MenuItem>\r\n            <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n          </TextField>\r\n        ),\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  // useEffect(() => {\r\n  //   loadPendingLeaves(FILTERSTRING);\r\n  // }, []);\r\n\r\n  // const handleDialogOpen = () => {\r\n  //   setIsDialogOpen(true);\r\n  // };\r\n\r\n  // const handleDialogClose = () => {\r\n  //   setIsDialogOpen(false);\r\n  //   loadPendingLeaves(FILTERSTRING);\r\n  //};\r\n\r\n  // const handleAlertOpen = () => {\r\n  //   setIsAlertOpen(true);\r\n  // };\r\n\r\n  // const handleAlertClose = () => {\r\n  //   setIsAlertOpen(false);\r\n  //};\r\n\r\n  // const handleOnDeleteConfirm = () => {\r\n  //   const id = editLeaveID;\r\n  //   deleteLeave(id);\r\n  //   loadPendingLeaves(FILTERSTRING);\r\n  // };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          // data={leaves.filter(\r\n          //   (r) => r.reporting_email === loginLevel.loginEmail\r\n          // )}\r\n          data={leaves.filter((r)=>r.status === \"Pending\")}\r\n          title=\"Leave Application\"\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableManager.js",["1611","1612"],"import React, { useState, useMemo } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { TextField, MenuItem, Button } from \"@material-ui/core\";\r\nimport * as emailjs from \"emailjs-com\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport LeaveForm from \"./LeaveForm\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\nimport { useLeaves } from \"./leaves/useLeaves\";\r\n\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\nconst ADMINMANAGER_EMAIL = process.env.ADMINMANAGER_EMAIL;\r\n\r\nexport default function LeaveTable({\r\n  //leavesdata,\r\n  //setLeavesdata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const { employees } = useEmployees();\r\n  const { leaves } = useLeaves();\r\n  const {\r\n    editLeaveID,\r\n    updateLeave,\r\n    deleteLeave,\r\n    loadLeaves,\r\n    update_leave_error,\r\n  } = useLeavesContext();\r\n\r\n  const leavesdata = leaves.filter((r)=>r.status === \"Pending\")\r\n  const { updateEmployee } = useEmployeesContext();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"name\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"From Date\",\r\n        field: \"from_date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"To Date\",\r\n        field: \"to_date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Leave Balance\",\r\n        field: \"leave_bal\",\r\n        editable: \"never\",\r\n        cellStyle: {\r\n          width: 10,\r\n          maxWidth: 10,\r\n        },\r\n      },\r\n      {\r\n        title: \"Days\",\r\n        field: \"no_of_days\",\r\n        editable: \"never\",\r\n        cellStyle: {\r\n          width: 10,\r\n          maxWidth: 10,\r\n        },\r\n      },\r\n      {\r\n        title: \"Reason\",\r\n        field: \"reason\",\r\n        editable: \"never\",\r\n        cellStyle: {\r\n          width: 10,\r\n          maxWidth: 10,\r\n        },\r\n      },\r\n      {\r\n        title: \"Status\",\r\n        field: \"status\",\r\n        editable: \"never\",\r\n        cellStyle: {\r\n          width: 50,\r\n          maxWidth: 50,\r\n        },\r\n        editComponent: (props) => (\r\n          <TextField\r\n            //defaultValue={props.value || null}\r\n            onChange={(e) => props.onChange(e.target.value)}\r\n            style={{ width: 100 }}\r\n            value={props.value}\r\n            select\r\n          >\r\n            <MenuItem value=\"Pending\">Pending</MenuItem>\r\n            <MenuItem value=\"Approve\">Approve</MenuItem>\r\n            <MenuItem value=\"Reject\">Reject</MenuItem>\r\n            <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n          </TextField>\r\n        ),\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  // useEffect(() => {\r\n  //   loadLeaves();\r\n  // }, []);\r\n\r\n  // const handleLeaveFormDialogOpen = () => {\r\n  //   setIsDialogOpen(true);\r\n  // };\r\n\r\n  const handleLeaveFormDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n    loadLeaves();\r\n  };\r\n\r\n  // const handleLeaveFormAlertOpen = () => {\r\n  //   setIsAlertOpen(true);\r\n  // };\r\n\r\n  const handleLeaveFormAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleLeaveFormOnDeleteConfirm = () => {\r\n    const id = editLeaveID;\r\n    deleteLeave(id);\r\n    loadLeaves();\r\n  };\r\n\r\n  const handleSentEmail = (data, result) => {\r\n    const { from_date, to_date, name, empid } = data;\r\n    const emp = employees\r\n      .filter((f) => f.id === empid)\r\n      .map((r) => {\r\n        return { ...r };\r\n      });\r\n    //console.log(\"leave form\", data, emp);\r\n\r\n    var emaildata = {\r\n      to_name: name,\r\n      to_email: emp[0].email,\r\n      message: `Your leave application from ${from_date} to ${to_date} has been ${result}!`,\r\n      cc_to: ADMINMANAGER_EMAIL,\r\n    };\r\n\r\n    emailjs.send(SERVICE_ID, TEMPLATE_ID, emaildata, USER_ID).then(\r\n      function (response) {\r\n        console.log(response.status, response.text);\r\n        toast({\r\n          title: `Email has sent successfully to ${emaildata.to_email}!`,\r\n          status: \"success\",\r\n        });\r\n      },\r\n      function (err) {\r\n        console.log(err);\r\n        toast({\r\n          title: `Email has fail to send to ${emaildata.to_email}!`,\r\n          status: \"warning\",\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  const Approve_LeaveData = () => {\r\n    leavesdata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        updateLeave({ id: rec.id, status: \"Approved\" });\r\n        //update leavesdata\r\n        if (!update_leave_error) {\r\n          const recdata = leavesdata.filter((r) => r.id === rec.id);\r\n          recdata[0].status = \"Approved\";\r\n\r\n          // update leave bal\r\n          //console.log(\"leave\", rec.empid, employees);\r\n          const empleavebal = employees\r\n            .filter((r) => r.id === rec.empid)\r\n            .map((item) => {\r\n              return item.leave_bal;\r\n            });\r\n          const leavebal = empleavebal - rec.no_of_days;\r\n          updateEmployee({ id: rec.empid, leave_bal: leavebal });\r\n        }\r\n        //sent email\r\n        handleSentEmail(rec, \"Approved\");\r\n      }\r\n    });\r\n    leavesdata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  const Reject_LeaveData = () => {\r\n    leavesdata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        updateLeave({ id: rec.id, status: \"Rejected\" });\r\n        //update leavesdata\r\n        if (!update_leave_error) {\r\n          const recdata = leavesdata.filter((r) => r.id === rec.id);\r\n          recdata[0].status = \"Rejected\";\r\n        }\r\n        //sent email\r\n        handleSentEmail(rec, \"Rejected\");\r\n      }\r\n    });\r\n    leavesdata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  // const Save_LeaveData = () => {\r\n  //   leavesdata.forEach((data) => {\r\n  //     const { id } = data;\r\n  //     if (id) {\r\n  //       const { id, rec_id, tableData, ...fields } = data;\r\n  //       updateLeave({ id, ...fields });\r\n  //     }\r\n  //   });\r\n\r\n  //   handleDialogClose();\r\n  //};\r\n\r\n  // if (expenses_loading) {\r\n  //   return (\r\n\r\n  // if (leaves_loading) {\r\n  //   return (\r\n  //     <div>\r\n  //       <h2>Loading...Leaves</h2>\r\n  //     </div>\r\n  //   );\r\n  // }\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          // data={leavesdata.filter(\r\n          //   (r) => r.reporting_email === loginLevel.loginEmail\r\n          // )}\r\n          data={leavesdata}\r\n          title=\"Leave Application\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <EditIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          // editable={{\r\n          //   onRowUpdate: (newData, oldData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         const dataUpdate = [...leavesdata];\r\n          //         const index = oldData.tableData.id;\r\n          //         dataUpdate[index] = newData;\r\n          //         setLeavesdata([...dataUpdate]);\r\n          //         //approve_Expense(newData);\r\n\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          // }}\r\n          options={{\r\n            filtering: true,\r\n            selection: true,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Approve_LeaveData}\r\n                  >\r\n                    Approve\r\n                  </Button>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Reject_LeaveData}\r\n                  >\r\n                    Reject\r\n                  </Button>\r\n                  {/* <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Save_LeaveData}\r\n                  >\r\n                    Update <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button> */}\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <CustomDialog\r\n          isOpen={isDialogOpen}\r\n          handleClose={handleLeaveFormDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscree={false}\r\n        >\r\n          <LeaveForm handleDialogClose={handleLeaveFormDialogClose} />\r\n        </CustomDialog>\r\n\r\n        <AlertDialogBox\r\n          onClose={handleLeaveFormAlertClose}\r\n          onConfirm={handleLeaveFormOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete Expenses\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\Copyright.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\usePayrun.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\useUpdatePayrun.js",[],"D:\\react-myprojects\\hrms-demo\\src\\helpers\\CardLayout3.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeForm.js",["1613","1614","1615","1616","1617","1618","1619","1620","1621"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  TextField,\r\n  Paper,\r\n  Typography,\r\n  Grid,\r\n  Divider,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport currency from \"currency.js\";\r\nimport CurrencyTextField from \"@unicef/material-ui-currency-textfield\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\n//import { editEmployeeIdState } from \"./data/atomdata\";\r\n//import { useAllEmployees } from \"./employees/useAllEmployees\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\nimport { useAddEmployees } from \"./employees/useAddEmployees\";\r\nimport { useUpdateEmployees } from \"./employees/useUpdateEmployees\";\r\nimport { useDepartments } from \"./departments/useDepartments\";\r\nimport { useDesignations } from \"./designations/useDesignations\";\r\n//import { useCurrency } from \"./currency/useCurrency\";\r\nimport EmpFamily from \"./EmpFamily\";\r\nimport EmpEducations from \"./EmpEducations\";\r\nimport EmpExperiences from \"./EmpExperiences\";\r\nimport EmpTrainings from \"./EmpTrainings\";\r\nimport EmpJobhistory from \"./EmpJobhistory\";\r\n\r\nconst initial_values = {\r\n  name: \"\",\r\n  gender: \"\",\r\n  ic_no: \"\",\r\n  email: \"\",\r\n  birthdate: null,\r\n  age: 0,\r\n  nationality: \"\",\r\n  address: \"\",\r\n  leave_bal: 0,\r\n  leave_bf: 0,\r\n  leave_entitled: 0,\r\n  basic_salary: 0,\r\n  salary_currency: \"BND\",\r\n  bank_name: \"\",\r\n  bank_acno: \"\",\r\n  tap_checkbox: true,\r\n  tap_acno: \"\",\r\n  scp_acno: \"\",\r\n  date_of_join: null,\r\n  date_of_resign: null,\r\n  hasresigned: false,\r\n  designation: \"\",\r\n  department: \"\",\r\n  passportno: \"\",\r\n  passport_expirydate: null,\r\n  workpermitno: \"\",\r\n  workpermit_expirydate: null,\r\n  siteallows_fee: 0,\r\n  perdiem_fee: 0,\r\n  empno: \"\",\r\n  reporting_to: \"\",\r\n  reporting_email: \"\",\r\n};\r\n\r\nconst EmployeeForm = () => {\r\n  const classes = useStyles();\r\n  const { employees, employeeId, setEmployeeId } = useEmployees();\r\n  //const { allemployees, setAllEmpId } = useAllEmployees();\r\n  const addEmployees = useAddEmployees();\r\n  const updateEmployees = useUpdateEmployees();\r\n  //const currencyRate = useCurrency()\r\n  const { designations } = useDesignations();\r\n  const { departments } = useDepartments();\r\n  const [reportemail, setReportEmail] = useState(\"\");\r\n  const [empage, setEmpage] = useState(0);\r\n  const [checktap, setCheckTap] = useState(false);\r\n  const [isresigned, setIsresigned] = useState(false);\r\n  //const [empId, setEmpId] = useRecoilState(editEmployeeIdState);\r\n  const { handleSubmit, control, setValue, register } = useForm();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { isEditing, editEmployeeID } = useEmployeesContext();\r\n  const single_employee = employees\r\n    .filter((r) => r.id === editEmployeeID)\r\n    .map((r) => {\r\n      return { ...r };\r\n    });\r\n  const {\r\n    name,\r\n    ic_no,\r\n    gender,\r\n    birthdate,\r\n    age,\r\n    email,\r\n    nationality,\r\n    address,\r\n    leave_bal,\r\n    leave_entitled,\r\n    leave_bf,\r\n    basic_salary,\r\n    salary_currency,\r\n    bank_name,\r\n    bank_acno,\r\n    tap_checkbox,\r\n    tap_acno,\r\n    scp_acno,\r\n    date_of_join,\r\n    date_of_resign,\r\n    hasresigned,\r\n    designation,\r\n    department,\r\n    passportno,\r\n    passport_expirydate,\r\n    workpermitno,\r\n    workpermit_expirydate,\r\n    siteallows_fee,\r\n    perdiem_fee,\r\n    empno,\r\n    reporting_to,\r\n    reporting_email,\r\n  } = single_employee[0] || initial_values;\r\n\r\n  const calculateAge = (dob) => {\r\n    var today = new Date();\r\n    var birthDate = new Date(dob);\r\n    var age = today.getFullYear() - birthDate.getFullYear();\r\n    var m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      age--;\r\n    }\r\n    return age;\r\n  };\r\n\r\n  const handleReportingTo = (name) => {\r\n    const emp = employees\r\n      .filter((f) => f.name === name)\r\n      .map((r) => {\r\n        return { ...r };\r\n      });\r\n    setReportEmail(emp[0].email);\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    if (isEditing) {\r\n      updateEmployees({\r\n        id: editEmployeeID,\r\n        ...data,\r\n        reporting_email: reportemail,\r\n      });\r\n    } else {\r\n      addEmployees({ ...data, reporting_email: reportemail });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let age = calculateAge(birthdate);\r\n    setEmpage(age);\r\n    setCheckTap(tap_checkbox);\r\n    setIsresigned(hasresigned);\r\n    setReportEmail(reporting_email);\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   setAllEmpId(\"111\");\r\n  // }, []);\r\n\r\n  if (!employees) {\r\n    return <h2>Loading ...</h2>;\r\n  }\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <Paper className={classes.root}>\r\n          <Grid container className={classes.root} spacing={15}>\r\n            <div>\r\n              <Typography variant=\"h5\" component=\"h3\">\r\n                EMPLOYEE FORM\r\n              </Typography>\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n              >\r\n                Submit <Icon className={classes.rightIcon}>send</Icon>\r\n              </Button>\r\n            </div>\r\n          </Grid>\r\n          <Divider className={classes.divider} />\r\n          <Grid item xs={12}>\r\n            <div>\r\n              <div>\r\n                <Controller\r\n                  name=\"name\"\r\n                  control={control}\r\n                  defaultValue={name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Name\"\r\n                        id=\"standard-name\"\r\n                        name=\"name\"\r\n                        defaultValue={name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"empno\"\r\n                  control={control}\r\n                  defaultValue={empno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Emp No\"\r\n                        id=\"standard-empno\"\r\n                        defaultValue={empno}\r\n                        name=\"empno\"\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"email\"\r\n                  control={control}\r\n                  defaultValue={email}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Email\"\r\n                        id=\"standard-email\"\r\n                        name=\"email\"\r\n                        defaultValue={email}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        inputProps={{ readOnly: true }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"ic_no\"\r\n                  control={control}\r\n                  defaultValue={ic_no}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"IC No\"\r\n                        id=\"standard-icno\"\r\n                        defaultValue={ic_no}\r\n                        name=\"ic_no\"\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"birthdate\"\r\n                  control={control}\r\n                  defaultValue={birthdate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Birth Date\"\r\n                        id=\"standard-birthdate\"\r\n                        name=\"birthdate\"\r\n                        type=\"date\"\r\n                        defaultValue={birthdate}\r\n                        className={classes.textField}\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(e.target.value);\r\n                          let age = calculateAge(e.target.value);\r\n                          console.log(\"emp\", birthdate, age);\r\n                          setEmpage(age);\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"age\"\r\n                  control={control}\r\n                  defaultValue={empage}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Age\"\r\n                        type=\"number\"\r\n                        id=\"standard-age\"\r\n                        name=\"empage\"\r\n                        //defaultValue={age}\r\n                        value={empage}\r\n                        className={classes.textField}\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(parseInt(e.target.value, 10));\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"passportno\"\r\n                  control={control}\r\n                  defaultValue={passportno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Passport No\"\r\n                        id=\"standard-passportno\"\r\n                        name=\"passportno\"\r\n                        defaultValue={passportno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"passport_expirydate\"\r\n                  control={control}\r\n                  defaultValue={passport_expirydate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Passport Expiry Date\"\r\n                        id=\"standard-ppexpiry\"\r\n                        name=\"passport_expirydate\"\r\n                        type=\"date\"\r\n                        defaultValue={passport_expirydate}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"nationality\"\r\n                  control={control}\r\n                  defaultValue={nationality}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Nationality\"\r\n                        id=\"standard-nationality\"\r\n                        name=\"nationality\"\r\n                        defaultValue={nationality}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"gender\"\r\n                  control={control}\r\n                  defaultValue={gender}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Gender\"\r\n                        id=\"standard-gender\"\r\n                        name=\"gender\"\r\n                        defaultValue={gender}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        <MenuItem value=\"Male\">Male</MenuItem>\r\n                        <MenuItem value=\"Female\">Female</MenuItem>\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"address\"\r\n                  control={control}\r\n                  defaultValue={address}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Address\"\r\n                        id=\"standard-address\"\r\n                        name=\"address\"\r\n                        defaultValue={address}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <Divider className={classes.divider} />\r\n            <div>\r\n              <div>\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"basic_salary\"\r\n                    control={control}\r\n                    defaultValue={basic_salary}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <CurrencyTextField\r\n                          label=\"Basic Salary\"\r\n                          variant=\"standard\"\r\n                          value={basic_salary}\r\n                          currencySymbol=\"$\"\r\n                          outputFormat=\"string\"\r\n                          decimalCharacter=\".\"\r\n                          digitGroupSeparator=\",\"\r\n                          decimalPlaces=\"2\"\r\n                          className={classes.textField}\r\n                          id=\"standard-basicsalary\"\r\n                          name=\"basic_salary\"\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            onChange(parseFloat(currency(e.target.value), 10));\r\n                          }}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                        />\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"salary_currency\"\r\n                    control={control}\r\n                    defaultValue={salary_currency}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Currency\"\r\n                          id=\"standard-currency\"\r\n                          name=\"salary_currency\"\r\n                          defaultValue={salary_currency}\r\n                          className={classes.textField}\r\n                          onChange={onChange}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                          select\r\n                        >\r\n                          <MenuItem value=\"BND\">BND</MenuItem>\r\n                          <MenuItem value=\"USD\">USD</MenuItem>\r\n                          <MenuItem value=\"MYR\">MYR</MenuItem>\r\n                        </TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n              </div>\r\n              <div>\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"siteallows_fee\"\r\n                    control={control}\r\n                    defaultValue={siteallows_fee}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <CurrencyTextField\r\n                          label=\"Site Allowances Fee\"\r\n                          variant=\"standard\"\r\n                          value={siteallows_fee}\r\n                          currencySymbol=\"$\"\r\n                          outputFormat=\"number\"\r\n                          decimalCharacter=\".\"\r\n                          digitGroupSeparator=\",\"\r\n                          decimalPlaces=\"2\"\r\n                          className={classes.textField}\r\n                          id=\"standard-siteallowances\"\r\n                          name=\"siteallows_fee\"\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            onChange(parseFloat(currency(e.target.value), 10));\r\n                          }}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                        />\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"perdiem_fee\"\r\n                    control={control}\r\n                    defaultValue={perdiem_fee}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <CurrencyTextField\r\n                          label=\"Per Diem Fee\"\r\n                          variant=\"standard\"\r\n                          value={perdiem_fee}\r\n                          currencySymbol=\"$\"\r\n                          outputFormat=\"number\"\r\n                          decimalCharacter=\".\"\r\n                          digitGroupSeparator=\",\"\r\n                          decimalPlaces=\"2\"\r\n                          className={classes.textField}\r\n                          id=\"standard-perdiem\"\r\n                          name=\"perdiem_fee\"\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            onChange(parseFloat(currency(e.target.value), 10));\r\n                          }}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                        />\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"tap_checkbox\"\r\n                  control={control}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Checkbox\r\n                            name=\"tap_checkbox\"\r\n                            defaultValue={tap_checkbox}\r\n                            checked={checktap}\r\n                            type=\"checkbox\"\r\n                            onChange={(e) => {\r\n                              onChange(e.target.checked);\r\n                              setCheckTap(e.target.checked);\r\n                            }}\r\n                          />\r\n                        }\r\n                        label=\"TAP/SCP Contribution\"\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"tap_acno\"\r\n                  control={control}\r\n                  defaultValue={tap_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"TAP Ac No\"\r\n                        id=\"standard-tapno\"\r\n                        name=\"tap_acno\"\r\n                        defaultValue={tap_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"scp_acno\"\r\n                  control={control}\r\n                  defaultValue={scp_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"SCP Ac No\"\r\n                        id=\"standard-scpno\"\r\n                        name=\"scp_acno\"\r\n                        defaultValue={scp_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"bank_name\"\r\n                  control={control}\r\n                  defaultValue={bank_name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Bank Name\"\r\n                        id=\"standard-bankname\"\r\n                        name=\"bank_name\"\r\n                        defaultValue={bank_name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"bank_acno\"\r\n                  control={control}\r\n                  defaultValue={bank_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Bank Ac No\"\r\n                        id=\"standard-backacno\"\r\n                        name=\"bank_acno\"\r\n                        defaultValue={bank_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  // rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"workpermitno\"\r\n                  control={control}\r\n                  defaultValue={workpermitno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Work Permit No\"\r\n                        id=\"standard-workpermitno\"\r\n                        name=\"workpermitno\"\r\n                        defaultValue={workpermitno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"workpermit_expirydate\"\r\n                  control={control}\r\n                  defaultValue={workpermit_expirydate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Work Permit Expiry Date\"\r\n                        id=\"standard-workpermitexpiry\"\r\n                        name=\"workpermit_expirydate\"\r\n                        type=\"date\"\r\n                        defaultValue={workpermit_expirydate}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <Divider className={classes.divider} />\r\n              <div>\r\n                <Controller\r\n                  name=\"date_of_join\"\r\n                  control={control}\r\n                  defaultValue={date_of_join}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Joining Date\"\r\n                        id=\"standard-joiningdate\"\r\n                        name=\"date_of_join\"\r\n                        type=\"date\"\r\n                        defaultValue={date_of_join}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <div>\r\n                  <Controller\r\n                    name=\"date_of_resign\"\r\n                    control={control}\r\n                    defaultValue={date_of_resign}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Resign Date\"\r\n                          id=\"standard-resindate\"\r\n                          name=\"date_of_resign\"\r\n                          type=\"date\"\r\n                          defaultValue={date_of_resign}\r\n                          className={classes.textField}\r\n                          onChange={onChange}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                          InputLabelProps={{\r\n                            shrink: true,\r\n                          }}\r\n                        />\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Email is required\" }}\r\n                  />\r\n\r\n                  <Controller\r\n                    name=\"hasresigned\"\r\n                    control={control}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <FormControlLabel\r\n                          control={\r\n                            <Checkbox\r\n                              name=\"hasresigned\"\r\n                              defaultValue={hasresigned}\r\n                              checked={isresigned}\r\n                              type=\"checkbox\"\r\n                              onChange={(e) => {\r\n                                onChange(e.target.checked);\r\n                                setIsresigned(e.target.checked);\r\n                              }}\r\n                            />\r\n                          }\r\n                          label=\"Resigned\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"leave_entitled\"\r\n                  control={control}\r\n                  defaultValue={leave_entitled}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Annual Leaves Entitled\"\r\n                        id=\"standard-annualleave\"\r\n                        name=\"leave_entitled\"\r\n                        type=\"numeric\"\r\n                        defaultValue={leave_entitled}\r\n                        className={classes.textField}\r\n                        onChange={(e) =>\r\n                          onChange(parseFloat(e.target.value, 10))\r\n                        }\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"leave_bf\"\r\n                  control={control}\r\n                  defaultValue={leave_bf}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Leaves B/F\"\r\n                        id=\"standard-leavebal\"\r\n                        name=\"leave_bf\"\r\n                        type=\"numeric\"\r\n                        defaultValue={leave_bf}\r\n                        className={classes.textField}\r\n                        onChange={(e) =>\r\n                          onChange(parseFloat(e.target.value, 10))\r\n                        }\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"designation\"\r\n                  control={control}\r\n                  defaultValue={designation}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Designation\"\r\n                        id=\"standard-designation\"\r\n                        name=\"designation\"\r\n                        defaultValue={designation}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        <MenuItem value=\"\">None</MenuItem>\r\n                        {designations &&\r\n                          designations.map((r) => {\r\n                            return (\r\n                              <MenuItem key={r.id} value={r.name}>\r\n                                {r.name}\r\n                              </MenuItem>\r\n                            );\r\n                          })}\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"department\"\r\n                  control={control}\r\n                  defaultValue={department}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Department\"\r\n                        id=\"standard-department\"\r\n                        name=\"department\"\r\n                        defaultValue={department}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        <MenuItem value=\"\">None</MenuItem>\r\n                        {departments &&\r\n                          departments.map((r) => {\r\n                            return (\r\n                              <MenuItem key={r.id} value={r.name}>\r\n                                {r.name}\r\n                              </MenuItem>\r\n                            );\r\n                          })}\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"reporting_to\"\r\n                  control={control}\r\n                  defaultValue={reporting_to}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Reporting To\"\r\n                        id=\"standard-reportingto\"\r\n                        name=\"reporting_to\"\r\n                        defaultValue={reporting_to}\r\n                        className={classes.textField}\r\n                        onChange={(e) => {\r\n                          onChange(e.target.value);\r\n                          handleReportingTo(e.target.value);\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        <MenuItem value=\"\">None</MenuItem>\r\n                        {employees &&\r\n                          employees.map((r) => {\r\n                            return (\r\n                              <MenuItem key={r.id} value={r.name}>\r\n                                {r.name}\r\n                              </MenuItem>\r\n                            );\r\n                          })}\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"reporting_email\"\r\n                  control={control}\r\n                  defaultValue={reportemail}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Reporting Email\"\r\n                        id=\"standard-reportingemail\"\r\n                        name=\"reporting_email\"\r\n                        value={reportemail}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <Divider className={classes.divider} />\r\n            </div>\r\n          </Grid>\r\n          <Divider />\r\n        </Paper>\r\n      </form>\r\n\r\n      <div>\r\n        {/* <Grid xs={12}>\r\n          <EmpJobhistory\r\n            staffname={name}\r\n            empid={editEmployeeID}\r\n            basicsalary={basic_salary}\r\n            siteallows={siteallows_fee}\r\n            department={department}\r\n            designaton={designation}\r\n          />\r\n        </Grid> */}\r\n        <Grid xs={12}>\r\n          <EmpFamily />\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <EmpEducations />\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <EmpExperiences />\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <EmpTrainings />\r\n        </Grid>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  divider: {\r\n    padding: 4,\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 350,\r\n  },\r\n}));\r\n\r\nexport default EmployeeForm;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDailyAllowsPayrun.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\PrintPayslip.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useExpenses.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useDeleteLeaves.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\Export2ExcelDialog.js",["1622","1623","1624","1625"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  //AspectRatio,\r\n  Box,\r\n  Button,\r\n  //ButtonGroup,\r\n  //Center,\r\n  Checkbox,\r\n  //Container,\r\n  Divider,\r\n  //Flex,\r\n  FormControl,\r\n  //FormLabel,\r\n  //FormErrorMessage,\r\n  //FormHelperText,\r\n  //Grid,\r\n  //GridItem,\r\n  Heading,\r\n  HStack,\r\n  //Icon,\r\n  //IconButton,\r\n  //Image,\r\n  Input,\r\n  InputGroup,\r\n  InputLeftAddon,\r\n  //InputLeftElement,\r\n  //Modal,\r\n  //ModalOverlay,\r\n  //ModalContent,\r\n  //ModalHeader,\r\n  //ModalFooter,\r\n  //ModalBody,\r\n  //ModalCloseButton,\r\n  //Radio,\r\n  //RadioGroup,\r\n  Select,\r\n  //SimpleGrid,\r\n  //Stack,\r\n  //StackDivider,\r\n  //Text,\r\n  //Tabs,\r\n} from \"@chakra-ui/react\";\r\nimport { useHocPeriod } from \"./hoc/useHocPeriod\";\r\nimport { usePeriods } from \"./periods/usePeriods\";\r\n//import Export2Excel from \"./Export2Excel\";\r\n\r\n// const initial_state = {\r\n//   type: \"\",\r\n//   month: new Date().getMonth(),\r\n//   year: new Date().getFullYear(),\r\n//   filename: \"\",\r\n//};\r\n\r\nconst Export2Excel = React.lazy(() => import(\"./Export2Excel\"));\r\n\r\nconst months = [\r\n  { name: \"January\", value: 1 },\r\n  { name: \"February\", value: 2 },\r\n  { name: \"March\", value: 3 },\r\n  { name: \"April\", value: 4 },\r\n  { name: \"May\", value: 5 },\r\n  { name: \"June\", value: 6 },\r\n  { name: \"July\", value: 7 },\r\n  { name: \"August\", value: 8 },\r\n  { name: \"September\", value: 9 },\r\n  { name: \"October\", value: 10 },\r\n  { name: \"November\", value: 11 },\r\n  { name: \"December\", value: 12 },\r\n];\r\n\r\nconst Export2ExcelDialog = ({ state, setState, dataset, onClose }) => {\r\n  const field_width = \"138\";\r\n  const [isLoad, setIsload] = useState(true);\r\n  const { hocperiod, setHocPeriodYrId, setHocPeriodMthId } = useHocPeriod();\r\n  const { periods } = usePeriods();\r\n\r\n  const handleChange = (evt) => {\r\n    const value = evt.target.value;\r\n    setState({\r\n      ...state,\r\n      [evt.target.name]: value,\r\n    });\r\n    if (evt.target.name === \"month\") {\r\n      setIsload(true);\r\n    }\r\n    if (evt.target.name === \"year\") {\r\n      setIsload(true);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    onClose();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setHocPeriodYrId(state.year);\r\n    setHocPeriodMthId(state.month);\r\n    setIsload(false);\r\n  }, [isLoad]);\r\n\r\n  // useEffect(() => {\r\n  //   setState(initial_state);\r\n  //   setState({ ...formdata });\r\n  //   setState({ ...formdata });\r\n  //   console.log(\"laeve form\",state)\r\n  // }, [initialValues]);\r\n\r\n  return (\r\n    <Box>\r\n      <Box p={2}>\r\n        <Heading size=\"md\">EXPORT TO EXCEL DIALOG</Heading>\r\n      </Box>\r\n      {/* <Box>\r\n        <Export2Excel filename=\"hoc\" dataset={hoc} title=\"Hoc\" />\r\n      </Box> */}\r\n      <Divider />\r\n\r\n      <div>\r\n        <FormControl>\r\n          <InputGroup>\r\n            <HStack w=\"100%\" py={1}>\r\n              <InputLeftAddon children=\"Type\" minWidth={field_width} />\r\n              <Input\r\n                name=\"type\"\r\n                value={state.type}\r\n                width=\"full\"\r\n                onChange={handleChange}\r\n                borderColor=\"gray.400\"\r\n                isReadOnly\r\n                //textTransform=\"capitalize\"\r\n                //ref={ref}\r\n                placeholder=\"type\"\r\n              />\r\n            </HStack>\r\n          </InputGroup>\r\n        </FormControl>\r\n      </div>\r\n      <div>\r\n        <FormControl>\r\n          <InputGroup>\r\n            <HStack w=\"100%\" py={1}>\r\n              <InputLeftAddon children=\"Month\" minWidth={field_width} />\r\n              <Select\r\n                name=\"month\"\r\n                value={state.month}\r\n                width=\"full\"\r\n                onChange={handleChange}\r\n                borderColor=\"gray.400\"\r\n                //textTransform=\"capitalize\"\r\n                //ref={ref}\r\n                //placeholder=\"category\"\r\n              >\r\n                {months &&\r\n                  months.map((rec, index) => {\r\n                    return (\r\n                      <option key={rec.index} value={rec.value}>\r\n                        {rec.name}\r\n                      </option>\r\n                    );\r\n                  })}\r\n              </Select>\r\n            </HStack>\r\n          </InputGroup>\r\n        </FormControl>\r\n      </div>\r\n      <div>\r\n        <FormControl>\r\n          <InputGroup>\r\n            <HStack w=\"100%\" py={1}>\r\n              <InputLeftAddon children=\"Year\" minWidth={field_width} />\r\n              <Select\r\n                name=\"year\"\r\n                value={state.year}\r\n                width=\"full\"\r\n                onChange={handleChange}\r\n                borderColor=\"gray.400\"\r\n                //textTransform=\"capitalize\"\r\n                //ref={ref}\r\n                //placeholder=\"category\"\r\n              >\r\n                {periods.map((row) => {\r\n                  return (\r\n                    <option key={row.period} value={row.period}>\r\n                      {row.period}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Select>\r\n            </HStack>\r\n          </InputGroup>\r\n        </FormControl>\r\n      </div>\r\n      <div>\r\n        <FormControl>\r\n          <InputGroup>\r\n            <HStack w=\"100%\" py={1}>\r\n              <InputLeftAddon children=\"Title\" minWidth={field_width} />\r\n              <Input\r\n                name=\"title\"\r\n                value={state.title}\r\n                width=\"full\"\r\n                onChange={handleChange}\r\n                borderColor=\"gray.400\"\r\n                //ref={ref}\r\n                placeholder=\"title\"\r\n              />\r\n            </HStack>\r\n          </InputGroup>\r\n        </FormControl>\r\n      </div>\r\n      <div>\r\n        <FormControl>\r\n          <InputGroup>\r\n            <HStack w=\"100%\" py={1}>\r\n              <InputLeftAddon children=\"Filename\" minWidth={field_width} />\r\n              <Input\r\n                name=\"filename\"\r\n                value={state.filename}\r\n                width=\"full\"\r\n                onChange={handleChange}\r\n                borderColor=\"gray.400\"\r\n                //ref={ref}\r\n                placeholder=\"filename\"\r\n              />\r\n            </HStack>\r\n          </InputGroup>\r\n        </FormControl>\r\n      </div>\r\n      <Divider />\r\n      <Box p={2}>\r\n        <Export2Excel\r\n          filename={state.filename}\r\n          dataset={hocperiod}\r\n          title={state.title}\r\n        />\r\n      </Box>\r\n      {/* <div>\r\n          <Button\r\n            type=\"submit\"\r\n            colorScheme=\"teal\"\r\n            variant=\"solid\"\r\n            onClick={handleSubmit(onSubmit)}\r\n          >\r\n            Download\r\n          </Button>\r\n        </div> */}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Export2ExcelDialog;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useLeavesPeriod.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\HocForm.js",["1626","1627","1628","1629","1630","1631","1632","1633"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, Icon, TextField, Paper, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport * as emailjs from \"emailjs-com\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\n//import { useExpensesContext } from \"../context/expenses_context\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\nimport { useHoc } from \"./hoc/useHoc\";\r\nimport { useAddHoc } from \"./hoc/useAddHoc\";\r\n//import { useDeleteHoc } from \"./hoc/useDeleteHoc\";\r\nimport { useUpdateHoc } from \"./hoc/useUpdateHoc\";\r\nimport { useHoccategory } from \"./hoccategory/useHoccategory\";\r\nimport { useHocwhat } from \"./hocwhat/useHocwhat\";\r\nimport { useHocwhatdetails } from \"./hocwhatdetails/useHocwhatdetails\";\r\nimport { useHocwhy } from \"./hocwhy/useHocwhy\";\r\nimport { useHocwhydetails } from \"./hocwhydetails/useHocwhydetails\";\r\nimport { useHoclocation } from \"./hoclocation/useHoclocation\";\r\n\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\n\r\nconst HocForm = ({\r\n  formdata,\r\n  setFormdata,\r\n  handleDialogClose,\r\n  isEditId,\r\n  isNew,\r\n}) => {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  //const { hoc, filter, setFilter, setHocId } = useHoc();\r\n  const { employees } = useEmployees();\r\n  const { hocwhat } = useHocwhat();\r\n  const { hocwhatdetails, setHocwhatdetailsId } = useHocwhatdetails();\r\n  const { hocwhy, setHocwhyId } = useHocwhy();\r\n  const { hocwhydetails, setHocwhydetailsId } = useHocwhydetails();\r\n  const { hoccategory } = useHoccategory();\r\n  const { hoclocation, setHoclocationId } = useHoclocation();\r\n  const updateHoc = useUpdateHoc();\r\n  const addHoc = useAddHoc();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const [category, setCategory] = useState(\"\" || formdata.category);\r\n  const [whatstatus, setWhatstatus] = useState(\"\" || formdata.what);\r\n  const [whystatus, setWhystatus] = useState(\"\" || formdata.why);\r\n  const [useremail, setUserEmail] = useState(\"\");\r\n\r\n  console.log(\"formdata\", formdata);\r\n\r\n  const { handleSubmit, control } = useForm({\r\n    defaultValues: {\r\n      ...formdata,\r\n    },\r\n  });\r\n\r\n  const handleSentEmail = (data) => {\r\n    const { date } = data;\r\n    //console.log(\"expense form\", loginLevel);\r\n    var emaildata = {\r\n      to_name: loginLevel.loginUser,\r\n      to_email: loginLevel.loginEmail,\r\n      message: `Your expenses claim application dated on ${date} has been successfully submitted for approval`,\r\n      cc_to: loginLevel.reporting_email,\r\n    };\r\n\r\n    emailjs.send(SERVICE_ID, TEMPLATE_ID, emaildata, USER_ID).then(\r\n      function (response) {\r\n        console.log(response.status, response.text);\r\n        toast({\r\n          title: `Email has sent successfully to ${emaildata.to_email}!`,\r\n          status: \"success\",\r\n        });\r\n      },\r\n      function (err) {\r\n        console.log(err);\r\n        toast({\r\n          title: `Email has fail to send to ${emaildata.to_email}!`,\r\n          status: \"warning\",\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  const onSubmit = (data, e) => {\r\n    e.preventDefault();\r\n\r\n    if (isNew) {\r\n      const { tableData, ...fields } = data;\r\n      const emp = employees.filter((r) => r.name === data.raisedby);\r\n      console.log(\"emp\", emp);\r\n      addHoc({ ...fields, empid: emp[0].id, email: emp[0].email });\r\n    } else {\r\n      if (data.id) {\r\n        const { id, tableData, ...fields } = data;\r\n        updateHoc({ id, ...fields });\r\n      } else {\r\n        const { tableData, ...fields } = data;\r\n        addHoc({ ...fields, empid: loginLevel.loginUserId });\r\n        //handleSentEmail(data);\r\n      }\r\n    }\r\n\r\n    handleDialogClose();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setHoclocationId(\"C\");\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (whatstatus === \"\") {\r\n      setHocwhatdetailsId((prev) => (prev = \"none\"));\r\n    } else {\r\n      setHocwhatdetailsId((prev) => (prev = whatstatus));\r\n    }\r\n  }, [whatstatus]);\r\n\r\n  useEffect(() => {\r\n    if (category === \"Positive Act\") {\r\n      //setHocwhyId((prev) => (prev = \"none\"));\r\n      setHocwhydetailsId((prev) => (prev = \"none\"));\r\n    } else {\r\n      setHocwhyId((prev) => (prev = \"\"));\r\n      setHocwhydetailsId((prev) => (prev = whystatus));\r\n    }\r\n  }, [whystatus, category]);\r\n\r\n  return (\r\n    <div>\r\n      <Paper className={classes.root}>\r\n        <Typography variant=\"h5\" component=\"h3\">\r\n          HOC FORM\r\n        </Typography>\r\n        <Typography component=\"p\">HOC Form</Typography>\r\n\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <div>\r\n            <Controller\r\n              name=\"findings\"\r\n              control={control}\r\n              defaultValue={formdata.findings}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"What is/are the findings?\"\r\n                    id=\"margin-findings\"\r\n                    name=\"findings\"\r\n                    defaultValue={formdata.findings}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    multiline\r\n                    rows={2}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  ></TextField>\r\n                );\r\n              }}\r\n              rules={{ required: \"Findings is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"risks\"\r\n              control={control}\r\n              defaultValue={formdata.risks}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"What is/are the potential hazard(s)/risk(s)?\"\r\n                    id=\"margin-risks\"\r\n                    name=\"risks\"\r\n                    defaultValue={formdata.risks}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    multiline\r\n                    rows={2}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  ></TextField>\r\n                );\r\n              }}\r\n              rules={{ required: \"Potential hazard/risk is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"category\"\r\n              control={control}\r\n              defaultValue={formdata.category}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Type/Category\"\r\n                    //type=\"date\"\r\n                    id=\"margin-category\"\r\n                    name=\"formdata.category\"\r\n                    value={value}\r\n                    className={classes.textField}\r\n                    onChange={(e) => {\r\n                      onChange(e.target.value);\r\n                      setCategory((prev) => (prev = e.target.value));\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    // InputLabelProps={{\r\n                    //   shrink: true,\r\n                    // }}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"\">None</MenuItem>\r\n                    {hoccategory &&\r\n                      hoccategory.map((rec) => {\r\n                        return (\r\n                          <MenuItem key={rec.id} value={rec.description}>\r\n                            {rec.description}\r\n                          </MenuItem>\r\n                        );\r\n                      })}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              rules={{ required: \"Category is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"what\"\r\n              control={control}\r\n              defaultValue={formdata.what}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"What\"\r\n                    id=\"margin-what\"\r\n                    name=\"what\"\r\n                    defaultValue={formdata.what}\r\n                    className={classes.textField}\r\n                    onChange={(e) => {\r\n                      onChange(e.target.value);\r\n                      setWhatstatus((prev) => (prev = e.target.value));\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"\">None</MenuItem>\r\n                    {hocwhat &&\r\n                      hocwhat\r\n                        .filter((r) => {\r\n                          // if (category === \"Positive Act\") {\r\n                          //   return r.positiveact;\r\n                          // } else {\r\n                          //   return r.unsafeact;\r\n                          // }\r\n                          switch (category) {\r\n                            case \"Positive Act\":\r\n                              return r.positiveact;\r\n                            case \"Quality\":\r\n                              return r.quality;\r\n                            default:\r\n                              return r.unsafeact;\r\n                          }\r\n                        })\r\n                        .map((rec) => {\r\n                          return (\r\n                            <MenuItem key={rec.id} value={rec.description}>\r\n                              {rec.description}\r\n                            </MenuItem>\r\n                          );\r\n                        })}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"What is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"what_details\"\r\n              control={control}\r\n              defaultValue={formdata.what_details}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"What Details\"\r\n                    id=\"margin-whatdetails\"\r\n                    name=\"what_details\"\r\n                    defaultValue={formdata.what_details}\r\n                    value={value}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"\">None</MenuItem>\r\n                    {hocwhatdetails &&\r\n                      hocwhatdetails\r\n                        .filter((r) => {\r\n                          // if (category === \"Positive Act\") {\r\n                          //   return r.positiveact;\r\n                          // } else {\r\n                          //   return r.unsafeact;\r\n                          // }\r\n                          switch (category) {\r\n                            case \"Positive Act\":\r\n                              return r.positiveact;\r\n                            case \"Quality\":\r\n                              return r.quality;\r\n                            default:\r\n                              return r.unsafeact;\r\n                          }\r\n                        })\r\n                        .map((rec) => {\r\n                          return (\r\n                            <MenuItem key={rec.id} value={rec.description}>\r\n                              {rec.description}\r\n                            </MenuItem>\r\n                          );\r\n                        })}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"What detail is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"why\"\r\n              control={control}\r\n              defaultValue={formdata.why}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Why\"\r\n                    //type=\"number\"\r\n                    id=\"standard-why\"\r\n                    name=\"why\"\r\n                    defaultValue={formdata.why}\r\n                    className={classes.textField}\r\n                    //onChange={onChange}\r\n                    onChange={(e) => {\r\n                      onChange(e.target.value);\r\n                      setWhystatus((prev) => (prev = e.target.value));\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"\">None</MenuItem>\r\n                    {hocwhy &&\r\n                      hocwhy\r\n                        .filter((r) => {\r\n                          switch (category) {\r\n                            case \"Positive Act\":\r\n                              return r.positiveact;\r\n                            case \"Quality\":\r\n                              return r.quality;\r\n                            default:\r\n                              return r.unsafeact;\r\n                          }\r\n                        })\r\n                        .map((rec) => {\r\n                          return (\r\n                            <MenuItem key={rec.id} value={rec.description}>\r\n                              {rec.description}\r\n                            </MenuItem>\r\n                          );\r\n                        })}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Why is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"why_details\"\r\n              control={control}\r\n              defaultValue={formdata.why_details}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Why Details\"\r\n                    id=\"margin-whydetails\"\r\n                    name=\"why_details\"\r\n                    defaultValue={formdata.why_details}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"\">None</MenuItem>\r\n                    {hocwhydetails &&\r\n                      hocwhydetails.map((rec) => {\r\n                        return (\r\n                          <MenuItem key={rec.id} value={rec.description}>\r\n                            {rec.description}\r\n                          </MenuItem>\r\n                        );\r\n                      })}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Why detail is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"discussion\"\r\n              control={control}\r\n              defaultValue={formdata.discussion}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Did a conversation take place?\"\r\n                    id=\"margin-discussion\"\r\n                    name=\"discussion\"\r\n                    defaultValue={formdata.discussion}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"Yes\">Yes</MenuItem>\r\n                    <MenuItem value=\"No\">No</MenuItem>\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"action\"\r\n              control={control}\r\n              defaultValue={formdata.action}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Was there an agreed remedial/corrective or preventive action? \"\r\n                    id=\"margin-action\"\r\n                    name=\"action\"\r\n                    defaultValue={formdata.action}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    multiline\r\n                    rows={2}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  ></TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"isfollowup\"\r\n              control={control}\r\n              defaultValue={formdata.isfollowup}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Follow-up required?\"\r\n                    id=\"standard-isfollowup\"\r\n                    name=\"isfollowup\"\r\n                    defaultValue={formdata.isfollowup}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"Yes\">Yes</MenuItem>\r\n                    <MenuItem value=\"No\">No</MenuItem>\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"IC No required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"isworkrelated\"\r\n              control={control}\r\n              defaultValue={formdata.isworkrelated}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Work Related?\"\r\n                    id=\"margin-workrelated\"\r\n                    name=\"isworkrelated\"\r\n                    defaultValue={formdata.isworkrelated}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"Yes\">Yes</MenuItem>\r\n                    <MenuItem value=\"No\">No</MenuItem>\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n          {formdata.raisedby ? (\r\n            <div>\r\n              <Controller\r\n                name=\"raisedby\"\r\n                control={control}\r\n                defaultValue={formdata.raisedby}\r\n                render={({\r\n                  field: { onChange, value },\r\n                  fieldState: { error },\r\n                }) => {\r\n                  return (\r\n                    <TextField\r\n                      label=\"Raised By\"\r\n                      id=\"margin-raisedby\"\r\n                      name=\"raisedby\"\r\n                      defaultValue={formdata.raisedby}\r\n                      className={classes.textField}\r\n                      onChange={onChange}\r\n                      error={!!error}\r\n                      helperText={error ? error.message : null}\r\n                      inputProps={{ readOnly: true }}\r\n                    ></TextField>\r\n                  );\r\n                }}\r\n                //rules={{ required: \"Status is required\" }}\r\n              />\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <Controller\r\n                name=\"raisedby\"\r\n                control={control}\r\n                defaultValue={formdata.raisedby}\r\n                render={({\r\n                  field: { onChange, value },\r\n                  fieldState: { error },\r\n                }) => {\r\n                  return (\r\n                    <TextField\r\n                      label=\"Raised By\"\r\n                      id=\"margin-raisedby\"\r\n                      name=\"raisedby\"\r\n                      defaultValue={formdata.raisedby}\r\n                      className={classes.textField}\r\n                      onChange={onChange}\r\n                      error={!!error}\r\n                      helperText={error ? error.message : null}\r\n                      //inputProps={{ readOnly: true }}\r\n                      select\r\n                    >\r\n                      <MenuItem value=\"\">None</MenuItem>\r\n                      {employees &&\r\n                        employees\r\n                          .filter((r) => !r.hasresigned)\r\n                          .sort((a, b) =>\r\n                            a.name > b.name ? 1 : b.name > a.name ? -1 : 0\r\n                          )\r\n                          .map((rec) => {\r\n                            return (\r\n                              <MenuItem key={rec.id} value={rec.name}>\r\n                                {rec.name}\r\n                              </MenuItem>\r\n                            );\r\n                          })}\r\n                    </TextField>\r\n                  );\r\n                }}\r\n                //rules={{ required: \"Status is required\" }}\r\n              />\r\n            </div>\r\n          )}\r\n          <div>\r\n            <Controller\r\n              name=\"raisedon\"\r\n              control={control}\r\n              defaultValue={formdata.raisedon}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Raised On\"\r\n                    id=\"margin-raisedon\"\r\n                    name=\"raisedon\"\r\n                    type=\"date\"\r\n                    defaultValue={formdata.raisedon}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  ></TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"company\"\r\n              control={control}\r\n              defaultValue={formdata.company}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Company\"\r\n                    id=\"margin-company\"\r\n                    name=\"company\"\r\n                    defaultValue={formdata.company}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    inputProps={{ readOnly: true }}\r\n                  ></TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"location\"\r\n              control={control}\r\n              defaultValue={formdata.location}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Location\"\r\n                    id=\"margin-location\"\r\n                    name=\"location\"\r\n                    defaultValue={formdata.location}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    select\r\n                  >\r\n                    <MenuItem value=\"\">None</MenuItem>\r\n                    {hoclocation &&\r\n                      hoclocation.map((rec) => {\r\n                        return (\r\n                          <MenuItem key={rec.id} value={rec.name}>\r\n                            {rec.name}\r\n                          </MenuItem>\r\n                        );\r\n                      })}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n          {/* <div>\r\n            <Controller\r\n              name=\"department\"\r\n              control={control}\r\n              defaultValue={formdata.department}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Department\"\r\n                    id=\"margin-department\"\r\n                    name=\"department\"\r\n                    defaultValue={formdata.department}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  ></TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div> */}\r\n          <div>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              //onClick={() => handleSubmit(onSubmit)()}\r\n            >\r\n              Save <Icon className={classes.rightIcon}>send</Icon>\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 500,\r\n  },\r\n}));\r\n\r\nexport default HocForm;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableVerify.js",["1634","1635","1636","1637","1638","1639"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { TextField, MenuItem } from \"@material-ui/core\";\r\nimport { Button, HStack } from \"@chakra-ui/react\";\r\nimport {\r\n  useSetRecoilState,\r\n  useRecoilValue,\r\n  useRecoilState,\r\n  ///useRecoilValueLoadable,\r\n} from \"recoil\";\r\nimport {\r\n  allowsPeriodState,\r\n  allowsDataState,\r\n  empidState,\r\n} from \"./data/atomdata\";\r\n//import { fetchDailyAllowancesSelector } from \"./data/selectordata\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n//import ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport DailyAllowsDetlsTable from \"./DailyAllowsDetlsTable\";\r\nimport { useDailyAllowsStatus } from \"./dailyallows/useDailyAllowsStatus\";\r\nimport { useUpdateDailyAllows } from \"./dailyallows/useUpdateDailyAllows\";\r\n\r\n//const FILTERSTRING = \"Submitted\";\r\n\r\nexport default function DailyAllowancesTable() {\r\n  //let history = useHistory();\r\n  const toast = useCustomToast();\r\n  const classes = useStyles();\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  //const [tmpallowsdata, setTmpallowsdata] = useState([]);\r\n  //const allows_period = useRecoilValue(allowsPeriodState);\r\n  //const allows_empid = useRecoilValue(empidState);\r\n  const [allowsdata, setAllowsdata] = useRecoilState(allowsDataState);\r\n  const { dailyallowsstatus, setDailyAllowsStatusId } = useDailyAllowsStatus();\r\n  const updateDailyAllows = useUpdateDailyAllows();\r\n  //const setEmpID = useSetRecoilState(empidState);\r\n  //const title = `Site Allowances (${allows_period})`;\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"name\",\r\n        editable: \"never\",\r\n      },\r\n      { title: \"Period\", field: \"period\", editable: \"never\" },\r\n      { title: \"Location\", field: \"location\", editable: \"never\" },\r\n      { title: \"Manager Name\", field: \"manager\", editable: \"never\" },\r\n      {\r\n        title: \"No Of Days\",\r\n        field: \"no_of_days\",\r\n        type: \"numeric\",\r\n        editable: \"never\",\r\n      },\r\n      { title: \"Amount\", field: \"amount\", type: \"currency\", editable: \"never\" },\r\n      {\r\n        title: \"Status\",\r\n        field: \"status\",\r\n        editComponent: (props) => (\r\n          <TextField\r\n            //defaultValue={props.value || null}\r\n            onChange={(e) => props.onChange(e.target.value)}\r\n            style={{ width: 100 }}\r\n            value={props.value}\r\n            select\r\n          >\r\n            <MenuItem value=\"Pending\">Pending</MenuItem>\r\n            <MenuItem value=\"Approved\">Approved</MenuItem>\r\n            <MenuItem value=\"Rejected\">Rejected</MenuItem>\r\n            <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n          </TextField>\r\n        ),\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    setDailyAllowsStatusId(\"Submitted\");\r\n  }, []);\r\n\r\n  // const Save_DailyAllowancesData = () => {\r\n  //   dailyallowsstatus.forEach((data) => {\r\n  //     const { id } = data;\r\n  //     if (id) {\r\n  //       const { id, rec_id, tableData, ...fields } = data;\r\n  //       updateDailyAllowance({ id, ...fields });\r\n  //     }\r\n  //   });\r\n  // };\r\n\r\n  const Verify_DailyAllowancesData = () => {\r\n    dailyallowsstatus.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        const currentrec = rec;\r\n        currentrec.status = \"Verified\";\r\n        updateDailyAllows({ id: rec.id, status: \"Verified\" });\r\n        toast({\r\n          title: \"Site Allows record being updated!\",\r\n          status: \"success\",\r\n        });\r\n        //update leavesdata\r\n        // if (!update_dailyallowance_error) {\r\n        //   const recdata = dailyallowancesdata.filter((r) => r.id === rec.id);\r\n        //   recdata[0].status = \"Approved\";\r\n        // }\r\n      }\r\n    });\r\n    dailyallowsstatus.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  const Reject_DailyAllowancesData = () => {\r\n    dailyallowsstatus.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        const currentrec = rec;\r\n        currentrec.status = \"Rejected\";\r\n        updateDailyAllows({ id: rec.id, status: \"Rejected\" });\r\n        toast({\r\n          title: \"Site Allows record being rejected!\",\r\n          status: \"warning\",\r\n        });\r\n        //update leavesdata\r\n        // if (!update_dailyallowance_error) {\r\n        //   const recdata = dailyallowancesdata.filter((r) => r.id === rec.id);\r\n        //   recdata[0].status = \"Rejected\";\r\n        // }\r\n      }\r\n    });\r\n    dailyallowsstatus.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={dailyallowsstatus}\r\n          title=\"Site Allows Application\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <EditIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          // editable={{\r\n          //   onRowUpdate: (newData, oldData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         const dataUpdate = [...dailyallowancesdata];\r\n          //         const index = oldData.tableData.id;\r\n          //         dataUpdate[index] = newData;\r\n          //         setDailyAllowancesdata([...dataUpdate]);\r\n          //         //approve_Expense(newData);\r\n\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          // }}\r\n          options={{\r\n            filtering: true,\r\n            selection: true,\r\n            headerStyle: {\r\n              backgroundColor: \"rgba(75, 192, 192, 1)\",\r\n              color: \"white\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <HStack p={2}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"solid\"\r\n                    color=\"white\"\r\n                    bgColor=\"red\"\r\n                    onClick={Verify_DailyAllowancesData}\r\n                  >\r\n                    Verify\r\n                  </Button>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"solid\"\r\n                    color=\"white\"\r\n                    bgColor=\"red\"\r\n                    onClick={Reject_DailyAllowancesData}\r\n                  >\r\n                    Reject\r\n                  </Button>\r\n                </HStack>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <div className={classes.dialog}>\r\n          <CustomDialog\r\n            isOpen={isDialogOpen}\r\n            //handleClose={handleDialogClose}\r\n            title=\"\"\r\n            showButton={true}\r\n            isFullscreen={true}\r\n            isFullwidth={true}\r\n          >\r\n            <DailyAllowsDetlsTable\r\n              setAllowsdata={setAllowsdata}\r\n              allowsdata={allowsdata}\r\n              //handleDialogClose={handleDialogClose}\r\n            />\r\n          </CustomDialog>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  dialog: {\r\n    width: 1000,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeFormAdd.js",["1640","1641"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  TextField,\r\n  Paper,\r\n  Typography,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport { Box, Heading } from \"@chakra-ui/react\";\r\n//import * as emailjs from \"emailjs-com\";\r\n//import { useRecoilState } from \"recoil\";\r\n//import { loginLevelState } from \"./data/atomdata\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\nimport { useAddEmployees } from \"./employees/useAddEmployees\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\n\r\nconst initial_state = {\r\n  name: \"\",\r\n  email: \"\",\r\n};\r\n\r\nconst EmployeeFormAdd = ({ onAddEmpFormClose }) => {\r\n  const classes = useStyles();\r\n  //const toast = useCustomToast();\r\n  const { employees } = useEmployees();\r\n  const addEmployee = useAddEmployees();\r\n  const [state, setState] = useState(initial_state);\r\n  const [isExit, setIsExit] = useState(false);\r\n  //const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { handleSubmit, control } = useForm();\r\n  //const initialValues = Object.values(initial_state).join(\"\");\r\n\r\n  //const {\r\n    //editEmployeeID,\r\n    //employees_loading,\r\n    //deleteEmployee,\r\n    //loadEmployees,\r\n    //setEditEmployeeID,\r\n    //setIsEditingOn,\r\n    //setIsEditingOff,\r\n    //resetSingleEmployee,\r\n    //resetEmployees,\r\n    //getSingleEmployee,\r\n  //} = useEmployeesContext();\r\n\r\n  const onSubmit = (data) => {\r\n    const { email } = data;\r\n    const emp = employees && employees.filter((rec) => rec.email === email);\r\n    console.log(\"exist\", emp);\r\n    if (emp.length) {\r\n      setIsExit(true);\r\n      setTimeout(() => {\r\n        setIsExit(false);\r\n      }, 2000);\r\n    } else {\r\n      setIsExit(false)\r\n      addEmployee({ ...data });\r\n      onAddEmpFormClose();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Paper className={classes.root}>\r\n        <Typography variant=\"h5\" component=\"h3\">\r\n          CREATE NEW EMPLOYEE\r\n        </Typography>\r\n        <Typography component=\"p\">Fill in new employee name and email</Typography>\r\n        <Divider />\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <div>\r\n            <Controller\r\n              name=\"name\"\r\n              control={control}\r\n              defaultValue={state.name}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Name\"\r\n                    id=\"margin-normal\"\r\n                    name=\"name\"\r\n                    //value={value}\r\n                    defaultValue={state.name}\r\n                    className={classes.textField}\r\n                    onChange={(e) => {\r\n                      onChange(e.target.value);\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  ></TextField>\r\n                );\r\n              }}\r\n              rules={{ required: \"Name required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"email\"\r\n              control={control}\r\n              defaultValue={state.email}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Email\"\r\n                    id=\"margin-normal-email\"\r\n                    name=\"email\"\r\n                    defaultValue={state.email}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  />\r\n                );\r\n              }}\r\n              rules={{ required: \"Email is required\" }}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              onClick={handleSubmit(onSubmit)}\r\n            >\r\n              Submit <Icon className={classes.rightIcon}>send</Icon>\r\n            </Button>\r\n          </div>\r\n          {isExit && (\r\n            <Box>\r\n              <Heading size=\"md\" pl={2}>\r\n                Warning! This email already existed!\r\n              </Heading>\r\n            </Box>\r\n          )}\r\n        </form>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 400,\r\n  },\r\n}));\r\n\r\nexport default EmployeeFormAdd;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useDeleteHoc.js",[],"D:\\react-myprojects\\hrms-demo\\src\\helpers\\Utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useLeaves.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseFormView.js",["1642","1643","1644","1645","1646","1647","1648","1649","1650","1651","1652","1653","1654"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, Icon, TextField, Paper, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport * as emailjs from \"emailjs-com\";\r\nimport axios from \"axios\";\r\nimport currency from \"currency.js\";\r\nimport CurrencyTextField from \"@unicef/material-ui-currency-textfield\";\r\n//import { Box, Grid, GridItem, Heading } from \"@chakra-ui/react\";\r\nimport {\r\n  Box,\r\n  Image,\r\n  IconButton,\r\n  HStack,\r\n  VStack,\r\n  Grid,\r\n  GridItem,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { FiEye, FiTrash2 } from \"react-icons/fi\";\r\nimport { viewImageState } from \"../components/data/atomdata\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\n//import { useExpenses } from \"./expenses/useExpenses\";\r\nimport { useAddExpenses } from \"./expenses/useAddExpenses\";\r\nimport { useDeleteExpenses } from \"./expenses/useDeleteExpenses\";\r\nimport { useUpdateExpenses } from \"./expenses/useUpdateExpenses\";\r\nimport { useExpensesAttachments } from \"./expensesattachments/useExpensesAttachments\";\r\n\r\nconst FileViewers = React.lazy(() => import(\"../helpers/FileViewers\"));\r\n\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\nconst UPLOADURL = \"https://api.cloudinary.com/v1_1/dlmzwvakr/image/upload\";\r\nconst DOWNLOADURL = \"https://res.cloudinary.com/v1_1/dlmzwvakr/image/upload\";\r\nconst UPLOADPRESET = \"appsmiths\";\r\n// const initial_values = {\r\n//   name: \"\",\r\n//   date: \"\",\r\n//   purchased_date: \"\",\r\n//   purchased_from: \"\",\r\n//   description: \"\",\r\n//   remark: \"\",\r\n//   status: \"Pending\",\r\n//   amount: 0,\r\n//};\r\n\r\nconst ExpenseForm = ({ formdata, setFormdata, handleDialogClose }) => {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  //const { acceptedFiles, getRootProps, getInputProps } = useDropzone();\r\n  //const { expenses, filter, setFilter, setExpenseId } = useExpenses();\r\n  const updateExpenses = useUpdateExpenses();\r\n  const addExpenses = useAddExpenses();\r\n  const delExpenses = useDeleteExpenses();\r\n  const { expensesattachments, setAttachmentId } = useExpensesAttachments();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { isExpenseEditing, editExpenseID } = useExpensesContext();\r\n  const [files, setFiles] = useState([]);\r\n  const [filename, setFilename] = useState(\"\");\r\n  const [newFile, setNewFile] = useState({});\r\n  const [image, setImage] = useRecoilState(viewImageState);\r\n  const {\r\n    isOpen: isViewImageOpen,\r\n    onOpen: onViewImageOpen,\r\n    onClose: onViewImageClose,\r\n  } = useDisclosure();\r\n  const { handleSubmit, control, setValue } = useForm({\r\n    defaultValues: {\r\n      ...formdata,\r\n    },\r\n  });\r\n\r\n  //console.log(\"formdata\", formdata);\r\n  //console.log(\"files\", files);\r\n\r\n  const onDrop = (acceptedFiles) => {\r\n    acceptedFiles.forEach((file) => {\r\n      const formData = new FormData();\r\n      formData.append(\"file\", file);\r\n      formData.append(\"upload_preset\", UPLOADPRESET);\r\n      axios({\r\n        url: UPLOADURL,\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        },\r\n        data: formData,\r\n      })\r\n        .then((res) => {\r\n          //console.log(\"res\", res.data);\r\n          // Object.assign(file, {\r\n          //   preview: res.data.url,\r\n          // });\r\n          setFiles(\r\n            (prev) =>\r\n              (prev = [\r\n                ...files,\r\n                ...[\r\n                  { name: res.data.original_filename, preview: res.data.url },\r\n                ],\r\n              ])\r\n          );\r\n        })\r\n        .catch((err) => {\r\n          setNewFile({});\r\n          console.log(err);\r\n        });\r\n      // Object.assign(file, {\r\n      //   preview: URL.createObjectURL(file),\r\n      // });\r\n    });\r\n\r\n    //const allfiles = [...files, ...acceptedFiles];\r\n    //setFiles(allfiles);\r\n  };\r\n\r\n  const upLoad = () => {\r\n    const uploadURL = \"https://api.cloudinary.com/v1_1/dlmzwvakr/image/upload\";\r\n    const uploadPreset = \"appsmiths\";\r\n\r\n    files.forEach((file) => {\r\n      const formData = new FormData();\r\n      formData.append(\"file\", file);\r\n      formData.append(\"upload_preset\", uploadPreset);\r\n\r\n      axios({\r\n        url: uploadURL,\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        },\r\n        data: formData,\r\n      })\r\n        .then((res) => {\r\n          setFilename((prev) => (prev = res.data.public_id));\r\n          console.log(res.data.public_id);\r\n          //console.log(\"filename\", filename);\r\n        })\r\n        .catch((err) => console.log(err));\r\n    });\r\n  };\r\n\r\n  const handleSentEmail = (data) => {\r\n    const { date } = data;\r\n    //console.log(\"expense form\", loginLevel);\r\n    var emaildata = {\r\n      to_name: loginLevel.loginUser,\r\n      to_email: loginLevel.loginEmail,\r\n      message: `Your expenses claim application dated on ${date} has been successfully submitted for approval`,\r\n      cc_to: loginLevel.reporting_email,\r\n    };\r\n\r\n    emailjs.send(SERVICE_ID, TEMPLATE_ID, emaildata, USER_ID).then(\r\n      function (response) {\r\n        //console.log(response.status, response.text);\r\n        toast({\r\n          title: `Email has sent successfully to ${emaildata.to_email}!`,\r\n          status: \"success\",\r\n        });\r\n      },\r\n      function (err) {\r\n        console.log(err);\r\n        toast({\r\n          title: `Email has fail to send to ${emaildata.to_email}!`,\r\n          status: \"warning\",\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  const onSubmit = (data, e) => {\r\n    e.preventDefault();\r\n    //console.log(\"onSubmit\", isExpenseEditing);\r\n    let newData = {\r\n      ...data,\r\n      attachment1_name: files.length >= 1 ? files[0].name : \"\",\r\n      attachment1_url: files.length >= 1 ? files[0].preview : \"\",\r\n      attachment2_name: files.length >= 2 ? files[1].name : \"\",\r\n      attachment2_url: files.length >= 2 ? files[1].preview : \"\",\r\n      attachment3_name: files.length >= 3 ? files[2].name : \"\",\r\n      attachment3_url: files.length >= 3 ? files[2].preview : \"\",\r\n    };\r\n    console.log(\"newdata\", newData);\r\n    console.log(\"isEditing\", isExpenseEditing);\r\n    if (isExpenseEditing) {\r\n      //console.log(\"edit\");\r\n      const { rec_id, tableData, ...editData } = newData;\r\n      updateExpenses({ id: editExpenseID, ...editData });\r\n    } else {\r\n      //console.log(\"new\");\r\n      addExpenses({\r\n        ...newData,\r\n        empid: loginLevel.loginUserId,\r\n        name: loginLevel.loginUser,\r\n      });\r\n    }\r\n    // if (isExpenseEditing) {\r\n    //   const { rec_id, tableData, ...editData } = newData;\r\n    //   console.log(\"edit\", ...editData);\r\n    //   updateExpenses({ id: editExpenseID, ...editData });\r\n    // } else {\r\n    //   console.log(\"new\");\r\n    //   addExpenses({\r\n    //     ...newData,\r\n    //     empid: loginLevel.loginUserId,\r\n    //     name: loginLevel.loginUser,\r\n    //   });\r\n    //   handleSentEmail(data);\r\n    // }\r\n\r\n    handleDialogClose();\r\n  };\r\n\r\n  const handleViewImage = ({ preview, name }) => {\r\n    const newImage = { url: preview, name: name };\r\n    setImage((prev) => newImage);\r\n    onViewImageOpen();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isExpenseEditing) {\r\n      setAttachmentId(formdata.attachmentid);\r\n      const newData = expensesattachments\r\n        .filter((rec) => rec.attachmentid === formdata.attachmentid)\r\n        .map((rec) => {\r\n          return {\r\n            name: rec.name,\r\n            preview: rec.url,\r\n          };\r\n        });\r\n      \r\n      setFiles(newData);\r\n    } else {\r\n      setFiles([]);\r\n    }\r\n  }, [expensesattachments]);\r\n\r\n  return (\r\n    <div>\r\n      <Box size=\"x1\">\r\n        <Typography variant=\"h5\" component=\"h3\">\r\n          EXPENSES CLAIM FORM\r\n        </Typography>\r\n        <Typography component=\"p\">Expense Claim Application</Typography>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <Grid templateColumns=\"repeat(3, 1fr)\" gap={4}>\r\n            <GridItem colSpan={1}>\r\n              <div>\r\n                <Controller\r\n                  name=\"name\"\r\n                  control={control}\r\n                  defaultValue={formdata.name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Name\"\r\n                        id=\"margin-normal1\"\r\n                        name=\"name\"\r\n                        defaultValue={formdata.name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"date\"\r\n                  control={control}\r\n                  defaultValue={formdata.date}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Date\"\r\n                        type=\"date\"\r\n                        id=\"margin-normal2\"\r\n                        name=\"formdata.date\"\r\n                        value={value}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  rules={{ required: \"From Date is required\" }}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Controller\r\n                  name=\"purchased_from\"\r\n                  control={control}\r\n                  defaultValue={formdata.purchased_from}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Purchased From\"\r\n                        id=\"margin-normal3\"\r\n                        name=\"purchased_from\"\r\n                        defaultValue={formdata.purchased_from}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  // rules={{ required: \"Reason is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"description\"\r\n                  control={control}\r\n                  defaultValue={formdata.description}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Description\"\r\n                        id=\"margin-normal4\"\r\n                        name=\"description\"\r\n                        defaultValue={formdata.description}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  // rules={{ required: \"Reason is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"amount\"\r\n                  control={control}\r\n                  defaultValue={formdata.amount}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      // <TextField\r\n                      //   label=\"Amount\"\r\n                      //   type=\"number\"\r\n                      //   id=\"standard-number1\"\r\n                      //   name=\"amount\"\r\n                      //   defaultValue={formdata.amount}\r\n                      //   className={classes.textField}\r\n                      //   //onChange={onChange}\r\n                      //   onChange={(e) => {\r\n                      //     onChange(parseInt(e.target.value, 10));\r\n                      //   }}\r\n                      //   error={!!error}\r\n                      //   helperText={error ? error.message : null}\r\n                      // />\r\n                      <CurrencyTextField\r\n                        label=\"Amount\"\r\n                        variant=\"standard\"\r\n                        value={formdata.amount}\r\n                        currencySymbol=\"$\"\r\n                        outputFormat=\"string\"\r\n                        decimalCharacter=\".\"\r\n                        digitGroupSeparator=\",\"\r\n                        decimalPlaces=\"2\"\r\n                        className={classes.textField}\r\n                        id=\"standard-amount\"\r\n                        name=\"amount\"\r\n                        style={{ width: 100 }}\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(parseFloat(currency(e.target.value), 10));\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"remark\"\r\n                  control={control}\r\n                  defaultValue={formdata.remark}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Remark\"\r\n                        id=\"margin-normal5\"\r\n                        name=\"remark\"\r\n                        defaultValue={formdata.remark}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  // rules={{ required: \"Reason is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"status\"\r\n                  control={control}\r\n                  defaultValue={formdata.status}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Status\"\r\n                        id=\"margin-normal6\"\r\n                        name=\"status\"\r\n                        defaultValue={formdata.status}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Status is required\" }}\r\n                />\r\n              </div>\r\n              {/* <div>\r\n                <Controller\r\n                  name=\"attachment1_name\"\r\n                  control={control}\r\n                  defaultValue={files.length >= 1 ? files[0].name : \"\"}\r\n                  defaultValue={formdata.attachment1_name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Attachment #1\"\r\n                        id=\"margin-normal6\"\r\n                        name=\"attachment1_name\"\r\n                        defaultValue={files.length >= 1 ? files[0].name : \"\"}\r\n                        defaultValue={formdata.attachment1_name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                />\r\n              </div> */}\r\n              {/*  <div>\r\n                <Controller\r\n                  name=\"attachment2_name\"\r\n                  control={control}\r\n                  defaultValue={formdata.attachment2_name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Attachment #2\"\r\n                        id=\"margin-normal6\"\r\n                        name=\"attachment2_name\"\r\n                        defaultValue={formdata.attachment2_name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                />\r\n              </div> */}\r\n              {/* <div>\r\n                <Controller\r\n                  name=\"attachment3_name\"\r\n                  control={control}\r\n                  defaultValue={formdata.attachment3_name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Attachment #3\"\r\n                        id=\"margin-normal6\"\r\n                        name=\"attachment3_name\"\r\n                        defaultValue={formdata.attachment3_name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                />\r\n              </div> */}\r\n\r\n              <div>\r\n                {/* <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.button}\r\n                  //onClick={() => handleSubmit(onSubmit)()}\r\n                >\r\n                  Save <Icon className={classes.rightIcon}>send</Icon>\r\n                </Button> */}\r\n              </div>\r\n            </GridItem>\r\n            <GridItem colSpan={2}>\r\n              {/* <ImageUpload files={files} setFiles={setFiles} onDrop={onDrop} /> */}\r\n              {files\r\n                .filter((rec) => rec.name !== undefined && rec.name !== null)\r\n                .map((file) => {\r\n                  return (\r\n                    <Box\r\n                      display=\"inline-flex\"\r\n                      w=\"50%\"\r\n                      h={150}\r\n                      mb={8}\r\n                      mr={8}\r\n                      p={4}\r\n                      border=\"1px solid #eaeaea\"\r\n                      borderRadius={2}\r\n                      key={file.name}\r\n                    >\r\n                      <HStack p={5}>\r\n                        <Image\r\n                          src={file.preview}\r\n                          alt={file.name}\r\n                          display=\"block\"\r\n                          w=\"auto\"\r\n                          h=\"100%\"\r\n                        />\r\n                        <VStack>\r\n                          <IconButton\r\n                            size=\"sm\"\r\n                            aria-label=\"view image\"\r\n                            icon={<FiEye />}\r\n                            onClick={() =>\r\n                              handleViewImage({\r\n                                preview: file.preview,\r\n                                name: file.name,\r\n                                type: file.preview.split(\".\").pop(),\r\n                              })\r\n                            }\r\n                          />\r\n                          {/* <IconButton\r\n                            size=\"sm\"\r\n                            aria-label=\"delete image\"\r\n                            icon={<FiTrash2 />}\r\n                            onClick={() => handleDelImage(file.name)}\r\n                          /> */}\r\n                        </VStack>\r\n                      </HStack>\r\n                    </Box>\r\n                  );\r\n                })}\r\n            </GridItem>\r\n          </Grid>\r\n        </form>\r\n      </Box>\r\n      <Modal\r\n        closeOnOverlayClick={false}\r\n        isOpen={isViewImageOpen}\r\n        onClose={onViewImageClose}\r\n        size=\"3xl\"\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>{image.name}</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody pb={6}>\r\n            <Box\r\n              display=\"inline-flex\"\r\n              w=\"100%\"\r\n              h=\"800\"\r\n              mb={8}\r\n              mr={8}\r\n              p={4}\r\n              border=\"1px solid #eaeaea\"\r\n              borderRadius={2}\r\n            >\r\n              <FileViewers imagefile={image} />\r\n            </Box>\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button onClick={onViewImageClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 400,\r\n  },\r\n}));\r\n\r\nexport default ExpenseForm;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\ApprovalManagerScreen.js",["1655","1656","1657","1658","1659","1660","1661","1662","1663","1664","1665","1666","1667","1668","1669","1670"],"import React, { useState, useEffect } from \"react\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport {\r\n  AspectRatio,\r\n  Box,\r\n  Button,\r\n  ButtonGroup,\r\n  Center,\r\n  Container,\r\n  Divider,\r\n  FormControl,\r\n  Grid,\r\n  GridItem,\r\n  Heading,\r\n  Image,\r\n  Input,\r\n  InputGroup,\r\n  NumberInput,\r\n  NumberInputField,\r\n  Stack,\r\n  HStack,\r\n  VStack,\r\n  Wrap,\r\n  Tabs,\r\n  TabList,\r\n  TabPanels,\r\n  Tab,\r\n  TabPanel,\r\n  Text,\r\n  Radio,\r\n  RadioGroup,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport { formatPrice } from \"../helpers/Utils\";\r\n\r\nconst ApprovalManagerScreen = ({\r\n  formdata,\r\n  handleDialogClose,\r\n  onConfirm,\r\n  setFormdata,\r\n  tabIndex,\r\n}) => {\r\n  const [statustype, setStatustype] = useState(\"\");\r\n  const {\r\n    handleSubmit,\r\n    register,\r\n    control,\r\n    reset,\r\n    setValue,\r\n    formState: { errors, isSubmitting, id },\r\n  } = useForm({\r\n    defaultValues: {\r\n      ...formdata,\r\n    },\r\n  });\r\n\r\n  const handleSave = (data) => {\r\n    const updData = { ...data, status: statustype };\r\n    onConfirm(updData);\r\n    handleDialogClose();\r\n  };\r\n  console.log(\"formdata\", formdata);\r\n\r\n  useEffect(() => {\r\n    setStatustype(formdata.status);\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <Heading size=\"md\">Approval Screen</Heading>\r\n      <Tabs\r\n        border=\"1px solid teal\"\r\n        borderRadius={10}\r\n        mt={5}\r\n        mb={5}\r\n        defaultIndex={tabIndex}\r\n      >\r\n        <TabList>\r\n          <Tab hidden={tabIndex !== 0}>Leaves</Tab>\r\n          <Tab hidden={tabIndex !== 1}>Expenses</Tab>\r\n          <Tab hidden={tabIndex !== 2}>Site Allows</Tab>\r\n          <Tab hidden={tabIndex !== 3}>Payroll</Tab>\r\n        </TabList>\r\n        <TabPanels>\r\n          <TabPanel>\r\n            {tabIndex === 0 && (\r\n              <form onSubmit={handleSubmit(handleSave)}>\r\n                <Grid\r\n                  templateColumns={\"repeat(2,1fr)\"}\r\n                  columnGap={2}\r\n                  rowGap={2}\r\n                >\r\n                  <GridItem colSpan={2}>\r\n                    <FormControl>\r\n                      <Controller\r\n                        control={control}\r\n                        name=\"name\"\r\n                        //defaultValue={invoice.sls_no || ''}\r\n                        render={({ field: { onChange, value, ref } }) => (\r\n                          <VStack align=\"left\">\r\n                            <Text as=\"b\" fontSize=\"sm\" textAlign=\"left\">\r\n                              Name\r\n                            </Text>\r\n                            <Input\r\n                              name=\"name\"\r\n                              value={value}\r\n                              width=\"full\"\r\n                              onChange={onChange}\r\n                              borderColor=\"gray.400\"\r\n                              //textTransform=\"capitalize\"\r\n                              ref={ref}\r\n                              placeholder=\"name\"\r\n                              minWidth=\"100\"\r\n                              readOnly\r\n                            />\r\n                          </VStack>\r\n                        )}\r\n                      />\r\n                    </FormControl>\r\n                  </GridItem>\r\n                  <GridItem colSpan={1}>\r\n                    <FormControl>\r\n                      <Controller\r\n                        control={control}\r\n                        name=\"from_date\"\r\n                        //defaultValue={invoice.sls_date}\r\n                        render={({ field: { onChange, value, ref } }) => (\r\n                          <VStack align=\"left\">\r\n                            <Text as=\"b\" fontSize=\"sm\" textAlign=\"left\">\r\n                              From Date\r\n                            </Text>\r\n\r\n                            <Input\r\n                              name=\"from_date\"\r\n                              value={value}\r\n                              type=\"date\"\r\n                              width=\"full\"\r\n                              onChange={onChange}\r\n                              borderColor=\"gray.400\"\r\n                              //textTransform=\"capitalize\"\r\n                              ref={ref}\r\n                              placeholder=\"from date\"\r\n                              minWidth=\"100\"\r\n                            />\r\n                          </VStack>\r\n                        )}\r\n                      />\r\n                    </FormControl>\r\n                  </GridItem>\r\n                  <GridItem colSpan={1}>\r\n                    <FormControl>\r\n                      <Controller\r\n                        control={control}\r\n                        name=\"to_date\"\r\n                        //defaultValue={invoice.sls_date}\r\n                        render={({ field: { onChange, value, ref } }) => (\r\n                          <VStack align=\"left\">\r\n                            <Text as=\"b\" fontSize=\"sm\" textAlign=\"left\">\r\n                              To Date\r\n                            </Text>\r\n\r\n                            <Input\r\n                              name=\"to_date\"\r\n                              value={value}\r\n                              type=\"date\"\r\n                              width=\"full\"\r\n                              onChange={onChange}\r\n                              borderColor=\"gray.400\"\r\n                              //textTransform=\"capitalize\"\r\n                              ref={ref}\r\n                              placeholder=\"to date\"\r\n                              minWidth=\"100\"\r\n                            />\r\n                          </VStack>\r\n                        )}\r\n                      />\r\n                    </FormControl>\r\n                  </GridItem>\r\n                  <GridItem colSpan={1}>\r\n                    <FormControl>\r\n                      <Controller\r\n                        control={control}\r\n                        name=\"no_of_days\"\r\n                        //defaultValue={invoice.sls_no || ''}\r\n                        render={({ field: { onChange, value, ref } }) => (\r\n                          <VStack align=\"left\">\r\n                            <Text as=\"b\" fontSize=\"sm\" textAlign=\"left\">\r\n                              No Of Days\r\n                            </Text>\r\n                            <Input\r\n                              name=\"no_of_days\"\r\n                              value={value}\r\n                              type=\"number\"\r\n                              width=\"full\"\r\n                              onChange={(e) =>\r\n                                onChange(parseFloat(e.target.value))\r\n                              }\r\n                              borderColor=\"gray.400\"\r\n                              //textTransform=\"capitalize\"\r\n                              ref={ref}\r\n                              placeholder=\"no of days\"\r\n                              minWidth=\"100\"\r\n                            />\r\n                          </VStack>\r\n                        )}\r\n                      />\r\n                    </FormControl>\r\n                  </GridItem>\r\n                  <GridItem colSpan={1}>\r\n                    <FormControl>\r\n                      <Controller\r\n                        control={control}\r\n                        name=\"status\"\r\n                        //defaultValue={invoice.sls_no || ''}\r\n                        render={({ field: { onChange, value, ref } }) => (\r\n                          <VStack align=\"left\">\r\n                            <Text as=\"b\" fontSize=\"sm\" textAlign=\"left\">\r\n                              Status\r\n                            </Text>\r\n                            <Input\r\n                              name=\"status\"\r\n                              value={value}\r\n                              width=\"full\"\r\n                              onChange={onChange}\r\n                              borderColor=\"gray.400\"\r\n                              //textTransform=\"capitalize\"\r\n                              ref={ref}\r\n                              placeholder=\"status\"\r\n                              minWidth=\"100\"\r\n                              readOnly\r\n                            />\r\n                          </VStack>\r\n                        )}\r\n                      />\r\n                    </FormControl>\r\n                  </GridItem>\r\n                </Grid>\r\n                <Divider borderWidth={1} borderColor=\"teal\" mt={5} />\r\n                <RadioGroup\r\n                  mt={5}\r\n                  onChange={setStatustype}\r\n                  value={statustype}\r\n                  border=\"1px solid teal\"\r\n                  borderRadius={10}\r\n                  py={5}\r\n                  px={1}\r\n                  minH=\"10\"\r\n                >\r\n                  <Stack direction=\"row\">\r\n                    <Radio value=\"Pending\">Pending</Radio>\r\n                    <Radio value=\"Rejected\">Rejected</Radio>\r\n                    <Radio value=\"Approved\">Approved</Radio>\r\n                    <Radio value=\"Delete\">Delete</Radio>\r\n                  </Stack>\r\n                </RadioGroup>\r\n                <HStack p={5}>\r\n                  <ButtonGroup gap=\"20\" pl=\"20\">\r\n                    <Button colorScheme=\"teal\" variant=\"solid\" type=\"submit\">\r\n                      Save\r\n                    </Button>\r\n                    <Button\r\n                      colorScheme=\"teal\"\r\n                      variant=\"solid\"\r\n                      onClick={handleDialogClose}\r\n                    >\r\n                      Exit\r\n                    </Button>\r\n                  </ButtonGroup>\r\n                </HStack>\r\n              </form>\r\n            )}\r\n          </TabPanel>\r\n          <TabPanel>\r\n            {tabIndex === 1 && (\r\n              <form onSubmit={handleSubmit(handleSave)}>\r\n                <Grid\r\n                  templateColumns={\"repeat(2,1fr)\"}\r\n                  columnGap={2}\r\n                  rowGap={2}\r\n                >\r\n                  <GridItem colSpan={2}>\r\n                    <FormControl>\r\n                      <Controller\r\n                        control={control}\r\n                        name=\"name\"\r\n                        //defaultValue={invoice.sls_no || ''}\r\n                        render={({ field: { onChange, value, ref } }) => (\r\n                          <VStack align=\"left\">\r\n                            <Text as=\"b\" fontSize=\"sm\" textAlign=\"left\">\r\n                              Name\r\n                            </Text>\r\n                            <Input\r\n                              name=\"name\"\r\n                              value={value}\r\n                              width=\"full\"\r\n                              onChange={onChange}\r\n                              borderColor=\"gray.400\"\r\n                              //textTransform=\"capitalize\"\r\n                              ref={ref}\r\n                              placeholder=\"name\"\r\n                              minWidth=\"100\"\r\n                              readOnly\r\n                            />\r\n                          </VStack>\r\n                        )}\r\n                      />\r\n                    </FormControl>\r\n                  </GridItem>\r\n                  <GridItem colSpan={1}>\r\n                    <FormControl>\r\n                      <Controller\r\n                        control={control}\r\n                        name=\"date\"\r\n                        //defaultValue={invoice.sls_date}\r\n                        render={({ field: { onChange, value, ref } }) => (\r\n                          <VStack align=\"left\">\r\n                            <Text as=\"b\" fontSize=\"sm\" textAlign=\"left\">\r\n                              Date\r\n                            </Text>\r\n\r\n                            <Input\r\n                              name=\"date\"\r\n                              value={value}\r\n                              type=\"date\"\r\n                              width=\"full\"\r\n                              onChange={onChange}\r\n                              borderColor=\"gray.400\"\r\n                              //textTransform=\"capitalize\"\r\n                              ref={ref}\r\n                              placeholder=\"date\"\r\n                              minWidth=\"100\"\r\n                            />\r\n                          </VStack>\r\n                        )}\r\n                      />\r\n                    </FormControl>\r\n                  </GridItem>\r\n                  <GridItem colSpan={1}>\r\n                    <FormControl>\r\n                      <Controller\r\n                        control={control}\r\n                        name=\"amount\"\r\n                        //defaultValue={invoice.sls_no || ''}\r\n                        render={({ field: { onChange, value, ref } }) => (\r\n                          <VStack align=\"left\">\r\n                            <Text as=\"b\" fontSize=\"sm\" textAlign=\"left\">\r\n                              Amount\r\n                            </Text>\r\n                            <Input\r\n                              name=\"amount\"\r\n                              value={value}\r\n                              type=\"number\"\r\n                              width=\"full\"\r\n                              onChange={(e) =>\r\n                                onChange(parseFloat(e.target.value))\r\n                              }\r\n                              borderColor=\"gray.400\"\r\n                              //textTransform=\"capitalize\"\r\n                              ref={ref}\r\n                              placeholder=\"amount\"\r\n                              minWidth=\"100\"\r\n                            />\r\n                          </VStack>\r\n                        )}\r\n                      />\r\n                    </FormControl>\r\n                  </GridItem>\r\n                  <GridItem colSpan={2}>\r\n                    <FormControl>\r\n                      <Controller\r\n                        control={control}\r\n                        name=\"description\"\r\n                        //defaultValue={invoice.sls_no || ''}\r\n                        render={({ field: { onChange, value, ref } }) => (\r\n                          <VStack align=\"left\">\r\n                            <Text as=\"b\" fontSize=\"sm\" textAlign=\"left\">\r\n                              Description\r\n                            </Text>\r\n                            <Input\r\n                              name=\"description\"\r\n                              value={value}\r\n                              width=\"full\"\r\n                              onChange={onChange}\r\n                              borderColor=\"gray.400\"\r\n                              //textTransform=\"capitalize\"\r\n                              ref={ref}\r\n                              placeholder=\"description\"\r\n                              minWidth=\"100\"\r\n                            />\r\n                          </VStack>\r\n                        )}\r\n                      />\r\n                    </FormControl>\r\n                  </GridItem>\r\n                  <GridItem colSpan={1}>\r\n                    <FormControl>\r\n                      <Controller\r\n                        control={control}\r\n                        name=\"status\"\r\n                        //defaultValue={invoice.sls_no || ''}\r\n                        render={({ field: { onChange, value, ref } }) => (\r\n                          <VStack align=\"left\">\r\n                            <Text as=\"b\" fontSize=\"sm\" textAlign=\"left\">\r\n                              Status\r\n                            </Text>\r\n                            <Input\r\n                              name=\"status\"\r\n                              value={value}\r\n                              width=\"full\"\r\n                              onChange={onChange}\r\n                              borderColor=\"gray.400\"\r\n                              //textTransform=\"capitalize\"\r\n                              ref={ref}\r\n                              placeholder=\"status\"\r\n                              minWidth=\"100\"\r\n                              readOnly\r\n                            />\r\n                          </VStack>\r\n                        )}\r\n                      />\r\n                    </FormControl>\r\n                  </GridItem>\r\n                </Grid>\r\n                <Divider borderWidth={1} borderColor=\"teal\" mt={5} />\r\n                <RadioGroup\r\n                  mt={5}\r\n                  onChange={setStatustype}\r\n                  value={statustype}\r\n                  border=\"1px solid teal\"\r\n                  borderRadius={10}\r\n                  py={5}\r\n                  px={1}\r\n                  minH=\"10\"\r\n                  colorScheme=\"teal\"\r\n                  fontWeight=\"bold\"\r\n                  size=\"md\"\r\n                >\r\n                  <Stack direction=\"row\">\r\n                    <Radio value=\"Pending\">Pending</Radio>\r\n                    <Radio value=\"Rejected\">Rejected</Radio>\r\n                    <Radio value=\"Approved\">Approved</Radio>\r\n                    {/* <Radio value=\"Delete\">Delete</Radio> */}\r\n                  </Stack>\r\n                </RadioGroup>\r\n                <HStack p={5}>\r\n                  <ButtonGroup gap=\"20\" pl=\"20\">\r\n                    <Button colorScheme=\"teal\" variant=\"solid\" type=\"submit\">\r\n                      Save\r\n                    </Button>\r\n                    <Button\r\n                      colorScheme=\"teal\"\r\n                      variant=\"solid\"\r\n                      onClick={handleDialogClose}\r\n                    >\r\n                      Exit\r\n                    </Button>\r\n                  </ButtonGroup>\r\n                </HStack>\r\n              </form>\r\n            )}\r\n          </TabPanel>\r\n          <TabPanel>\r\n            {tabIndex === 2 && (\r\n              <form onSubmit={handleSubmit(handleSave)}>\r\n                <Grid\r\n                  templateColumns={\"repeat(2,1fr)\"}\r\n                  columnGap={2}\r\n                  rowGap={2}\r\n                >\r\n                  <GridItem colSpan={2}>\r\n                    <FormControl>\r\n                      <Controller\r\n                        control={control}\r\n                        name=\"name\"\r\n                        //defaultValue={invoice.sls_no || ''}\r\n                        render={({ field: { onChange, value, ref } }) => (\r\n                          <VStack align=\"left\">\r\n                            <Text as=\"b\" fontSize=\"sm\" textAlign=\"left\">\r\n                              Name\r\n                            </Text>\r\n                            <Input\r\n                              name=\"name\"\r\n                              value={value}\r\n                              width=\"full\"\r\n                              onChange={onChange}\r\n                              borderColor=\"gray.400\"\r\n                              //textTransform=\"capitalize\"\r\n                              ref={ref}\r\n                              placeholder=\"name\"\r\n                              minWidth=\"100\"\r\n                              readOnly\r\n                            />\r\n                          </VStack>\r\n                        )}\r\n                      />\r\n                    </FormControl>\r\n                  </GridItem>\r\n                  <GridItem colSpan={1}>\r\n                    <FormControl>\r\n                      <Controller\r\n                        control={control}\r\n                        name=\"period\"\r\n                        //defaultValue={invoice.sls_no || ''}\r\n                        render={({ field: { onChange, value, ref } }) => (\r\n                          <VStack align=\"left\">\r\n                            <Text as=\"b\" fontSize=\"sm\" textAlign=\"left\">\r\n                              Period\r\n                            </Text>\r\n                            <Input\r\n                              name=\"period\"\r\n                              value={value}\r\n                              width=\"full\"\r\n                              onChange={onChange}\r\n                              borderColor=\"gray.400\"\r\n                              //textTransform=\"capitalize\"\r\n                              ref={ref}\r\n                              placeholder=\"period\"\r\n                              minWidth=\"100\"\r\n                            />\r\n                          </VStack>\r\n                        )}\r\n                      />\r\n                    </FormControl>\r\n                  </GridItem>\r\n                  <GridItem colSpan={1}>\r\n                    <FormControl>\r\n                      <Controller\r\n                        control={control}\r\n                        name=\"no_of_days\"\r\n                        //defaultValue={invoice.sls_no || ''}\r\n                        render={({ field: { onChange, value, ref } }) => (\r\n                          <VStack align=\"left\">\r\n                            <Text as=\"b\" fontSize=\"sm\" textAlign=\"left\">\r\n                              No Of Days\r\n                            </Text>\r\n                            <Input\r\n                              name=\"no_of_days\"\r\n                              value={value}\r\n                              type=\"number\"\r\n                              width=\"full\"\r\n                              onChange={(e) =>\r\n                                onChange(parseFloat(e.target.value))\r\n                              }\r\n                              borderColor=\"gray.400\"\r\n                              //textTransform=\"capitalize\"\r\n                              ref={ref}\r\n                              placeholder=\"no of days\"\r\n                              minWidth=\"100\"\r\n                              readOnly\r\n                            />\r\n                          </VStack>\r\n                        )}\r\n                      />\r\n                    </FormControl>\r\n                  </GridItem>\r\n                  <GridItem colSpan={1}>\r\n                    <FormControl>\r\n                      <Controller\r\n                        control={control}\r\n                        name=\"amount\"\r\n                        //defaultValue={invoice.sls_no || ''}\r\n                        render={({ field: { onChange, value, ref } }) => (\r\n                          <VStack align=\"left\">\r\n                            <Text as=\"b\" fontSize=\"sm\" textAlign=\"left\">\r\n                              Amount\r\n                            </Text>\r\n                            <Input\r\n                              name=\"amount\"\r\n                              value={value}\r\n                              type=\"number\"\r\n                              width=\"full\"\r\n                              onChange={(e) =>\r\n                                onChange(parseFloat(e.target.value))\r\n                              }\r\n                              borderColor=\"gray.400\"\r\n                              //textTransform=\"capitalize\"\r\n                              ref={ref}\r\n                              placeholder=\"amount\"\r\n                              minWidth=\"100\"\r\n                              readOnly\r\n                            />\r\n                          </VStack>\r\n                        )}\r\n                      />\r\n                    </FormControl>\r\n                  </GridItem>\r\n                  <GridItem colSpan={1}>\r\n                    <FormControl>\r\n                      <Controller\r\n                        control={control}\r\n                        name=\"status\"\r\n                        //defaultValue={invoice.sls_no || ''}\r\n                        render={({ field: { onChange, value, ref } }) => (\r\n                          <VStack align=\"left\">\r\n                            <Text as=\"b\" fontSize=\"sm\" textAlign=\"left\">\r\n                              Status\r\n                            </Text>\r\n                            <Input\r\n                              name=\"status\"\r\n                              value={value}\r\n                              width=\"full\"\r\n                              onChange={onChange}\r\n                              borderColor=\"gray.400\"\r\n                              //textTransform=\"capitalize\"\r\n                              ref={ref}\r\n                              placeholder=\"status\"\r\n                              minWidth=\"100\"\r\n                              readOnly\r\n                            />\r\n                          </VStack>\r\n                        )}\r\n                      />\r\n                    </FormControl>\r\n                  </GridItem>\r\n                </Grid>\r\n                <Divider borderWidth={1} borderColor=\"teal\" mt={5} />\r\n                <RadioGroup\r\n                  mt={5}\r\n                  onChange={setStatustype}\r\n                  value={statustype}\r\n                  border=\"1px solid teal\"\r\n                  borderRadius={10}\r\n                  py={5}\r\n                  px={1}\r\n                  minH=\"10\"\r\n                >\r\n                  <Stack direction=\"row\">\r\n                    <Radio value=\"Pending\">Pending</Radio>\r\n                    <Radio value=\"Submitted\">Submitted</Radio>\r\n                    <Radio value=\"Verified\">Verified</Radio>\r\n                    <Radio value=\"Approved\">Approved</Radio>\r\n                  </Stack>\r\n                </RadioGroup>\r\n                <HStack p={5}>\r\n                  <ButtonGroup gap=\"20\" pl=\"20\">\r\n                    <Button colorScheme=\"teal\" variant=\"solid\" type=\"submit\">\r\n                      Save\r\n                    </Button>\r\n                    <Button\r\n                      colorScheme=\"teal\"\r\n                      variant=\"solid\"\r\n                      onClick={handleDialogClose}\r\n                    >\r\n                      Exit\r\n                    </Button>\r\n                  </ButtonGroup>\r\n                </HStack>\r\n              </form>\r\n            )}\r\n          </TabPanel>\r\n          <TabPanel>\r\n            {tabIndex === 3 && (\r\n              <form onSubmit={handleSubmit(handleSave)}>\r\n                <Grid\r\n                  templateColumns={\"repeat(2,1fr)\"}\r\n                  columnGap={2}\r\n                  rowGap={2}\r\n                >\r\n                  <GridItem colSpan={2}>\r\n                    <FormControl>\r\n                      <Controller\r\n                        control={control}\r\n                        name=\"period\"\r\n                        //defaultValue={invoice.sls_no || ''}\r\n                        render={({ field: { onChange, value, ref } }) => (\r\n                          <VStack align=\"left\">\r\n                            <Text as=\"b\" fontSize=\"sm\" textAlign=\"left\">\r\n                              Period\r\n                            </Text>\r\n                            <Input\r\n                              name=\"period\"\r\n                              value={value}\r\n                              width=\"full\"\r\n                              onChange={onChange}\r\n                              borderColor=\"gray.400\"\r\n                              //textTransform=\"capitalize\"\r\n                              ref={ref}\r\n                              placeholder=\"period\"\r\n                              minWidth=\"100\"\r\n                              readOnly\r\n                            />\r\n                          </VStack>\r\n                        )}\r\n                      />\r\n                    </FormControl>\r\n                  </GridItem>\r\n                  <GridItem colSpan={1}>\r\n                    <FormControl>\r\n                      <Controller\r\n                        control={control}\r\n                        name=\"totalpayroll\"\r\n                        //defaultValue={invoice.sls_no || ''}\r\n                        render={({ field: { onChange, value, ref } }) => (\r\n                          <VStack align=\"left\">\r\n                            <Text as=\"b\" fontSize=\"sm\" textAlign=\"left\">\r\n                              Total Payroll\r\n                            </Text>\r\n                            <Input\r\n                              name=\"totalpayroll\"\r\n                              value={value}\r\n                              type=\"number\"\r\n                              width=\"full\"\r\n                              onChange={(e) =>\r\n                                onChange(parseFloat(e.target.value))\r\n                              }\r\n                              borderColor=\"gray.400\"\r\n                              //textTransform=\"capitalize\"\r\n                              ref={ref}\r\n                              placeholder=\"total payroll\"\r\n                              minWidth=\"100\"\r\n                              readOnly\r\n                            />\r\n                          </VStack>\r\n                        )}\r\n                      />\r\n                    </FormControl>\r\n                  </GridItem>\r\n                  <GridItem colSpan={1}>\r\n                    <FormControl>\r\n                      <Controller\r\n                        control={control}\r\n                        name=\"status\"\r\n                        //defaultValue={invoice.sls_no || ''}\r\n                        render={({ field: { onChange, value, ref } }) => (\r\n                          <VStack align=\"left\">\r\n                            <Text as=\"b\" fontSize=\"sm\" textAlign=\"left\">\r\n                              Status\r\n                            </Text>\r\n                            <Input\r\n                              name=\"status\"\r\n                              value={value}\r\n                              width=\"full\"\r\n                              onChange={onChange}\r\n                              borderColor=\"gray.400\"\r\n                              //textTransform=\"capitalize\"\r\n                              ref={ref}\r\n                              placeholder=\"status\"\r\n                              minWidth=\"100\"\r\n                              readOnly\r\n                            />\r\n                          </VStack>\r\n                        )}\r\n                      />\r\n                    </FormControl>\r\n                  </GridItem>\r\n                </Grid>\r\n                <Divider borderWidth={1} borderColor=\"teal\" mt={5} />\r\n                <RadioGroup\r\n                  mt={5}\r\n                  onChange={setStatustype}\r\n                  value={statustype}\r\n                  border=\"1px solid teal\"\r\n                  borderRadius={10}\r\n                  py={5}\r\n                  px={1}\r\n                  minH=\"10\"\r\n                >\r\n                  <Stack direction=\"row\">\r\n                    <Radio value=\"Pending\">Pending</Radio>\r\n                    <Radio value=\"Rejected\">Rejected</Radio>\r\n                    <Radio value=\"Verified\">Verified</Radio>\r\n                    <Radio value=\"Approved\">Approved</Radio>\r\n                    {/* <Radio value=\"Delete\">Delete</Radio> */}\r\n                  </Stack>\r\n                </RadioGroup>\r\n                <HStack p={5}>\r\n                  <ButtonGroup gap=\"20\" pl=\"20\">\r\n                    <Button colorScheme=\"teal\" variant=\"solid\" type=\"submit\">\r\n                      Save\r\n                    </Button>\r\n                    <Button\r\n                      colorScheme=\"teal\"\r\n                      variant=\"solid\"\r\n                      onClick={handleDialogClose}\r\n                    >\r\n                      Exit\r\n                    </Button>\r\n                  </ButtonGroup>\r\n                </HStack>\r\n              </form>\r\n            )}\r\n          </TabPanel>\r\n        </TabPanels>\r\n      </Tabs>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ApprovalManagerScreen;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payslips\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\LeavesTableViewSummary.js",["1671","1672","1673","1674","1675","1676"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Box, Button, HStack, Text, useDisclosure } from \"@chakra-ui/react\";\r\nimport { GrTask } from \"react-icons/gr\";\r\nimport { useRecoilState } from \"recoil\";\r\n//import AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\n//import DeleteIcon from \"@material-ui/icons/Delete\";\r\n//import CheckIcon from \"@material-ui/icons/Check\";\r\n//import SearchIcon from \"@material-ui/icons/Search\";\r\n//import LeaveForm from \"./LeaveForm\";\r\n//import { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { AlertDialog } from \"../helpers/AlertDialogBox\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { useLeavesPeriodbyMth } from \"./leaves/useLeavesPeriodbyMth\";\r\nimport { useUpdateLeaves } from \"./leaves/useUpdateLeaves\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport ApprovalManagerScreen from \"./ApprovalManagerScreen\";\r\n\r\n//const FILTERSTRING = \"Pending\";\r\n\r\nconst initial_form = {\r\n  name: \"\",\r\n  to_date: \"\",\r\n  from_date: \"\",\r\n  reason: \"\",\r\n  status: \"Pending\",\r\n  no_of_days: 0,\r\n  leave_bal: 0,\r\n  reporting_email: \"\",\r\n};\r\n\r\nexport default function LeaveTableViewSummary({ year, month }) {\r\n  const classes = useStyles();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { leavesperiodbymth, setLeavePeriodMthId, setLeavePeriodYrId } =\r\n    useLeavesPeriodbyMth();\r\n  const updateLeave = useUpdateLeaves();\r\n  const [formdata, setFormdata] = useState(initial_form);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const [editLeaveID, setEditLeaveID] = useState(\"\");\r\n  const {\r\n    isOpen: isAppScreenOpen,\r\n    onOpen: onAppScreenOpen,\r\n    onClose: onAppScreenClose,\r\n  } = useDisclosure();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"name\",\r\n        width: \"250px\",\r\n      },\r\n\r\n      {\r\n        title: \"From Date\",\r\n        field: \"from_date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n        editable: \"never\",\r\n        width: \"140px\",\r\n      },\r\n      {\r\n        title: \"To Date\",\r\n        field: \"to_date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n        editable: \"never\",\r\n        width: \"140px\",\r\n      },\r\n      {\r\n        title: \"No of Days\",\r\n        field: \"no_of_days\",\r\n        type: \"numeric\",\r\n        editable: \"never\",\r\n        width: \"140px\",\r\n      },\r\n      {\r\n        title: \"Type of Leaves\",\r\n        field: \"leavetype\",\r\n        editable: \"never\",\r\n        width: \"200px\",\r\n      },\r\n      {\r\n        title: \"Reason\",\r\n        field: \"reason\",\r\n        editable: \"never\",\r\n        width: \"250px\",\r\n      },\r\n      { title: \"Status\", field: \"status\", width: \"140px\" },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    setLeavePeriodYrId(year);\r\n    setLeavePeriodMthId(month);\r\n  }, []);\r\n\r\n  const Update_Leave = (data) => {\r\n    //console.log(\"del data\", data);\r\n    const { id, attachmentid, rec_id, tableData, ...fields } = data;\r\n    const editData = { ...fields };\r\n\r\n    setFormdata({ ...editData });\r\n    setFormdata({ ...editData });\r\n    setEditLeaveID(id);\r\n    handleAppScreenOpen();\r\n  };\r\n\r\n  const handleAppScreenOpen = () => {\r\n    onAppScreenOpen();\r\n  };\r\n  const handleAppScreenClose = () => {\r\n    onAppScreenClose();\r\n  };\r\n\r\n  const handleAlertOpen = () => {\r\n    setIsAlertOpen(true);\r\n  };\r\n  const handleAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleOnDeleteConfirm = () => {\r\n    const upddata = { ...formdata, posted: \"D\" };\r\n    updateLeave({ id: editLeaveID, ...upddata });\r\n    // const id = editExpenseID;\r\n    // deleteExpenses(id);\r\n    // expensesattachments\r\n    //   .filter((r) => r.attachmentid === expattachId)\r\n    //   .forEach((rec) => {\r\n    //     const id = rec.id;\r\n    //     deleteExpensesAttachment(id);\r\n    //   });\r\n  };\r\n\r\n  const handleOnUpdateConfirm = (data) => {\r\n    //console.log(\"update\", data)\r\n    const posted = data.status === \"Delete\" ? \"D\" : \"\";\r\n    const upddata = { ...data, posted: posted };\r\n    updateLeave({ id: editLeaveID, ...upddata });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      {/* <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}> */}\r\n\r\n      <Box maxW=\"100%\" pt=\"5px\" overflow=\"scroll\">\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={leavesperiodbymth}\r\n          title=\"Leave Application\"\r\n          actions={[\r\n            (rowData) => ({\r\n              icon: () => <GrTask size=\"23px\" />,\r\n              hidden: loginLevel.loginLevel !== \"Manager\",\r\n              tooltip: \"Edit\",\r\n              onClick: (event, rowData) => {\r\n                Update_Leave(rowData);\r\n              },\r\n            }),\r\n          ]}\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            paging: false,\r\n            headerStyle: {\r\n              backgroundColor: \"rgba(75, 192, 192, 1)\",\r\n              color: \"white\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </Box>\r\n      <CustomDialog\r\n        isOpen={isAppScreenOpen}\r\n        handleClose={handleAppScreenClose}\r\n        title=\"\"\r\n        showButton={true}\r\n        isFullscree={false}\r\n      >\r\n        <ApprovalManagerScreen\r\n          formdata={formdata}\r\n          setFormdata={setFormdata}\r\n          handleDialogClose={handleAppScreenClose}\r\n          onConfirm={handleOnUpdateConfirm}\r\n          tabIndex={0}\r\n        />\r\n      </CustomDialog>\r\n      <AlertDialogBox\r\n        onClose={handleAlertClose}\r\n        onConfirm={handleOnDeleteConfirm}\r\n        isOpen={isAlertOpen}\r\n        title=\"Delete Leave\"\r\n      >\r\n        <h2>\r\n          Are you sure you want to delete {formdata.name} leave from{\" \"}\r\n          {formdata.from_date} to {formdata.to_date} ?\r\n        </h2>\r\n      </AlertDialogBox>\r\n    </div>\r\n    // </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableApproval.js",["1677","1678","1679"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { TextField, MenuItem } from \"@material-ui/core\";\r\nimport { Button, HStack } from \"@chakra-ui/react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport * as emailjs from \"emailjs-com\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport LeaveFormAdmin from \"./LeaveFormAdmin\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\n//import { useLeaves } from \"./leaves/useLeaves\";\r\nimport { useLeavesStatus } from \"./leaves/useLeavesStatus\";\r\n//import { useAddLeaves } from \"./leaves/useAddLeaves\";\r\nimport { useDeleteLeaves } from \"./leaves/useDeleteLeaves\";\r\nimport { useUpdateLeaves } from \"./leaves/useUpdateLeaves\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\n\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\nconst ADMINMANAGER_EMAIL = process.env.REACT_APP_ADMINMANAGER_EMAIL;\r\n\r\nconst initial_form = {\r\n  name: \"\",\r\n  to_date: \"\",\r\n  from_date: \"\",\r\n  reason: \"\",\r\n  status: \"Pending\",\r\n  no_of_days: 0,\r\n  leave_bal: 0,\r\n};\r\n\r\nexport default function LeaveTableApproval() {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  //const { leaves, filter, setFilter, setLeaveId } = useLeaves();\r\n  const { employees } = useEmployees();\r\n  const { leavesstatus, setLeaveStatusId } = useLeavesStatus();\r\n  const updateLeaves = useUpdateLeaves();\r\n  //const addLeaves = useAddLeaves();\r\n  const deleteLeaves = useDeleteLeaves();\r\n  const [formdata, setFormdata] = useState(initial_form);\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const [isUpdate, setIsUpdate] = useState(true);\r\n  const leavedata = leavesstatus.filter(\r\n    (r) => r.reporting_email === loginLevel.loginEmail\r\n  );\r\n  const {\r\n    // leaves,\r\n    editLeaveID,\r\n    //leaves_loading,\r\n    //deleteLeave,\r\n    //loadLeaves,\r\n    //getSingleLeave,\r\n    //setEditLeaveID,\r\n    //setIsLeaveEditingOn,\r\n    //setIsLeaveEditingOff,\r\n    //resetSingleLeave,\r\n  } = useLeavesContext();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"name\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"From Date\",\r\n        field: \"from_date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"To Date\",\r\n        field: \"to_date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Leave Balance\",\r\n        field: \"leave_bal\",\r\n        type: \"numeric\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"No of Days\",\r\n        field: \"no_of_days\",\r\n        type: \"numeric\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Reason\",\r\n        field: \"reason\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Status\",\r\n        field: \"status\",\r\n        editComponent: (props) => (\r\n          <TextField\r\n            //defaultValue={props.value || null}\r\n            onChange={(e) => props.onChange(e.target.value)}\r\n            style={{ width: 100 }}\r\n            value={props.value}\r\n            select\r\n          >\r\n            <MenuItem value=\"Pending\">Pending</MenuItem>\r\n            <MenuItem value=\"Approve\">Approve</MenuItem>\r\n            <MenuItem value=\"Reject\">Reject</MenuItem>\r\n            <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n          </TextField>\r\n        ),\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    setLeaveStatusId(\"Pending\");\r\n  }, []);\r\n\r\n  // const update_Leave = async (data) => {\r\n  //   const { id } = data;\r\n  //   setFormdata({ ...data });\r\n  //   setEditLeaveID(id);\r\n  //   setIsLeaveEditingOn();\r\n  //   getSingleLeave(id);\r\n  //   handleDialogOpen();\r\n  //   //history.push(\"/singleleave\");\r\n  // };\r\n\r\n  // const add_Leave = async (data) => {\r\n  //   // const { id } = data;\r\n  //   setFormdata({ ...data });\r\n  //   resetSingleLeave();\r\n  //   setEditLeaveID(\"\");\r\n  //   setIsLeaveEditingOff();\r\n  //   handleDialogOpen();\r\n  //   //history.push(\"/singleleave\");\r\n  // };\r\n\r\n  // const delete_Leave = (data) => {\r\n  //   const { id } = data;\r\n  //   setEditLeaveID(id);\r\n  //   handleAlertOpen();\r\n  //   //deleteLeave(id);\r\n  //   //loadLeaves();\r\n  // };\r\n\r\n  // const handleDialogOpen = () => {\r\n  //   setIsDialogOpen(true);\r\n  // };\r\n\r\n  const handleDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n  };\r\n\r\n  // const handleAlertOpen = () => {\r\n  //   setIsAlertOpen(true);\r\n  // };\r\n\r\n  const handleAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleOnDeleteConfirm = () => {\r\n    const id = editLeaveID;\r\n    deleteLeaves(id);\r\n  };\r\n\r\n  const handleSentEmail = (data, result) => {\r\n    const { from_date, to_date, name, empid } = data;\r\n    const emp = employees\r\n      .filter((f) => f.id === empid)\r\n      .map((r) => {\r\n        return { ...r };\r\n      });\r\n    console.log(\"leave form\", data, emp);\r\n\r\n    var emaildata = {\r\n      to_name: name,\r\n      to_email: emp[0].email,\r\n      message: `Your leave application from ${from_date} to ${to_date} has been ${result}!`,\r\n      cc_to: ADMINMANAGER_EMAIL,\r\n    };\r\n\r\n    emailjs.send(SERVICE_ID, TEMPLATE_ID, emaildata, USER_ID).then(\r\n      function (response) {\r\n        console.log(response.status, response.text);\r\n        toast({\r\n          title: `Email has sent successfully to ${emaildata.to_email}!`,\r\n          status: \"success\",\r\n        });\r\n      },\r\n      function (err) {\r\n        console.log(err);\r\n        toast({\r\n          title: `Email has fail to send to ${emaildata.to_email}!`,\r\n          status: \"warning\",\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  const Approve_Leave = () => {\r\n    leavedata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        const currentrec = rec;\r\n        currentrec.status = \"Approved\";\r\n        updateLeaves({ id: rec.id, status: \"Approved\" });\r\n\r\n        toast({\r\n          title: \"Leave record being approved!\",\r\n          status: \"success\",\r\n        });\r\n        //sent email\r\n        handleSentEmail(rec, \"Approved\");\r\n      }\r\n    });\r\n    leavedata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  const Reject_Leave = () => {\r\n    leavedata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        const currentrec = rec;\r\n        currentrec.status = \"Rejected\";\r\n        updateLeaves({ id: rec.id, status: \"Rejected\" });\r\n        setIsUpdate(true);\r\n        toast({\r\n          title: \"Leave record being rejected!\",\r\n          status: \"success\",\r\n        });\r\n        //sent email\r\n        handleSentEmail(rec, \"Approved\");\r\n      }\r\n    });\r\n    leavedata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n  //console.log(\"leave\", ADMINMANAGER_EMAIL, USER_ID);\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          // data={leavesstatus.filter(\r\n          //   (r) => r.reporting_email === loginLevel.loginEmail\r\n          // )}\r\n          data={leavedata}\r\n          title=\"Leave Application\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <AddIcon />,\r\n            View: (props) => <VisibilityIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          actions={\r\n            [\r\n              // {\r\n              //   icon: () => <VisibilityIcon />,\r\n              //   tooltip: \"Edit Record\",\r\n              //   onClick: (event, rowData) => {\r\n              //     update_Leave(rowData);\r\n              //   },\r\n              // },\r\n              // {\r\n              //   icon: \"delete\",\r\n              //   tooltip: \"Delete Record\",\r\n              //   onClick: (event, rowData) => {\r\n              //     delete_Leave(rowData);\r\n              //   },\r\n              // },\r\n              // {\r\n              //   icon: \"add\",\r\n              //   tooltip: \"Add Record\",\r\n              //   isFreeAction: true,\r\n              //   onClick: (event, rowData) => {\r\n              //     add_Leave(rowData);\r\n              //   },\r\n              // },\r\n            ]\r\n          }\r\n          options={{\r\n            filtering: true,\r\n            selection: true,\r\n            paging: false,\r\n            headerStyle: {\r\n              backgroundColor: \"rgba(75, 192, 192, 1)\",\r\n              color: \"white\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <HStack p={2}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"solid\"\r\n                    color=\"white\"\r\n                    bgColor=\"red\"\r\n                    //className={classes.button}\r\n                    onClick={Approve_Leave}\r\n                  >\r\n                    Approve\r\n                  </Button>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"solid\"\r\n                    color=\"white\"\r\n                    bgColor=\"red\"\r\n                    //className={classes.button}\r\n                    onClick={Reject_Leave}\r\n                  >\r\n                    Reject\r\n                  </Button>\r\n                </HStack>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <CustomDialog\r\n          isOpen={isDialogOpen}\r\n          handleClose={handleDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscree={false}\r\n        >\r\n          <LeaveFormAdmin\r\n            formdata={formdata}\r\n            setFormdata={setFormdata}\r\n            handleDialogClose={handleDialogClose}\r\n          />\r\n        </CustomDialog>\r\n\r\n        <AlertDialogBox\r\n          onClose={handleAlertClose}\r\n          onConfirm={handleOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete Expenses\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableViewSummary.js",["1680","1681","1682"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Box, useDisclosure } from \"@chakra-ui/react\";\r\nimport { GrTask } from \"react-icons/gr\";\r\nimport {\r\n  //useSetRecoilState,\r\n  useRecoilValue,\r\n  useRecoilState,\r\n  //useRecoilValueLoadable,\r\n} from \"recoil\";\r\nimport {\r\n  allowsPeriodState,\r\n  loginLevelState,\r\n  //allowsDataState,\r\n  //empidState,\r\n} from \"./data/atomdata\";\r\n//import { fetchDailyAllowancesSelector } from \"./data/selectordata\";\r\n//import AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\n//import DeleteIcon from \"@material-ui/icons/Delete\";\r\n//import CheckIcon from \"@material-ui/icons/Check\";\r\n//import SearchIcon from \"@material-ui/icons/Search\";\r\n//import ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\n//import { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport { useDailyAllowsPeriod } from \"./dailyallows/useDailyAllowsPeriod\";\r\nimport { useUpdateDailyAllows } from \"./dailyallows/useUpdateDailyAllows\";\r\nimport ApprovalManagerScreen from \"./ApprovalManagerScreen\";\r\n//const FILTERSTRING = \"Submitted\";\r\n\r\nexport default function DailyAllowancesTable({ month, year }) {\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  const period = `${year}-${month}`;\r\n\r\n  //const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  //const [tmpallowsdata, setTmpallowsdata] = useState([]);\r\n  const allows_period = useRecoilValue(allowsPeriodState);\r\n  //const allows_empid = useRecoilValue(empidState);\r\n  //const [allowsdata, setAllowsdata] = useRecoilState(allowsDataState);\r\n  //const setEmpID = useSetRecoilState(empidState);\r\n  const title = `Site Allowances (${allows_period})`;\r\n  const updateDailyAllows = useUpdateDailyAllows();\r\n  const [formdata, setFormdata] = useState({});\r\n  const [editDailyAllowsID, setEditDailyAllowsID] = useState(\"\");\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { dailyallowsperiod, setDailyAllowsPeriodId } = useDailyAllowsPeriod();\r\n  const {\r\n    isOpen: isAppScreenOpen,\r\n    onOpen: onAppScreenOpen,\r\n    onClose: onAppScreenClose,\r\n  } = useDisclosure();\r\n  // const {\r\n  //   dailyallowances,\r\n  //   loadPendingDailyAllowances,\r\n  //   singlebatch_dailyallowance,\r\n  //   singlebatch_dailyallowance_loading,\r\n  //   deleteDailyAllowance,\r\n  //   setEditDailyAllowanceID,\r\n  //   setIsDailyAllowanceEditingOn,\r\n  //   setIsDailyAllowanceEditingOff,\r\n  //   resetSingleDailyAllowance,\r\n  //   dailyallowance_period,\r\n  //   getSingleBatchDailyAllowance,\r\n  // } = useDailyAllowancesContext();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"name\",\r\n      },\r\n      { title: \"Period\", field: \"period\" },\r\n      { title: \"Location\", field: \"location\" },\r\n      { title: \"Manager\", field: \"manager\" },\r\n      { title: \"Days\", field: \"no_of_days\", type: \"numeric\" },\r\n      { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n      { title: \"Status\", field: \"status\" },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const Update_DailyAllows = (data) => {\r\n    //console.log(\"del data\", data);\r\n    const { id, attachmentid, rec_id, tableData, ...fields } = data;\r\n    const editData = { ...fields };\r\n\r\n    setFormdata({ ...editData });\r\n    setFormdata({ ...editData });\r\n    setEditDailyAllowsID(id);\r\n    data.payrun\r\n      ? toast({\r\n          title: \"This allowance has been paid. It can not be modified!\",\r\n          status: \"error\",\r\n        })\r\n      : handleAppScreenOpen();\r\n  };\r\n\r\n  const handleAppScreenOpen = () => {\r\n    onAppScreenOpen();\r\n  };\r\n  const handleAppScreenClose = () => {\r\n    onAppScreenClose();\r\n  };\r\n\r\n  const handleOnUpdateConfirm = (data) => {\r\n    console.log(\"update\", data);\r\n    const posted = data.status === \"Delete\" ? \"D\" : \"\";\r\n    const upddata = { ...data };\r\n    updateDailyAllows({ id: editDailyAllowsID, ...upddata });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setDailyAllowsPeriodId(period);\r\n  }, []);\r\n\r\n  //const handleDialogOpen = () => {\r\n  //console.log(\"allowsdetls\", allowsdata, allowsdataRef, singlebatch_dailyallowsdetl);\r\n  //setAllowsdata({ singlebatch_dailyallowsdetl });\r\n  //setIsDialogOpen(true);\r\n  //};\r\n\r\n  //const handleDialogClose = () => {\r\n  //setIsDialogOpen(false);\r\n  //getSingleBatchDailyAllowance(dailyallowance_period);\r\n  //};\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Box maxW=\"100%\" pt=\"5px\" overflow=\"scroll\">\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={dailyallowsperiod}\r\n          title={title}\r\n          actions={[\r\n            (rowData) => ({\r\n              icon: () => <GrTask size=\"23px\" />,\r\n              hidden: loginLevel.loginLevel !== \"Manager\",\r\n              tooltip: \"Edit\",\r\n              onClick: (event, rowData) => {\r\n                Update_DailyAllows(rowData);\r\n              },\r\n            }),\r\n          ]}\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            paging: false,\r\n            headerStyle: {\r\n              backgroundColor: \"rgba(75, 192, 192, 1)\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </Box>\r\n      <CustomDialog\r\n        isOpen={isAppScreenOpen}\r\n        handleClose={handleAppScreenClose}\r\n        title=\"\"\r\n        showButton={true}\r\n        isFullscree={false}\r\n      >\r\n        <ApprovalManagerScreen\r\n          formdata={formdata}\r\n          setFormdata={setFormdata}\r\n          handleDialogClose={handleAppScreenClose}\r\n          onConfirm={handleOnUpdateConfirm}\r\n          tabIndex={2}\r\n        />\r\n      </CustomDialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n  dialog: {\r\n    width: 1000,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\DailyAllowancesTableAdmin.js",["1683"],"D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableAdmin.js",["1684"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { TextField, MenuItem, Button, Icon } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport CheckCircleOutlineOutlinedIcon from \"@material-ui/icons/CheckCircleOutlineOutlined\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\n\r\nconst FILTERSTRING = \"Pending\";\r\n\r\nexport default function ExpenseTable({\r\n  expensesdata,\r\n  setExpensesdata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  //const [isLoad, setIsLoad] = useState(false);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  //const { loadEmployees } = useEmployeesContext();\r\n  const {\r\n    editExpenseID,\r\n    updateExpense,\r\n    update_expense_error,\r\n    //expenses_loading,\r\n    deleteExpense,\r\n    loadPendingExpenses,\r\n  } = useExpensesContext();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      { title: \"Name\", field: \"name\", editable: \"never\" },\r\n      {\r\n        title: \"From Date\",\r\n        field: \"from_date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"To Date\",\r\n        field: \"to_date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Description\",\r\n        field: \"description\",\r\n        editable: \"never\",\r\n      },\r\n      { title: \"Amount\", field: \"amount\", type: \"currency\", editable: \"never\" },\r\n      {\r\n        title: \"Status\",\r\n        field: \"status\",\r\n        editComponent: (props) => (\r\n          <TextField\r\n            //defaultValue={props.value || null}\r\n            onChange={(e) => props.onChange(e.target.value)}\r\n            style={{ width: 100 }}\r\n            value={props.value}\r\n            select\r\n          >\r\n            <MenuItem value=\"Pending\">Pending</MenuItem>\r\n            <MenuItem value=\"Approve\">Approve</MenuItem>\r\n            <MenuItem value=\"Reject\">Reject</MenuItem>\r\n            <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n          </TextField>\r\n        ),\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  // useEffect(() => {\r\n  //   setExpensesdata(expenses);\r\n  //   console.log(expensesdata)\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   loadEmployees();\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   if (expenses) {\r\n  //     setExpensesdata(expenses);\r\n  //     console.log(\"expenses\", expenses, expensesdata)\r\n  //   } else {\r\n  //     setIsLoad(!isLoad);\r\n  //   }\r\n  // }, [isLoad]);\r\n\r\n  // const handleExpenseFormDialogOpen = () => {\r\n  //   setIsDialogOpen(true);\r\n  // };\r\n\r\n  const handleExpenseFormDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n    loadPendingExpenses(FILTERSTRING);\r\n  };\r\n\r\n  // const handleExpenseFormAlertOpen = () => {\r\n  //   setIsAlertOpen(true);\r\n  // };\r\n\r\n  const handleExpenseFormAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleExpenseFormOnDeleteConfirm = () => {\r\n    const id = editExpenseID;\r\n    deleteExpense(id);\r\n    loadPendingExpenses(FILTERSTRING);\r\n  };\r\n\r\n  // const Save_ExpenseData = () => {\r\n  //   expensesdata.forEach((data) => {\r\n  //     const { id } = data;\r\n  //     if (id) {\r\n  //       const { id, rec_id, tableData, ...fields } = data;\r\n  //       updateExpense({ id, ...fields });\r\n  //     }\r\n  //   });\r\n\r\n  //   handleDialogClose();\r\n  // };\r\n\r\n  const Approve_ExpenseData = () => {\r\n    expensesdata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        updateExpense({ id: rec.id, status: \"Approved\" });\r\n        //update leavesdata\r\n        if (!update_expense_error) {\r\n          const recdata = expensesdata.filter((r) => r.id === rec.id);\r\n          recdata[0].status = \"Approved\";\r\n        }\r\n      }\r\n    });\r\n    expensesdata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  const Reject_ExpenseData = () => {\r\n    expensesdata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        updateExpense({ id: rec.id, status: \"Rejected\" });\r\n        //update leavesdata\r\n        if (!update_expense_error) {\r\n          const recdata = expensesdata.filter((r) => r.id === rec.id);\r\n          recdata[0].status = \"Rejected\";\r\n        }\r\n      }\r\n    });\r\n    expensesdata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  if (!expensesdata) {\r\n    return (\r\n      <div>\r\n        <h2>Loading...Expenses</h2>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={expensesdata}\r\n          title=\"Expenses Claims Application\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <CheckCircleOutlineOutlinedIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          // editable={{\r\n          //   onRowUpdate: (newData, oldData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         const dataUpdate = [...expensesdata];\r\n          //         const index = oldData.tableData.id;\r\n          //         dataUpdate[index] = newData;\r\n          //         setExpensesdata([...dataUpdate]);\r\n          //         //approve_Expense(newData);\r\n\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          // }}\r\n          options={{\r\n            filtering: true,\r\n            selection: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Approve_ExpenseData}\r\n                  >\r\n                    Approve <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Reject_ExpenseData}\r\n                  >\r\n                    Reject <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                  {/* <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Save_ExpenseData}\r\n                  >\r\n                    Update <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button> */}\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <CustomDialog\r\n          isOpen={isDialogOpen}\r\n          handleClose={handleExpenseFormDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscree={false}\r\n        >\r\n          <ExpenseForm handleDialogClose={handleExpenseFormDialogClose} />\r\n        </CustomDialog>\r\n\r\n        <AlertDialogBox\r\n          onClose={handleExpenseFormAlertClose}\r\n          onConfirm={handleExpenseFormOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete Expenses\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeView.js",["1685"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport CardLayout from \"../helpers/CardLayout\";\r\nimport CardLayout2 from \"../helpers/CardLayout2\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\n\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\nimport { useTrainingsContext } from \"../context/trainings_context\";\r\nimport EmpViewFamily from \"./EmpViewFamily\";\r\nimport EmpViewEducations from \"./EmpViewEducations\";\r\nimport EmpViewExperiences from \"./EmpViewExperiences\";\r\nimport EmpViewLeaves from \"./EmpViewLeaves\";\r\nimport EmpViewTrainings from \"./EmpViewTrainings\";\r\nimport EmpPersonal from \"./EmpPersonal\";\r\nimport EmpFamily from \"./EmpFamily\";\r\nimport EmpEducations from \"./EmpEducations\";\r\nimport EmpExperiences from \"./EmpExperiences\";\r\nimport EmpTrainings from \"./EmpTrainings\";\r\n\r\n// const drawerWidth = 240;\r\n\r\n// const CardLayout = ({ title, children }) => {\r\n//   const classes = useStyles();\r\n//   return (\r\n//     <div>\r\n//       <CardLayout title=\"Personal Information\">\r\n//         <h2>details</h2>\r\n//       </CardLayout>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\nconst EmployeeView = () => {\r\n  const classes = useStyles();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const [familydata, setFamilydata] = useState([]);\r\n  const [educationdata, setEducationdata] = useState([]);\r\n  const [experiencedata, setExperiencedata] = useState([]);\r\n  const [trainingdata, setTrainingdata] = useState([]);\r\n  const [isPersonalDialogOpen, setIsPersonalDialogOpen] = useState(false);\r\n  const [isFamilyDialogOpen, setIsFamilyDialogOpen] = useState(false);\r\n  const [isEducationDialogOpen, setIsEducationDialogOpen] = useState(false);\r\n  const [isExperienceDialogOpen, setIsExperienceDialogOpen] = useState(false);\r\n  const [isTrainingDialogOpen, setIsTrainingDialogOpen] = useState(false);\r\n\r\n  const {\r\n    editEmployeeID,\r\n    getSingleEmployee,\r\n    single_employee,\r\n    single_employee_loading,\r\n  } = useEmployeesContext();\r\n  const { singlebatch_training } = useTrainingsContext();\r\n\r\n  const {\r\n    loadDepartments,\r\n    loadDesignations,\r\n    loadSingleBatchFamily,\r\n    loadSingleBatchEducation,\r\n    singlebatchfamily,\r\n    singlebatcheducation,\r\n    singlebatchexperience,\r\n  } = useTablesContext();\r\n\r\n  useEffect(() => {\r\n    getSingleEmployee(editEmployeeID);\r\n    loadDepartments();\r\n    loadDesignations();\r\n  }, []);\r\n\r\n  //useEffect(() => {}, [singlebatchfamily]);\r\n\r\n  if (single_employee_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading...Employee</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const handlePersonalDialogOpen = () => {\r\n    //setFamilydata([...singlebatchfamily]);\r\n    setIsPersonalDialogOpen(true);\r\n  };\r\n\r\n  const handlePersonalDialogClose = () => {\r\n    setIsPersonalDialogOpen(false);\r\n    //loadEmployees();\r\n  };\r\n\r\n  const handleFamilyDialogOpen = () => {\r\n    setFamilydata([]);\r\n    setFamilydata([...singlebatchfamily]);\r\n    setIsFamilyDialogOpen(true);\r\n  };\r\n\r\n  const handleFamilyDialogClose = () => {\r\n    setIsFamilyDialogOpen(false);\r\n    loadSingleBatchFamily(editEmployeeID);\r\n  };\r\n\r\n  const handleEducationDialogOpen = () => {\r\n    setEducationdata([]);\r\n    setEducationdata([...singlebatcheducation]);\r\n    setIsEducationDialogOpen(true);\r\n  };\r\n\r\n  const handleEducationDialogClose = () => {\r\n    setIsEducationDialogOpen(false);\r\n    loadSingleBatchEducation(editEmployeeID);\r\n  };\r\n\r\n  const handleExperienceDialogOpen = () => {\r\n    setExperiencedata([...singlebatchexperience]);\r\n    setIsExperienceDialogOpen(true);\r\n  };\r\n\r\n  const handleExperienceDialogClose = () => {\r\n    setIsExperienceDialogOpen(false);\r\n    //loadEmployees();\r\n  };\r\n\r\n  const handleTrainingDialogOpen = () => {\r\n    setTrainingdata([...singlebatch_training]);\r\n    setIsTrainingDialogOpen(true);\r\n    //loadEmployees();\r\n  };\r\n\r\n  const handleTrainingDialogClose = () => {\r\n    setIsTrainingDialogOpen(false);\r\n    //loadEmployees();\r\n  };\r\n\r\n  return (\r\n    <Paper className={fixedHeightPaper} style={{ backgroundColor: \"black\" }}>\r\n      <div className={classes.root}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={8} lg={12}>\r\n            <CardLayout2 title=\"Employee Profile\">\r\n              <div>\r\n                <form className={classes.form}>\r\n                  <TextField\r\n                    label=\"Name\"\r\n                    name=\"name\"\r\n                    value={single_employee.name}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                  <TextField\r\n                    label=\"Phone\"\r\n                    name=\"phone\"\r\n                    value={single_employee.phone}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                  <TextField\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    value={single_employee.email}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                  <TextField\r\n                    label=\"Birth Date\"\r\n                    name=\"birthdate\"\r\n                    value={single_employee.birhdate}\r\n                    type=\"date\"\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                  <TextField\r\n                    label=\"Gender\"\r\n                    name=\"gender\"\r\n                    value={single_employee.gender}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                  <TextField\r\n                    label=\"Leave Balance\"\r\n                    name=\"leave_bal\"\r\n                    value={single_employee.leave_bal}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                </form>\r\n              </div>\r\n            </CardLayout2>\r\n          </Grid>\r\n          <Grid item xs={6} md={8} lg={6}>\r\n            <div>\r\n              <CardLayout\r\n                title=\"Personal Information\"\r\n                handleClick={handlePersonalDialogOpen}\r\n              >\r\n                <div>\r\n                  <form className={classes.form}>\r\n                    <TextField\r\n                      label=\"I/C No\"\r\n                      name=\"icno\"\r\n                      value={single_employee.ic_no}\r\n                      InputProps={{\r\n                        readOnly: true,\r\n                      }}\r\n                    />\r\n\r\n                    <TextField\r\n                      label=\"I/C Expiry Date\"\r\n                      name=\"ic_expirydate\"\r\n                      value={single_employee.ic_expirydate}\r\n                      type=\"date\"\r\n                      InputProps={{\r\n                        readOnly: true,\r\n                      }}\r\n                      InputLabelProps={{\r\n                        shrink: true,\r\n                      }}\r\n                    />\r\n\r\n                    <TextField\r\n                      label=\"Passport No\"\r\n                      name=\"passportno\"\r\n                      value={single_employee.passportno}\r\n                      InputProps={{\r\n                        readOnly: true,\r\n                      }}\r\n                    />\r\n                    <TextField\r\n                      label=\"Passport Expiry Date\"\r\n                      name=\"passport_expirydate\"\r\n                      value={single_employee.passport_expirydate}\r\n                      type=\"date\"\r\n                      InputLabelProps={{\r\n                        shrink: true,\r\n                      }}\r\n                      InputProps={{\r\n                        readOnly: true,\r\n                      }}\r\n                    />\r\n\r\n                    <TextField\r\n                      label=\"Work Permit No\"\r\n                      name=\"workpermitno\"\r\n                      value={single_employee.workpermitno}\r\n                      InputProps={{\r\n                        readOnly: true,\r\n                      }}\r\n                    />\r\n                    <TextField\r\n                      label=\"W/P Expiry Date\"\r\n                      name=\"workpermit_expirydate\"\r\n                      value={single_employee.workpermit_expirydate}\r\n                      type=\"date\"\r\n                      InputLabelProps={{\r\n                        shrink: true,\r\n                      }}\r\n                      InputProps={{\r\n                        readOnly: true,\r\n                      }}\r\n                    />\r\n\r\n                    <div>\r\n                      <TextField\r\n                        label=\"Nationality\"\r\n                        name=\"nationality\"\r\n                        value={single_employee.nationality}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <TextField\r\n                        label=\"Marital Status\"\r\n                        name=\"marital_status\"\r\n                        value={single_employee.marital_status}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </CardLayout>\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={6} md={8} lg={6}>\r\n            <div>\r\n              <CardLayout2 title=\"Leaves\">\r\n                <div>\r\n                  <EmpViewLeaves />\r\n                </div>\r\n              </CardLayout2>\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={6} md={8} lg={6}>\r\n            <div>\r\n              <CardLayout\r\n                title=\"Training\"\r\n                handleClick={handleTrainingDialogOpen}\r\n              >\r\n                <EmpViewTrainings />\r\n              </CardLayout>\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={6} md={8} lg={6}>\r\n            <div>\r\n              <CardLayout\r\n                title=\"Experiences\"\r\n                handleClick={handleExperienceDialogOpen}\r\n              >\r\n                <div>\r\n                  <EmpViewExperiences />\r\n                </div>\r\n              </CardLayout>\r\n            </div>\r\n          </Grid>\r\n\r\n          <Grid item xs={6} md={8} lg={6}>\r\n            <div>\r\n              <CardLayout\r\n                title=\"Education\"\r\n                handleClick={handleEducationDialogOpen}\r\n              >\r\n                <div>\r\n                  <EmpViewEducations />\r\n                </div>\r\n              </CardLayout>\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={6} md={8} lg={6}>\r\n            <div>\r\n              <CardLayout title=\"Family\" handleClick={handleFamilyDialogOpen}>\r\n                <EmpViewFamily />\r\n              </CardLayout>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n      <CustomDialog\r\n        isOpen={isPersonalDialogOpen}\r\n        handleClose={handlePersonalDialogClose}\r\n        title=\"\"\r\n        showButton={true}\r\n        isFullscreen={false}\r\n        isFullwidth={false}\r\n      >\r\n        <EmpPersonal\r\n          //setPersonaldata={setFamilydata}\r\n          //familydata={familydata}\r\n          handleDialogClose={handlePersonalDialogClose}\r\n        />\r\n      </CustomDialog>\r\n      <CustomDialog\r\n        isOpen={isFamilyDialogOpen}\r\n        handleClose={handleFamilyDialogClose}\r\n        title=\"\"\r\n        showButton={true}\r\n        isFullscreen={false}\r\n        isFullwidth={false}\r\n      >\r\n        <EmpFamily\r\n          setFamilydata={setFamilydata}\r\n          familydata={familydata}\r\n          handleDialogClose={handleFamilyDialogClose}\r\n        />\r\n      </CustomDialog>\r\n      <CustomDialog\r\n        isOpen={isEducationDialogOpen}\r\n        handleClose={handleEducationDialogClose}\r\n        title=\"\"\r\n        showButton={true}\r\n        isFullscreen={false}\r\n        isFullwidth={false}\r\n      >\r\n        <EmpEducations\r\n          setEducationdata={setEducationdata}\r\n          educationdata={educationdata}\r\n          handleDialogClose={handleEducationDialogClose}\r\n        />\r\n      </CustomDialog>\r\n      <CustomDialog\r\n        isOpen={isExperienceDialogOpen}\r\n        handleClose={handleExperienceDialogClose}\r\n        title=\"\"\r\n        showButton={true}\r\n        isFullscreen={false}\r\n        isFullwidth={false}\r\n      >\r\n        <EmpExperiences\r\n          setExperiencedata={setExperiencedata}\r\n          experiencedata={experiencedata}\r\n          handleDialogClose={handleExperienceDialogClose}\r\n        />\r\n      </CustomDialog>\r\n      <CustomDialog\r\n        isOpen={isTrainingDialogOpen}\r\n        handleClose={handleTrainingDialogClose}\r\n        title=\"\"\r\n        showButton={true}\r\n        isFullscreen={false}\r\n        isFullwidth={false}\r\n      >\r\n        <EmpTrainings\r\n          setTrainingdata={setTrainingdata}\r\n          trainingdata={trainingdata}\r\n          handleDialogClose={handleTrainingDialogClose}\r\n        />\r\n      </CustomDialog>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  container: {\r\n    margin: 0,\r\n    padding: 0,\r\n    width: \"80vw\",\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"repeat(auto-fill,250px)\",\r\n    gridAutoRows: \"10px\",\r\n    position: \"absolute\",\r\n    left: \"50%\",\r\n    transform: \"translateX(-50%)\",\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"primary\",\r\n  },\r\n  fixedHeight: {\r\n    height: 800,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(10),\r\n    // display: \"flex\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n    border: \"1px solid\",\r\n    width: \"100%\",\r\n    color: \"primary\",\r\n    bcakgroundColor: \"black\",\r\n  },\r\n  card: {\r\n    backgroundColor: \"black\",\r\n  },\r\n  form: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 350,\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n}));\r\n\r\nexport default EmployeeView;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\employees\\useDeleteEmployees.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useHoc.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeTableLeaveView.js",["1686","1687","1688","1689"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport getYear from \"date-fns/getYear\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { GrFormView } from \"react-icons/gr\";\r\n//import AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\n//import DeleteIcon from \"@material-ui/icons/Delete\";\r\n//import CheckIcon from \"@material-ui/icons/Check\";\r\n//import SearchIcon from \"@material-ui/icons/Search\";\r\n//import LeaveForm from \"./LeaveForm\";\r\n//import { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { AlertDialog } from \"../helpers/AlertDialogBox\";\r\n//import { useExpensesPeriod } from \"./expenses/useExpensesPeriod\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\nimport { useLeavesPeriod } from \"./leaves/useLeavesPeriod\";\r\n\r\nconst YEAR = new Date().getFullYear();\r\n\r\nexport default function EmployeeTableLeaveView() {\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n  const { employees, setEmployeeId } = useEmployees();\r\n  const { leavesperiod, setLeavePeriodYrId } = useLeavesPeriod();\r\n  const [empdata, setEmpData] = useState([]);\r\n  const [toBuild, setToBuild] = useState(true);\r\n\r\n  const {\r\n    //editEmployeeID,\r\n    //employees_loading,\r\n    //deleteEmployee,\r\n    //loadEmployees,\r\n    setEditEmployeeID,\r\n    setIsEditingOn,\r\n    //setIsEditingOff,\r\n    resetSingleEmployee,\r\n    resetEmployees,\r\n    //getSingleEmployee,\r\n  } = useEmployeesContext();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"name\",\r\n        cellStyle: {\r\n          width: 250,\r\n          maxWidth: 250,\r\n        },\r\n      },\r\n      // { title: \"IC No\", field: \"ic_no\" },\r\n      // { title: \"Gender\", field: \"gender\" },\r\n      { title: \"Emp No\", field: \"empno\" },\r\n      { title: \"Designation\", field: \"designation\" },\r\n      // { title: \"Department\", field: \"department\" },\r\n\r\n      {\r\n        title: \"Leave Entitled\",\r\n        field: \"leave_entitled\",\r\n        type: \"numeric\",\r\n        cellStyle: {\r\n          width: 60,\r\n        },\r\n      },\r\n      {\r\n        title: \"Leave C/F\",\r\n        field: \"leave_bf\",\r\n        type: \"numeric\",\r\n        cellStyle: {\r\n          width: 60,\r\n        },\r\n      },\r\n      {\r\n        title: \"Total Leave\",\r\n        field: \"leave_total\",\r\n        type: \"numeric\",\r\n        cellStyle: {\r\n          width: 60,\r\n        },\r\n      },\r\n      {\r\n        title: \"Leave Taken\",\r\n        field: \"leave_taken\",\r\n        type: \"numeric\",\r\n        cellStyle: {\r\n          width: 60,\r\n        },\r\n      },\r\n      // {\r\n      //   title: \"Leave Pending\",\r\n      //   field: \"leave_pending\",\r\n      //   type: \"numeric\",\r\n      //   cellStyle: {\r\n      //     width: 60,\r\n      //   },\r\n      // },\r\n      {\r\n        title: \"Leave Balance\",\r\n        field: \"leave_bal\",\r\n        type: \"numeric\",\r\n        cellStyle: {\r\n          width: 60,\r\n        },\r\n      },\r\n      {\r\n        title: \"Others\",\r\n        field: \"leave_others\",\r\n        type: \"numeric\",\r\n        cellStyle: {\r\n          width: 60,\r\n        },\r\n      },\r\n      // { title: \"Email\", field: \"email\" },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const update_Employee = (data) => {\r\n    const { id } = data;\r\n    resetSingleEmployee();\r\n    resetEmployees();\r\n    setEditEmployeeID(id);\r\n    setIsEditingOn();\r\n    setEmployeeId(id);\r\n\r\n    navigate(\"/singleemployee\");\r\n  };\r\n\r\n  const Build_EmpData = (YEAR) => {\r\n    // eslint-disable-next-line no-lone-blocks\r\n    {\r\n      const emp = employees.map((rec) => {\r\n        return { ...rec, leave_total: 0, leave_taken: 0, leave_pending: 0 };\r\n      });\r\n      emp &&\r\n        emp.forEach((rec, index) => {\r\n          const {\r\n            id,\r\n            //name,\r\n            //icno,\r\n            //gender,\r\n            //designation,\r\n            //department,\r\n            //leave_entitled,\r\n            //leave_bf,\r\n            //leave_cd,\r\n          } = rec;\r\n          // calculate leaves\r\n\r\n          const leavesdata = leavesperiod.filter(\r\n            (r) => r.empid === id && getYear(new Date(r.from_date)) === YEAR\r\n          );\r\n\r\n          console.log(\"leavedata\", YEAR, leavesdata);\r\n          const leaveTaken = leavesdata.reduce((acc, item) => {\r\n            if (\r\n              item.status === \"Approved\" &&\r\n              item.leavetype === \"Annual Leave\"\r\n            ) {\r\n              return acc + item.no_of_days;\r\n            } else {\r\n              return acc;\r\n            }\r\n          }, 0);\r\n          const leavePending = leavesdata.reduce((acc, item) => {\r\n            if (item.status === \"Pending\") {\r\n              return acc + item.no_of_days;\r\n            } else {\r\n              return acc;\r\n            }\r\n          }, 0);\r\n          const leaveOthers = leavesdata.reduce((acc, item) => {\r\n            if (\r\n              item.status === \"Approved\" &&\r\n              item.leavetype !== \"Annual Leave\"\r\n            ) {\r\n              return acc + item.no_of_days;\r\n            } else {\r\n              return acc;\r\n            }\r\n          }, 0);\r\n          const leaveEntitled = isNaN(emp[index].leave_entitled)\r\n            ? 0\r\n            : emp[index].leave_entitled;\r\n          const leaveBf = isNaN(emp[index].leave_bf) ? 0 : emp[index].leave_bf;\r\n          //const leaveCd = isNaN(emp[index].leave_cd) ? 0 : emp[index].leave_cd;\r\n          const leaveCd = 0;\r\n          emp[index].leave_cd = leaveCd;\r\n          emp[index].leave_total = leaveEntitled + leaveBf;\r\n          emp[index].leave_taken = leaveTaken + leaveCd;\r\n          emp[index].leave_pending = leavePending;\r\n          emp[index].leave_others = leaveOthers;\r\n          emp[index].leave_bal = leaveEntitled + leaveBf - leaveCd - leaveTaken;\r\n          setEmpData(emp);\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLeavePeriodYrId(YEAR);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(\"leaveperiod\", leavesperiod);\r\n    Build_EmpData(YEAR);\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   setLeavePeriodYrId(YEAR);\r\n  //   console.log(\"leaveperiod\", leavesperiod)\r\n  //   if (leavesperiod.length > 0) {\r\n  //     Build_EmpData(YEAR);\r\n  //     setToBuild(false);\r\n  //   } else {\r\n  //     setToBuild(true);\r\n  //   }\r\n  // }, [toBuild]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={empdata\r\n            .filter((r) => !r.hasresigned)\r\n            .sort((a, b) => (a.name > b.name ? 1 : b.name > a.name ? -1 : 0))}\r\n          title=\"Employee Leave Details\"\r\n          actions={[\r\n            (rowData) => ({\r\n              //disabled: rowData.status !== \"Pending\",\r\n              icon: () => <GrFormView size=\"33px\" />,\r\n              tooltip: \"View\",\r\n              onClick: (event, rowData) => {\r\n                update_Employee(rowData);\r\n              },\r\n            }),\r\n          ]}\r\n          options={{\r\n            filtering: true,\r\n            search: true,\r\n            toolbar: false,\r\n            paging: false,\r\n            headerStyle: {\r\n              backgroundColor: \"rgba(75, 192, 192, 1)\",\r\n              color: \"white\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\WPExpiryViewAdmin.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\TrainingsTableViewAdmin.js",["1690"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\nimport {\r\n  Box,\r\n  Grid,\r\n  GridItem,\r\n  Heading,\r\n  IconButton,\r\n  Spacer,\r\n  Stack,\r\n} from \"@chakra-ui/react\";\r\nimport { EditIcon, ViewIcon } from \"@chakra-ui/icons\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { differenceInDays } from \"date-fns\";\r\nimport { List } from \"@material-ui/core\";\r\n//import { useRecoilState } from \"recoil\";\r\n//import { loginLevelState } from \"./data/atomdata\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useTrainings } from \"./trainings/useTrainings\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\n\r\n//const drawerWidth = 240;\r\n\r\nconst TrainingsTableViewAdmin = () => {\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const { employees } = useEmployees();\r\n  const { trainings } = useTrainings();\r\n  //const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const today = Date().toLocaleString();\r\n  const { setEmployeeId } = useEmployees();\r\n  const {\r\n    //editEmployeeID,\r\n    //employees_loading,\r\n    //deleteEmployee,\r\n    //loadEmployees,\r\n    setEditEmployeeID,\r\n    setIsEditingOn,\r\n    //setIsEditingOff,\r\n    resetSingleEmployee,\r\n    resetEmployees,\r\n    //getSingleEmployee,\r\n  } = useEmployeesContext();\r\n\r\n  // useEffect(() => {\r\n  //   setFilter(loginLevel.loginUserId);\r\n  // }, []);\r\n\r\n  const handleOnClick = (id) => {\r\n    console.log(\"id\", id)\r\n    resetSingleEmployee();\r\n    resetEmployees();\r\n    setEditEmployeeID(id);\r\n    setIsEditingOn();\r\n    setEmployeeId(id);\r\n\r\n    navigate(\"/singleemployee\");\r\n  };\r\n\r\n  return (\r\n    <List className={classes.root}>\r\n      <Grid container direction=\"row\">\r\n        <Stack direction=\"row\">\r\n          <Heading as=\"h4\" size=\"md\">\r\n            Trainings Schedule Expiry Within 90 days\r\n          </Heading>\r\n          <Spacer />\r\n          <IconButton\r\n            // variant=\"outline\"\r\n            size=\"md\"\r\n            aria-label=\"Edit\"\r\n            icon={<EditIcon />}\r\n            onClick={() => navigate(\"/allemployees\")}\r\n          />\r\n        </Stack>\r\n\r\n        {trainings\r\n          .filter(\r\n            (i) =>\r\n              differenceInDays(new Date(i.expiry_date), new Date(today)) < 90 &&\r\n              differenceInDays(new Date(today), new Date(i.expiry_date)) < 0\r\n          )\r\n          .map((row) => {\r\n            const emp = employees.filter(\r\n              (r) => r.id === row.empid && !r.hasresigned\r\n            );\r\n            if (emp.length > 0) {\r\n              return (\r\n                <Grid\r\n                  templateColumns=\"repeat(13, 1fr)\"\r\n                  gap={3}\r\n                  p={1}\r\n                  key={row.id}\r\n                >\r\n                  <GridItem colSpan={1}>\r\n                    <Box w=\"100%\">\r\n                      <IconButton\r\n                        size=\"sm\"\r\n                        aria-label=\"Edit\"\r\n                        icon={<ViewIcon />}\r\n                        onClick={() => handleOnClick(row.empid)}\r\n                      />\r\n                    </Box>\r\n                  </GridItem>\r\n                  <GridItem colSpan={3}>\r\n                    <Box w=\"100%\">{row.name}</Box>\r\n                  </GridItem>\r\n                  <GridItem colSpan={3}>\r\n                    <Box w=\"100%\">{row.course}</Box>\r\n                  </GridItem>\r\n                  <GridItem colSpan={3}>\r\n                    <Box w=\"100%\">{row.institute}</Box>\r\n                  </GridItem>\r\n                  <GridItem colSpan={3}>\r\n                    <Box w=\"100%\">{row.expiry_date}</Box>\r\n                  </GridItem>\r\n                </Grid>\r\n                // <ListItem key={row.id}>\r\n                //   <Grid item sm={3} align=\"center\">\r\n                //     <ListItemText>{row.name}</ListItemText>\r\n                //   </Grid>\r\n                //   <Grid item sm={3} align=\"center\">\r\n                //     <ListItemText>{row.institute}</ListItemText>\r\n                //   </Grid>\r\n                //   <Grid item sm={3} align=\"center\">\r\n                //     <ListItemText>{row.course}</ListItemText>\r\n                //   </Grid>\r\n                //   <Grid item sm={3} align=\"center\">\r\n                //     <ListItemText>{row.expiry_date}</ListItemText>\r\n                //   </Grid>\r\n                // </ListItem>\r\n              );\r\n            }\r\n          })}\r\n      </Grid>\r\n    </List>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n\r\nexport default TrainingsTableViewAdmin;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\HocTableViewSummary.js",["1691","1692"],"import React, { useMemo, useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Box } from \"@chakra-ui/react\";\r\n//import AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\n//import DeleteIcon from \"@material-ui/icons/Delete\";\r\n//import CheckIcon from \"@material-ui/icons/Check\";\r\n//import SearchIcon from \"@material-ui/icons/Search\";\r\n//import LeaveForm from \"./LeaveForm\";\r\n//import { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { AlertDialog } from \"../helpers/AlertDialogBox\";\r\nimport { useHocPeriod } from \"./hoc/useHocPeriod\";\r\nimport { useHocAll} from \"./hoc/useHocAll\"\r\n\r\n//const FILTERSTRING = \"Pending\";\r\n\r\nexport default function HocTableViewSummary({ year, month }) {\r\n  const classes = useStyles();\r\n  const { hocperiod, setHocPeriodYrId, setHocPeriodMthId } = useHocPeriod();\r\n  const { hocall } = useHocAll()\r\n  \r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Findings\",\r\n        field: \"findings\",\r\n        editable: \"never\",\r\n        cellStyle: {\r\n          minWidth: 200,\r\n          maxWidth: 200,\r\n        },\r\n      },\r\n      {\r\n        title: \"Risks\",\r\n        field: \"risks\",\r\n        editable: \"never\",\r\n        cellStyle: {\r\n          minWidth: 150,\r\n          maxWidth: 150,\r\n        },\r\n      },\r\n      {\r\n        title: \"Type/Category\",\r\n        field: \"category\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"What\",\r\n        field: \"what\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"What Details\",\r\n        field: \"what_details\",\r\n        editable: \"never\",\r\n        cellStyle: {\r\n          minWidth: 150,\r\n          maxWidth: 150,\r\n        },\r\n      },\r\n      {\r\n        title: \"Why\",\r\n        field: \"why\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Why Details\",\r\n        field: \"why_details\",\r\n        editable: \"never\",\r\n        cellStyle: {\r\n          minWidth: 200,\r\n          maxWidth: 200,\r\n        },\r\n      },\r\n      {\r\n        title: \"Discussion\",\r\n        field: \"discussion\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Action\",\r\n        field: \"action\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Follow-up required?\",\r\n        field: \"isfollowup\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Work Related?\",\r\n        field: \"isworkrelated\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Raised By\",\r\n        field: \"raisedby\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Raised On\",\r\n        field: \"raisedon\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Company\",\r\n        field: \"company\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Location\",\r\n        field: \"location\",\r\n        editable: \"never\",\r\n      },\r\n      // {\r\n      //   title: \"Department\",\r\n      //   field: \"department\",\r\n      //   editable: \"never\",\r\n      // },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    setHocPeriodYrId(year);\r\n    setHocPeriodMthId(month);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      {/* <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}> */}\r\n      <Box maxW=\"100%\" pt=\"5px\" overflow=\"scroll\">\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={hocperiod.sort((a, b) =>\r\n            a.raisedon < b.raisedon ? 1 : b.raisedon < a.raisedon ? -1 : 0\r\n          )}\r\n          title=\"HOC History\"\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            paging: false,\r\n            headerStyle: {\r\n              backgroundColor: \"rgba(75, 192, 192, 1)\",\r\n              color: \"white\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </Box>\r\n    </div>\r\n    // </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipTableViewSummary.js",["1693","1694","1695"],"import React, { useEffect, useMemo, useState } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Box, useDisclosure } from \"@chakra-ui/react\";\r\nimport { GrTask } from \"react-icons/gr\";\r\nimport { useRecoilState } from \"recoil\";\r\n//import { useHistory } from \"react-router-dom\";\r\n//import { useSetRecoilState } from \"recoil\";\r\nimport //payPeriodState,\r\n//payPeriodEndMonthState,\r\n//payPeriodEmpIdState,\r\n\"./data/atomdata\";\r\n//import { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { usePayrunStatus } from \"./payrun/usePayrunStatus\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useUpdatePayrun } from \"./payrun/useUpdatePayrun\";\r\nimport ApprovalManagerScreen from \"./ApprovalManagerScreen\";\r\n\r\n//const FILTERSTRING = \"Pending\";\r\n\r\nexport default function PayslipTableVIew({ status }) {\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n   const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  //const setPayPeriodEmpId = useSetRecoilState(payPeriodEmpIdState);\r\n  //const { payrun, getPayrun,payrun_loading, loadPendingPayslips } =\r\n  //  usePayslipsContext();\r\n  //const { loadEmployees, employees } = useEmployeesContext();\r\n  const updatePayrun = useUpdatePayrun()\r\n  const { payrunstatus, setPayrunStatusId } = usePayrunStatus();\r\n  const [payrunID, setPayrunID] = useState(\"\")\r\n  const [formdata, setFormdata] = useState({});\r\n  const {\r\n    isOpen: isAppScreenOpen,\r\n    onOpen: onAppScreenOpen,\r\n    onClose: onAppScreenClose,\r\n  } = useDisclosure();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      // { title: \"Period\", field: \"period\" },\r\n      {\r\n        title: \"Payrun Batch\",\r\n        field: \"payrun\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n      },\r\n      // {\r\n      //   title: \"Pay Date\",\r\n      //   field: \"pay_date\",\r\n      //   type: \"date\",\r\n      //   dateSetting: { locale: \"en-GB\" },\r\n      // },\r\n      { title: \"Total Wages\", field: \"totalwages\", type: \"currency\" },\r\n      { title: \"TAP Amount\", field: \"totaltap\", type: \"currency\" },\r\n      { title: \"SCP Amount\", field: \"totalscp\", type: \"currency\" },\r\n      { title: \"Site Allowances\", field: \"totalsitesallows\", type: \"currency\" },\r\n      {\r\n        title: \"Expenses Claims\",\r\n        field: \"totalexpensesclaims\",\r\n        type: \"currency\",\r\n      },\r\n      { title: \"Total Allowances\", field: \"totalallows\", type: \"currency\" },\r\n      { title: \"Total Deductions\", field: \"totaldeducts\", type: \"currency\" },\r\n      { title: \"Total Payroll\", field: \"totalpayroll\", type: \"currency\" },\r\n      { title: \"Status\", field: \"status\" },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const Update_Payrun = (data) => {\r\n     const { id, rec_id, tableData, ...fields } = data;\r\n     const editData = { ...fields };\r\n\r\n     setFormdata({ ...editData });\r\n     setFormdata({ ...editData });\r\n     setPayrunID(id);\r\n     handleAppScreenOpen();\r\n  }\r\n\r\n  const handleAppScreenOpen = () => {\r\n    onAppScreenOpen();\r\n  };\r\n  const handleAppScreenClose = () => {\r\n    onAppScreenClose();\r\n  };\r\n\r\n   const handleOnUpdateConfirm = (data) => {\r\n     console.log(\"update\", data);\r\n     const posted = data.status === \"Delete\" ? \"D\" : \"\";\r\n     const upddata = { ...data };\r\n     updatePayrun({ id: payrunID, ...upddata });\r\n  };\r\n  \r\n  useEffect(() => {\r\n    setPayrunStatusId(status);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Box maxW=\"100%\" pt=\"5px\" overflow=\"Scroll\">\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={payrunstatus}\r\n          title=\"Payslips\"\r\n          actions={[\r\n            (rowData) => ({\r\n              icon: () => <GrTask size=\"23px\" />,\r\n              hidden: loginLevel.loginLevel !== \"Manager\",\r\n              tooltip: \"Edit\",\r\n              onClick: (event, rowData) => {\r\n                Update_Payrun(rowData);\r\n              },\r\n            }),\r\n          ]}\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            paging: false,\r\n            headerStyle: {\r\n              backgroundColor: \"rgba(75, 192, 192, 1)\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </Box>\r\n      <CustomDialog\r\n        isOpen={isAppScreenOpen}\r\n        handleClose={handleAppScreenClose}\r\n        title=\"\"\r\n        showButton={true}\r\n        isFullscree={false}\r\n      >\r\n        <ApprovalManagerScreen\r\n          formdata={formdata}\r\n          setFormdata={setFormdata}\r\n          handleDialogClose={handleAppScreenClose}\r\n          onConfirm={handleOnUpdateConfirm}\r\n          tabIndex={3}\r\n        />\r\n      </CustomDialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableViewAdmin.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableViewSummary.js",["1696","1697","1698","1699","1700","1701","1702","1703","1704","1705","1706","1707","1708","1709","1710","1711","1712","1713"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport {\r\n  Alert,\r\n  AlertIcon,\r\n  AlertTitle,\r\n  AlertDescription,\r\n  Box,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\n//import AddIcon from \"@material-ui/icons/Add\";\r\n//import { EditIcon } from \"@material-ui/icons\";\r\nimport { GrFormView, GrTrash, GrTask } from \"react-icons/gr\";\r\n//import DeleteIcon from \"@material-ui/icons/Delete\";\r\n//import CheckIcon from \"@material-ui/icons/Check\";\r\n//import SearchIcon from \"@material-ui/icons/Search\";\r\n//import LeaveForm from \"./LeaveForm\";\r\n//import { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { AlertDialog } from \"../helpers/AlertDialogBox\";\r\n//import { useExpensesStatus } from \"./expenses/useExpensesStatus\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useExpensesPeriod } from \"./expenses/useExpensesPeriod\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\nimport ExpenseFormView from \"./ExpenseFormView\";\r\nimport { useDeleteExpenses } from \"./expenses/useDeleteExpenses\";\r\nimport { useUpdateExpenses } from \"./expenses/useUpdateExpenses\";\r\nimport { useExpensesAttachments } from \"./expensesattachments/useExpensesAttachments\";\r\nimport { useDeleteExpensesAttachment } from \"./expensesattachments/useDeleteExpensesAttachment\";\r\nimport ApprovalManagerScreen from \"./ApprovalManagerScreen\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\n\r\n//const FILTERSTRING = \"Pending\";\r\n\r\nconst initial_form = {\r\n  name: \"\",\r\n  date: \"\",\r\n  purchased_from: \"\",\r\n  description: \"\",\r\n  status: \"Pending\",\r\n  amount: 0,\r\n  attachment1_name: \"\",\r\n  attachment1_url: \"\",\r\n  attachment2_name: \"\",\r\n  attachment2_url: \"\",\r\n  attachment3_name: \"\",\r\n  attachment3_url: \"\",\r\n};\r\n\r\nexport default function ExpenseTableView({ year, month }) {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  //const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  //const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const [totals, setTotals] = useState(0);\r\n  const [isCalc, setIsCalc] = useState(false);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  //const { loadEmployees } = useEmployeesContext();\r\n  //const { expensesstatus, setExpStatusId } = useExpensesStatus();\r\n  const [formdata, setFormdata] = useState(initial_form);\r\n  const deleteExpenses = useDeleteExpenses();\r\n  const updateExpenses = useUpdateExpenses();\r\n  const { expensesattachments, setAttachmentId } = useExpensesAttachments();\r\n  const deleteExpensesAttachment = useDeleteExpensesAttachment();\r\n  const [expattachId, setExpattachId] = useState(\"\");\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const {\r\n    isOpen: isErrOpen,\r\n    onClose: onErrClose,\r\n    onOpen: onErrOpen,\r\n  } = useDisclosure({ defaultIsOpen: false });\r\n  const {\r\n    isOpen: isAppScreenOpen,\r\n    onOpen: onAppScreenOpen,\r\n    onClose: onAppScreenClose,\r\n  } = useDisclosure();\r\n  const { expensesperiod, setExpPeriodYrId, setExpPeriodMthId } =\r\n    useExpensesPeriod();\r\n  const {\r\n    //expenses,\r\n    editExpenseID,\r\n    //updateExpense,\r\n    //addExpense,\r\n    //deleteExpense,\r\n    setEditExpenseID,\r\n    setIsExpenseEditingOn,\r\n    setIsExpenseEditingOff,\r\n  } = useExpensesContext();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"name\",\r\n      },\r\n      {\r\n        title: \"Date\",\r\n        field: \"date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n      },\r\n\r\n      { title: \"Description\", field: \"description\" },\r\n      { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n      { title: \"Status\", field: \"status\" },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    setExpPeriodYrId(year);\r\n    setExpPeriodMthId(month);\r\n    setIsCalc(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (expensesperiod) {\r\n      Calc_Totals();\r\n      setIsCalc(false);\r\n    }\r\n  }, [isCalc]);\r\n\r\n  const Calc_Totals = () => {\r\n    const amount = expensesperiod.reduce((acc, r) => {\r\n      if (r.status === \"Approved\" || r.status === \"Approve\") {\r\n        return acc + r.amount;\r\n      } else {\r\n        return acc;\r\n      }\r\n    }, 0);\r\n    setTotals(amount);\r\n  };\r\n\r\n  const handleDialogOpen = () => {\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n  };\r\n\r\n  const View_Expenses = (data) => {\r\n    const { id } = data;\r\n    setFormdata({ ...data });\r\n    setFormdata({ ...data });\r\n    setEditExpenseID(id);\r\n    setIsExpenseEditingOn();\r\n    handleDialogOpen();\r\n  };\r\n\r\n  const Update_Expenses = (data) => {\r\n    //console.log(\"del data\", data);\r\n    const { id, attachmentid, rec_id, tableData, ...fields } = data;\r\n    const editData = { ...fields };\r\n\r\n    setFormdata({ ...editData });\r\n    setFormdata({ ...editData });\r\n    setEditExpenseID(id);\r\n    setAttachmentId(attachmentid);\r\n    setExpattachId(attachmentid);\r\n    data.payrun\r\n      ? toast({\r\n          title: \"This expense has been paid. It can not be modified!\",\r\n          status: \"error\",\r\n        })\r\n      : handleAppScreenOpen();\r\n  };\r\n\r\n  const handleAlertOpen = () => {\r\n    setIsAlertOpen(true);\r\n  };\r\n  const handleAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleOnDeleteConfirm = () => {\r\n    const upddata = { ...formdata, posted: \"D\" };\r\n    updateExpenses({ id: editExpenseID, ...upddata });\r\n    // const id = editExpenseID;\r\n    // deleteExpenses(id);\r\n    // expensesattachments\r\n    //   .filter((r) => r.attachmentid === expattachId)\r\n    //   .forEach((rec) => {\r\n    //     const id = rec.id;\r\n    //     deleteExpensesAttachment(id);\r\n    //   });\r\n  };\r\n\r\n  const handleAppScreenOpen = () => {\r\n    onAppScreenOpen();\r\n  };\r\n  const handleAppScreenClose = () => {\r\n    onAppScreenClose();\r\n  };\r\n\r\n  const handleOnUpdateConfirm = (data) => {\r\n    console.log(\"update\", data);\r\n    const posted = data.status === \"Delete\" ? \"D\" : \"\";\r\n    const upddata = { ...data, posted: posted };\r\n    updateExpenses({ id: editExpenseID, ...upddata });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <Box maxW=\"100%\" pt=\"5px\" overflow=\"scroll\">\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={expensesperiod}\r\n          title=\"Leave Application\"\r\n          actions={[\r\n            (rowData) => ({\r\n              icon: () => <GrFormView size=\"33px\" />,\r\n              tooltip: \"View\",\r\n              onClick: (event, rowData) => {\r\n                View_Expenses(rowData);\r\n              },\r\n            }),\r\n            (rowData) => ({\r\n              icon: () => <GrTask size=\"23px\" />,\r\n              hidden: loginLevel.loginLevel !== \"Manager\",\r\n              tooltip: \"Edit\",\r\n              onClick: (event, rowData) => {\r\n                Update_Expenses(rowData);\r\n              },\r\n            }),\r\n          ]}\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            paging: false,\r\n            headerStyle: {\r\n              backgroundColor: \"rgba(75, 192, 192, 1)\",\r\n              color: \"white\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </Box>\r\n      <CustomDialog\r\n        isOpen={isDialogOpen}\r\n        handleClose={handleDialogClose}\r\n        title=\"\"\r\n        showButton={true}\r\n        isFullscreen={false}\r\n        isFullwidth={false}\r\n      >\r\n        <ExpenseFormView\r\n          formdata={formdata}\r\n          setFormdata={setFormdata}\r\n          handleDialogClose={handleDialogClose}\r\n        />\r\n      </CustomDialog>\r\n      <CustomDialog\r\n        isOpen={isAppScreenOpen}\r\n        handleClose={handleAppScreenClose}\r\n        title=\"\"\r\n        showButton={true}\r\n        isFullscree={false}\r\n      >\r\n        <ApprovalManagerScreen\r\n          formdata={formdata}\r\n          setFormdata={setFormdata}\r\n          handleDialogClose={handleAppScreenClose}\r\n          onConfirm={handleOnUpdateConfirm}\r\n          tabIndex={1}\r\n        />\r\n      </CustomDialog>\r\n      <AlertDialogBox\r\n        onClose={handleAlertClose}\r\n        onConfirm={handleOnDeleteConfirm}\r\n        isOpen={isAlertOpen}\r\n        title=\"Delete Expenses\"\r\n      >\r\n        <h2>\r\n          Are you sure you want to delete {formdata.name} expense dated on{\" \"}\r\n          {formdata.date} with amount ${formdata.amount} ?\r\n        </h2>\r\n      </AlertDialogBox>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\ExpenseTableViewStaff.js",["1714","1715","1716"],"import React, {  useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\nimport {\r\n  Box,\r\n  Grid,\r\n  Heading,\r\n  GridItem,\r\n  //Icon,\r\n  IconButton,\r\n  Stack,\r\n  Spacer,\r\n} from \"@chakra-ui/react\";\r\nimport { EditIcon } from \"@chakra-ui/icons\";\r\n//import MaterialTable from \"material-table\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { List } from \"@material-ui/core\";\r\nimport {  useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\n//import { expenses_url } from \"../utils/constants\";\r\nimport { useExpenses } from \"./expenses/useExpenses\";\r\n\r\n//const drawerWidth = 240;\r\n\r\n// const columns = [\r\n//   {\r\n//     title: \"Name\",\r\n//     field: \"name\",\r\n//   },\r\n//   {\r\n//     title: \"Date\",\r\n//     field: \"date\",\r\n//     type: \"date\",\r\n//     dateSetting: { locale: \"en-GB\" },\r\n//   },\r\n\r\n//   { title: \"Description\", field: \"description\" },\r\n//   { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n//   { title: \"Status\", field: \"status\" },\r\n// ];\r\n\r\n// const fetchExpensesDetails = selector({\r\n//   key: \"fetchExpensesDetailsSelector\",\r\n//   get: async ({ get }) => {\r\n//     try {\r\n//       const { data } = await axios.get(expenses_url);\r\n\r\n//       return data;\r\n//     } catch (error) {\r\n//       throw error;\r\n//     }\r\n//   },\r\n// });\r\n\r\nconst ExpenseTableViewStaff = () => {\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { expenses, setFilter, setExpenseId } = useExpenses();\r\n  //const [userdata, setUserdata] = useState([]);\r\n  //const [userdata, setUserdata] = useRecoilState(userdatastate);\r\n  // const ExpensesDetails = useRecoilValueLoadable(fetchExpensesDetails);\r\n  // const { state, contents } = ExpensesDetails;\r\n  // const { expenses_loading, expenses_error, loadEmpExpenses } =\r\n    useExpensesContext();\r\n\r\n  useEffect(() => {\r\n    setFilter(loginLevel.loginUserId);\r\n  }, []);\r\n\r\n  return (\r\n    <List className={classes.root}>\r\n      <Grid direction=\"row\">\r\n        <Stack direction=\"row\">\r\n          <Heading as=\"h4\" size=\"md\">\r\n            Expenses Claims (Pending)\r\n          </Heading>\r\n          <Spacer />\r\n          <IconButton\r\n            // variant=\"outline\"\r\n            size=\"md\"\r\n            aria-label=\"Edit\"\r\n            icon={<EditIcon />}\r\n            onClick={() => navigate(\"/expenses\")}\r\n          />\r\n        </Stack>\r\n        {/* <Heading as=\"h4\" size=\"md\">\r\n          Expenses Claims (Pending)\r\n        </Heading> */}\r\n        {expenses\r\n          .filter((i) => i.status === \"Pending\")\r\n          .map((row) => {\r\n            return (\r\n              <Grid\r\n                key={row.id}\r\n                templateColumns=\"repeat(15, 1fr)\"\r\n                gap={3}\r\n                p={1}\r\n              >\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.name}</Box>\r\n                </GridItem>\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.date}</Box>\r\n                </GridItem>\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.description}</Box>\r\n                </GridItem>\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.amount}</Box>\r\n                </GridItem>\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.status}</Box>\r\n                </GridItem>\r\n              </Grid>\r\n              // <ListItem key={row.id}>\r\n              //   {/* <Grid item sm={2} align=\"center\">\r\n              //     <ListItemText>{row.name}</ListItemText>\r\n              //   </Grid> */}\r\n              //   <Grid item sm={3} align=\"center\">\r\n              //     <ListItemText>{row.date}</ListItemText>\r\n              //   </Grid>\r\n              //   <Grid item sm={3} align=\"center\">\r\n              //     <ListItemText>{row.description}</ListItemText>\r\n              //   </Grid>\r\n              //   <Grid item sm={3} align=\"center\">\r\n              //     <ListItemText>{row.amount}</ListItemText>\r\n              //   </Grid>\r\n              //   <Grid item sm={3} align=\"center\">\r\n              //     <ListItemText>{row.status}</ListItemText>\r\n              //   </Grid>\r\n              // </ListItem>\r\n            );\r\n          })}\r\n      </Grid>\r\n    </List>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n\r\nexport default ExpenseTableViewStaff;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\TrainingsTableViewStaff.js",["1717","1718"],"import React, { useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\nimport {\r\n  Box,\r\n  Grid,\r\n  GridItem,\r\n  Heading,\r\n  IconButton,\r\n  Spacer,\r\n  Stack,\r\n} from \"@chakra-ui/react\";\r\nimport { EditIcon } from \"@chakra-ui/icons\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { differenceInDays } from \"date-fns\";\r\nimport { List } from \"@material-ui/core\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useTrainings } from \"./trainings/useTrainings\";\r\n\r\n//const drawerWidth = 240;\r\n\r\nconst TrainingsTableViewStaff = () => {\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const { trainings, setTrainingId } = useTrainings();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const today = Date().toLocaleString();\r\n\r\n  useEffect(() => {\r\n    setTrainingId(loginLevel.loginUserId);\r\n  }, []);\r\n\r\n  return (\r\n    <List className={classes.root}>\r\n      <Grid direction=\"row\">\r\n        <Stack direction=\"row\">\r\n          <Heading as=\"h4\" size=\"md\">\r\n            Trainings Schedule Expiry Within 90 days\r\n          </Heading>\r\n          <Spacer />\r\n          <IconButton\r\n            // variant=\"outline\"\r\n            size=\"md\"\r\n            aria-label=\"Edit\"\r\n            icon={<EditIcon />}\r\n            onClick={() => navigate(\"/singleemployee\")}\r\n          />\r\n        </Stack>\r\n        {/* <Heading as=\"h4\" size=\"md\">\r\n          Trainings Schedule Expiry Within 90 days\r\n        </Heading> */}\r\n        {trainings\r\n          .filter(\r\n            (i) =>\r\n              i.empid === loginLevel.loginUserId &&\r\n              differenceInDays(new Date(i.expiry_date), new Date(today)) < 90 &&\r\n              differenceInDays(new Date(today), new Date(i.expiry_date)) < 0\r\n          )\r\n          .map((row) => {\r\n            return (\r\n              <Grid\r\n                templateColumns=\"repeat(12, 1fr)\"\r\n                gap={3}\r\n                p={1}\r\n                key={row.id}\r\n              >\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.name}</Box>\r\n                </GridItem>\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.course}</Box>\r\n                </GridItem>\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.institute}</Box>\r\n                </GridItem>\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.expiry_date}</Box>\r\n                </GridItem>\r\n              </Grid>\r\n\r\n              // <ListItem key={row.id}>\r\n              //   <Grid item sm={3} align=\"center\">\r\n              //     <ListItemText>{row.institute}</ListItemText>\r\n              //   </Grid>\r\n              //   <Grid item sm={3} align=\"center\">\r\n              //     <ListItemText>{row.course}</ListItemText>\r\n              //   </Grid>\r\n              //   <Grid item sm={3} align=\"center\">\r\n              //     <ListItemText>{row.expiry_date}</ListItemText>\r\n              //   </Grid>\r\n              // </ListItem>\r\n            );\r\n          })}\r\n      </Grid>\r\n    </List>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n\r\nexport default TrainingsTableViewStaff;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\WPExpiryViewStaff.js",["1719"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\nimport {\r\n  Box,\r\n  Grid,\r\n  GridItem,\r\n  Heading,\r\n  IconButton,\r\n  Spacer,\r\n  Stack,\r\n} from \"@chakra-ui/react\";\r\nimport { EditIcon } from \"@chakra-ui/icons\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { differenceInDays } from \"date-fns\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { List } from \"@material-ui/core\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\n//import { useUser } from \"./user/useUser\";\r\n\r\n//const drawerWidth = 240;\r\n\r\n// const columns = [\r\n//   {\r\n//     title: \"Name\",\r\n//     field: \"name\",\r\n//     editable: \"never\",\r\n//   },\r\n//   {\r\n//     title: \"Work Permit No\",\r\n//     field: \"workpermitno\",\r\n//     editable: \"never\",\r\n//   },\r\n//   {\r\n//     title: \"Work Permit Expiry\",\r\n//     field: \"workpermit_expirydate\",\r\n//     type: \"date\",\r\n//     dateSetting: { locale: \"en-GB\" },\r\n//     editable: \"never\",\r\n//   },\r\n// ];\r\n\r\nconst WPExpiryViewStaff = () => {\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const { employees } = useEmployees();\r\n  //const { user } = useUser();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  //const [userdata, setUserdata] = useState([]);\r\n  const today = Date().toLocaleString();\r\n\r\n  // useEffect(() => {\r\n  //   setFilter(user.id);\r\n  // }, []);\r\n\r\n  return (\r\n    <List className={classes.root}>\r\n      <Grid direction=\"row\">\r\n        <Stack direction=\"row\">\r\n          <Heading as=\"h4\" size=\"md\">\r\n            Work Permit Expiry Within 90 days\r\n          </Heading>\r\n          <Spacer />\r\n          <IconButton\r\n            // variant=\"outline\"\r\n            size=\"md\"\r\n            aria-label=\"Edit\"\r\n            icon={<EditIcon />}\r\n            onClick={() => navigate(\"/singleemployee\")}\r\n          />\r\n        </Stack>\r\n        {employees\r\n          .filter(\r\n            (i) =>\r\n              differenceInDays(\r\n                new Date(i.workpermit_expirydate),\r\n                new Date(today)\r\n              ) < 90 && i.id === loginLevel.loginUserId\r\n          )\r\n          .map((row) => {\r\n            return (\r\n              <Grid key={row.id} templateColumns=\"repeat(6, 1fr)\" gap={3} p={1}>\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.workpermitno}</Box>\r\n                </GridItem>\r\n\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.workpermit_expirydate}</Box>\r\n                </GridItem>\r\n              </Grid>\r\n              // <ListItem key={row.id}>\r\n              //   <Grid item sm={4} align=\"center\">\r\n              //     <ListItemText>{row.workpermitno}</ListItemText>\r\n              //   </Grid>\r\n              //   <Grid item sm={4} align=\"center\">\r\n              //     <ListItemText>{row.workpermit_expirydate}</ListItemText>\r\n              //   </Grid>\r\n              // </ListItem>\r\n            );\r\n          })}\r\n      </Grid>\r\n    </List>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n\r\nexport default WPExpiryViewStaff;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveTableViewStaff.js",["1720","1721","1722"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Grid,\r\n  Heading,\r\n  GridItem,\r\n  //Icon,\r\n  IconButton,\r\n  Stack,\r\n  Spacer,\r\n} from \"@chakra-ui/react\";\r\nimport { EditIcon } from \"@chakra-ui/icons\";\r\nimport { List } from \"@material-ui/core\";\r\nimport {  useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\n//import { useLeavesContext } from \"../context/leaves_context\";\r\nimport { useLeaves } from \"./leaves/useLeaves\";\r\n\r\n//const drawerWidth = 240;\r\n\r\n// const fetchExpensesDetails = selector({\r\n//   key: \"fetchExpensesDetailsSelector\",\r\n//   get: async ({ get }) => {\r\n//     try {\r\n//       const { data } = await axios.get(expenses_url);\r\n//       const wpexpirydata = data;\r\n\r\n//       return data;\r\n//     } catch (error) {\r\n//       throw error;\r\n//     }\r\n//   },\r\n// });\r\n\r\nconst LeaveTableViewStaff = () => {\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const { leaves,  setFilter } = useLeaves();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  //const [userdata, setUserdata] = useState([]);\r\n  //const [userdata, setUserdata] = useRecoilState(userdatastate);\r\n  //const ExpensesDetails = useRecoilValueLoadable(fetchExpensesDetails);\r\n  //const { state, contents } = ExpensesDetails;\r\n  //const { editEmployeeID } = useEmployeesContext();\r\n  //const { leaves_loading, leaves_error, loadEmpLeaves } = useLeavesContext();\r\n\r\n  useEffect(() => {\r\n    setFilter(loginLevel.loginUserId);\r\n  }, []);\r\n\r\n  return (\r\n    <List className={classes.root}>\r\n      <Grid direction=\"row\">\r\n        <Stack direction=\"row\">\r\n          <Heading as=\"h4\" size=\"md\">\r\n            Leaves Schedule\r\n          </Heading>\r\n          <Spacer />\r\n          <IconButton\r\n            // variant=\"outline\"\r\n            size=\"md\"\r\n            aria-label=\"Edit\"\r\n            icon={<EditIcon />}\r\n            onClick={() => navigate(\"/leave\")}\r\n          />\r\n        </Stack>\r\n\r\n        {leaves\r\n          .filter((i) => i.status === \"Pending\")\r\n          .map((row) => {\r\n            return (\r\n              <Grid\r\n                key={row.id}\r\n                templateColumns=\"repeat(12, 1fr)\"\r\n                gap={3}\r\n                p={1}\r\n              >\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.from_date}</Box>\r\n                </GridItem>\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.to_date}</Box>\r\n                </GridItem>\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.reason}</Box>\r\n                </GridItem>\r\n                <GridItem colSpan={3}>\r\n                  <Box w=\"100%\">{row.status}</Box>\r\n                </GridItem>\r\n              </Grid>\r\n            );\r\n          })}\r\n      </Grid>\r\n    </List>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n\r\nexport default LeaveTableViewStaff;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\LeaveFormAdmin.js",["1723","1724"],"import React, { useState} from \"react\";\r\nimport {\r\n  //Button,\r\n  //Icon,\r\n  TextField,\r\n  Paper,\r\n  Typography,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\n//import { useLeaves } from \"./leaves/useLeaves\";\r\nimport { useAddLeaves } from \"./leaves/useAddLeaves\";\r\n//import { useDeleteLeaves } from \"./leaves/useDeleteLeaves\";\r\nimport { useUpdateLeaves } from \"./leaves/useUpdateLeaves\";\r\n\r\n// const initial_state = {\r\n//   name: \"\",\r\n//   to_date: \"\",\r\n//   from_date: \"\",\r\n//   reason: \"\",\r\n//   status: \"Pending\",\r\n//   no_of_days: 0,\r\n//   leave_bal: 0,\r\n// };\r\n\r\nconst LeaveForm = ({ formdata, setFormdata, handleDialogClose }) => {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast()\r\n  //const { leaves, filter, setFilter, setLeaveId } = useLeaves();\r\n  const updateLeaves = useUpdateLeaves();\r\n  const addLeaves = useAddLeaves();\r\n  //const [state, setState] = useState(initial_state);\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { handleSubmit, control } = useForm();\r\n  //const initialValues = Object.values(initial_state).join(\"\");\r\n  const { isLeaveEditing, editLeaveID } = useLeavesContext();\r\n\r\n  //console.log(\"leave\", isLeaveEditing, formdata);\r\n  const onSubmit = (data) => {\r\n    console.log(\"leave\", data);\r\n    if (isLeaveEditing) {\r\n      updateLeaves({ id: editLeaveID, ...data });\r\n       toast({\r\n         title: \"Leave record being rejected!\",\r\n         status: \"success\",\r\n       });\r\n    } else {\r\n      addLeaves({\r\n        ...data,\r\n        empid: loginLevel.loginUserId,\r\n        reporting_email: loginLevel.reporting_email,\r\n      });\r\n    }\r\n\r\n    //history.push(\"/leave\");\r\n    handleDialogClose();\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   setState(initial_state);\r\n  //   setState({ ...formdata });\r\n  //   setState({ ...formdata });\r\n  //   console.log(\"laeve form\",state)\r\n  // }, [initialValues]);\r\n\r\n  return (\r\n    <div>\r\n      <Paper className={classes.root}>\r\n        <Typography variant=\"h5\" component=\"h3\">\r\n          LEAVE FORM\r\n        </Typography>\r\n        <Typography component=\"p\">Leave Application</Typography>\r\n        <Divider />\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <div>\r\n            <Controller\r\n              name=\"name\"\r\n              control={control}\r\n              defaultValue={formdata.name}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Name\"\r\n                    id=\"margin-normal\"\r\n                    name=\"name\"\r\n                    defaultValue={formdata.name}\r\n                    //value={value}\r\n                    className={classes.textField}\r\n                    onChange={(e) => {\r\n                      console.log(e.target.value);\r\n                      onChange(e.target.value);\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    //select\r\n                  >\r\n                    {/* {employees.map((e) => {\r\n                      return (\r\n                        <MenuItem key={e.name} value={e.name}>\r\n                          {e.name}\r\n                        </MenuItem>\r\n                      );\r\n                    })} */}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              // rules={{ required: \"Name required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"from_date\"\r\n              control={control}\r\n              defaultValue={formdata.from_date}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"From Date\"\r\n                    type=\"date\"\r\n                    id=\"margin-normal\"\r\n                    name=\"from_date\"\r\n                    defaultValue={formdata.from_date}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                );\r\n              }}\r\n              rules={{ required: \"From Date is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"to_date\"\r\n              control={control}\r\n              defaultValue={formdata.to_date}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"To Date\"\r\n                    id=\"margin-normal\"\r\n                    type=\"date\"\r\n                    name=\"to_date\"\r\n                    defaultValue={formdata.to_date}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                );\r\n              }}\r\n              rules={{ required: \"To Date is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"leave_bal\"\r\n              control={control}\r\n              defaultValue={formdata.leave_bal}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    disable\r\n                    label=\"Leave Balance\"\r\n                    type=\"number\"\r\n                    id=\"standard-number\"\r\n                    name=\"leave_bal\"\r\n                    defaultValue={formdata.leave_bal}\r\n                    className={classes.textField}\r\n                    //onChange={onChange}\r\n                    onChange={(e) => {\r\n                      onChange(parseInt(e.target.value, 10));\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                );\r\n              }}\r\n              //rules={{ required: \"IC No required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"no_of_days\"\r\n              control={control}\r\n              defaultValue={formdata.no_of_days}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"No Of Days\"\r\n                    type=\"number\"\r\n                    id=\"standard-number\"\r\n                    name=\"no_of_days\"\r\n                    defaultValue={formdata.no_of_days}\r\n                    className={classes.textField}\r\n                    //onChange={onChange}\r\n                    onChange={(e) => {\r\n                      onChange(parseInt(e.target.value, 10));\r\n                    }}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                     InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                 \r\n                );\r\n              }}\r\n              //rules={{ required: \"IC No required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"reason\"\r\n              control={control}\r\n              defaultValue={formdata.reason}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Reason\"\r\n                    id=\"margin-normal\"\r\n                    name=\"reason\"\r\n                    defaultValue={formdata.reason}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                     InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                  \r\n                );\r\n              }}\r\n              // rules={{ required: \"Reason is required\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Controller\r\n              name=\"status\"\r\n              control={control}\r\n              defaultValue={formdata.status}\r\n              render={({\r\n                field: { onChange, value },\r\n                fieldState: { error },\r\n              }) => {\r\n                return (\r\n                  <TextField\r\n                    label=\"Status\"\r\n                    id=\"margin-normal\"\r\n                    name=\"status\"\r\n                    defaultValue={formdata.status}\r\n                    className={classes.textField}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                    // select\r\n                  >\r\n                    {/* <MenuItem value=\"Pending\">Pending</MenuItem>\r\n                    <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n                    <MenuItem value=\"Approve\">Approve</MenuItem>\r\n                    <MenuItem value=\"Reject\">Reject</MenuItem> */}\r\n                  </TextField>\r\n                );\r\n              }}\r\n              //rules={{ required: \"Status is required\" }}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            {/* <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              onClick={handleSubmit(onSubmit)}\r\n            >\r\n              Submit <Icon className={classes.rightIcon}>send</Icon>\r\n            </Button> */}\r\n          </div>\r\n        </form>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 400,\r\n  },\r\n}));\r\n\r\nexport default LeaveForm;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\Export2Excel.js",["1725"],"import React, { useEffect } from \"react\";\r\n//import ReactExport from \"react-export-excel\";\r\nimport ReactExport from \"react-data-export\";\r\n//import { ExcelFile, ExcelSheet } from \"react-export-excel\";\r\nimport { Button } from \"@chakra-ui/react\";\r\n\r\nconst ExcelFile = ReactExport.ExcelFile;\r\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\r\n//const ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\r\n\r\nconst Export2Excel = ({ filename, dataset, title }) => {\r\n  const hoccols = [\r\n    {\r\n      title: \"What is/are the findings?\",\r\n      width: { wch: 34 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"#F5FFFA\" } },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"#F5FFFA\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"What is/are the potential hazard(s)/risk(s)?\",\r\n      width: { wch: 34 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"#F5FFFA\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"Type / Category\",\r\n      width: { wch: 14 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"FF00FF00\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"What\",\r\n      width: { wch: 18 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"FF00FF00\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"What Details\",\r\n      width: { wch: 28 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"FF00FF00\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"Why\",\r\n      width: { wch: 18 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"FF00FF00\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"Why Details\",\r\n      width: { wch: 28 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"FF00FF00\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"Did a conversation take place?\",\r\n      width: { wch: 18 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"FF00FF00\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"Was there an agreed remedial/corrective or preventive action? \",\r\n      width: { wch: 28 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"FF00FF00\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"Follow-up required?\",\r\n      width: { wch: 18 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"FF00FF00\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"Work Related?\",\r\n      width: { wch: 18 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"FF00FF00\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"Raised By\",\r\n      width: { wch: 28 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"FF00FF00\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"Raised On\",\r\n      width: { wch: 18 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"FF00FF00\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"Company\",\r\n      width: { wch: 28 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"FF00FF00\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"Location\",\r\n      width: { wch: 28 },\r\n      style: {\r\n        font: { sz: \"9\", bold: true },\r\n        //fill: { patternType: \"solid\", fgColor: { rgb: \"FF00FF00\" } },\r\n        alignment: {\r\n          wrapText: true,\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n      },\r\n    },\r\n  ];\r\n\r\n  const hocdata = dataset.map((rec, index) => {\r\n    return [\r\n      {\r\n        value: rec.findings ? rec.findings : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.risks ? rec.risks : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.category ? rec.category : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.what ? rec.what : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.what_details ? rec.what_details : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.why ? rec.why : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.why_details ? rec.why_details : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.discussion ? rec.discussion : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.action ? rec.action : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.isfollowup ? rec.isfollowup : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.isworkrelated ? rec.isworkrelated : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.raisedby ? rec.raisedby : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.raisedon ? rec.raisedon : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.company ? rec.company : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        value: rec.location ? rec.location : \"\",\r\n        style: {\r\n          font: { sz: \"9\" },\r\n          alignment: {\r\n            wrapText: true,\r\n            horizontal: \"center\",\r\n            vertical: \"top\",\r\n          },\r\n        },\r\n      },\r\n    ];\r\n  });\r\n\r\n  const multiDataSet = [\r\n    // {\r\n    //   columns: cols1,\r\n    //   data: [],\r\n    // },\r\n    {\r\n      columns: hoccols,\r\n      data: hocdata,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    // <ExcelFile element={<Button>Export to Excel</Button>} filename={filename}>\r\n    //   <ExcelSheet dataSet={multiDataSet1} name=\"Organization\" />\r\n    // </ExcelFile>\r\n\r\n    <ExcelFile\r\n      element={\r\n        <Button colorScheme=\"teal\" variant=\"solid\">\r\n          Download\r\n        </Button>\r\n      }\r\n      filename={filename}\r\n    >\r\n      <ExcelSheet dataSet={multiDataSet} name={title} />\r\n    </ExcelFile>\r\n\r\n    // <ExcelFile filename={filename}>\r\n    //   <ExcelSheet dataSet={multiDataSet} name=\"HOC\" />\r\n    // </ExcelFile>\r\n\r\n    // <ExcelFile element={<Button>Export to Excel</Button>} filename={filename}>\r\n    //   <ExcelSheet data={dataset} name={title}>\r\n    //     <ExcelColumn label=\"Name\" value=\"name\" />\r\n    //     <ExcelColumn label=\"From Date\" value=\"from_date\" />\r\n    //     <ExcelColumn label=\"To Date\" value=\"to_date\" />\r\n    //     <ExcelColumn label=\"No of Days\" value=\"no_of_days\" />\r\n    //     <ExcelColumn label=\"Reason\" value=\"reason\" />\r\n    //     <ExcelColumn label=\"Status\" value=\"status\" />\r\n    //   </ExcelSheet>\r\n    //</ExcelFile>\r\n  );\r\n};\r\n\r\nexport default Export2Excel;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useUpdateHoc.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useAddHoc.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useHocPeriod.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useExpensesPayrun.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payslips\\usePayslips.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\useDeletePayrun.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hoclocation\\useHoclocation.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hoccategory\\useHoccategory.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsManager.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsAdminManager.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsAdmin.js",["1726","1727"],"import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Text } from \"@chakra-ui/react\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  ListSubheader,\r\n  Collapse,\r\n} from \"@material-ui/core\";\r\n//import ListItem from \"@material-ui/core/ListItem\";\r\n//import ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\n//import ListItemText from \"@material-ui/core/ListItemText\";\r\n//import ListSubheader from \"@material-ui/core/ListSubheader\";\r\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\r\n//import FlightIcon from \"@material-ui/icons/Flight\";\r\nimport PeopleIcon from \"@material-ui/icons/People\";\r\nimport LayersIcon from \"@material-ui/icons/Layers\";\r\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\nimport { Construction } from \"@material-ui/icons\"\r\nimport { MdHandyman } from \"react-icons/md\";\r\n\r\nconst MenuListItems = () => {\r\n  const classes = useStyles();\r\n  const [openPay, setOpenPay] = useState(false);\r\n  const [openTable, setOpenTable] = useState(false);\r\n  const [openUtilities, setOpenUtilities] = useState(false);\r\n\r\n  const handleClickPay = () => {\r\n    setOpenPay(!openPay);\r\n  };\r\n\r\n  const handleClickTable = () => {\r\n    setOpenTable(!openTable);\r\n  };\r\n\r\n  const handleClickUtility = () => {\r\n    setOpenUtilities(!openUtilities);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.content}>\r\n      <ListSubheader align=\"center\" className={classes.itemIcon}>\r\n        <Text color=\"blue\" fontSize=\"21\" fontWeight=\"bold\">\r\n          Admin\r\n        </Text>\r\n      </ListSubheader>\r\n\r\n      <Link to=\"/\">\r\n        <ListItem button>\r\n          <ListItemIcon className={classes.itemIcon}>\r\n            <DashboardIcon />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            primary=\"Dashboard\"\r\n            className={classes.categoryHeaderPrimary}\r\n          />\r\n        </ListItem>\r\n      </Link>\r\n\r\n      <Link to=\"/allemployees\">\r\n        <ListItem button>\r\n          <ListItemIcon className={classes.itemIcon}>\r\n            <PeopleIcon />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            primary=\"All Employees\"\r\n            className={classes.categoryHeaderPrimary}\r\n          />\r\n        </ListItem>\r\n      </Link>\r\n\r\n      {/* <Link to=\"/leave\">\r\n        <ListItem button>\r\n          <ListItemIcon className={classes.itemIcon}>\r\n            <FlightIcon />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            primary=\"Leave\"\r\n            className={classes.categoryHeaderPrimary}\r\n          />\r\n        </ListItem>\r\n      </Link> */}\r\n\r\n      {/* <Link to=\"/expenses\">\r\n        <ListItem button>\r\n          <ListItemIcon className={classes.itemIcon}>\r\n            <ShoppingCartIcon />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            primary=\"Expenses\"\r\n            className={classes.categoryHeaderPrimary}\r\n          />\r\n        </ListItem>\r\n      </Link> */}\r\n\r\n      {/* <Link to=\"/tables\">\r\n        <ListItem button>\r\n          <ListItemIcon className={classes.itemIcon}>\r\n            <LayersIcon />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            primary=\"Tables\"\r\n            className={classes.categoryHeaderPrimary}\r\n          />\r\n        </ListItem>\r\n      </Link> */}\r\n\r\n      {/* <Link to=\"/example\">\r\n        <ListItem button>\r\n          <ListItemIcon className={classes.itemIcon}>\r\n            <LayersIcon />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            primary=\"Example\"\r\n            className={classes.categoryHeaderPrimary}\r\n          />\r\n        </ListItem>\r\n      </Link> */}\r\n\r\n      <ListItem button onClick={handleClickTable}>\r\n        <ListItemIcon className={classes.itemIcon}>\r\n          <LayersIcon />\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Tables\" className={classes.item} />\r\n        {openTable ? <ExpandLess /> : <ExpandMore />}\r\n      </ListItem>\r\n      <Collapse in={openTable} timeout=\"auto\" unmountOnExit>\r\n        <List component=\"div\" disablePadding>\r\n          <Link to=\"/tables\">\r\n            <ListItem button className={classes.nested}>\r\n              <ListItemIcon></ListItemIcon>\r\n              <ListItemText primary=\"Tables\" className={classes.item} />\r\n            </ListItem>\r\n          </Link>\r\n\r\n          <Link to=\"/hocupdtables\">\r\n            <ListItem button className={classes.nested}>\r\n              <ListItemIcon></ListItemIcon>\r\n              <ListItemText primary=\"HOC Tables\" className={classes.item} />\r\n            </ListItem>\r\n          </Link>\r\n\r\n          <Link to=\"/leavesbftables\">\r\n            <ListItem button className={classes.nested}>\r\n              <ListItemIcon></ListItemIcon>\r\n              <ListItemText\r\n                primary=\"Leaves B/F Tables\"\r\n                className={classes.item}\r\n              />\r\n            </ListItem>\r\n          </Link>\r\n        </List>\r\n      </Collapse>\r\n      <ListItem button onClick={handleClickUtility}>\r\n        <ListItemIcon className={classes.itemIcon}>\r\n          <MdHandyman size=\"25\"/>\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Utilities\" className={classes.item} />\r\n        {openUtilities ? <ExpandLess /> : <ExpandMore />}\r\n      </ListItem>\r\n      <Collapse in={openUtilities} timeout=\"auto\" unmountOnExit>\r\n        <List component=\"div\" disablePadding>\r\n          <Link to=\"/tables\">\r\n            <ListItem button className={classes.nested}>\r\n              <ListItemIcon></ListItemIcon>\r\n              <ListItemText primary=\"Convert EMails\" className={classes.item} />\r\n            </ListItem>\r\n          </Link>\r\n        </List>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  mainHeader: {\r\n    fontSize: 24,\r\n    color: \"primary\",\r\n  },\r\n  categoryHeader: {\r\n    paddingTop: theme.spacing(2),\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  categoryHeaderPrimary: {\r\n    color: \"primary\",\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  item: {\r\n    paddingTop: 1,\r\n    paddingBottom: 1,\r\n    color: \"primary\",\r\n    \"&:hover,&:focus\": {\r\n      backgroundColor: \"rgba(255, 255, 255, 0.08)\",\r\n    },\r\n  },\r\n  itemCategory: {\r\n    backgroundColor: \"#232f3e\",\r\n    boxShadow: \"0 -1px 0 #404854 inset\",\r\n    paddingTop: theme.spacing(2),\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  firebase: {\r\n    fontSize: 24,\r\n    color: theme.palette.common.orange,\r\n  },\r\n  itemActiveItem: {\r\n    color: \"primary\",\r\n  },\r\n  itemPrimary: {\r\n    fontSize: \"inherit\",\r\n  },\r\n  itemIcon: {\r\n    minWidth: \"auto\",\r\n    marginRight: theme.spacing(2),\r\n    color: \"primary\",\r\n  },\r\n  divider: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default MenuListItems;\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsStaff.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\MenuListItemsOpsSpvr.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useLeavesPeriodbyMth.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\leaves\\useLeavesStatus.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\dailyallows\\useDailyAllowsPeriod.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewExperiences.js",["1728"],"import React, { useEffect, useMemo } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\n\r\nexport default function Emp_Experiences({\r\n  experiencedata,\r\n  setExperiencedata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n  const { loadSingleBatchExperience, singlebatchexperience } =\r\n    useTablesContext();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Company\",\r\n        field: \"company\",\r\n      },\r\n      {\r\n        title: \"Location\",\r\n        field: \"location\",\r\n      },\r\n      {\r\n        title: \"Position\",\r\n        field: \"position\",\r\n      },\r\n      {\r\n        title: \"From Date\",\r\n        field: \"from_date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n      },\r\n      {\r\n        title: \"To Date\",\r\n        field: \"to_date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    //console.log(linkid);\r\n    loadSingleBatchExperience(editEmployeeID);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={singlebatchexperience}\r\n          title=\"Experience\"\r\n          options={{\r\n            search: false,\r\n            toolbar: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewLeaves.js",["1729"],"import React, { useEffect, useMemo } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\n\r\nexport default function Emp_ViewFamily() {\r\n  const classes = useStyles();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n  const { singlebatch_leave, getSingleBatchLeave } = useLeavesContext();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"From Date\",\r\n        field: \"from_date\",\r\n        type: \"date\",\r\n        filtering: false,\r\n        dateSetting: { locale: \"en-GB\" },\r\n      },\r\n      {\r\n        title: \"To Date\",\r\n        field: \"to_date\",\r\n        type: \"date\",\r\n        filtering: false,\r\n        dateSetting: { locale: \"en-GB\" },\r\n      },\r\n      {\r\n        title: \"Reason\",\r\n        field: \"Reason\",\r\n      },\r\n      {\r\n        title: \"No of Days\",\r\n        field: \"no_of_days\",\r\n        type: \"numeric\",\r\n        filtering: false,\r\n      },\r\n      {\r\n        title: \"Status\",\r\n        field: \"status\",\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    getSingleBatchLeave(editEmployeeID);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={singlebatch_leave}\r\n          title=\"\"\r\n          options={{\r\n            search: false,\r\n            toolbar: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpPersonal.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewTrainings.js",["1730"],"import React, { useEffect, useMemo } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useTrainingsContext } from \"../context/trainings_context\";\r\n\r\nexport default function Emp_ViewFamily() {\r\n  const classes = useStyles();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n  const { singlebatch_training, getSingleBatchTraining } =\r\n    useTrainingsContext();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Institute\",\r\n        field: \"institute\",\r\n      },\r\n      {\r\n        title: \"Course\",\r\n        field: \"course\",\r\n      },\r\n      {\r\n        title: \"From Date\",\r\n        field: \"from_date\",\r\n        type: \"date\",\r\n        filtering: false,\r\n        dateSetting: { locale: \"en-GB\" },\r\n      },\r\n      {\r\n        title: \"To Date\",\r\n        field: \"to_date\",\r\n        type: \"date\",\r\n        filtering: false,\r\n        dateSetting: { locale: \"en-GB\" },\r\n      },\r\n      {\r\n        title: \"Expiry Date\",\r\n        field: \"expiry_date\",\r\n        type: \"date\",\r\n        filtering: false,\r\n        dateSetting: { locale: \"en-GB\" },\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    getSingleBatchTraining(editEmployeeID);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={singlebatch_training}\r\n          title=\"\"\r\n          options={{\r\n            search: false,\r\n            toolbar: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewFamily.js",["1731"],"import React, { useEffect, useMemo } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\n\r\nexport default function Emp_ViewFamily() {\r\n  const classes = useStyles();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n  const { loadSingleBatchFamily, singlebatchfamily } = useTablesContext();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"name\",\r\n        filtering: false,\r\n      },\r\n      {\r\n        title: \"Relationship\",\r\n        field: \"relationship\",\r\n      },\r\n      {\r\n        title: \"BIrth Date\",\r\n        field: \"birth_date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n        filtering: false,\r\n      },\r\n      {\r\n        title: \"Phone\",\r\n        field: \"phone\",\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    loadSingleBatchFamily(editEmployeeID);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={singlebatchfamily}\r\n          title=\"Family\"\r\n          options={{\r\n            search: false,\r\n            toolbar: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\EmpViewEducations.js",["1732"],"import React, { useEffect, useMemo } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\n\r\nexport default function Emp_Educations() {\r\n  const classes = useStyles();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n\r\n  const {\r\n    loadSingleBatchEducation,\r\n    singlebatcheducation,\r\n    singlebatch_education_loading,\r\n  } = useTablesContext();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Institution\",\r\n        field: \"institution\",\r\n      },\r\n      {\r\n        title: \"Course\",\r\n        field: \"course\",\r\n      },\r\n      {\r\n        title: \"From Date\",\r\n        field: \"from_date\",\r\n        type: \"date\",\r\n      },\r\n      {\r\n        title: \"To Date\",\r\n        field: \"to_date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    loadSingleBatchEducation(editEmployeeID);\r\n  }, []);\r\n\r\n  if (singlebatch_education_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading...Education</h2>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={singlebatcheducation}\r\n          title=\"Experience\"\r\n          options={{\r\n            search: false,\r\n            toolbar: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\payrun\\usePayrunStatus.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\expenses\\useExpensesPeriod.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hoclocation\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hoccategory\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\PayslipForm.js",["1733","1734","1735"],"import React, { useState,  useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  TextField,\r\n    Paper,\r\n  Typography,\r\n    Divider,\r\n  Grid,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CardLayout from \"../helpers/CardLayout\";\r\nimport CardLayout2 from \"../helpers/CardLayout2\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport {\r\n  payPeriodState,\r\n  //payPeriodEndMonthState,\r\n  payPeriodEmpIdState,\r\n  //payEarningDataState,\r\n  //payDeductionDataState,\r\n} from \"./data/atomdata\";\r\n\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport PayslipViewEarnings from \"./Payslip_ViewEarnings\";\r\nimport PayslipViewDeductions from \"./Payslip_ViewDeductions\";\r\nimport Payslip_Earnings from \"./Payslip_Earnings\";\r\nimport Payslip_Deductions from \"./Payslip_Deductions\";\r\n\r\n// const initial_values = {\r\n//   name: \"\",\r\n//   period: \"\",\r\n//   date: \"\",\r\n//   bank_name: \"\",\r\n//   bank_acno: \"\",\r\n//   status: \"Pending\",\r\n//   total_earnings: 0,\r\n//   total_deductions: 0,\r\n//   tap_amount: 0,\r\n//   scp_amount: 0,\r\n//   basic_pay: 0,\r\n//   nett_pay: 0,\r\n//   tap_checkbox: true,\r\n// };\r\n\r\nconst PayslipForm = () => {\r\n  let navigate = useNavigate();\r\n   const classes = useStyles();\r\n  const {\r\n    //isPayslipEditing,\r\n    single_payslip,\r\n    updatePayslip,\r\n    //addPayslip,\r\n    editPayslipID,\r\n    //loadPayslips,\r\n    getSinglePayslip,\r\n    single_payslip_loading,\r\n    single_payslip_error,\r\n    //payslip_period,\r\n    //payslip_earning_amount,\r\n    //payslip_deduction_amount,\r\n    setPayslipEarningAmount,\r\n    setPayslipDeductionAmount,\r\n    payslipearnings,\r\n    payslipdeductions,\r\n    getSingleBatchPayslipEarnings,\r\n    getSingleBatchPayslipDeductions,\r\n  } = usePayslipsContext();\r\n  \r\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\r\n  const payPeriod = useRecoilValue(payPeriodState);\r\n    const [earningsdata, setEarningsdata] = useState([]);\r\n  const [oldEarningsdata, setOldEarningsdata] = useState([]);\r\n  const [deductionsdata, setDeductionsdata] = useState([]);\r\n  const [oldDeductionsdata, setOldDeductionsdata] = useState([]);\r\n  const [isEarningsDialogOpen, setIsEarningsDialogOpen] = useState(false);\r\n  const [isDeductionsDialogOpen, setIsDeductionsDialogOpen] = useState(false);\r\n  //const [state, setState] = useState(single_payslip);\r\n  const { handleSubmit, control } = useForm();\r\n\r\n  const {\r\n    name,\r\n    period,\r\n    date,\r\n    bank_name,\r\n    bank_acno,\r\n    //status,\r\n    total_earnings,\r\n    total_deductions,\r\n    tap_amount,\r\n    scp_amount,\r\n    basic_pay,\r\n    nett_pay,\r\n    tap_checkbox,\r\n  } = single_payslip;\r\n\r\n  useEffect(\r\n    getSinglePayslip(editPayslipID)\r\n  , []);\r\n\r\n  // useEffect(() => {\r\n  //   if (calc) {\r\n  //     setTimeout(() => {\r\n  //       console.log(\"calc\");\r\n  //       calc_totals();\r\n  //       setCalc(false);\r\n  //     }, 10000);\r\n  //   }\r\n  // }, [calc]);\r\n\r\n  const handleChange = (event) => {\r\n    //const { rec_id, ...fields } = single_payslip;\r\n    // const value =\r\n    //   event.target.type === \"number\"\r\n    //     ? parseInt(event.target.value, 10)\r\n    //     : event.target.value;\r\n    // setState({ ...state, [event.target.name]: value });\r\n  };\r\n\r\n  const calc_totals = () => {\r\n    let totalTAP = 0;\r\n    let totalSCP = 0;\r\n    if (tap_checkbox) {\r\n      totalTAP = Math.ceil(basic_pay * 0.05);\r\n      totalSCP = Math.round((basic_pay + Number.EPSILON) * 0.035 * 100) / 100;\r\n    }\r\n    console.log(\"calc\", totalTAP, totalSCP)\r\n    const totalEarnings = payslipearnings.reduce(\r\n      (a, v) => (a = a + v.amount),\r\n      0\r\n    );\r\n    const totalDeductions = payslipdeductions.reduce(\r\n      (a, v) => (a = a + v.amount),\r\n      0\r\n    );\r\n    const nettPay =\r\n      basic_pay + totalEarnings - totalDeductions - totalTAP - totalSCP;\r\n    setPayslipEarningAmount(totalEarnings);\r\n    setPayslipDeductionAmount(totalDeductions);\r\n    updatePayslip({\r\n      id: editPayslipID,\r\n      total_earnings: totalEarnings,\r\n      total_deductions: totalDeductions,\r\n      tap_amount: totalTAP,\r\n      scp_amount: totalSCP,\r\n      nett_pay: nettPay,\r\n    });\r\n    console.log(\r\n      \"total\",\r\n      totalEarnings,\r\n      totalDeductions,\r\n      totalTAP,\r\n      totalSCP,\r\n      nettPay\r\n    );\r\n    getSinglePayslip(editPayslipID);\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    const { rec_id, ...fields } = single_payslip;\r\n    updatePayslip(...fields);\r\n\r\n    // if (isPayslipEditing) {\r\n    //   updatePayslip({ id: editPayslipID, ...data });\r\n    // } else {\r\n    //   addPayslip({ ...data });\r\n    // }\r\n    // loadPayslips();\r\n    // history.push(\"/batchpayslips\");\r\n  };\r\n  const handleEarningsDialogOpen = () => {\r\n    // setPayEarningData([...payslipearnings]);\r\n    setOldEarningsdata([...payslipearnings]);\r\n    setEarningsdata([...payslipearnings]);\r\n    setIsEarningsDialogOpen(true);\r\n  };\r\n\r\n  const handleEarningsDialogClose = () => {\r\n    setIsEarningsDialogOpen(false);\r\n    getSingleBatchPayslipEarnings(payPeriodEmpId, payPeriod);\r\n  };\r\n  const handleDeductionsDialogOpen = () => {\r\n    setOldDeductionsdata([...payslipdeductions]);\r\n    setDeductionsdata([...payslipdeductions]);\r\n    setIsDeductionsDialogOpen(true);\r\n  };\r\n\r\n  const handleDeductionsDialogClose = () => {\r\n    setIsDeductionsDialogOpen(false);\r\n    getSingleBatchPayslipDeductions(payPeriodEmpId, payPeriod);\r\n  };\r\n\r\n  if (single_payslip_loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (single_payslip_error) {\r\n    navigate(\"/error\");\r\n  }\r\n  return (\r\n    <div>\r\n      <Paper className={classes.root}>\r\n        <Grid xs={12} md={8} lg={12}>\r\n          <CardLayout2 title=\"Employee Profile\">\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n              <Grid>\r\n                <div>\r\n                  <Typography variant=\"h5\" component=\"h3\">\r\n                    PAYSLIP FORM\r\n                  </Typography>\r\n                  <Typography component=\"p\">Payslip Preparation</Typography>\r\n\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                  >\r\n                    Submit <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                </div>\r\n              </Grid>\r\n              <Divider className={classes.divider} />\r\n              <Grid item xs={12}>\r\n                <div>\r\n                  <Controller\r\n                    name=\"name\"\r\n                    control={control}\r\n                    defaultValue={name}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Name\"\r\n                          id=\"margin-normal\"\r\n                          name=\"name\"\r\n                          defaultValue={name}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        >\r\n                          {/* {employees.map((e) => {\r\n                  return (\r\n                    <MenuItem key={e.name} value={e.name}>\r\n                      {e.name}\r\n                    </MenuItem>\r\n                  );\r\n                })} */}\r\n                        </TextField>\r\n                      );\r\n                    }}\r\n                    rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Controller\r\n                    name=\"period\"\r\n                    control={control}\r\n                    defaultValue={period}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Period\"\r\n                          id=\"margin-normal\"\r\n                          name=\"period\"\r\n                          defaultValue={period}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                  <Controller\r\n                    name=\"date\"\r\n                    control={control}\r\n                    defaultValue={date}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Date\"\r\n                          type=\"date\"\r\n                          id=\"margin-normal\"\r\n                          name=\"date\"\r\n                          defaultValue={date}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputLabelProps={{\r\n                            shrink: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Controller\r\n                    name=\"bank_name\"\r\n                    control={control}\r\n                    defaultValue={bank_name}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Bank Name\"\r\n                          id=\"margin-normal\"\r\n                          name=\"bank_name\"\r\n                          defaultValue={bank_name}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                  <Controller\r\n                    name=\"bank_acno\"\r\n                    control={control}\r\n                    defaultValue={bank_acno}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Bank AC No\"\r\n                          id=\"margin-normal\"\r\n                          name=\"bank_acno\"\r\n                          value={bank_acno}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Controller\r\n                    name=\"tap_amount\"\r\n                    control={control}\r\n                    defaultValue={tap_amount}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"TAP Contrinution\"\r\n                          type=\"currency\"\r\n                          id=\"standard-number\"\r\n                          name=\"tap_amount\"\r\n                          defaultValue={tap_amount}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            handleChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                  <Controller\r\n                    name=\"scp_amount\"\r\n                    control={control}\r\n                    defaultValue={scp_amount}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"SCP Contribution\"\r\n                          type=\"currency\"\r\n                          id=\"standard-number\"\r\n                          name=\"scp_amount\"\r\n                          defaultValue={scp_amount}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            handleChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Controller\r\n                    name=\"total_earnings\"\r\n                    control={control}\r\n                    defaultValue={total_earnings}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Total Earnings\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"total_earnings\"\r\n                          value={total_earnings}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            handleChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                  <Controller\r\n                    name=\"total_deductions\"\r\n                    control={control}\r\n                    defaultValue={total_deductions}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Total Deductions\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"total_deductions\"\r\n                          value={total_deductions}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            handleChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Controller\r\n                    name=\"basic_pay\"\r\n                    control={control}\r\n                    defaultValue={basic_pay}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Basic Pay\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"basic_pay\"\r\n                          value={basic_pay}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                          // onChange={(e) => {\r\n                          //   handleChange(parseInt(e.target.value, 10));\r\n                          // }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                  <Controller\r\n                    name=\"nett_pay\"\r\n                    control={control}\r\n                    defaultValue={nett_pay}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Nett Pay\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"nett_pay\"\r\n                          value={nett_pay}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            handleChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.button}\r\n                  onClick={calc_totals}\r\n                >\r\n                  Calc <Icon className={classes.rightIcon}>send</Icon>\r\n                </Button>\r\n              </Grid>\r\n              <Divider className={classes.divider} />\r\n            </form>\r\n          </CardLayout2>\r\n        </Grid>\r\n        <div>\r\n          <Grid container alignItems=\"center\" className={classes.grid}>\r\n            <Grid item xs={6} md={8} lg={6}>\r\n              <div>\r\n                <CardLayout\r\n                  title=\"Earnings\"\r\n                  handleClick={handleEarningsDialogOpen}\r\n                >\r\n                  <PayslipViewEarnings />\r\n                </CardLayout>\r\n              </div>\r\n            </Grid>\r\n            <Grid item xs={6} md={8} lg={6}>\r\n              <div>\r\n                <CardLayout\r\n                  title=\"Deductions\"\r\n                  handleClick={handleDeductionsDialogOpen}\r\n                >\r\n                  <PayslipViewDeductions />\r\n                </CardLayout>\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n        <Divider className={classes.divider} />\r\n        <CustomDialog\r\n          isOpen={isEarningsDialogOpen}\r\n          handleClose={handleEarningsDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <Payslip_Earnings\r\n            setEarningsdata={setEarningsdata}\r\n            earningsdata={earningsdata}\r\n            oldEarningsdata={oldEarningsdata}\r\n            handleDialogClose={handleEarningsDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isDeductionsDialogOpen}\r\n          handleClose={handleDeductionsDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <Payslip_Deductions\r\n            setDeductionsdata={setDeductionsdata}\r\n            deductionsdata={deductionsdata}\r\n            oldDeductionsdata={oldDeductionsdata}\r\n            handleDialogClose={handleDeductionsDialogClose}\r\n          />\r\n        </CustomDialog>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  divider: {\r\n    padding: 4,\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 350,\r\n  },\r\n  grid: {\r\n    padding: theme.spacing(3, 2),\r\n    // justifyContent: \"center\",\r\n  },\r\n  box: {\r\n    height: 100,\r\n    display: \"flex\",\r\n    border: \"1px solid black\",\r\n    padding: 8,\r\n  },\r\n}));\r\n\r\nexport default PayslipForm;\r\n","D:\\react-myprojects\\hrms-demo\\src\\pages\\LeavesBFTablePage.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\EmployeeTableLeaveBF.js",["1736","1737","1738","1739","1740","1741","1742","1743","1744","1745","1746","1747","1748","1749","1750","1751","1752","1753","1754","1755","1756","1757"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport getYear from \"date-fns/getYear\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Divider,\r\n  Heading,\r\n  Grid,\r\n  GridItem,\r\n  Radio,\r\n  RadioGroup,\r\n  HStack,\r\n  Select,\r\n  Tabs,\r\n  TabList,\r\n  TabPanels,\r\n  Tab,\r\n  TabPanel,\r\n  useRadioGroup,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\n//import AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\n//import DeleteIcon from \"@material-ui/icons/Delete\";\r\n//import CheckIcon from \"@material-ui/icons/Check\";\r\n//import SearchIcon from \"@material-ui/icons/Search\";\r\n//import LeaveForm from \"./LeaveForm\";\r\n//import { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { AlertDialog } from \"../helpers/AlertDialogBox\";\r\n//import { useExpensesPeriod } from \"./expenses/useExpensesPeriod\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\nimport { useUpdateEmployees } from \"./employees/useUpdateEmployees\";\r\nimport { useLeavesPeriod } from \"./leaves/useLeavesPeriod\";\r\nimport { usePeriods } from \"./periods/usePeriods\";\r\nimport { useUpdatePeriods } from \"./periods/useUpdatePeriods\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\n\r\nexport default function EmployeeTableLeaveBF() {\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n  const { employees, setEmployeeId } = useEmployees();\r\n  const { periods } = usePeriods();\r\n  const updatePeriods = useUpdatePeriods();\r\n  const updateEmployees = useUpdateEmployees();\r\n  const { leavesperiod, setLeavePeriodYrId } = useLeavesPeriod();\r\n  const [empdata, setEmpData] = useState([]);\r\n  const [toBuild, setToBuild] = useState(true);\r\n  const [selectleaveyear, setSelectLeaveYear] = useState(\"\");\r\n\r\n  const yearperiod = periods.filter((r) => r.status !== \"C\");\r\n  // console.log('yearperiod', yearperiod)\r\n  // const YEAR = \"2022\"\r\n\r\n  //console.log(\"empdata\", empdata);\r\n\r\n  const {\r\n    isOpen: isAlertOpen,\r\n    onOpen: onAlertOpen,\r\n    onClose: onAlertClose,\r\n  } = useDisclosure();\r\n\r\n  const {\r\n    //editEmployeeID,\r\n    //employees_loading,\r\n    //deleteEmployee,\r\n    //loadEmployees,\r\n    setEditEmployeeID,\r\n    setIsEditingOn,\r\n    //setIsEditingOff,\r\n    resetSingleEmployee,\r\n    resetEmployees,\r\n    //getSingleEmployee,\r\n  } = useEmployeesContext();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"name\",\r\n        cellStyle: {\r\n          width: 250,\r\n          maxWidth: 250,\r\n        },\r\n        editable: \"never\",\r\n      },\r\n      // { title: \"IC No\", field: \"ic_no\" },\r\n      // { title: \"Gender\", field: \"gender\" },\r\n      // { title: \"Emp No\", field: \"empno\" },\r\n      // { title: \"Designation\", field: \"designation\" },\r\n      // { title: \"Department\", field: \"department\" },\r\n      {\r\n        title: \"Last Year Leave Balance\",\r\n        field: \"leave_bal\",\r\n        type: \"numeric\",\r\n        cellStyle: {\r\n          width: 60,\r\n        },\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Leave Entitled\",\r\n        field: \"leave_entitled\",\r\n        type: \"numeric\",\r\n        cellStyle: {\r\n          width: 60,\r\n          backgroundColor: \"#e6e7e3\",\r\n        },\r\n      },\r\n      {\r\n        title: \"Leave B/F\",\r\n        field: \"newleave_bf\",\r\n        type: \"numeric\",\r\n        cellStyle: {\r\n          width: 60,\r\n          backgroundColor: \"#e6e7e3\",\r\n        },\r\n      },\r\n      {\r\n        title: \"Total Leave\",\r\n        field: \"newleaves_total\",\r\n        type: \"numeric\",\r\n        cellStyle: {\r\n          width: 60,\r\n          backgroundColor: \"#e6e7e3\",\r\n        },\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const Build_EmpData = (YEAR) => {\r\n    // eslint-disable-next-line no-lone-blocks\r\n    {\r\n      const emp = employees.map((rec) => {\r\n        return { ...rec, leave_total: 0, leave_taken: 0, leave_pending: 0 };\r\n      });\r\n      emp &&\r\n        emp.forEach((rec, index) => {\r\n          const {\r\n            id,\r\n            //name,\r\n            //icno,\r\n            //gender,\r\n            //designation,\r\n            //department,\r\n            //leave_entitled,\r\n            //leave_bf,\r\n            //leave_cd,\r\n          } = rec;\r\n          // calculate leaves\r\n\r\n          const leavesdata = leavesperiod.filter(\r\n            (r) => r.empid === id && getYear(new Date(r.from_date)) === YEAR\r\n          );\r\n\r\n          console.log(\"leavedata\", YEAR, leavesdata);\r\n          const leaveTaken = leavesdata.reduce((acc, item) => {\r\n            if (\r\n              item.status === \"Approved\" &&\r\n              item.leavetype === \"Annual Leave\"\r\n            ) {\r\n              return acc + item.no_of_days;\r\n            } else {\r\n              return acc;\r\n            }\r\n          }, 0);\r\n          const leavePending = leavesdata.reduce((acc, item) => {\r\n            if (item.status === \"Pending\") {\r\n              return acc + item.no_of_days;\r\n            } else {\r\n              return acc;\r\n            }\r\n          }, 0);\r\n          const leaveOthers = leavesdata.reduce((acc, item) => {\r\n            if (\r\n              item.status === \"Approved\" &&\r\n              item.leavetype !== \"Annual Leave\"\r\n            ) {\r\n              return acc + item.no_of_days;\r\n            } else {\r\n              return acc;\r\n            }\r\n          }, 0);\r\n          const leaveEntitled = isNaN(emp[index].leave_entitled)\r\n            ? 0\r\n            : emp[index].leave_entitled;\r\n          const leaveBf = isNaN(emp[index].leave_bf) ? 0 : emp[index].leave_bf;\r\n          //const leaveCd = isNaN(emp[index].leave_cd) ? 0 : emp[index].leave_cd;\r\n          const leaveCd = 0;\r\n          const leavebal = leaveEntitled + leaveBf - leaveCd - leaveTaken;\r\n          const newleavebf = leavebal > 5 ? 5 : leavebal;\r\n          const newtotalleaves = newleavebf + leaveEntitled;\r\n          emp[index].leave_entitled = leaveEntitled;\r\n          emp[index].leave_cd = leaveCd;\r\n          emp[index].leave_total = leaveEntitled + leaveBf;\r\n          emp[index].leave_taken = leaveTaken + leaveCd;\r\n          emp[index].leave_pending = leavePending;\r\n          emp[index].leave_others = leaveOthers;\r\n          emp[index].leave_bal = leavebal;\r\n\r\n          emp[index].newleave_bf = newleavebf;\r\n          emp[index].newleaves_total = newtotalleaves;\r\n          setEmpData(emp);\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleBuildEmpData = () => {\r\n    if (selectleaveyear === \"\") {\r\n      return null;\r\n    }\r\n    Build_EmpData(selectleaveyear);\r\n  };\r\n\r\n  const UpdateLeaveYear = (e) => {\r\n    setSelectLeaveYear((prev) => (prev = parseInt(e.target.value)));\r\n    //Calc_Leave()\r\n    //setIsLoad(true);\r\n  };\r\n\r\n  const UpdateEmpProfile = () => {\r\n    empdata.forEach((rec) => {\r\n      const { id, leave_entitled, newleave_bf, newleaves_total } = rec;\r\n      const olddata = employees\r\n        .filter((r) => r.id === id)\r\n        .map((rec) => {\r\n          return { ...rec };\r\n        });\r\n      const newdata = {\r\n        ...olddata[0],\r\n        leave_entitled: leave_entitled,\r\n        leave_bf: newleave_bf,\r\n        leave_bal: newleaves_total,\r\n      };\r\n      updateEmployees({ id: id, ...newdata });\r\n    });\r\n  };\r\n\r\n  const handleOnUpdateConfirm = () => {\r\n    UpdateEmpProfile()\r\n    //console.log(\"post\", selectleaveyear, typeof selectleaveyear, periods);\r\n\r\n    //update periods\r\n    const currperiod = periods.filter(\r\n      (r) => r.period === selectleaveyear.toString()\r\n    );\r\n    const updatedperiod = { ...currperiod[0], status: \"C\" };\r\n    const { id, rec_id, ...fields } = updatedperiod;\r\n    updatePeriods({ id: updatedperiod.id, ...fields });\r\n    setEmpData([]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLeavePeriodYrId(selectleaveyear);\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   console.log(\"leaveperiod\", leavesperiod);\r\n  //   Build_EmpData(YEAR);\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   setLeavePeriodYrId(YEAR);\r\n  //   console.log(\"leaveperiod\", leavesperiod)\r\n  //   if (leavesperiod.length > 0) {\r\n  //     Build_EmpData(YEAR);\r\n  //     setToBuild(false);\r\n  //   } else {\r\n  //     setToBuild(true);\r\n  //   }\r\n  // }, [toBuild]);\r\n\r\n  return (\r\n    <Container minW=\"container.lg\" minH={900}>\r\n      <Box py={2}>\r\n        <HStack>\r\n          <Heading size=\"md\">Leaves Balance Calculation B/F from Year </Heading>\r\n          <Select\r\n            value={selectleaveyear}\r\n            fontSize={20}\r\n            maxWidth={100}\r\n            onChange={(e) => UpdateLeaveYear(e)}\r\n          >\r\n            <option value=\"\">None</option>\r\n            {periods\r\n              .filter((r) => r.status !== \"C\")\r\n              .map((row) => {\r\n                return (\r\n                  <option key={row.period} value={row.period}>\r\n                    {row.period}\r\n                  </option>\r\n                );\r\n              })}\r\n          </Select>\r\n          <Button\r\n            colorScheme=\"teal\"\r\n            variant=\"solid\"\r\n            onClick={handleBuildEmpData}\r\n            disabled={selectleaveyear === \"\"}\r\n          >\r\n            Calc Leaves\r\n          </Button>\r\n          <Button\r\n            colorScheme=\"teal\"\r\n            variant=\"solid\"\r\n            onClick={onAlertOpen}\r\n            disabled={selectleaveyear === \"\"}\r\n          >\r\n            Update Employees Profile\r\n          </Button>\r\n        </HStack>\r\n      </Box>\r\n      <Box>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={empdata\r\n            .filter((r) => !r.hasresigned)\r\n            .sort((a, b) => (a.name > b.name ? 1 : b.name > a.name ? -1 : 0))}\r\n          title=\"Employee Leave Details\"\r\n          editable={{\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataUpdate = [...empdata];\r\n                  const index = oldData.tableData.id;\r\n                  dataUpdate[index] = newData;\r\n                  setEmpData([...dataUpdate]);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            search: true,\r\n            toolbar: false,\r\n            pageSize: 10,\r\n            headerStyle: {\r\n              backgroundColor: \"rgba(75, 192, 192, 1)\",\r\n              color: \"white\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </Box>\r\n      <AlertDialogBox\r\n        onClose={onAlertClose}\r\n        onConfirm={handleOnUpdateConfirm}\r\n        isOpen={isAlertOpen}\r\n        title=\"Update Employees Profile\"\r\n      >\r\n        <h2>Are you sure you want to update to Employee Profiles ?</h2>\r\n      </AlertDialogBox>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","D:\\react-myprojects\\hrms-demo\\src\\components\\periods\\usePeriods.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\periods\\utils.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\periods\\useUpdatePeriods.js",[],"D:\\react-myprojects\\hrms-demo\\src\\components\\hoc\\useHocAll.js",[],{"ruleId":"1758","replacedBy":"1759"},{"ruleId":"1760","replacedBy":"1761"},{"ruleId":"1762","severity":1,"message":"1763","line":13,"column":22,"nodeType":"1764","messageId":"1765","endLine":13,"endColumn":35},{"ruleId":"1758","replacedBy":"1759"},{"ruleId":"1760","replacedBy":"1761"},{"ruleId":"1762","severity":1,"message":"1766","line":5,"column":25,"nodeType":"1764","messageId":"1765","endLine":5,"endColumn":29},{"ruleId":"1762","severity":1,"message":"1767","line":29,"column":10,"nodeType":"1764","messageId":"1765","endLine":29,"endColumn":22},{"ruleId":"1762","severity":1,"message":"1768","line":61,"column":7,"nodeType":"1764","messageId":"1765","endLine":61,"endColumn":22},{"ruleId":"1762","severity":1,"message":"1769","line":80,"column":10,"nodeType":"1764","messageId":"1765","endLine":80,"endColumn":16},{"ruleId":"1762","severity":1,"message":"1770","line":45,"column":10,"nodeType":"1764","messageId":"1765","endLine":45,"endColumn":18},{"ruleId":"1762","severity":1,"message":"1763","line":43,"column":22,"nodeType":"1764","messageId":"1765","endLine":43,"endColumn":35},{"ruleId":"1762","severity":1,"message":"1771","line":31,"column":11,"nodeType":"1764","messageId":"1765","endLine":31,"endColumn":15},{"ruleId":"1762","severity":1,"message":"1772","line":94,"column":10,"nodeType":"1764","messageId":"1765","endLine":94,"endColumn":18},{"ruleId":"1773","severity":1,"message":"1774","line":123,"column":6,"nodeType":"1775","endLine":123,"endColumn":20,"suggestions":"1776"},{"ruleId":"1773","severity":1,"message":"1777","line":413,"column":6,"nodeType":"1775","endLine":413,"endColumn":8,"suggestions":"1778"},{"ruleId":"1762","severity":1,"message":"1779","line":8,"column":10,"nodeType":"1764","messageId":"1765","endLine":8,"endColumn":13},{"ruleId":"1762","severity":1,"message":"1780","line":42,"column":10,"nodeType":"1764","messageId":"1765","endLine":42,"endColumn":14},{"ruleId":"1762","severity":1,"message":"1781","line":76,"column":9,"nodeType":"1764","messageId":"1765","endLine":76,"endColumn":16},{"ruleId":"1773","severity":1,"message":"1782","line":76,"column":19,"nodeType":"1764","endLine":76,"endColumn":26},{"ruleId":"1762","severity":1,"message":"1783","line":1,"column":27,"nodeType":"1764","messageId":"1765","endLine":1,"endColumn":36},{"ruleId":"1762","severity":1,"message":"1784","line":5,"column":10,"nodeType":"1764","messageId":"1765","endLine":5,"endColumn":23},{"ruleId":"1762","severity":1,"message":"1785","line":55,"column":10,"nodeType":"1764","messageId":"1765","endLine":55,"endColumn":20},{"ruleId":"1762","severity":1,"message":"1786","line":57,"column":10,"nodeType":"1764","messageId":"1765","endLine":57,"endColumn":22},{"ruleId":"1762","severity":1,"message":"1787","line":64,"column":30,"nodeType":"1764","messageId":"1765","endLine":64,"endColumn":52},{"ruleId":"1762","severity":1,"message":"1788","line":182,"column":10,"nodeType":"1764","messageId":"1765","endLine":182,"endColumn":22},{"ruleId":"1773","severity":1,"message":"1789","line":216,"column":6,"nodeType":"1775","endLine":216,"endColumn":8,"suggestions":"1790"},{"ruleId":"1773","severity":1,"message":"1791","line":231,"column":6,"nodeType":"1775","endLine":231,"endColumn":19,"suggestions":"1792"},{"ruleId":"1773","severity":1,"message":"1793","line":236,"column":6,"nodeType":"1775","endLine":236,"endColumn":14,"suggestions":"1794"},{"ruleId":"1773","severity":1,"message":"1795","line":241,"column":6,"nodeType":"1775","endLine":241,"endColumn":20,"suggestions":"1796"},{"ruleId":"1762","severity":1,"message":"1797","line":261,"column":9,"nodeType":"1764","messageId":"1765","endLine":261,"endColumn":14},{"ruleId":"1773","severity":1,"message":"1798","line":22,"column":6,"nodeType":"1775","endLine":22,"endColumn":8,"suggestions":"1799"},{"ruleId":"1762","severity":1,"message":"1800","line":12,"column":8,"nodeType":"1764","messageId":"1765","endLine":12,"endColumn":16},{"ruleId":"1762","severity":1,"message":"1801","line":1,"column":17,"nodeType":"1764","messageId":"1765","endLine":1,"endColumn":25},{"ruleId":"1762","severity":1,"message":"1802","line":20,"column":10,"nodeType":"1764","messageId":"1765","endLine":20,"endColumn":34},{"ruleId":"1762","severity":1,"message":"1803","line":33,"column":11,"nodeType":"1764","messageId":"1765","endLine":33,"endColumn":22},{"ruleId":"1762","severity":1,"message":"1804","line":33,"column":24,"nodeType":"1764","messageId":"1765","endLine":33,"endColumn":37},{"ruleId":"1805","severity":1,"message":"1806","line":38,"column":7,"nodeType":"1764","messageId":"1807","endLine":38,"endColumn":31},{"ruleId":"1773","severity":1,"message":"1808","line":109,"column":6,"nodeType":"1775","endLine":109,"endColumn":35,"suggestions":"1809"},{"ruleId":"1762","severity":1,"message":"1810","line":31,"column":8,"nodeType":"1764","messageId":"1765","endLine":31,"endColumn":21},{"ruleId":"1762","severity":1,"message":"1811","line":70,"column":22,"nodeType":"1764","messageId":"1765","endLine":70,"endColumn":35},{"ruleId":"1762","severity":1,"message":"1812","line":74,"column":10,"nodeType":"1764","messageId":"1765","endLine":74,"endColumn":21},{"ruleId":"1762","severity":1,"message":"1813","line":75,"column":34,"nodeType":"1764","messageId":"1765","endLine":75,"endColumn":42},{"ruleId":"1762","severity":1,"message":"1814","line":75,"column":44,"nodeType":"1764","messageId":"1765","endLine":75,"endColumn":52},{"ruleId":"1762","severity":1,"message":"1763","line":76,"column":22,"nodeType":"1764","messageId":"1765","endLine":76,"endColumn":35},{"ruleId":"1762","severity":1,"message":"1815","line":123,"column":9,"nodeType":"1764","messageId":"1765","endLine":123,"endColumn":26},{"ruleId":"1773","severity":1,"message":"1816","line":172,"column":6,"nodeType":"1775","endLine":172,"endColumn":8,"suggestions":"1817"},{"ruleId":"1762","severity":1,"message":"1818","line":2,"column":35,"nodeType":"1764","messageId":"1765","endLine":2,"endColumn":40},{"ruleId":"1762","severity":1,"message":"1819","line":10,"column":31,"nodeType":"1764","messageId":"1765","endLine":10,"endColumn":38},{"ruleId":"1762","severity":1,"message":"1820","line":21,"column":10,"nodeType":"1764","messageId":"1765","endLine":21,"endColumn":37},{"ruleId":"1762","severity":1,"message":"1821","line":29,"column":7,"nodeType":"1764","messageId":"1765","endLine":29,"endColumn":18},{"ruleId":"1762","severity":1,"message":"1822","line":49,"column":9,"nodeType":"1764","messageId":"1765","endLine":49,"endColumn":20},{"ruleId":"1762","severity":1,"message":"1763","line":53,"column":22,"nodeType":"1764","messageId":"1765","endLine":53,"endColumn":35},{"ruleId":"1762","severity":1,"message":"1823","line":56,"column":10,"nodeType":"1764","messageId":"1765","endLine":56,"endColumn":18},{"ruleId":"1762","severity":1,"message":"1824","line":57,"column":10,"nodeType":"1764","messageId":"1765","endLine":57,"endColumn":17},{"ruleId":"1762","severity":1,"message":"1825","line":58,"column":10,"nodeType":"1764","messageId":"1765","endLine":58,"endColumn":22},{"ruleId":"1762","severity":1,"message":"1813","line":60,"column":34,"nodeType":"1764","messageId":"1765","endLine":60,"endColumn":42},{"ruleId":"1762","severity":1,"message":"1826","line":113,"column":9,"nodeType":"1764","messageId":"1765","endLine":113,"endColumn":15},{"ruleId":"1762","severity":1,"message":"1827","line":139,"column":9,"nodeType":"1764","messageId":"1765","endLine":139,"endColumn":24},{"ruleId":"1773","severity":1,"message":"1828","line":252,"column":6,"nodeType":"1775","endLine":252,"endColumn":27,"suggestions":"1829"},{"ruleId":"1773","severity":1,"message":"1830","line":46,"column":6,"nodeType":"1775","endLine":46,"endColumn":8,"suggestions":"1831"},{"ruleId":"1762","severity":1,"message":"1801","line":1,"column":17,"nodeType":"1764","messageId":"1765","endLine":1,"endColumn":25},{"ruleId":"1762","severity":1,"message":"1783","line":1,"column":27,"nodeType":"1764","messageId":"1765","endLine":1,"endColumn":36},{"ruleId":"1762","severity":1,"message":"1832","line":52,"column":24,"nodeType":"1764","messageId":"1765","endLine":52,"endColumn":34},{"ruleId":"1762","severity":1,"message":"1763","line":54,"column":22,"nodeType":"1764","messageId":"1765","endLine":54,"endColumn":35},{"ruleId":"1762","severity":1,"message":"1833","line":38,"column":24,"nodeType":"1764","messageId":"1765","endLine":38,"endColumn":39},{"ruleId":"1762","severity":1,"message":"1763","line":65,"column":22,"nodeType":"1764","messageId":"1765","endLine":65,"endColumn":35},{"ruleId":"1762","severity":1,"message":"1834","line":73,"column":22,"nodeType":"1764","messageId":"1765","endLine":73,"endColumn":35},{"ruleId":"1762","severity":1,"message":"1835","line":78,"column":18,"nodeType":"1764","messageId":"1765","endLine":78,"endColumn":27},{"ruleId":"1773","severity":1,"message":"1808","line":162,"column":6,"nodeType":"1775","endLine":162,"endColumn":35,"suggestions":"1836"},{"ruleId":"1762","severity":1,"message":"1837","line":17,"column":31,"nodeType":"1764","messageId":"1765","endLine":17,"endColumn":39},{"ruleId":"1762","severity":1,"message":"1838","line":97,"column":5,"nodeType":"1764","messageId":"1765","endLine":97,"endColumn":13},{"ruleId":"1762","severity":1,"message":"1839","line":98,"column":5,"nodeType":"1764","messageId":"1765","endLine":98,"endColumn":13},{"ruleId":"1762","severity":1,"message":"1770","line":100,"column":5,"nodeType":"1764","messageId":"1765","endLine":100,"endColumn":13},{"ruleId":"1762","severity":1,"message":"1840","line":112,"column":5,"nodeType":"1764","messageId":"1765","endLine":112,"endColumn":20},{"ruleId":"1762","severity":1,"message":"1763","line":124,"column":22,"nodeType":"1764","messageId":"1765","endLine":124,"endColumn":35},{"ruleId":"1762","severity":1,"message":"1841","line":53,"column":10,"nodeType":"1764","messageId":"1765","endLine":53,"endColumn":23},{"ruleId":"1762","severity":1,"message":"1842","line":54,"column":10,"nodeType":"1764","messageId":"1765","endLine":54,"endColumn":22},{"ruleId":"1762","severity":1,"message":"1843","line":57,"column":17,"nodeType":"1764","messageId":"1765","endLine":57,"endColumn":25},{"ruleId":"1773","severity":1,"message":"1844","line":76,"column":6,"nodeType":"1775","endLine":76,"endColumn":21,"suggestions":"1845"},{"ruleId":"1762","severity":1,"message":"1846","line":11,"column":3,"nodeType":"1764","messageId":"1765","endLine":11,"endColumn":7},{"ruleId":"1762","severity":1,"message":"1847","line":12,"column":3,"nodeType":"1764","messageId":"1765","endLine":12,"endColumn":11},{"ruleId":"1762","severity":1,"message":"1848","line":13,"column":3,"nodeType":"1764","messageId":"1765","endLine":13,"endColumn":8},{"ruleId":"1762","severity":1,"message":"1849","line":14,"column":3,"nodeType":"1764","messageId":"1765","endLine":14,"endColumn":13},{"ruleId":"1762","severity":1,"message":"1850","line":54,"column":9,"nodeType":"1764","messageId":"1765","endLine":54,"endColumn":16},{"ruleId":"1762","severity":1,"message":"1851","line":63,"column":19,"nodeType":"1764","messageId":"1765","endLine":63,"endColumn":30},{"ruleId":"1773","severity":1,"message":"1852","line":252,"column":6,"nodeType":"1775","endLine":252,"endColumn":23,"suggestions":"1853"},{"ruleId":"1773","severity":1,"message":"1854","line":256,"column":6,"nodeType":"1775","endLine":256,"endColumn":22,"suggestions":"1855"},{"ruleId":"1762","severity":1,"message":"1856","line":19,"column":8,"nodeType":"1764","messageId":"1765","endLine":19,"endColumn":20},{"ruleId":"1762","severity":1,"message":"1857","line":15,"column":10,"nodeType":"1764","messageId":"1765","endLine":15,"endColumn":24},{"ruleId":"1762","severity":1,"message":"1858","line":16,"column":10,"nodeType":"1764","messageId":"1765","endLine":16,"endColumn":25},{"ruleId":"1762","severity":1,"message":"1859","line":49,"column":23,"nodeType":"1764","messageId":"1765","endLine":49,"endColumn":29},{"ruleId":"1762","severity":1,"message":"1860","line":49,"column":31,"nodeType":"1764","messageId":"1765","endLine":49,"endColumn":40},{"ruleId":"1773","severity":1,"message":"1861","line":102,"column":6,"nodeType":"1775","endLine":102,"endColumn":8,"suggestions":"1862"},{"ruleId":"1773","severity":1,"message":"1863","line":71,"column":5,"nodeType":"1775","endLine":71,"endColumn":7,"suggestions":"1864"},{"ruleId":"1773","severity":1,"message":"1865","line":76,"column":6,"nodeType":"1775","endLine":76,"endColumn":8,"suggestions":"1866"},{"ruleId":"1762","severity":1,"message":"1801","line":1,"column":26,"nodeType":"1764","messageId":"1765","endLine":1,"endColumn":34},{"ruleId":"1762","severity":1,"message":"1846","line":10,"column":3,"nodeType":"1764","messageId":"1765","endLine":10,"endColumn":7},{"ruleId":"1762","severity":1,"message":"1847","line":11,"column":3,"nodeType":"1764","messageId":"1765","endLine":11,"endColumn":11},{"ruleId":"1762","severity":1,"message":"1867","line":62,"column":7,"nodeType":"1764","messageId":"1765","endLine":62,"endColumn":12},{"ruleId":"1762","severity":1,"message":"1868","line":74,"column":7,"nodeType":"1764","messageId":"1765","endLine":74,"endColumn":17},{"ruleId":"1762","severity":1,"message":"1869","line":80,"column":7,"nodeType":"1764","messageId":"1765","endLine":80,"endColumn":10},{"ruleId":"1762","severity":1,"message":"1870","line":126,"column":11,"nodeType":"1764","messageId":"1765","endLine":126,"endColumn":19},{"ruleId":"1762","severity":1,"message":"1871","line":128,"column":11,"nodeType":"1764","messageId":"1765","endLine":128,"endColumn":15},{"ruleId":"1762","severity":1,"message":"1872","line":145,"column":9,"nodeType":"1764","messageId":"1765","endLine":145,"endColumn":15},{"ruleId":"1873","severity":1,"message":"1874","line":146,"column":29,"nodeType":"1875","messageId":"1876","endLine":146,"endColumn":31},{"ruleId":"1762","severity":1,"message":"1783","line":1,"column":26,"nodeType":"1764","messageId":"1765","endLine":1,"endColumn":35},{"ruleId":"1762","severity":1,"message":"1832","line":11,"column":24,"nodeType":"1764","messageId":"1765","endLine":11,"endColumn":34},{"ruleId":"1762","severity":1,"message":"1877","line":6,"column":7,"nodeType":"1764","messageId":"1765","endLine":6,"endColumn":11},{"ruleId":"1762","severity":1,"message":"1871","line":8,"column":7,"nodeType":"1764","messageId":"1765","endLine":8,"endColumn":11},{"ruleId":"1773","severity":1,"message":"1878","line":47,"column":5,"nodeType":"1775","endLine":47,"endColumn":11,"suggestions":"1879"},{"ruleId":"1773","severity":1,"message":"1880","line":41,"column":6,"nodeType":"1775","endLine":41,"endColumn":8,"suggestions":"1881"},{"ruleId":"1773","severity":1,"message":"1880","line":43,"column":6,"nodeType":"1775","endLine":43,"endColumn":8,"suggestions":"1882"},{"ruleId":"1773","severity":1,"message":"1883","line":67,"column":5,"nodeType":"1775","endLine":67,"endColumn":7,"suggestions":"1884"},{"ruleId":"1773","severity":1,"message":"1885","line":71,"column":6,"nodeType":"1775","endLine":71,"endColumn":8,"suggestions":"1886"},{"ruleId":"1773","severity":1,"message":"1887","line":55,"column":6,"nodeType":"1775","endLine":55,"endColumn":8,"suggestions":"1888"},{"ruleId":"1773","severity":1,"message":"1889","line":51,"column":6,"nodeType":"1775","endLine":51,"endColumn":8,"suggestions":"1890"},{"ruleId":"1762","severity":1,"message":"1891","line":28,"column":7,"nodeType":"1764","messageId":"1765","endLine":28,"endColumn":11},{"ruleId":"1762","severity":1,"message":"1763","line":39,"column":22,"nodeType":"1764","messageId":"1765","endLine":39,"endColumn":35},{"ruleId":"1762","severity":1,"message":"1843","line":42,"column":17,"nodeType":"1764","messageId":"1765","endLine":42,"endColumn":25},{"ruleId":"1773","severity":1,"message":"1892","line":60,"column":6,"nodeType":"1775","endLine":60,"endColumn":8,"suggestions":"1893"},{"ruleId":"1762","severity":1,"message":"1801","line":1,"column":17,"nodeType":"1764","messageId":"1765","endLine":1,"endColumn":25},{"ruleId":"1762","severity":1,"message":"1763","line":23,"column":22,"nodeType":"1764","messageId":"1765","endLine":23,"endColumn":35},{"ruleId":"1773","severity":1,"message":"1894","line":102,"column":5,"nodeType":"1775","endLine":102,"endColumn":7,"suggestions":"1895"},{"ruleId":"1773","severity":1,"message":"1896","line":107,"column":6,"nodeType":"1775","endLine":107,"endColumn":8,"suggestions":"1897"},{"ruleId":"1762","severity":1,"message":"1898","line":6,"column":10,"nodeType":"1764","messageId":"1765","endLine":6,"endColumn":26},{"ruleId":"1773","severity":1,"message":"1899","line":66,"column":6,"nodeType":"1775","endLine":66,"endColumn":8,"suggestions":"1900"},{"ruleId":"1762","severity":1,"message":"1901","line":14,"column":9,"nodeType":"1764","messageId":"1765","endLine":14,"endColumn":14},{"ruleId":"1773","severity":1,"message":"1902","line":72,"column":6,"nodeType":"1775","endLine":72,"endColumn":8,"suggestions":"1903"},{"ruleId":"1762","severity":1,"message":"1801","line":1,"column":17,"nodeType":"1764","messageId":"1765","endLine":1,"endColumn":25},{"ruleId":"1773","severity":1,"message":"1904","line":83,"column":6,"nodeType":"1775","endLine":83,"endColumn":8,"suggestions":"1905"},{"ruleId":"1762","severity":1,"message":"1906","line":43,"column":10,"nodeType":"1764","messageId":"1765","endLine":43,"endColumn":18},{"ruleId":"1762","severity":1,"message":"1788","line":44,"column":10,"nodeType":"1764","messageId":"1765","endLine":44,"endColumn":22},{"ruleId":"1773","severity":1,"message":"1907","line":104,"column":6,"nodeType":"1775","endLine":104,"endColumn":8,"suggestions":"1908"},{"ruleId":"1762","severity":1,"message":"1763","line":32,"column":22,"nodeType":"1764","messageId":"1765","endLine":32,"endColumn":35},{"ruleId":"1773","severity":1,"message":"1909","line":110,"column":6,"nodeType":"1775","endLine":110,"endColumn":14,"suggestions":"1910"},{"ruleId":"1762","severity":1,"message":"1860","line":39,"column":21,"nodeType":"1764","messageId":"1765","endLine":39,"endColumn":30},{"ruleId":"1762","severity":1,"message":"1763","line":51,"column":22,"nodeType":"1764","messageId":"1765","endLine":51,"endColumn":35},{"ruleId":"1773","severity":1,"message":"1911","line":103,"column":6,"nodeType":"1775","endLine":103,"endColumn":8,"suggestions":"1912"},{"ruleId":"1762","severity":1,"message":"1832","line":33,"column":19,"nodeType":"1764","messageId":"1765","endLine":33,"endColumn":29},{"ruleId":"1762","severity":1,"message":"1763","line":85,"column":22,"nodeType":"1764","messageId":"1765","endLine":85,"endColumn":35},{"ruleId":"1773","severity":1,"message":"1913","line":171,"column":6,"nodeType":"1775","endLine":171,"endColumn":8,"suggestions":"1914"},{"ruleId":"1773","severity":1,"message":"1915","line":177,"column":6,"nodeType":"1775","endLine":177,"endColumn":14,"suggestions":"1916"},{"ruleId":"1773","severity":1,"message":"1917","line":183,"column":6,"nodeType":"1775","endLine":183,"endColumn":30,"suggestions":"1918"},{"ruleId":"1773","severity":1,"message":"1919","line":183,"column":7,"nodeType":"1920","endLine":183,"endColumn":29},{"ruleId":"1773","severity":1,"message":"1921","line":86,"column":6,"nodeType":"1775","endLine":86,"endColumn":8,"suggestions":"1922"},{"ruleId":"1762","severity":1,"message":"1923","line":3,"column":18,"nodeType":"1764","messageId":"1765","endLine":3,"endColumn":25},{"ruleId":"1762","severity":1,"message":"1924","line":4,"column":13,"nodeType":"1764","messageId":"1765","endLine":4,"endColumn":19},{"ruleId":"1762","severity":1,"message":"1779","line":8,"column":3,"nodeType":"1764","messageId":"1765","endLine":8,"endColumn":6},{"ruleId":"1762","severity":1,"message":"1925","line":9,"column":3,"nodeType":"1764","messageId":"1765","endLine":9,"endColumn":9},{"ruleId":"1762","severity":1,"message":"1926","line":10,"column":3,"nodeType":"1764","messageId":"1765","endLine":10,"endColumn":12},{"ruleId":"1762","severity":1,"message":"1927","line":11,"column":3,"nodeType":"1764","messageId":"1765","endLine":11,"endColumn":10},{"ruleId":"1762","severity":1,"message":"1819","line":13,"column":3,"nodeType":"1764","messageId":"1765","endLine":13,"endColumn":10},{"ruleId":"1762","severity":1,"message":"1928","line":14,"column":3,"nodeType":"1764","messageId":"1765","endLine":14,"endColumn":9},{"ruleId":"1762","severity":1,"message":"1929","line":15,"column":3,"nodeType":"1764","messageId":"1765","endLine":15,"endColumn":8},{"ruleId":"1762","severity":1,"message":"1930","line":16,"column":3,"nodeType":"1764","messageId":"1765","endLine":16,"endColumn":15},{"ruleId":"1762","severity":1,"message":"1931","line":17,"column":3,"nodeType":"1764","messageId":"1765","endLine":17,"endColumn":15},{"ruleId":"1762","severity":1,"message":"1932","line":20,"column":3,"nodeType":"1764","messageId":"1765","endLine":20,"endColumn":12},{"ruleId":"1762","severity":1,"message":"1933","line":21,"column":3,"nodeType":"1764","messageId":"1765","endLine":21,"endColumn":19},{"ruleId":"1762","severity":1,"message":"1934","line":22,"column":3,"nodeType":"1764","messageId":"1765","endLine":22,"endColumn":9},{"ruleId":"1762","severity":1,"message":"1935","line":23,"column":3,"nodeType":"1764","messageId":"1765","endLine":23,"endColumn":13},{"ruleId":"1762","severity":1,"message":"1936","line":24,"column":3,"nodeType":"1764","messageId":"1765","endLine":24,"endColumn":7},{"ruleId":"1762","severity":1,"message":"1937","line":25,"column":3,"nodeType":"1764","messageId":"1765","endLine":25,"endColumn":10},{"ruleId":"1762","severity":1,"message":"1938","line":26,"column":3,"nodeType":"1764","messageId":"1765","endLine":26,"endColumn":12},{"ruleId":"1762","severity":1,"message":"1939","line":27,"column":3,"nodeType":"1764","messageId":"1765","endLine":27,"endColumn":6},{"ruleId":"1762","severity":1,"message":"1940","line":28,"column":3,"nodeType":"1764","messageId":"1765","endLine":28,"endColumn":11},{"ruleId":"1762","severity":1,"message":"1784","line":30,"column":3,"nodeType":"1764","messageId":"1765","endLine":30,"endColumn":16},{"ruleId":"1762","severity":1,"message":"1763","line":81,"column":22,"nodeType":"1764","messageId":"1765","endLine":81,"endColumn":35},{"ruleId":"1773","severity":1,"message":"1941","line":194,"column":6,"nodeType":"1775","endLine":194,"endColumn":8,"suggestions":"1942"},{"ruleId":"1762","severity":1,"message":"1925","line":4,"column":3,"nodeType":"1764","messageId":"1765","endLine":4,"endColumn":9},{"ruleId":"1762","severity":1,"message":"1926","line":5,"column":3,"nodeType":"1764","messageId":"1765","endLine":5,"endColumn":12},{"ruleId":"1762","severity":1,"message":"1929","line":10,"column":3,"nodeType":"1764","messageId":"1765","endLine":10,"endColumn":8},{"ruleId":"1762","severity":1,"message":"1930","line":11,"column":3,"nodeType":"1764","messageId":"1765","endLine":11,"endColumn":15},{"ruleId":"1762","severity":1,"message":"1931","line":12,"column":3,"nodeType":"1764","messageId":"1765","endLine":12,"endColumn":15},{"ruleId":"1762","severity":1,"message":"1932","line":15,"column":3,"nodeType":"1764","messageId":"1765","endLine":15,"endColumn":12},{"ruleId":"1762","severity":1,"message":"1933","line":16,"column":3,"nodeType":"1764","messageId":"1765","endLine":16,"endColumn":19},{"ruleId":"1762","severity":1,"message":"1935","line":18,"column":3,"nodeType":"1764","messageId":"1765","endLine":18,"endColumn":13},{"ruleId":"1762","severity":1,"message":"1784","line":25,"column":3,"nodeType":"1764","messageId":"1765","endLine":25,"endColumn":16},{"ruleId":"1773","severity":1,"message":"1913","line":39,"column":6,"nodeType":"1775","endLine":39,"endColumn":8,"suggestions":"1943"},{"ruleId":"1762","severity":1,"message":"1944","line":61,"column":7,"nodeType":"1764","messageId":"1765","endLine":61,"endColumn":25},{"ruleId":"1762","severity":1,"message":"1945","line":67,"column":7,"nodeType":"1764","messageId":"1765","endLine":67,"endColumn":22},{"ruleId":"1762","severity":1,"message":"1850","line":85,"column":9,"nodeType":"1764","messageId":"1765","endLine":85,"endColumn":16},{"ruleId":"1762","severity":1,"message":"1946","line":92,"column":11,"nodeType":"1764","messageId":"1765","endLine":92,"endColumn":28},{"ruleId":"1773","severity":1,"message":"1913","line":117,"column":7,"nodeType":"1775","endLine":117,"endColumn":9,"suggestions":"1947"},{"ruleId":"1762","severity":1,"message":"1948","line":47,"column":11,"nodeType":"1764","messageId":"1765","endLine":47,"endColumn":23},{"ruleId":"1773","severity":1,"message":"1949","line":111,"column":6,"nodeType":"1775","endLine":111,"endColumn":8,"suggestions":"1950"},{"ruleId":"1762","severity":1,"message":"1946","line":97,"column":10,"nodeType":"1764","messageId":"1765","endLine":97,"endColumn":27},{"ruleId":"1762","severity":1,"message":"1859","line":103,"column":16,"nodeType":"1764","messageId":"1765","endLine":103,"endColumn":22},{"ruleId":"1762","severity":1,"message":"1860","line":103,"column":24,"nodeType":"1764","messageId":"1765","endLine":103,"endColumn":33},{"ruleId":"1762","severity":1,"message":"1951","line":103,"column":35,"nodeType":"1764","messageId":"1765","endLine":103,"endColumn":43},{"ruleId":"1773","severity":1,"message":"1913","line":131,"column":6,"nodeType":"1775","endLine":131,"endColumn":8,"suggestions":"1952"},{"ruleId":"1762","severity":1,"message":"1945","line":80,"column":7,"nodeType":"1764","messageId":"1765","endLine":80,"endColumn":22},{"ruleId":"1762","severity":1,"message":"1850","line":124,"column":9,"nodeType":"1764","messageId":"1765","endLine":124,"endColumn":16},{"ruleId":"1762","severity":1,"message":"1946","line":131,"column":10,"nodeType":"1764","messageId":"1765","endLine":131,"endColumn":27},{"ruleId":"1762","severity":1,"message":"1859","line":138,"column":16,"nodeType":"1764","messageId":"1765","endLine":138,"endColumn":22},{"ruleId":"1762","severity":1,"message":"1860","line":138,"column":24,"nodeType":"1764","messageId":"1765","endLine":138,"endColumn":33},{"ruleId":"1762","severity":1,"message":"1951","line":138,"column":35,"nodeType":"1764","messageId":"1765","endLine":138,"endColumn":43},{"ruleId":"1762","severity":1,"message":"1953","line":182,"column":9,"nodeType":"1764","messageId":"1765","endLine":182,"endColumn":29},{"ruleId":"1773","severity":1,"message":"1913","line":192,"column":6,"nodeType":"1775","endLine":192,"endColumn":8,"suggestions":"1954"},{"ruleId":"1762","severity":1,"message":"1859","line":101,"column":16,"nodeType":"1764","messageId":"1765","endLine":101,"endColumn":22},{"ruleId":"1762","severity":1,"message":"1860","line":101,"column":24,"nodeType":"1764","messageId":"1765","endLine":101,"endColumn":33},{"ruleId":"1762","severity":1,"message":"1951","line":101,"column":35,"nodeType":"1764","messageId":"1765","endLine":101,"endColumn":43},{"ruleId":"1773","severity":1,"message":"1913","line":169,"column":6,"nodeType":"1775","endLine":169,"endColumn":8,"suggestions":"1955"},{"ruleId":"1762","severity":1,"message":"1956","line":84,"column":10,"nodeType":"1764","messageId":"1765","endLine":84,"endColumn":22},{"ruleId":"1762","severity":1,"message":"1957","line":84,"column":24,"nodeType":"1764","messageId":"1765","endLine":84,"endColumn":39},{"ruleId":"1762","severity":1,"message":"1958","line":85,"column":10,"nodeType":"1764","messageId":"1765","endLine":85,"endColumn":29},{"ruleId":"1762","severity":1,"message":"1959","line":128,"column":9,"nodeType":"1764","messageId":"1765","endLine":128,"endColumn":33},{"ruleId":"1773","severity":1,"message":"1913","line":147,"column":6,"nodeType":"1775","endLine":147,"endColumn":8,"suggestions":"1960"},{"ruleId":"1773","severity":1,"message":"1961","line":240,"column":6,"nodeType":"1775","endLine":240,"endColumn":14,"suggestions":"1962"},{"ruleId":"1762","severity":1,"message":"1801","line":1,"column":17,"nodeType":"1764","messageId":"1765","endLine":1,"endColumn":25},{"ruleId":"1762","severity":1,"message":"1783","line":1,"column":27,"nodeType":"1764","messageId":"1765","endLine":1,"endColumn":36},{"ruleId":"1762","severity":1,"message":"1963","line":28,"column":7,"nodeType":"1764","messageId":"1765","endLine":28,"endColumn":19},{"ruleId":"1762","severity":1,"message":"1787","line":38,"column":30,"nodeType":"1764","messageId":"1765","endLine":38,"endColumn":52},{"ruleId":"1762","severity":1,"message":"1925","line":3,"column":3,"nodeType":"1764","messageId":"1765","endLine":3,"endColumn":9},{"ruleId":"1762","severity":1,"message":"1964","line":7,"column":3,"nodeType":"1764","messageId":"1765","endLine":7,"endColumn":7},{"ruleId":"1773","severity":1,"message":"1965","line":121,"column":6,"nodeType":"1775","endLine":121,"endColumn":20,"suggestions":"1966"},{"ruleId":"1773","severity":1,"message":"1967","line":128,"column":6,"nodeType":"1775","endLine":128,"endColumn":14,"suggestions":"1968"},{"ruleId":"1762","severity":1,"message":"1969","line":37,"column":5,"nodeType":"1764","messageId":"1765","endLine":37,"endColumn":18},{"ruleId":"1762","severity":1,"message":"1970","line":43,"column":5,"nodeType":"1764","messageId":"1765","endLine":43,"endColumn":27},{"ruleId":"1762","severity":1,"message":"1858","line":11,"column":10,"nodeType":"1764","messageId":"1765","endLine":11,"endColumn":25},{"ruleId":"1762","severity":1,"message":"1971","line":12,"column":8,"nodeType":"1764","messageId":"1765","endLine":12,"endColumn":29},{"ruleId":"1773","severity":1,"message":"1972","line":100,"column":6,"nodeType":"1775","endLine":100,"endColumn":8,"suggestions":"1973"},{"ruleId":"1762","severity":1,"message":"1783","line":1,"column":27,"nodeType":"1764","messageId":"1765","endLine":1,"endColumn":36},{"ruleId":"1762","severity":1,"message":"1783","line":1,"column":26,"nodeType":"1764","messageId":"1765","endLine":1,"endColumn":35},{"ruleId":"1762","severity":1,"message":"1974","line":7,"column":10,"nodeType":"1764","messageId":"1765","endLine":7,"endColumn":26},{"ruleId":"1762","severity":1,"message":"1963","line":11,"column":7,"nodeType":"1764","messageId":"1765","endLine":11,"endColumn":19},{"ruleId":"1762","severity":1,"message":"1975","line":18,"column":10,"nodeType":"1764","messageId":"1765","endLine":18,"endColumn":20},{"ruleId":"1762","severity":1,"message":"1763","line":18,"column":22,"nodeType":"1764","messageId":"1765","endLine":18,"endColumn":35},{"ruleId":"1762","severity":1,"message":"1975","line":34,"column":10,"nodeType":"1764","messageId":"1765","endLine":34,"endColumn":20},{"ruleId":"1762","severity":1,"message":"1763","line":34,"column":22,"nodeType":"1764","messageId":"1765","endLine":34,"endColumn":35},{"ruleId":"1762","severity":1,"message":"1810","line":33,"column":8,"nodeType":"1764","messageId":"1765","endLine":33,"endColumn":21},{"ruleId":"1762","severity":1,"message":"1976","line":72,"column":22,"nodeType":"1764","messageId":"1765","endLine":72,"endColumn":32},{"ruleId":"1762","severity":1,"message":"1811","line":72,"column":34,"nodeType":"1764","messageId":"1765","endLine":72,"endColumn":47},{"ruleId":"1762","severity":1,"message":"1813","line":84,"column":34,"nodeType":"1764","messageId":"1765","endLine":84,"endColumn":42},{"ruleId":"1762","severity":1,"message":"1814","line":84,"column":44,"nodeType":"1764","messageId":"1765","endLine":84,"endColumn":52},{"ruleId":"1762","severity":1,"message":"1763","line":85,"column":22,"nodeType":"1764","messageId":"1765","endLine":85,"endColumn":35},{"ruleId":"1762","severity":1,"message":"1977","line":97,"column":5,"nodeType":"1764","messageId":"1765","endLine":97,"endColumn":8},{"ruleId":"1762","severity":1,"message":"1978","line":101,"column":5,"nodeType":"1764","messageId":"1765","endLine":101,"endColumn":14},{"ruleId":"1773","severity":1,"message":"1979","line":165,"column":6,"nodeType":"1775","endLine":165,"endColumn":8,"suggestions":"1980"},{"ruleId":"1762","severity":1,"message":"1925","line":5,"column":3,"nodeType":"1764","messageId":"1765","endLine":5,"endColumn":9},{"ruleId":"1762","severity":1,"message":"1981","line":8,"column":3,"nodeType":"1764","messageId":"1765","endLine":8,"endColumn":11},{"ruleId":"1762","severity":1,"message":"1982","line":91,"column":9,"nodeType":"1764","messageId":"1765","endLine":91,"endColumn":20},{"ruleId":"1773","severity":1,"message":"1983","line":99,"column":6,"nodeType":"1775","endLine":99,"endColumn":14,"suggestions":"1984"},{"ruleId":"1762","severity":1,"message":"1985","line":13,"column":10,"nodeType":"1764","messageId":"1765","endLine":13,"endColumn":16},{"ruleId":"1762","severity":1,"message":"1763","line":47,"column":22,"nodeType":"1764","messageId":"1765","endLine":47,"endColumn":35},{"ruleId":"1762","severity":1,"message":"1986","line":51,"column":10,"nodeType":"1764","messageId":"1765","endLine":51,"endColumn":19},{"ruleId":"1762","severity":1,"message":"1987","line":51,"column":21,"nodeType":"1764","messageId":"1765","endLine":51,"endColumn":33},{"ruleId":"1762","severity":1,"message":"1827","line":61,"column":9,"nodeType":"1764","messageId":"1765","endLine":61,"endColumn":24},{"ruleId":"1773","severity":1,"message":"1988","line":113,"column":6,"nodeType":"1775","endLine":113,"endColumn":8,"suggestions":"1989"},{"ruleId":"1773","severity":1,"message":"1852","line":121,"column":6,"nodeType":"1775","endLine":121,"endColumn":18,"suggestions":"1990"},{"ruleId":"1773","severity":1,"message":"1991","line":131,"column":6,"nodeType":"1775","endLine":131,"endColumn":27,"suggestions":"1992"},{"ruleId":"1762","severity":1,"message":"1993","line":7,"column":3,"nodeType":"1764","messageId":"1765","endLine":7,"endColumn":20},{"ruleId":"1762","severity":1,"message":"1994","line":8,"column":3,"nodeType":"1764","messageId":"1765","endLine":8,"endColumn":17},{"ruleId":"1762","severity":1,"message":"1995","line":13,"column":3,"nodeType":"1764","messageId":"1765","endLine":13,"endColumn":20},{"ruleId":"1762","severity":1,"message":"1996","line":15,"column":3,"nodeType":"1764","messageId":"1765","endLine":15,"endColumn":13},{"ruleId":"1762","severity":1,"message":"1833","line":37,"column":24,"nodeType":"1764","messageId":"1765","endLine":37,"endColumn":39},{"ruleId":"1773","severity":1,"message":"1997","line":88,"column":6,"nodeType":"1775","endLine":88,"endColumn":8,"suggestions":"1998"},{"ruleId":"1762","severity":1,"message":"1783","line":1,"column":27,"nodeType":"1764","messageId":"1765","endLine":1,"endColumn":36},{"ruleId":"1762","severity":1,"message":"1999","line":31,"column":17,"nodeType":"1764","messageId":"1765","endLine":31,"endColumn":25},{"ruleId":"1762","severity":1,"message":"1964","line":2,"column":18,"nodeType":"1764","messageId":"1765","endLine":2,"endColumn":22},{"ruleId":"1762","severity":1,"message":"1818","line":2,"column":35,"nodeType":"1764","messageId":"1765","endLine":2,"endColumn":40},{"ruleId":"1762","severity":1,"message":"2000","line":27,"column":17,"nodeType":"1764","messageId":"1765","endLine":27,"endColumn":25},{"ruleId":"1762","severity":1,"message":"1821","line":45,"column":7,"nodeType":"1764","messageId":"1765","endLine":45,"endColumn":18},{"ruleId":"1762","severity":1,"message":"1822","line":65,"column":9,"nodeType":"1764","messageId":"1765","endLine":65,"endColumn":20},{"ruleId":"1762","severity":1,"message":"1763","line":67,"column":22,"nodeType":"1764","messageId":"1765","endLine":67,"endColumn":35},{"ruleId":"1762","severity":1,"message":"1823","line":70,"column":10,"nodeType":"1764","messageId":"1765","endLine":70,"endColumn":18},{"ruleId":"1762","severity":1,"message":"1824","line":71,"column":10,"nodeType":"1764","messageId":"1765","endLine":71,"endColumn":17},{"ruleId":"1762","severity":1,"message":"1813","line":78,"column":34,"nodeType":"1764","messageId":"1765","endLine":78,"endColumn":42},{"ruleId":"1762","severity":1,"message":"2001","line":87,"column":9,"nodeType":"1764","messageId":"1765","endLine":87,"endColumn":15},{"ruleId":"1762","severity":1,"message":"1826","line":128,"column":9,"nodeType":"1764","messageId":"1765","endLine":128,"endColumn":15},{"ruleId":"1762","severity":1,"message":"1827","line":154,"column":9,"nodeType":"1764","messageId":"1765","endLine":154,"endColumn":24},{"ruleId":"1773","severity":1,"message":"2002","line":247,"column":6,"nodeType":"1775","endLine":247,"endColumn":27,"suggestions":"2003"},{"ruleId":"1762","severity":1,"message":"2004","line":4,"column":3,"nodeType":"1764","messageId":"1765","endLine":4,"endColumn":14},{"ruleId":"1762","severity":1,"message":"1779","line":5,"column":3,"nodeType":"1764","messageId":"1765","endLine":5,"endColumn":6},{"ruleId":"1762","severity":1,"message":"2005","line":8,"column":3,"nodeType":"1764","messageId":"1765","endLine":8,"endColumn":9},{"ruleId":"1762","severity":1,"message":"2006","line":15,"column":3,"nodeType":"1764","messageId":"1765","endLine":15,"endColumn":8},{"ruleId":"1762","severity":1,"message":"2007","line":17,"column":3,"nodeType":"1764","messageId":"1765","endLine":17,"endColumn":13},{"ruleId":"1762","severity":1,"message":"2008","line":18,"column":3,"nodeType":"1764","messageId":"1765","endLine":18,"endColumn":14},{"ruleId":"1762","severity":1,"message":"2009","line":19,"column":3,"nodeType":"1764","messageId":"1765","endLine":19,"endColumn":19},{"ruleId":"1762","severity":1,"message":"2010","line":23,"column":3,"nodeType":"1764","messageId":"1765","endLine":23,"endColumn":7},{"ruleId":"1762","severity":1,"message":"2011","line":34,"column":10,"nodeType":"1764","messageId":"1765","endLine":34,"endColumn":21},{"ruleId":"1762","severity":1,"message":"1814","line":46,"column":5,"nodeType":"1764","messageId":"1765","endLine":46,"endColumn":13},{"ruleId":"1762","severity":1,"message":"2012","line":48,"column":5,"nodeType":"1764","messageId":"1765","endLine":48,"endColumn":10},{"ruleId":"1762","severity":1,"message":"1813","line":49,"column":5,"nodeType":"1764","messageId":"1765","endLine":49,"endColumn":13},{"ruleId":"1762","severity":1,"message":"2013","line":50,"column":18,"nodeType":"1764","messageId":"1765","endLine":50,"endColumn":24},{"ruleId":"1762","severity":1,"message":"2014","line":50,"column":26,"nodeType":"1764","messageId":"1765","endLine":50,"endColumn":38},{"ruleId":"1762","severity":1,"message":"2015","line":50,"column":40,"nodeType":"1764","messageId":"1765","endLine":50,"endColumn":42},{"ruleId":"1773","severity":1,"message":"2016","line":66,"column":6,"nodeType":"1775","endLine":66,"endColumn":8,"suggestions":"2017"},{"ruleId":"1762","severity":1,"message":"1925","line":4,"column":15,"nodeType":"1764","messageId":"1765","endLine":4,"endColumn":21},{"ruleId":"1762","severity":1,"message":"1928","line":4,"column":23,"nodeType":"1764","messageId":"1765","endLine":4,"endColumn":29},{"ruleId":"1762","severity":1,"message":"2018","line":4,"column":31,"nodeType":"1764","messageId":"1765","endLine":4,"endColumn":35},{"ruleId":"1762","severity":1,"message":"1763","line":37,"column":22,"nodeType":"1764","messageId":"1765","endLine":37,"endColumn":35},{"ruleId":"1773","severity":1,"message":"2019","line":101,"column":6,"nodeType":"1775","endLine":101,"endColumn":8,"suggestions":"2020"},{"ruleId":"1762","severity":1,"message":"2021","line":121,"column":9,"nodeType":"1764","messageId":"1765","endLine":121,"endColumn":24},{"ruleId":"1762","severity":1,"message":"1763","line":53,"column":22,"nodeType":"1764","messageId":"1765","endLine":53,"endColumn":35},{"ruleId":"1762","severity":1,"message":"2022","line":56,"column":10,"nodeType":"1764","messageId":"1765","endLine":56,"endColumn":18},{"ruleId":"1773","severity":1,"message":"2023","line":135,"column":6,"nodeType":"1775","endLine":135,"endColumn":8,"suggestions":"2024"},{"ruleId":"1762","severity":1,"message":"1763","line":51,"column":22,"nodeType":"1764","messageId":"1765","endLine":51,"endColumn":35},{"ruleId":"1762","severity":1,"message":"2025","line":113,"column":11,"nodeType":"1764","messageId":"1765","endLine":113,"endColumn":17},{"ruleId":"1773","severity":1,"message":"2026","line":120,"column":6,"nodeType":"1775","endLine":120,"endColumn":8,"suggestions":"2027"},{"ruleId":"1762","severity":1,"message":"1833","line":38,"column":24,"nodeType":"1764","messageId":"1765","endLine":38,"endColumn":39},{"ruleId":"1762","severity":1,"message":"1783","line":1,"column":27,"nodeType":"1764","messageId":"1765","endLine":1,"endColumn":36},{"ruleId":"1773","severity":1,"message":"2028","line":73,"column":6,"nodeType":"1775","endLine":73,"endColumn":8,"suggestions":"2029"},{"ruleId":"1762","severity":1,"message":"2030","line":28,"column":10,"nodeType":"1764","messageId":"1765","endLine":28,"endColumn":17},{"ruleId":"1762","severity":1,"message":"2031","line":28,"column":19,"nodeType":"1764","messageId":"1765","endLine":28,"endColumn":29},{"ruleId":"1773","severity":1,"message":"2032","line":203,"column":6,"nodeType":"1775","endLine":203,"endColumn":8,"suggestions":"2033"},{"ruleId":"1773","severity":1,"message":"2034","line":208,"column":6,"nodeType":"1775","endLine":208,"endColumn":8,"suggestions":"2035"},{"ruleId":"1873","severity":1,"message":"2036","line":85,"column":22,"nodeType":"1875","messageId":"2037","endLine":85,"endColumn":24},{"ruleId":"1762","severity":1,"message":"2038","line":21,"column":11,"nodeType":"1764","messageId":"1765","endLine":21,"endColumn":17},{"ruleId":"1773","severity":1,"message":"2039","line":130,"column":6,"nodeType":"1775","endLine":130,"endColumn":8,"suggestions":"2040"},{"ruleId":"1762","severity":1,"message":"1763","line":25,"column":23,"nodeType":"1764","messageId":"1765","endLine":25,"endColumn":36},{"ruleId":"1762","severity":1,"message":"2025","line":91,"column":12,"nodeType":"1764","messageId":"1765","endLine":91,"endColumn":18},{"ruleId":"1773","severity":1,"message":"2041","line":98,"column":6,"nodeType":"1775","endLine":98,"endColumn":8,"suggestions":"2042"},{"ruleId":"1762","severity":1,"message":"2043","line":6,"column":3,"nodeType":"1764","messageId":"1765","endLine":6,"endColumn":8},{"ruleId":"1762","severity":1,"message":"2044","line":7,"column":3,"nodeType":"1764","messageId":"1765","endLine":7,"endColumn":12},{"ruleId":"1762","severity":1,"message":"2045","line":8,"column":3,"nodeType":"1764","messageId":"1765","endLine":8,"endColumn":13},{"ruleId":"1762","severity":1,"message":"2046","line":9,"column":3,"nodeType":"1764","messageId":"1765","endLine":9,"endColumn":19},{"ruleId":"1762","severity":1,"message":"2047","line":15,"column":22,"nodeType":"1764","messageId":"1765","endLine":15,"endColumn":29},{"ruleId":"1762","severity":1,"message":"1763","line":59,"column":22,"nodeType":"1764","messageId":"1765","endLine":59,"endColumn":35},{"ruleId":"1762","severity":1,"message":"2048","line":60,"column":10,"nodeType":"1764","messageId":"1765","endLine":60,"endColumn":16},{"ruleId":"1762","severity":1,"message":"2049","line":66,"column":9,"nodeType":"1764","messageId":"1765","endLine":66,"endColumn":23},{"ruleId":"1762","severity":1,"message":"2050","line":68,"column":11,"nodeType":"1764","messageId":"1765","endLine":68,"endColumn":30},{"ruleId":"1762","severity":1,"message":"2051","line":69,"column":9,"nodeType":"1764","messageId":"1765","endLine":69,"endColumn":33},{"ruleId":"1762","severity":1,"message":"2052","line":70,"column":10,"nodeType":"1764","messageId":"1765","endLine":70,"endColumn":21},{"ruleId":"1762","severity":1,"message":"2053","line":73,"column":13,"nodeType":"1764","messageId":"1765","endLine":73,"endColumn":22},{"ruleId":"1762","severity":1,"message":"2054","line":74,"column":14,"nodeType":"1764","messageId":"1765","endLine":74,"endColumn":24},{"ruleId":"1762","severity":1,"message":"2055","line":75,"column":13,"nodeType":"1764","messageId":"1765","endLine":75,"endColumn":22},{"ruleId":"1762","severity":1,"message":"1970","line":92,"column":5,"nodeType":"1764","messageId":"1765","endLine":92,"endColumn":27},{"ruleId":"1773","severity":1,"message":"2056","line":119,"column":6,"nodeType":"1775","endLine":119,"endColumn":8,"suggestions":"2057"},{"ruleId":"1773","severity":1,"message":"2058","line":126,"column":6,"nodeType":"1775","endLine":126,"endColumn":14,"suggestions":"2059"},{"ruleId":"1762","severity":1,"message":"2021","line":174,"column":9,"nodeType":"1764","messageId":"1765","endLine":174,"endColumn":24},{"ruleId":"1762","severity":1,"message":"1763","line":60,"column":22,"nodeType":"1764","messageId":"1765","endLine":60,"endColumn":35},{"ruleId":"1762","severity":1,"message":"2060","line":61,"column":32,"nodeType":"1764","messageId":"1765","endLine":61,"endColumn":44},{"ruleId":"1773","severity":1,"message":"2061","line":71,"column":6,"nodeType":"1775","endLine":71,"endColumn":8,"suggestions":"2062"},{"ruleId":"1762","severity":1,"message":"1763","line":28,"column":22,"nodeType":"1764","messageId":"1765","endLine":28,"endColumn":35},{"ruleId":"1773","severity":1,"message":"2063","line":33,"column":6,"nodeType":"1775","endLine":33,"endColumn":8,"suggestions":"2064"},{"ruleId":"1762","severity":1,"message":"1763","line":50,"column":22,"nodeType":"1764","messageId":"1765","endLine":50,"endColumn":35},{"ruleId":"1762","severity":1,"message":"1801","line":1,"column":17,"nodeType":"1764","messageId":"1765","endLine":1,"endColumn":25},{"ruleId":"1762","severity":1,"message":"1763","line":44,"column":22,"nodeType":"1764","messageId":"1765","endLine":44,"endColumn":35},{"ruleId":"1773","severity":1,"message":"2061","line":54,"column":6,"nodeType":"1775","endLine":54,"endColumn":8,"suggestions":"2065"},{"ruleId":"1762","severity":1,"message":"1801","line":1,"column":17,"nodeType":"1764","messageId":"1765","endLine":1,"endColumn":25},{"ruleId":"1762","severity":1,"message":"1763","line":38,"column":22,"nodeType":"1764","messageId":"1765","endLine":38,"endColumn":35},{"ruleId":"1762","severity":1,"message":"1783","line":1,"column":17,"nodeType":"1764","messageId":"1765","endLine":1,"endColumn":26},{"ruleId":"1762","severity":1,"message":"2066","line":23,"column":10,"nodeType":"1764","messageId":"1765","endLine":23,"endColumn":22},{"ruleId":"1762","severity":1,"message":"2067","line":32,"column":9,"nodeType":"1764","messageId":"1765","endLine":32,"endColumn":23},{"ruleId":"1773","severity":1,"message":"2068","line":50,"column":6,"nodeType":"1775","endLine":50,"endColumn":8,"suggestions":"2069"},{"ruleId":"1773","severity":1,"message":"2070","line":48,"column":6,"nodeType":"1775","endLine":48,"endColumn":8,"suggestions":"2071"},{"ruleId":"1773","severity":1,"message":"2072","line":50,"column":6,"nodeType":"1775","endLine":50,"endColumn":8,"suggestions":"2073"},{"ruleId":"1773","severity":1,"message":"2074","line":40,"column":6,"nodeType":"1775","endLine":40,"endColumn":8,"suggestions":"2075"},{"ruleId":"1773","severity":1,"message":"2076","line":44,"column":6,"nodeType":"1775","endLine":44,"endColumn":8,"suggestions":"2077"},{"ruleId":"1773","severity":1,"message":"2078","line":100,"column":3,"nodeType":"1764","endLine":100,"endColumn":12},{"ruleId":"2079","severity":1,"message":"2080","line":585,"column":11,"nodeType":"2081","messageId":"2082","endLine":590,"endColumn":13},{"ruleId":"2079","severity":1,"message":"2083","line":600,"column":11,"nodeType":"2081","messageId":"2082","endLine":605,"endColumn":13},{"ruleId":"1762","severity":1,"message":"1927","line":10,"column":3,"nodeType":"1764","messageId":"1765","endLine":10,"endColumn":10},{"ruleId":"1762","severity":1,"message":"1846","line":12,"column":3,"nodeType":"1764","messageId":"1765","endLine":12,"endColumn":7},{"ruleId":"1762","severity":1,"message":"1847","line":13,"column":3,"nodeType":"1764","messageId":"1765","endLine":13,"endColumn":11},{"ruleId":"1762","severity":1,"message":"1848","line":14,"column":3,"nodeType":"1764","messageId":"1765","endLine":14,"endColumn":8},{"ruleId":"1762","severity":1,"message":"1849","line":15,"column":3,"nodeType":"1764","messageId":"1765","endLine":15,"endColumn":13},{"ruleId":"1762","severity":1,"message":"1936","line":18,"column":3,"nodeType":"1764","messageId":"1765","endLine":18,"endColumn":7},{"ruleId":"1762","severity":1,"message":"1937","line":19,"column":3,"nodeType":"1764","messageId":"1765","endLine":19,"endColumn":10},{"ruleId":"1762","severity":1,"message":"1938","line":20,"column":3,"nodeType":"1764","messageId":"1765","endLine":20,"endColumn":12},{"ruleId":"1762","severity":1,"message":"1939","line":21,"column":3,"nodeType":"1764","messageId":"1765","endLine":21,"endColumn":6},{"ruleId":"1762","severity":1,"message":"1940","line":22,"column":3,"nodeType":"1764","messageId":"1765","endLine":22,"endColumn":11},{"ruleId":"1762","severity":1,"message":"2084","line":23,"column":3,"nodeType":"1764","messageId":"1765","endLine":23,"endColumn":16},{"ruleId":"1762","severity":1,"message":"1850","line":44,"column":9,"nodeType":"1764","messageId":"1765","endLine":44,"endColumn":16},{"ruleId":"1762","severity":1,"message":"2085","line":45,"column":9,"nodeType":"1764","messageId":"1765","endLine":45,"endColumn":17},{"ruleId":"1762","severity":1,"message":"1811","line":46,"column":22,"nodeType":"1764","messageId":"1765","endLine":46,"endColumn":35},{"ruleId":"1762","severity":1,"message":"2030","line":52,"column":10,"nodeType":"1764","messageId":"1765","endLine":52,"endColumn":17},{"ruleId":"1762","severity":1,"message":"2031","line":52,"column":19,"nodeType":"1764","messageId":"1765","endLine":52,"endColumn":29},{"ruleId":"1762","severity":1,"message":"2086","line":55,"column":9,"nodeType":"1764","messageId":"1765","endLine":55,"endColumn":19},{"ruleId":"1762","severity":1,"message":"2087","line":72,"column":5,"nodeType":"1764","messageId":"1765","endLine":72,"endColumn":22},{"ruleId":"1762","severity":1,"message":"2088","line":73,"column":5,"nodeType":"1764","messageId":"1765","endLine":73,"endColumn":19},{"ruleId":"1762","severity":1,"message":"2089","line":75,"column":5,"nodeType":"1764","messageId":"1765","endLine":75,"endColumn":24},{"ruleId":"1762","severity":1,"message":"2090","line":76,"column":5,"nodeType":"1764","messageId":"1765","endLine":76,"endColumn":19},{"ruleId":"1773","severity":1,"message":"2091","line":260,"column":6,"nodeType":"1775","endLine":260,"endColumn":8,"suggestions":"2092"},"no-native-reassign",["2093"],"no-negated-in-lhs",["2094"],"no-unused-vars","'setLoginLevel' is assigned a value but never used.","Identifier","unusedVar","'Link' is defined but never used.","'PrivateRoute' is defined but never used.","'DailyAllowances' is assigned a value but never used.","'select' is assigned a value but never used.","'password' is assigned a value but never used.","'user' is assigned a value but never used.","'payrunid' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'payrun_loading'. Either include it or remove the dependency array.","ArrayExpression",["2095"],"React Hook useEffect has missing dependencies: 'getPayrun', 'loadEmployees', 'loadUnpaidDailyAllows', and 'loadUnpaidExpenses'. Either include them or remove the dependency array.",["2096"],"'Box' is defined but never used.","'data' is assigned a value but never used.","'columns' is assigned a value but never used.","React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'useEffect' is defined but never used.","'useDisclosure' is defined but never used.","'leavesdata' is assigned a value but never used.","'expensesdata' is assigned a value but never used.","'setDailyAllowsStatusId' is assigned a value but never used.","'payrunstatus' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadPayitems'. Either include it or remove the dependency array.",["2097"],"React Hook useEffect has missing dependencies: 'payslip_period' and 'setPSBPayrunId'. Either include them or remove the dependency array.",["2098"],"React Hook useEffect has a missing dependency: 'calcPayrunTotals'. Either include it or remove the dependency array.",["2099"],"React Hook useEffect has a missing dependency: 'saveIndividualPayslips'. Either include it or remove the dependency array.",["2100"],"'sleep' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadExpenses'. Either include it or remove the dependency array.",["2101"],"'HocTable' is defined but never used.","'useState' is defined but never used.","'useDailyAllowsDetlsBatch' is defined but never used.","'dailyallows' is assigned a value but never used.","'dailyAllowsId' is assigned a value but never used.","no-use-before-define","'useDailyAllowsDetlsBatch' was used before it was defined.","usedBeforeDefined","React Hook useEffect has missing dependencies: 'setDailyAllowsDetlsId', 'setDailyAllowsDetlsPeriod', and 'setDailyAllowsId'. Either include them or remove the dependency array.",["2102"],"'EmpJobhistory' is defined but never used.","'setEmployeeId' is assigned a value but never used.","'reportemail' is assigned a value but never used.","'setValue' is assigned a value but never used.","'register' is assigned a value but never used.","'handleReportingTo' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'birthdate' and 'reporting_email'. Either include them or remove the dependency array.",["2103"],"'Paper' is defined but never used.","'Heading' is defined but never used.","'useUpdateExpensesAttachment' is defined but never used.","'DOWNLOADURL' is assigned a value but never used.","'delExpenses' is assigned a value but never used.","'filename' is assigned a value but never used.","'newFile' is assigned a value but never used.","'attachmentId' is assigned a value but never used.","'upLoad' is assigned a value but never used.","'handleSentEmail' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'formdata.attachmentid' and 'isExpenseEditing'. Either include them or remove the dependency array. If 'setAttachmentId' needs the current value of 'formdata.attachmentid', you can also switch to useReducer instead of useState and read 'formdata.attachmentid' in the reducer.",["2104"],"React Hook useEffect has a missing dependency: 'loadEmployees'. Either include it or remove the dependency array.",["2105"],"'setLeaveId' is assigned a value but never used.","'setIsDialogOpen' is assigned a value but never used.","'setAllowsdata' is assigned a value but never used.","'setTotals' is assigned a value but never used.",["2106"],"'setValue' is defined but never used.","'leave_bf' is assigned a value but never used.","'leave_cd' is assigned a value but never used.","'reporting_email' is assigned a value but never used.","'allows_period' is assigned a value but never used.","'allows_empid' is assigned a value but never used.","'setError' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'loginLevel.loginUserId' and 'setDailyAllowsId'. Either include them or remove the dependency array.",["2107"],"'Grid' is defined but never used.","'GridItem' is defined but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'classes' is assigned a value but never used.","'setHocwhyId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setHocwhatdetailsId'. Either include it or remove the dependency array.",["2108"],"React Hook useEffect has a missing dependency: 'setHocwhydetailsId'. Either include it or remove the dependency array.",["2109"],"'UpdateGroups' is defined but never used.","'useRecoilState' is defined but never used.","'loginLevelState' is defined but never used.","'filter' is assigned a value but never used.","'setFilter' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'editEmployeeID' and 'setJobId'. Either include them or remove the dependency array.",["2110"],"React Hook useMemo has a missing dependency: 'deductions'. Either include it or remove the dependency array.",["2111"],"React Hook useEffect has missing dependencies: 'getSingleBatchPayslipDeductions', 'payslip_period', and 'single_payslip.empid'. Either include them or remove the dependency array.",["2112"],"'thumb' is assigned a value but never used.","'thumbInner' is assigned a value but never used.","'img' is assigned a value but never used.","'oldImage' is assigned a value but never used.","'type' is assigned a value but never used.","'Thumbs' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'file' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setGroupId'. Either include it or remove the dependency array.",["2113"],"React Hook useEffect has a missing dependency: 'setPayItemId'. Either include it or remove the dependency array.",["2114"],["2115"],"React Hook useMemo has a missing dependency: 'allowances'. Either include it or remove the dependency array.",["2116"],"React Hook useEffect has missing dependencies: 'getSingleBatchPayslipEarnings', 'payslip_period', and 'single_payslip.empid'. Either include them or remove the dependency array.",["2117"],"React Hook useEffect has missing dependencies: 'getSingleBatchPayslipDeductions', 'payPeriod', and 'payPeriodEmpId'. Either include them or remove the dependency array.",["2118"],"React Hook useEffect has missing dependencies: 'getSingleBatchPayslipEarnings', 'payPeriod', and 'payPeriodEmpId'. Either include them or remove the dependency array.",["2119"],"'date' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'input', 'loginLevel.loginUser', 'loginLevel.loginUserId', 'loginLevel.perdiem_fee', 'loginLevel.reporting_to', 'loginLevel.siteallows_fee', 'setDailyAllowsId', and 'setInput'. Either include them or remove the dependency array.",["2120"],"React Hook useMemo has a missing dependency: 'institutes'. Either include it or remove the dependency array.",["2121"],"React Hook useEffect has missing dependencies: 'editEmployeeID' and 'setTrainingId'. Either include them or remove the dependency array.",["2122"],"'useTablesContext' is defined but never used.","React Hook useEffect has missing dependencies: 'editEmployeeID' and 'setExperienceId'. Either include them or remove the dependency array.",["2123"],"'toast' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'editEmployeeID' and 'setEducationId'. Either include them or remove the dependency array.",["2124"],"React Hook useEffect has missing dependencies: 'editEmployeeID' and 'setFamilyId'. Either include them or remove the dependency array.",["2125"],"'payrunId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setDailyAllowsPayrunId' and 'setPSBPayrunId'. Either include them or remove the dependency array.",["2126"],"React Hook useEffect has missing dependencies: 'loginLevel.loginUserId' and 'setPayslipId'. Either include them or remove the dependency array.",["2127"],"React Hook useEffect has missing dependencies: 'loginLevel.loginUserId' and 'setExpenseId'. Either include them or remove the dependency array.",["2128"],"React Hook useEffect has a missing dependency: 'currentyear'. Either include it or remove the dependency array.",["2129"],"React Hook useEffect has missing dependencies: 'currentyear', 'loginLevel.loginUserId', 'selectleaveyear', 'setLeaveId', and 'setLeaveYr'. Either include them or remove the dependency array.",["2130"],"React Hook useEffect has missing dependencies: 'Calc_Leave' and 'leaves'. Either include them or remove the dependency array.",["2131"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","React Hook useEffect has a missing dependency: 'expenses'. Either include it or remove the dependency array.",["2132"],"'getYear' is defined but never used.","'moment' is defined but never used.","'Button' is defined but never used.","'Container' is defined but never used.","'Divider' is defined but never used.","'HStack' is defined but never used.","'Modal' is defined but never used.","'ModalOverlay' is defined but never used.","'ModalContent' is defined but never used.","'ModalBody' is defined but never used.","'ModalCloseButton' is defined but never used.","'Select' is defined but never used.","'SimpleGrid' is defined but never used.","'Tabs' is defined but never used.","'TabList' is defined but never used.","'TabPanels' is defined but never used.","'Tab' is defined but never used.","'TabPanel' is defined but never used.","React Hook useEffect has missing dependencies: 'loginLevel.loginUserId', 'setHocId', 'setYearId', and 'year'. Either include them or remove the dependency array.",["2133"],["2134"],"'Export2ExcelDialog' is assigned a value but never used.","'initial_expdata' is assigned a value but never used.","'selectpayrollyear' is assigned a value but never used.",["2135"],"'leavesperiod' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'loginLevel.loginUserId', 'setEditEmployeeID', 'setIsEditingOn', and 'setLeavePeriodYrId'. Either include them or remove the dependency array.",["2136"],"'setHocId' is assigned a value but never used.",["2137"],"'handleHOCDialogClose' is assigned a value but never used.",["2138"],["2139"],"'payslipsdata' is assigned a value but never used.","'setPayslipsdata' is assigned a value but never used.","'isPayslipDialogOpen' is assigned a value but never used.","'handlePayslipDialogClose' is assigned a value but never used.",["2140"],"React Hook useEffect has a missing dependency: 'handleCalcTotals'. Either include it or remove the dependency array.",["2141"],"'FILTERSTRING' is assigned a value but never used.","'Icon' is defined but never used.","React Hook useEffect has missing dependencies: 'formdata' and 'setLoadFormdata'. Either include them or remove the dependency array. If 'setLoadFormdata' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["2142"],"React Hook useEffect has missing dependencies: 'handleCalc' and 'state'. Either include them or remove the dependency array.",["2143"],"'editExpenseID' is assigned a value but never used.","'setIsExpenseEditingOff' is assigned a value but never used.","'ApprovalManagerScreen' is defined but never used.","React Hook useEffect has a missing dependency: 'getBatchPayrun'. Either include it or remove the dependency array.",["2144"],"'useLeavesContext' is defined but never used.","'loginLevel' is assigned a value but never used.","'employeeId' is assigned a value but never used.","'age' is assigned a value but never used.","'leave_bal' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'birthdate', 'hasresigned', 'reporting_email', and 'tap_checkbox'. Either include them or remove the dependency array.",["2145"],"'Checkbox' is defined but never used.","'handleClose' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setHocPeriodMthId', 'setHocPeriodYrId', 'state.month', and 'state.year'. Either include them or remove the dependency array.",["2146"],"'useHoc' is defined but never used.","'useremail' is assigned a value but never used.","'setUserEmail' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setHoclocationId'. Either include it or remove the dependency array.",["2147"],["2148"],"React Hook useEffect has missing dependencies: 'setHocwhyId' and 'setHocwhydetailsId'. Either include them or remove the dependency array.",["2149"],"'useSetRecoilState' is defined but never used.","'useRecoilValue' is defined but never used.","'allowsPeriodState' is defined but never used.","'empidState' is defined but never used.","React Hook useEffect has a missing dependency: 'setDailyAllowsStatusId'. Either include it or remove the dependency array.",["2150"],"'setState' is assigned a value but never used.","'FiTrash2' is defined but never used.","'onDrop' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'formdata.attachmentid', 'isExpenseEditing', and 'setAttachmentId'. Either include them or remove the dependency array.",["2151"],"'AspectRatio' is defined but never used.","'Center' is defined but never used.","'Image' is defined but never used.","'InputGroup' is defined but never used.","'NumberInput' is defined but never used.","'NumberInputField' is defined but never used.","'Wrap' is defined but never used.","'formatPrice' is defined but never used.","'reset' is assigned a value but never used.","'errors' is assigned a value but never used.","'isSubmitting' is assigned a value but never used.","'id' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'formdata.status'. Either include it or remove the dependency array. If 'setStatustype' needs the current value of 'formdata.status', you can also switch to useReducer instead of useState and read 'formdata.status' in the reducer.",["2152"],"'Text' is defined but never used.","React Hook useEffect has missing dependencies: 'month', 'setLeavePeriodMthId', 'setLeavePeriodYrId', and 'year'. Either include them or remove the dependency array.",["2153"],"'handleAlertOpen' is assigned a value but never used.","'isUpdate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setLeaveStatusId'. Either include it or remove the dependency array.",["2154"],"'posted' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'period' and 'setDailyAllowsPeriodId'. Either include them or remove the dependency array.",["2155"],"React Hook useEffect has missing dependencies: 'editEmployeeID', 'getSingleEmployee', 'loadDepartments', and 'loadDesignations'. Either include them or remove the dependency array.",["2156"],"'toBuild' is assigned a value but never used.","'setToBuild' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setLeavePeriodYrId'. Either include it or remove the dependency array.",["2157"],"React Hook useEffect has missing dependencies: 'Build_EmpData' and 'leavesperiod'. Either include them or remove the dependency array.",["2158"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'hocall' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'month', 'setHocPeriodMthId', 'setHocPeriodYrId', and 'year'. Either include them or remove the dependency array.",["2159"],"React Hook useEffect has missing dependencies: 'setPayrunStatusId' and 'status'. Either include them or remove the dependency array.",["2160"],"'Alert' is defined but never used.","'AlertIcon' is defined but never used.","'AlertTitle' is defined but never used.","'AlertDescription' is defined but never used.","'GrTrash' is defined but never used.","'totals' is assigned a value but never used.","'deleteExpenses' is assigned a value but never used.","'expensesattachments' is assigned a value but never used.","'deleteExpensesAttachment' is assigned a value but never used.","'expattachId' is assigned a value but never used.","'isErrOpen' is assigned a value but never used.","'onErrClose' is assigned a value but never used.","'onErrOpen' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'month', 'setExpPeriodMthId', 'setExpPeriodYrId', and 'year'. Either include them or remove the dependency array.",["2161"],"React Hook useEffect has missing dependencies: 'Calc_Totals' and 'expensesperiod'. Either include them or remove the dependency array.",["2162"],"'setExpenseId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'loginLevel.loginUserId' and 'setFilter'. Either include them or remove the dependency array.",["2163"],"React Hook useEffect has missing dependencies: 'loginLevel.loginUserId' and 'setTrainingId'. Either include them or remove the dependency array.",["2164"],["2165"],"'Construction' is defined but never used.","'handleClickPay' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'editEmployeeID' and 'loadSingleBatchExperience'. Either include them or remove the dependency array.",["2166"],"React Hook useEffect has missing dependencies: 'editEmployeeID' and 'getSingleBatchLeave'. Either include them or remove the dependency array.",["2167"],"React Hook useEffect has missing dependencies: 'editEmployeeID' and 'getSingleBatchTraining'. Either include them or remove the dependency array.",["2168"],"React Hook useEffect has missing dependencies: 'editEmployeeID' and 'loadSingleBatchFamily'. Either include them or remove the dependency array.",["2169"],"React Hook useEffect has missing dependencies: 'editEmployeeID' and 'loadSingleBatchEducation'. Either include them or remove the dependency array.",["2170"],"React Hook useEffect received a function whose dependencies are unknown. Pass an inline function instead.","react/jsx-pascal-case","Imported JSX component Payslip_Earnings must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","Imported JSX component Payslip_Deductions must be in PascalCase or SCREAMING_SNAKE_CASE","'useRadioGroup' is defined but never used.","'navigate' is assigned a value but never used.","'yearperiod' is assigned a value but never used.","'setEditEmployeeID' is assigned a value but never used.","'setIsEditingOn' is assigned a value but never used.","'resetSingleEmployee' is assigned a value but never used.","'resetEmployees' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'selectleaveyear' and 'setLeavePeriodYrId'. Either include them or remove the dependency array.",["2171"],"no-global-assign","no-unsafe-negation",{"desc":"2172","fix":"2173"},{"desc":"2174","fix":"2175"},{"desc":"2176","fix":"2177"},{"desc":"2178","fix":"2179"},{"desc":"2180","fix":"2181"},{"desc":"2182","fix":"2183"},{"desc":"2184","fix":"2185"},{"desc":"2186","fix":"2187"},{"desc":"2188","fix":"2189"},{"desc":"2190","fix":"2191"},{"desc":"2192","fix":"2193"},{"desc":"2194","fix":"2195"},{"desc":"2196","fix":"2197"},{"desc":"2198","fix":"2199"},{"desc":"2200","fix":"2201"},{"desc":"2202","fix":"2203"},{"desc":"2204","fix":"2205"},{"desc":"2206","fix":"2207"},{"desc":"2208","fix":"2209"},{"desc":"2210","fix":"2211"},{"desc":"2210","fix":"2212"},{"desc":"2213","fix":"2214"},{"desc":"2215","fix":"2216"},{"desc":"2217","fix":"2218"},{"desc":"2219","fix":"2220"},{"desc":"2221","fix":"2222"},{"desc":"2223","fix":"2224"},{"desc":"2225","fix":"2226"},{"desc":"2227","fix":"2228"},{"desc":"2229","fix":"2230"},{"desc":"2231","fix":"2232"},{"desc":"2233","fix":"2234"},{"desc":"2235","fix":"2236"},{"desc":"2237","fix":"2238"},{"desc":"2239","fix":"2240"},{"desc":"2241","fix":"2242"},{"desc":"2243","fix":"2244"},{"desc":"2245","fix":"2246"},{"desc":"2247","fix":"2248"},{"desc":"2239","fix":"2249"},{"desc":"2239","fix":"2250"},{"desc":"2251","fix":"2252"},{"desc":"2239","fix":"2253"},{"desc":"2239","fix":"2254"},{"desc":"2239","fix":"2255"},{"desc":"2239","fix":"2256"},{"desc":"2257","fix":"2258"},{"desc":"2259","fix":"2260"},{"desc":"2261","fix":"2262"},{"desc":"2263","fix":"2264"},{"desc":"2265","fix":"2266"},{"desc":"2267","fix":"2268"},{"desc":"2269","fix":"2270"},{"desc":"2271","fix":"2272"},{"desc":"2273","fix":"2274"},{"desc":"2275","fix":"2276"},{"desc":"2277","fix":"2278"},{"desc":"2279","fix":"2280"},{"desc":"2281","fix":"2282"},{"desc":"2283","fix":"2284"},{"desc":"2285","fix":"2286"},{"desc":"2287","fix":"2288"},{"desc":"2289","fix":"2290"},{"desc":"2291","fix":"2292"},{"desc":"2293","fix":"2294"},{"desc":"2295","fix":"2296"},{"desc":"2297","fix":"2298"},{"desc":"2299","fix":"2300"},{"desc":"2301","fix":"2302"},{"desc":"2303","fix":"2304"},{"desc":"2301","fix":"2305"},{"desc":"2306","fix":"2307"},{"desc":"2308","fix":"2309"},{"desc":"2310","fix":"2311"},{"desc":"2312","fix":"2313"},{"desc":"2314","fix":"2315"},{"desc":"2316","fix":"2317"},"Update the dependencies array to be: [loadPaybatch, payrun_loading]",{"range":"2318","text":"2319"},"Update the dependencies array to be: [getPayrun, loadEmployees, loadUnpaidDailyAllows, loadUnpaidExpenses]",{"range":"2320","text":"2321"},"Update the dependencies array to be: [loadPayitems]",{"range":"2322","text":"2323"},"Update the dependencies array to be: [payslip_period, psbpayrunId, setPSBPayrunId]",{"range":"2324","text":"2325"},"Update the dependencies array to be: [calcPayrunTotals, isCalc]",{"range":"2326","text":"2327"},"Update the dependencies array to be: [isUpdPayslip, saveIndividualPayslips]",{"range":"2328","text":"2329"},"Update the dependencies array to be: [loadExpenses]",{"range":"2330","text":"2331"},"Update the dependencies array to be: [allows_period, allows_empid, setDailyAllowsId, setDailyAllowsDetlsPeriod, setDailyAllowsDetlsId]",{"range":"2332","text":"2333"},"Update the dependencies array to be: [birthdate, reporting_email]",{"range":"2334","text":"2335"},"Update the dependencies array to be: [expensesattachments, formdata.attachmentid, isExpenseEditing]",{"range":"2336","text":"2337"},"Update the dependencies array to be: [loadEmployees]",{"range":"2338","text":"2339"},"Update the dependencies array to be: [allows_empid, allows_period, setDailyAllowsDetlsId, setDailyAllowsDetlsPeriod, setDailyAllowsId]",{"range":"2340","text":"2341"},"Update the dependencies array to be: [dailyAllowsId, loginLevel.loginUserId, setDailyAllowsId]",{"range":"2342","text":"2343"},"Update the dependencies array to be: [selectedWhatRow, setHocwhatdetailsId]",{"range":"2344","text":"2345"},"Update the dependencies array to be: [selectedWhyRow, setHocwhydetailsId]",{"range":"2346","text":"2347"},"Update the dependencies array to be: [editEmployeeID, setJobId]",{"range":"2348","text":"2349"},"Update the dependencies array to be: [deductions]",{"range":"2350","text":"2351"},"Update the dependencies array to be: [getSingleBatchPayslipDeductions, payslip_period, single_payslip.empid]",{"range":"2352","text":"2353"},"Update the dependencies array to be: [setGroupId, type]",{"range":"2354","text":"2355"},"Update the dependencies array to be: [setPayItemId]",{"range":"2356","text":"2357"},{"range":"2358","text":"2357"},"Update the dependencies array to be: [allowances]",{"range":"2359","text":"2360"},"Update the dependencies array to be: [getSingleBatchPayslipEarnings, payslip_period, single_payslip.empid]",{"range":"2361","text":"2362"},"Update the dependencies array to be: [getSingleBatchPayslipDeductions, payPeriod, payPeriodEmpId]",{"range":"2363","text":"2364"},"Update the dependencies array to be: [getSingleBatchPayslipEarnings, payPeriod, payPeriodEmpId]",{"range":"2365","text":"2366"},"Update the dependencies array to be: [input, loginLevel.loginUser, loginLevel.loginUserId, loginLevel.perdiem_fee, loginLevel.reporting_to, loginLevel.siteallows_fee, setDailyAllowsId, setInput]",{"range":"2367","text":"2368"},"Update the dependencies array to be: [institutes]",{"range":"2369","text":"2370"},"Update the dependencies array to be: [editEmployeeID, setTrainingId]",{"range":"2371","text":"2372"},"Update the dependencies array to be: [editEmployeeID, setExperienceId]",{"range":"2373","text":"2374"},"Update the dependencies array to be: [editEmployeeID, setEducationId]",{"range":"2375","text":"2376"},"Update the dependencies array to be: [editEmployeeID, setFamilyId]",{"range":"2377","text":"2378"},"Update the dependencies array to be: [setDailyAllowsPayrunId, setPSBPayrunId]",{"range":"2379","text":"2380"},"Update the dependencies array to be: [isLoad, loginLevel.loginUserId, setPayslipId]",{"range":"2381","text":"2382"},"Update the dependencies array to be: [loginLevel.loginUserId, setExpenseId]",{"range":"2383","text":"2384"},"Update the dependencies array to be: [currentyear]",{"range":"2385","text":"2386"},"Update the dependencies array to be: [currentyear, isLoad, loginLevel.loginUserId, selectleaveyear, setLeaveId, setLeaveYr]",{"range":"2387","text":"2388"},"Update the dependencies array to be: [Calc_Leave, leaves]",{"range":"2389","text":"2390"},"Update the dependencies array to be: [expenses]",{"range":"2391","text":"2392"},"Update the dependencies array to be: [loginLevel.loginUserId, setHocId, setYearId, year]",{"range":"2393","text":"2394"},{"range":"2395","text":"2386"},{"range":"2396","text":"2386"},"Update the dependencies array to be: [loginLevel.loginUserId, setEditEmployeeID, setIsEditingOn, setLeavePeriodYrId]",{"range":"2397","text":"2398"},{"range":"2399","text":"2386"},{"range":"2400","text":"2386"},{"range":"2401","text":"2386"},{"range":"2402","text":"2386"},"Update the dependencies array to be: [handleCalcTotals, isCalc]",{"range":"2403","text":"2404"},"Update the dependencies array to be: [formdata, loadFormdata, setLoadFormdata]",{"range":"2405","text":"2406"},"Update the dependencies array to be: [handleCalc, isLoad, state]",{"range":"2407","text":"2408"},"Update the dependencies array to be: [getBatchPayrun]",{"range":"2409","text":"2410"},"Update the dependencies array to be: [birthdate, hasresigned, reporting_email, tap_checkbox]",{"range":"2411","text":"2412"},"Update the dependencies array to be: [isLoad, setHocPeriodMthId, setHocPeriodYrId, state.month, state.year]",{"range":"2413","text":"2414"},"Update the dependencies array to be: [setHoclocationId]",{"range":"2415","text":"2416"},"Update the dependencies array to be: [setHocwhatdetailsId, whatstatus]",{"range":"2417","text":"2418"},"Update the dependencies array to be: [whystatus, category, setHocwhydetailsId, setHocwhyId]",{"range":"2419","text":"2420"},"Update the dependencies array to be: [setDailyAllowsStatusId]",{"range":"2421","text":"2422"},"Update the dependencies array to be: [expensesattachments, formdata.attachmentid, isExpenseEditing, setAttachmentId]",{"range":"2423","text":"2424"},"Update the dependencies array to be: [formdata.status]",{"range":"2425","text":"2426"},"Update the dependencies array to be: [month, setLeavePeriodMthId, setLeavePeriodYrId, year]",{"range":"2427","text":"2428"},"Update the dependencies array to be: [setLeaveStatusId]",{"range":"2429","text":"2430"},"Update the dependencies array to be: [period, setDailyAllowsPeriodId]",{"range":"2431","text":"2432"},"Update the dependencies array to be: [editEmployeeID, getSingleEmployee, loadDepartments, loadDesignations]",{"range":"2433","text":"2434"},"Update the dependencies array to be: [setLeavePeriodYrId]",{"range":"2435","text":"2436"},"Update the dependencies array to be: [Build_EmpData, leavesperiod]",{"range":"2437","text":"2438"},"Update the dependencies array to be: [month, setHocPeriodMthId, setHocPeriodYrId, year]",{"range":"2439","text":"2440"},"Update the dependencies array to be: [setPayrunStatusId, status]",{"range":"2441","text":"2442"},"Update the dependencies array to be: [month, setExpPeriodMthId, setExpPeriodYrId, year]",{"range":"2443","text":"2444"},"Update the dependencies array to be: [Calc_Totals, expensesperiod, isCalc]",{"range":"2445","text":"2446"},"Update the dependencies array to be: [loginLevel.loginUserId, setFilter]",{"range":"2447","text":"2448"},"Update the dependencies array to be: [loginLevel.loginUserId, setTrainingId]",{"range":"2449","text":"2450"},{"range":"2451","text":"2448"},"Update the dependencies array to be: [editEmployeeID, loadSingleBatchExperience]",{"range":"2452","text":"2453"},"Update the dependencies array to be: [editEmployeeID, getSingleBatchLeave]",{"range":"2454","text":"2455"},"Update the dependencies array to be: [editEmployeeID, getSingleBatchTraining]",{"range":"2456","text":"2457"},"Update the dependencies array to be: [editEmployeeID, loadSingleBatchFamily]",{"range":"2458","text":"2459"},"Update the dependencies array to be: [editEmployeeID, loadSingleBatchEducation]",{"range":"2460","text":"2461"},"Update the dependencies array to be: [selectleaveyear, setLeavePeriodYrId]",{"range":"2462","text":"2463"},[3698,3712],"[loadPaybatch, payrun_loading]",[12286,12288],"[getPayrun, loadEmployees, loadUnpaidDailyAllows, loadUnpaidExpenses]",[5711,5713],"[loadPayitems]",[6006,6019],"[payslip_period, psbpayrunId, setPSBPayrunId]",[6099,6107],"[calcPayrunTotals, isCalc]",[6199,6213],"[isUpdPayslip, saveIndividualPayslips]",[794,796],"[loadExpenses]",[3375,3404],"[allows_period, allows_empid, setDailyAllowsId, setDailyAllowsDetlsPeriod, setDailyAllowsDetlsId]",[4648,4650],"[birthdate, reporting_email]",[8367,8388],"[expensesattachments, formdata.attachmentid, isExpenseEditing]",[1321,1323],"[loadEmployees]",[5848,5877],"[allows_empid, allows_period, setDailyAllowsDetlsId, setDailyAllowsDetlsPeriod, setDailyAllowsId]",[3562,3577],"[dailyAllowsId, loginLevel.loginUserId, setDailyAllowsId]",[7982,7999],"[selectedWhatRow, setHocwhatdetailsId]",[8084,8100],"[selectedWhyRow, setHocwhydetailsId]",[2827,2829],"[editEmployeeID, setJobId]",[2206,2208],"[deductions]",[2320,2322],"[getSingleBatchPayslipDeductions, payslip_period, single_payslip.empid]",[1234,1240],"[setGroupId, type]",[1200,1202],"[setPayItemId]",[1230,1232],[2029,2031],"[allowances]",[2137,2139],"[getSingleBatchPayslipEarnings, payslip_period, single_payslip.empid]",[1602,1604],"[getSingleBatchPayslipDeductions, payPeriod, payPeriodEmpId]",[1466,1468],"[getSingleBatchPayslipEarnings, payPeriod, payPeriodEmpId]",[2537,2539],"[input, loginLevel.loginUser, loginLevel.loginUserId, loginLevel.perdiem_fee, loginLevel.reporting_to, loginLevel.siteallows_fee, setDailyAllowsId, setInput]",[3363,3365],"[institutes]",[3437,3439],"[editEmployeeID, setTrainingId]",[2007,2009],"[editEmployeeID, setExperienceId]",[2076,2078],"[editEmployeeID, setEducationId]",[2602,2604],"[editEmployeeID, setFamilyId]",[4252,4254],"[setDailyAllowsPayrunId, setPSBPayrunId]",[3687,3695],"[isLoad, loginLevel.loginUserId, setPayslipId]",[3909,3911],"[loginLevel.loginUserId, setExpenseId]",[5444,5446],"[currentyear]",[5608,5616],"[currentyear, isLoad, loginLevel.loginUserId, selectleaveyear, setLeaveId, setLeaveYr]",[5695,5719],"[Calc_Leave, leaves]",[2866,2868],"[expenses]",[5006,5008],"[loginLevel.loginUserId, setHocId, setYearId, year]",[779,781],[3888,3890],[4561,4563],"[loginLevel.loginUserId, setEditEmployeeID, setIsEditingOn, setLeavePeriodYrId]",[4388,4390],[5461,5463],[5868,5870],[5550,5552],[6644,6652],"[handleCalcTotals, isCalc]",[3020,3034],"[formdata, loadFormdata, setLoadFormdata]",[3137,3145],"[handleCalc, isLoad, state]",[2567,2569],"[getBatchPayrun]",[4637,4639],"[birthdate, hasresigned, reporting_email, tap_checkbox]",[2208,2216],"[isLoad, setHocPeriodMthId, setHocPeriodYrId, state.month, state.year]",[4143,4145],"[setHoclocationId]",[4342,4354],"[setHocwhatdetailsId, whatstatus]",[4650,4671],"[whystatus, category, setHocwhydetailsId, setHocwhyId]",[3298,3300],"[setDailyAllowsStatusId]",[8032,8053],"[expensesattachments, formdata.attachmentid, isExpenseEditing, setAttachmentId]",[1171,1173],"[formdata.status]",[3054,3056],"[month, setLeavePeriodMthId, setLeavePeriodYrId, year]",[4448,4450],"[setLeaveStatusId]",[4360,4362],"[period, setDailyAllowsPeriodId]",[2678,2680],"[editEmployeeID, getSingleEmployee, loadDepartments, loadDesignations]",[5982,5984],"[setLeavePeriodYrId]",[6089,6091],"[Build_EmpData, leavesperiod]",[3209,3211],"[month, setHocPeriodMthId, setHocPeriodYrId, year]",[3466,3468],"[setPayrunStatusId, status]",[4192,4194],"[month, setExpPeriodMthId, setExpPeriodYrId, year]",[4307,4315],"[Calc_Totals, expensesperiod, isCalc]",[2143,2145],"[loginLevel.loginUserId, setFilter]",[1033,1035],"[loginLevel.loginUserId, setTrainingId]",[1788,1790],[1247,1249],"[editEmployeeID, loadSingleBatchExperience]",[1235,1237],"[editEmployeeID, getSingleBatchLeave]",[1306,1308],"[editEmployeeID, getSingleBatchTraining]",[1047,1049],"[editEmployeeID, loadSingleBatchFamily]",[1081,1083],"[editEmployeeID, loadSingleBatchEducation]",[7898,7900],"[selectleaveyear, setLeavePeriodYrId]"]