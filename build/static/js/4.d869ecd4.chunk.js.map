{"version":3,"sources":["components/leaves/useLeavesStatus.js","components/LeaveTableApproval.js"],"names":["leavestatusId","a","axios","get","leaves_url","data","useLeavesStatus","leavesId","useState","leavestatusfilter","setLeaveStatusFilter","setLeaveStatusId","selectFn","useCallback","unfiltered","filterByEmpId","useQuery","queryKeys","leavesstatus","getLeavesPeriod","select","undefined","initial_form","name","to_date","from_date","reason","status","no_of_days","leave_bal","columns","title","field","editable","type","dateSetting","locale","editComponent","props","TextField","onChange","e","target","value","style","width","MenuItem","LeaveTableApproval","classes","useStyles","toast","useCustomToast","employees","useEmployees","updateLeaves","useUpdateLeaves","deleteLeaves","useDeleteLeaves","formdata","setFormdata","useRecoilState","loginLevelState","loginLevel","isDialogOpen","setIsDialogOpen","isAlertOpen","setIsAlertOpen","setIsUpdate","leavedata","filter","r","reporting_email","loginEmail","editLeaveID","useLeavesContext","useEffect","handleDialogClose","handleSentEmail","result","empid","emp","f","id","map","console","log","emaildata","to_name","to_email","email","message","cc_to","process","emailjs","then","response","text","err","Approve_Leave","forEach","rec","tableData","checked","d","Reject_Leave","className","root","maxWidth","paddingTop","icons","Add","Edit","View","Delete","Clear","Check","Search","ResetSearch","actions","options","filtering","selection","paging","headerStyle","backgroundColor","color","showTitle","components","Toolbar","p","variant","bgColor","onClick","CustomDialog","isOpen","handleClose","showButton","isFullscree","LeaveFormAdmin","AlertDialogBox","onClose","onConfirm","makeStyles","theme","padding"],"mappings":"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","file":"static/js/4.d869ecd4.chunk.js","sourcesContent":["import { useState, useCallback } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport { leaves_url } from \"../../utils/constants\";\r\nimport { filterByEmpId } from \"./utils\";\r\n\r\nimport axios from \"axios\";\r\nimport { queryKeys } from \"../react-query/constants\";\r\n\r\nasync function getLeavesPeriod(leavestatusId) {\r\n  const { data } = await axios.get(`${leaves_url}?fi=${leavestatusId}`);\r\n  //const { data } = await axios.get(`${expenses_url}`);\r\n  return data;\r\n}\r\n\r\nexport function useLeavesStatus(leavesId) {\r\n  const [leavestatusfilter, setLeaveStatusFilter] = useState(\"all\");\r\n  const [leavestatusId, setLeaveStatusId] = useState(\"\");\r\n\r\n  const selectFn = useCallback(\r\n    (unfiltered) => filterByEmpId(unfiltered, leavestatusfilter),\r\n    [leavestatusfilter]\r\n  );\r\n\r\n  const fallback = [];\r\n  const { data: leavesstatus = fallback } = useQuery(\r\n    [queryKeys.leavesstatus, leavestatusId],\r\n    //queryKeys.expenses_payrun,\r\n    () => getLeavesPeriod(leavestatusId),\r\n    {\r\n      select: leavestatusfilter !== \"all\" ? selectFn : undefined,\r\n    }\r\n  );\r\n\r\n  return {\r\n    leavesstatus,\r\n    leavestatusfilter,\r\n    setLeaveStatusFilter,\r\n    setLeaveStatusId,\r\n  };\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { TextField, MenuItem } from \"@material-ui/core\";\r\nimport { Button, HStack } from \"@chakra-ui/react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport * as emailjs from \"emailjs-com\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport LeaveFormAdmin from \"./LeaveFormAdmin\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\n//import { useLeaves } from \"./leaves/useLeaves\";\r\nimport { useLeavesStatus } from \"./leaves/useLeavesStatus\";\r\n//import { useAddLeaves } from \"./leaves/useAddLeaves\";\r\nimport { useDeleteLeaves } from \"./leaves/useDeleteLeaves\";\r\nimport { useUpdateLeaves } from \"./leaves/useUpdateLeaves\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\n\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\nconst ADMINMANAGER_EMAIL = process.env.REACT_APP_ADMINMANAGER_EMAIL;\r\n\r\nconst initial_form = {\r\n  name: \"\",\r\n  to_date: \"\",\r\n  from_date: \"\",\r\n  reason: \"\",\r\n  status: \"Pending\",\r\n  no_of_days: 0,\r\n  leave_bal: 0,\r\n};\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Leave Balance\",\r\n    field: \"leave_bal\",\r\n    type: \"numeric\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"No of Days\",\r\n    field: \"no_of_days\",\r\n    type: \"numeric\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Reason\",\r\n    field: \"reason\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    field: \"status\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        //defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        style={{ width: 100 }}\r\n        value={props.value}\r\n        select\r\n      >\r\n        <MenuItem value=\"Pending\">Pending</MenuItem>\r\n        <MenuItem value=\"Approve\">Approve</MenuItem>\r\n        <MenuItem value=\"Reject\">Reject</MenuItem>\r\n        <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n      </TextField>\r\n    ),\r\n  },\r\n];\r\n\r\nexport default function LeaveTableApproval() {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  //const { leaves, filter, setFilter, setLeaveId } = useLeaves();\r\n  const { employees } = useEmployees();\r\n  const { leavesstatus, setLeaveStatusId } = useLeavesStatus();\r\n  const updateLeaves = useUpdateLeaves();\r\n  //const addLeaves = useAddLeaves();\r\n  const deleteLeaves = useDeleteLeaves();\r\n  const [formdata, setFormdata] = useState(initial_form);\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const [isUpdate, setIsUpdate] = useState(true);\r\n  const leavedata = leavesstatus.filter(\r\n            (r) => r.reporting_email === loginLevel.loginEmail\r\n          )\r\n  const {\r\n    // leaves,\r\n    editLeaveID,\r\n    //leaves_loading,\r\n    //deleteLeave,\r\n    //loadLeaves,\r\n    //getSingleLeave,\r\n    //setEditLeaveID,\r\n    //setIsLeaveEditingOn,\r\n    //setIsLeaveEditingOff,\r\n    //resetSingleLeave,\r\n  } = useLeavesContext();\r\n\r\n  useEffect(() => {\r\n    setLeaveStatusId(\"Pending\");\r\n  }, []);\r\n\r\n  // const update_Leave = async (data) => {\r\n  //   const { id } = data;\r\n  //   setFormdata({ ...data });\r\n  //   setEditLeaveID(id);\r\n  //   setIsLeaveEditingOn();\r\n  //   getSingleLeave(id);\r\n  //   handleDialogOpen();\r\n  //   //history.push(\"/singleleave\");\r\n  // };\r\n\r\n  // const add_Leave = async (data) => {\r\n  //   // const { id } = data;\r\n  //   setFormdata({ ...data });\r\n  //   resetSingleLeave();\r\n  //   setEditLeaveID(\"\");\r\n  //   setIsLeaveEditingOff();\r\n  //   handleDialogOpen();\r\n  //   //history.push(\"/singleleave\");\r\n  // };\r\n\r\n  // const delete_Leave = (data) => {\r\n  //   const { id } = data;\r\n  //   setEditLeaveID(id);\r\n  //   handleAlertOpen();\r\n  //   //deleteLeave(id);\r\n  //   //loadLeaves();\r\n  // };\r\n\r\n  // const handleDialogOpen = () => {\r\n  //   setIsDialogOpen(true);\r\n  // };\r\n\r\n  const handleDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n  };\r\n\r\n  // const handleAlertOpen = () => {\r\n  //   setIsAlertOpen(true);\r\n  // };\r\n\r\n  const handleAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleOnDeleteConfirm = () => {\r\n    const id = editLeaveID;\r\n    deleteLeaves(id);\r\n  };\r\n\r\n  const handleSentEmail = (data, result) => {\r\n    const { from_date, to_date, name, empid } = data;\r\n    const emp = employees\r\n      .filter((f) => f.id === empid)\r\n      .map((r) => {\r\n        return { ...r };\r\n      });\r\n    console.log(\"leave form\", data, emp);\r\n\r\n    var emaildata = {\r\n      to_name: name,\r\n      to_email: emp[0].email,\r\n      message: `Your leave application from ${from_date} to ${to_date} has been ${result}!`,\r\n      cc_to: ADMINMANAGER_EMAIL,\r\n    };\r\n\r\n    emailjs.send(SERVICE_ID, TEMPLATE_ID, emaildata, USER_ID).then(\r\n      function (response) {\r\n        console.log(response.status, response.text);\r\n        toast({\r\n          title: `Email has sent successfully to ${emaildata.to_email}!`,\r\n          status: \"success\",\r\n        });\r\n      },\r\n      function (err) {\r\n        console.log(err);\r\n        toast({\r\n          title: `Email has fail to send to ${emaildata.to_email}!`,\r\n          status: \"warning\",\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  const Approve_Leave = () => {\r\n    leavedata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        const currentrec = rec;\r\n        currentrec.status = \"Approved\";\r\n        updateLeaves({ id: rec.id, status: \"Approved\" });\r\n\r\n        toast({\r\n          title: \"Leave record being approved!\",\r\n          status: \"success\",\r\n        });\r\n        //sent email\r\n        handleSentEmail(rec, \"Approved\");\r\n      }\r\n    });\r\n    leavedata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  const Reject_Leave = () => {\r\n    leavedata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        const currentrec = rec;\r\n        currentrec.status = \"Rejected\";\r\n        updateLeaves({ id: rec.id, status: \"Rejected\" });\r\n        setIsUpdate(true);\r\n        toast({\r\n          title: \"Leave record being rejected!\",\r\n          status: \"success\",\r\n        });\r\n        //sent email\r\n        handleSentEmail(rec, \"Approved\");\r\n      }\r\n    });\r\n    leavedata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n  //console.log(\"leave\", ADMINMANAGER_EMAIL, USER_ID);\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          // data={leavesstatus.filter(\r\n          //   (r) => r.reporting_email === loginLevel.loginEmail\r\n          // )}\r\n          data={leavedata}\r\n          title=\"Leave Application\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <AddIcon />,\r\n            View: (props) => <VisibilityIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          actions={\r\n            [\r\n              // {\r\n              //   icon: () => <VisibilityIcon />,\r\n              //   tooltip: \"Edit Record\",\r\n              //   onClick: (event, rowData) => {\r\n              //     update_Leave(rowData);\r\n              //   },\r\n              // },\r\n              // {\r\n              //   icon: \"delete\",\r\n              //   tooltip: \"Delete Record\",\r\n              //   onClick: (event, rowData) => {\r\n              //     delete_Leave(rowData);\r\n              //   },\r\n              // },\r\n              // {\r\n              //   icon: \"add\",\r\n              //   tooltip: \"Add Record\",\r\n              //   isFreeAction: true,\r\n              //   onClick: (event, rowData) => {\r\n              //     add_Leave(rowData);\r\n              //   },\r\n              // },\r\n            ]\r\n          }\r\n          options={{\r\n            filtering: true,\r\n            selection: true,\r\n            paging: false,\r\n            headerStyle: {\r\n              backgroundColor: \"rgba(75, 192, 192, 1)\",\r\n              color: \"white\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <HStack p={2}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"solid\"\r\n                    color=\"white\"\r\n                    bgColor=\"red\"\r\n                    //className={classes.button}\r\n                    onClick={Approve_Leave}\r\n                  >\r\n                    Approve\r\n                  </Button>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"solid\"\r\n                    color=\"white\"\r\n                    bgColor=\"red\"\r\n                    //className={classes.button}\r\n                    onClick={Reject_Leave}\r\n                  >\r\n                    Reject\r\n                  </Button>\r\n                </HStack>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <CustomDialog\r\n          isOpen={isDialogOpen}\r\n          handleClose={handleDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscree={false}\r\n        >\r\n          <LeaveFormAdmin\r\n            formdata={formdata}\r\n            setFormdata={setFormdata}\r\n            handleDialogClose={handleDialogClose}\r\n          />\r\n        </CustomDialog>\r\n\r\n        <AlertDialogBox\r\n          onClose={handleAlertClose}\r\n          onConfirm={handleOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete Expenses\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n"],"sourceRoot":""}