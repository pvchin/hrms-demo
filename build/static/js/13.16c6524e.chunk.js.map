{"version":3,"sources":["components/EmployeeForm.js","components/EmployeeFormNew.js","components/SingleEmployee.js","components/JobhistoryForm.js","components/EmpJobhistory.js"],"names":["initial_values","name","gender","ic_no","email","birthdate","age","nationality","address","leave_bal","leave_bf","leave_entitled","basic_salary","salary_currency","bank_name","bank_acno","tap_checkbox","tap_acno","scp_acno","date_of_join","date_of_resign","hasresigned","designation","department","passportno","passport_expirydate","workpermitno","workpermit_expirydate","siteallows_fee","perdiem_fee","empno","reporting_to","reporting_email","useStyles","makeStyles","theme","button","margin","spacing","leftIcon","marginRight","rightIcon","marginLeft","iconSmall","fontSize","root","padding","container","display","flexDirection","flexWrap","divider","textField","width","EmployeeForm","classes","useEmployees","employees","addEmployees","employeeId","setEmployeeId","useAddEmployees","updateEmployees","useUpdateEmployees","designations","useDesignations","departments","useDepartments","useState","reportemail","setReportEmail","empage","setEmpage","checktap","setCheckTap","isresigned","setIsresigned","useForm","handleSubmit","control","setValue","register","useRecoilState","loginLevelState","loginLevel","useEmployeesContext","isEditing","editEmployeeID","filter","r","id","map","calculateAge","dob","today","Date","birthDate","getFullYear","m","getMonth","getDate","useEffect","onSubmit","data","Paper","className","Grid","Typography","variant","component","Button","type","color","Icon","Divider","item","xs","defaultValue","render","field","onChange","error","value","fieldState","TextField","label","helperText","message","rules","required","inputProps","readOnly","e","target","console","log","InputLabelProps","shrink","parseInt","select","MenuItem","currencySymbol","outputFormat","decimalCharacter","digitGroupSeparator","decimalPlaces","parseFloat","currency","FormControlLabel","Checkbox","checked","emp","f","handleReportingTo","InputProps","EmpFamily","EmpEducations","EmpExperiences","EmpTrainings","leave_cd","role","password","EmployeeFormNew","single_employee","single_employee_loading","App","auth","createUserWithEmailAndPassword","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","enteringScreen","menuButton","menuButtonHidden","title","flexGrow","drawerPaper","position","whiteSpace","drawerPaperClose","overflowX","breakpoints","up","appBarSpacer","content","height","overflow","paddingTop","paddingBottom","border","paper","fixedHeight","SingleEmployee","fixedHeightPaper","clsx","CssBaseline","Container","maxWidth","to"],"mappings":"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","file":"static/js/13.16c6524e.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  TextField,\r\n  Paper,\r\n  Typography,\r\n  Grid,\r\n  Divider,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport currency from \"currency.js\";\r\nimport CurrencyTextField from \"@unicef/material-ui-currency-textfield\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\n//import { editEmployeeIdState } from \"./data/atomdata\";\r\n//import { useAllEmployees } from \"./employees/useAllEmployees\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\nimport { useAddEmployees } from \"./employees/useAddEmployees\";\r\nimport { useUpdateEmployees } from \"./employees/useUpdateEmployees\";\r\nimport { useDepartments } from \"./departments/useDepartments\";\r\nimport { useDesignations } from \"./designations/useDesignations\";\r\n//import { useCurrency } from \"./currency/useCurrency\";\r\nimport EmpFamily from \"./EmpFamily\";\r\nimport EmpEducations from \"./EmpEducations\";\r\nimport EmpExperiences from \"./EmpExperiences\";\r\nimport EmpTrainings from \"./EmpTrainings\";\r\nimport EmpJobhistory from \"./EmpJobhistory\";\r\n\r\nconst initial_values = {\r\n  name: \"\",\r\n  gender: \"\",\r\n  ic_no: \"\",\r\n  email: \"\",\r\n  birthdate: null,\r\n  age: 0,\r\n  nationality: \"\",\r\n  address: \"\",\r\n  leave_bal: 0,\r\n  leave_bf: 0,\r\n  leave_entitled: 0,\r\n  basic_salary: 0,\r\n  salary_currency: \"BND\",\r\n  bank_name: \"\",\r\n  bank_acno: \"\",\r\n  tap_checkbox: true,\r\n  tap_acno: \"\",\r\n  scp_acno: \"\",\r\n  date_of_join: null,\r\n  date_of_resign: null,\r\n  hasresigned: false,\r\n  designation: \"\",\r\n  department: \"\",\r\n  passportno: \"\",\r\n  passport_expirydate: null,\r\n  workpermitno: \"\",\r\n  workpermit_expirydate: null,\r\n  siteallows_fee: 0,\r\n  perdiem_fee: 0,\r\n  empno: \"\",\r\n  reporting_to: \"\",\r\n  reporting_email: \"\",\r\n};\r\n\r\nconst EmployeeForm = () => {\r\n  const classes = useStyles();\r\n  const { employees, employeeId, setEmployeeId } = useEmployees();\r\n  //const { allemployees, setAllEmpId } = useAllEmployees();\r\n  const addEmployees = useAddEmployees();\r\n  const updateEmployees = useUpdateEmployees();\r\n  //const currencyRate = useCurrency()\r\n  const { designations } = useDesignations();\r\n  const { departments } = useDepartments();\r\n  const [reportemail, setReportEmail] = useState(\"\");\r\n  const [empage, setEmpage] = useState(0);\r\n  const [checktap, setCheckTap] = useState(false);\r\n  const [isresigned, setIsresigned] = useState(false);\r\n  //const [empId, setEmpId] = useRecoilState(editEmployeeIdState);\r\n  const { handleSubmit, control, setValue, register } = useForm();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { isEditing, editEmployeeID } = useEmployeesContext();\r\n  const single_employee = employees\r\n    .filter((r) => r.id === editEmployeeID)\r\n    .map((r) => {\r\n      return { ...r };\r\n    });\r\n  const {\r\n    name,\r\n    ic_no,\r\n    gender,\r\n    birthdate,\r\n    age,\r\n    email,\r\n    nationality,\r\n    address,\r\n    leave_bal,\r\n    leave_entitled,\r\n    leave_bf,\r\n    basic_salary,\r\n    salary_currency,\r\n    bank_name,\r\n    bank_acno,\r\n    tap_checkbox,\r\n    tap_acno,\r\n    scp_acno,\r\n    date_of_join,\r\n    date_of_resign,\r\n    hasresigned,\r\n    designation,\r\n    department,\r\n    passportno,\r\n    passport_expirydate,\r\n    workpermitno,\r\n    workpermit_expirydate,\r\n    siteallows_fee,\r\n    perdiem_fee,\r\n    empno,\r\n    reporting_to,\r\n    reporting_email,\r\n  } = single_employee[0] || initial_values;\r\n\r\n  const calculateAge = (dob) => {\r\n    var today = new Date();\r\n    var birthDate = new Date(dob);\r\n    var age = today.getFullYear() - birthDate.getFullYear();\r\n    var m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      age--;\r\n    }\r\n    return age;\r\n  };\r\n\r\n  const handleReportingTo = (name) => {\r\n    const emp = employees\r\n      .filter((f) => f.name === name)\r\n      .map((r) => {\r\n        return { ...r };\r\n      });\r\n    setReportEmail(emp[0].email);\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    if (isEditing) {\r\n      updateEmployees({\r\n        id: editEmployeeID,\r\n        ...data,\r\n        reporting_email: reportemail,\r\n      });\r\n    } else {\r\n      addEmployees({ ...data, reporting_email: reportemail });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let age = calculateAge(birthdate);\r\n    setEmpage(age);\r\n    setCheckTap(tap_checkbox);\r\n    setIsresigned(hasresigned);\r\n    setReportEmail(reporting_email);\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   setAllEmpId(\"111\");\r\n  // }, []);\r\n\r\n  if (!employees) {\r\n    return <h2>Loading ...</h2>;\r\n  }\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <Paper className={classes.root}>\r\n          <Grid container className={classes.root} spacing={15}>\r\n            <div>\r\n              <Typography variant=\"h5\" component=\"h3\">\r\n                EMPLOYEE FORM\r\n              </Typography>\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n              >\r\n                Submit <Icon className={classes.rightIcon}>send</Icon>\r\n              </Button>\r\n            </div>\r\n          </Grid>\r\n          <Divider className={classes.divider} />\r\n          <Grid item xs={12}>\r\n            <div>\r\n              <div>\r\n                <Controller\r\n                  name=\"name\"\r\n                  control={control}\r\n                  defaultValue={name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Name\"\r\n                        id=\"standard-name\"\r\n                        name=\"name\"\r\n                        defaultValue={name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"empno\"\r\n                  control={control}\r\n                  defaultValue={empno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Emp No\"\r\n                        id=\"standard-empno\"\r\n                        defaultValue={empno}\r\n                        name=\"empno\"\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"email\"\r\n                  control={control}\r\n                  defaultValue={email}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Email\"\r\n                        id=\"standard-email\"\r\n                        name=\"email\"\r\n                        defaultValue={email}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        inputProps={{ readOnly: true }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"ic_no\"\r\n                  control={control}\r\n                  defaultValue={ic_no}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"IC No\"\r\n                        id=\"standard-icno\"\r\n                        defaultValue={ic_no}\r\n                        name=\"ic_no\"\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"birthdate\"\r\n                  control={control}\r\n                  defaultValue={birthdate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Birth Date\"\r\n                        id=\"standard-birthdate\"\r\n                        name=\"birthdate\"\r\n                        type=\"date\"\r\n                        defaultValue={birthdate}\r\n                        className={classes.textField}\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(e.target.value);\r\n                          let age = calculateAge(e.target.value);\r\n                          console.log(\"emp\", birthdate, age);\r\n                          setEmpage(age);\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"age\"\r\n                  control={control}\r\n                  defaultValue={empage}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Age\"\r\n                        type=\"number\"\r\n                        id=\"standard-age\"\r\n                        name=\"empage\"\r\n                        //defaultValue={age}\r\n                        value={empage}\r\n                        className={classes.textField}\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(parseInt(e.target.value, 10));\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"passportno\"\r\n                  control={control}\r\n                  defaultValue={passportno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Passport No\"\r\n                        id=\"standard-passportno\"\r\n                        name=\"passportno\"\r\n                        defaultValue={passportno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"passport_expirydate\"\r\n                  control={control}\r\n                  defaultValue={passport_expirydate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Passport Expiry Date\"\r\n                        id=\"standard-ppexpiry\"\r\n                        name=\"passport_expirydate\"\r\n                        type=\"date\"\r\n                        defaultValue={passport_expirydate}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"nationality\"\r\n                  control={control}\r\n                  defaultValue={nationality}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Nationality\"\r\n                        id=\"standard-nationality\"\r\n                        name=\"nationality\"\r\n                        defaultValue={nationality}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"gender\"\r\n                  control={control}\r\n                  defaultValue={gender}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Gender\"\r\n                        id=\"standard-gender\"\r\n                        name=\"gender\"\r\n                        defaultValue={gender}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        <MenuItem value=\"Male\">Male</MenuItem>\r\n                        <MenuItem value=\"Female\">Female</MenuItem>\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"address\"\r\n                  control={control}\r\n                  defaultValue={address}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Address\"\r\n                        id=\"standard-address\"\r\n                        name=\"address\"\r\n                        defaultValue={address}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <Divider className={classes.divider} />\r\n            <div>\r\n              <div>\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"basic_salary\"\r\n                    control={control}\r\n                    defaultValue={basic_salary}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <CurrencyTextField\r\n                          label=\"Basic Salary\"\r\n                          variant=\"standard\"\r\n                          value={basic_salary}\r\n                          currencySymbol=\"$\"\r\n                          outputFormat=\"string\"\r\n                          decimalCharacter=\".\"\r\n                          digitGroupSeparator=\",\"\r\n                          decimalPlaces=\"2\"\r\n                          className={classes.textField}\r\n                          id=\"standard-basicsalary\"\r\n                          name=\"basic_salary\"\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            onChange(parseFloat(currency(e.target.value), 10));\r\n                          }}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                        />\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"salary_currency\"\r\n                    control={control}\r\n                    defaultValue={salary_currency}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Currency\"\r\n                          id=\"standard-currency\"\r\n                          name=\"salary_currency\"\r\n                          defaultValue={salary_currency}\r\n                          className={classes.textField}\r\n                          onChange={onChange}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                          select\r\n                        >\r\n                          <MenuItem value=\"BND\">BND</MenuItem>\r\n                          <MenuItem value=\"USD\">USD</MenuItem>\r\n                          <MenuItem value=\"MYR\">MYR</MenuItem>\r\n                        </TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n              </div>\r\n              <div>\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"siteallows_fee\"\r\n                    control={control}\r\n                    defaultValue={siteallows_fee}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <CurrencyTextField\r\n                          label=\"Site Allowances Fee\"\r\n                          variant=\"standard\"\r\n                          value={siteallows_fee}\r\n                          currencySymbol=\"$\"\r\n                          outputFormat=\"number\"\r\n                          decimalCharacter=\".\"\r\n                          digitGroupSeparator=\",\"\r\n                          decimalPlaces=\"2\"\r\n                          className={classes.textField}\r\n                          id=\"standard-siteallowances\"\r\n                          name=\"siteallows_fee\"\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            onChange(parseFloat(currency(e.target.value), 10));\r\n                          }}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                        />\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"perdiem_fee\"\r\n                    control={control}\r\n                    defaultValue={perdiem_fee}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <CurrencyTextField\r\n                          label=\"Per Diem Fee\"\r\n                          variant=\"standard\"\r\n                          value={perdiem_fee}\r\n                          currencySymbol=\"$\"\r\n                          outputFormat=\"number\"\r\n                          decimalCharacter=\".\"\r\n                          digitGroupSeparator=\",\"\r\n                          decimalPlaces=\"2\"\r\n                          className={classes.textField}\r\n                          id=\"standard-perdiem\"\r\n                          name=\"perdiem_fee\"\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            onChange(parseFloat(currency(e.target.value), 10));\r\n                          }}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                        />\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"tap_checkbox\"\r\n                  control={control}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Checkbox\r\n                            name=\"tap_checkbox\"\r\n                            defaultValue={tap_checkbox}\r\n                            checked={checktap}\r\n                            type=\"checkbox\"\r\n                            onChange={(e) => {\r\n                              onChange(e.target.checked);\r\n                              setCheckTap(e.target.checked);\r\n                            }}\r\n                          />\r\n                        }\r\n                        label=\"TAP/SCP Contribution\"\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"tap_acno\"\r\n                  control={control}\r\n                  defaultValue={tap_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"TAP Ac No\"\r\n                        id=\"standard-tapno\"\r\n                        name=\"tap_acno\"\r\n                        defaultValue={tap_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"scp_acno\"\r\n                  control={control}\r\n                  defaultValue={scp_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"SCP Ac No\"\r\n                        id=\"standard-scpno\"\r\n                        name=\"scp_acno\"\r\n                        defaultValue={scp_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"bank_name\"\r\n                  control={control}\r\n                  defaultValue={bank_name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Bank Name\"\r\n                        id=\"standard-bankname\"\r\n                        name=\"bank_name\"\r\n                        defaultValue={bank_name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"bank_acno\"\r\n                  control={control}\r\n                  defaultValue={bank_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Bank Ac No\"\r\n                        id=\"standard-backacno\"\r\n                        name=\"bank_acno\"\r\n                        defaultValue={bank_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  // rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"workpermitno\"\r\n                  control={control}\r\n                  defaultValue={workpermitno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Work Permit No\"\r\n                        id=\"standard-workpermitno\"\r\n                        name=\"workpermitno\"\r\n                        defaultValue={workpermitno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"workpermit_expirydate\"\r\n                  control={control}\r\n                  defaultValue={workpermit_expirydate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Work Permit Expiry Date\"\r\n                        id=\"standard-workpermitexpiry\"\r\n                        name=\"workpermit_expirydate\"\r\n                        type=\"date\"\r\n                        defaultValue={workpermit_expirydate}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <Divider className={classes.divider} />\r\n              <div>\r\n                <Controller\r\n                  name=\"date_of_join\"\r\n                  control={control}\r\n                  defaultValue={date_of_join}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Joining Date\"\r\n                        id=\"standard-joiningdate\"\r\n                        name=\"date_of_join\"\r\n                        type=\"date\"\r\n                        defaultValue={date_of_join}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <div>\r\n                  <Controller\r\n                    name=\"date_of_resign\"\r\n                    control={control}\r\n                    defaultValue={date_of_resign}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Resign Date\"\r\n                          id=\"standard-resindate\"\r\n                          name=\"date_of_resign\"\r\n                          type=\"date\"\r\n                          defaultValue={date_of_resign}\r\n                          className={classes.textField}\r\n                          onChange={onChange}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                          InputLabelProps={{\r\n                            shrink: true,\r\n                          }}\r\n                        />\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Email is required\" }}\r\n                  />\r\n\r\n                  <Controller\r\n                    name=\"hasresigned\"\r\n                    control={control}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <FormControlLabel\r\n                          control={\r\n                            <Checkbox\r\n                              name=\"hasresigned\"\r\n                              defaultValue={hasresigned}\r\n                              checked={isresigned}\r\n                              type=\"checkbox\"\r\n                              onChange={(e) => {\r\n                                onChange(e.target.checked);\r\n                                setIsresigned(e.target.checked);\r\n                              }}\r\n                            />\r\n                          }\r\n                          label=\"Resigned\"\r\n                        />\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"leave_entitled\"\r\n                  control={control}\r\n                  defaultValue={leave_entitled}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Annual Leaves Entitled\"\r\n                        id=\"standard-annualleave\"\r\n                        name=\"leave_entitled\"\r\n                        type=\"numeric\"\r\n                        defaultValue={leave_entitled}\r\n                        className={classes.textField}\r\n                        onChange={(e) =>\r\n                          onChange(parseFloat(e.target.value, 10))\r\n                        }\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"leave_bf\"\r\n                  control={control}\r\n                  defaultValue={leave_bf}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Leaves B/F\"\r\n                        id=\"standard-leavebal\"\r\n                        name=\"leave_bf\"\r\n                        type=\"numeric\"\r\n                        defaultValue={leave_bf}\r\n                        className={classes.textField}\r\n                        onChange={(e) =>\r\n                          onChange(parseFloat(e.target.value, 10))\r\n                        }\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"designation\"\r\n                  control={control}\r\n                  defaultValue={designation}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Designation\"\r\n                        id=\"standard-designation\"\r\n                        name=\"designation\"\r\n                        defaultValue={designation}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        <MenuItem value=\"\">None</MenuItem>\r\n                        {designations &&\r\n                          designations.map((r) => {\r\n                            return (\r\n                              <MenuItem key={r.id} value={r.name}>\r\n                                {r.name}\r\n                              </MenuItem>\r\n                            );\r\n                          })}\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"department\"\r\n                  control={control}\r\n                  defaultValue={department}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Department\"\r\n                        id=\"standard-department\"\r\n                        name=\"department\"\r\n                        defaultValue={department}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        <MenuItem value=\"\">None</MenuItem>\r\n                        {departments &&\r\n                          departments.map((r) => {\r\n                            return (\r\n                              <MenuItem key={r.id} value={r.name}>\r\n                                {r.name}\r\n                              </MenuItem>\r\n                            );\r\n                          })}\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"reporting_to\"\r\n                  control={control}\r\n                  defaultValue={reporting_to}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Reporting To\"\r\n                        id=\"standard-reportingto\"\r\n                        name=\"reporting_to\"\r\n                        defaultValue={reporting_to}\r\n                        className={classes.textField}\r\n                        onChange={(e) => {\r\n                          onChange(e.target.value);\r\n                          handleReportingTo(e.target.value);\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        <MenuItem value=\"\">None</MenuItem>\r\n                        {employees &&\r\n                          employees.map((r) => {\r\n                            return (\r\n                              <MenuItem key={r.id} value={r.name}>\r\n                                {r.name}\r\n                              </MenuItem>\r\n                            );\r\n                          })}\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"reporting_email\"\r\n                  control={control}\r\n                  defaultValue={reportemail}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Reporting Email\"\r\n                        id=\"standard-reportingemail\"\r\n                        name=\"reporting_email\"\r\n                        value={reportemail}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <Divider className={classes.divider} />\r\n            </div>\r\n          </Grid>\r\n          <Divider />\r\n        </Paper>\r\n      </form>\r\n\r\n      <div>\r\n        {/* <Grid xs={12}>\r\n          <EmpJobhistory\r\n            staffname={name}\r\n            empid={editEmployeeID}\r\n            basicsalary={basic_salary}\r\n            siteallows={siteallows_fee}\r\n            department={department}\r\n            designaton={designation}\r\n          />\r\n        </Grid> */}\r\n        <Grid xs={12}>\r\n          <EmpFamily />\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <EmpEducations />\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <EmpExperiences />\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <EmpTrainings />\r\n        </Grid>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  divider: {\r\n    padding: 4,\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 350,\r\n  },\r\n}));\r\n\r\nexport default EmployeeForm;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  TextField,\r\n  Paper,\r\n  Typography,\r\n  Grid,\r\n  Divider,\r\n  Checkbox,\r\n  FormControlLabel,\r\n} from \"@material-ui/core\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { Controller, useForm, setValue } from \"react-hook-form\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\nimport { useAddEmployees } from \"./employees/useAddEmployees\";\r\nimport { useUpdateEmployees } from \"./employees/useUpdateEmployees\";\r\nimport { useDepartments } from \"./departments/useDepartments\";\r\nimport { useDesignations } from \"./designations/useDesignations\";\r\nimport App from \"../utils/firebase\";\r\n\r\n// import EmpFamily from \"./EmpFamily\";\r\n// import EmpEducations from \"./EmpEducations\";\r\n// import EmpExperiences from \"./EmpExperiences\";\r\n// import EmpTrainings from \"./EmpTrainings\";\r\n\r\nconst initial_values = {\r\n  name: \"\",\r\n  empno: \"\",\r\n  gender: \"\",\r\n  ic_no: \"\",\r\n  email: \"\",\r\n  age: 0,\r\n  birthdate: null,\r\n  address: \"\",\r\n  nationality: \"\",\r\n  basic_salary: 0,\r\n  salary_currency: \"BND\",\r\n  bank_name: \"\",\r\n  bank_acno: \"\",\r\n  tap_checkbox: true,\r\n  tap_acno: \"\",\r\n  scp_acno: \"\",\r\n  date_of_join: null,\r\n  date_of_resign: null,\r\n  leave_bal: 0,\r\n  leave_bf: 0,\r\n  leave_entitled: 0,\r\n  leave_cd: 0,\r\n  designation: \"\",\r\n  department: \"\",\r\n  passportno: \"\",\r\n  passport_expirydate: null,\r\n  workpermitno: \"\",\r\n  workpermit_expirydate: null,\r\n  siteallows_fee: 0,\r\n  perdiem_fee: 0,\r\n  role: 1,\r\n  password: \"abc123*\",\r\n  reporting_to: \"\",\r\n  reporting_email: \"\",\r\n};\r\n\r\nconst EmployeeFormNew = () => {\r\n  const classes = useStyles();\r\n  const {\r\n    isEditing,\r\n    single_employee,\r\n    //updateEmployee,\r\n    //addEmployee,\r\n    editEmployeeID,\r\n    single_employee_loading,\r\n  } = useEmployeesContext();\r\n  const {\r\n    name,\r\n    empno,\r\n    ic_no,\r\n    gender,\r\n    //age,\r\n    birthdate,\r\n    email,\r\n    address,\r\n    nationality,\r\n    basic_salary,\r\n    salary_currency,\r\n    bank_name,\r\n    bank_acno,\r\n    tap_checkbox,\r\n    tap_acno,\r\n    scp_acno,\r\n    leave_bal,\r\n    leave_bf,\r\n    leave_cd,\r\n    leave_entitled,\r\n    password,\r\n    date_of_join,\r\n    date_of_resign,\r\n    designation,\r\n    department,\r\n    passportno,\r\n    passport_expirydate,\r\n    workpermitno,\r\n    workpermit_expirydate,\r\n    siteallows_fee,\r\n    perdiem_fee,\r\n    reporting_to,\r\n    reporting_email,\r\n  } = single_employee || initial_values;\r\n  const addEmployees = useAddEmployees();\r\n  const updateEmployees = useUpdateEmployees();\r\n  const { employees } = useEmployees();\r\n  const { designations } = useDesignations();\r\n  const { departments } = useDepartments();\r\n  const [empage, setEmpage] = useState(0);\r\n  const [reportemail, setReportEmail] = useState(\"\");\r\n  //const [checktap, setCheckTap] = useState(false);\r\n  //const [alert, setAlert] = useState(false);\r\n  const { handleSubmit, control } = useForm();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  //console.log(\"emplevel\", loginLevel);\r\n\r\n  const calculateAge = (dob) => {\r\n    var today = new Date();\r\n    var birthDate = new Date(dob);\r\n    var age = today.getFullYear() - birthDate.getFullYear();\r\n    var m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      age--;\r\n    }\r\n    return age;\r\n  };\r\n\r\n  const handleReportingTo = (name) => {\r\n    const emp = employees\r\n      .filter((f) => f.name === name)\r\n      .map((r) => {\r\n        return { ...r };\r\n      });\r\n    setReportEmail(emp[0].email);\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    if (isEditing) {\r\n      updateEmployees({ id: editEmployeeID, ...data });\r\n    } else {\r\n      addEmployees({ password: \"abc123*\", role: 1, ...data });\r\n      try {\r\n        App.auth().createUserWithEmailAndPassword(email, \"abc123*\");\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    // setAlert(true);\r\n    // setTimeout(() => {\r\n    //   setAlert(false);\r\n    // }, 3000);\r\n    //loadEmployees();\r\n    // <Alert severity=\"success\">\r\n    //   <AlertTitle>Success</AlertTitle>\r\n    //   This is a success alert — <strong>check it out!</strong>\r\n    // </Alert>;\r\n    //history.push(\"/allemployees\");\r\n  };\r\n\r\n  if (single_employee_loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <Paper className={classes.root}>\r\n          <Grid container className={classes.root} spacing={15}>\r\n            <div>\r\n              <Typography variant=\"h5\" component=\"h3\">\r\n                EMPLOYEE FORM\r\n              </Typography>\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n              >\r\n                Submit <Icon className={classes.rightIcon}>send</Icon>\r\n              </Button>\r\n            </div>\r\n          </Grid>\r\n          <Divider className={classes.divider} />\r\n          <Grid item xs={12}>\r\n            <div>\r\n              <div>\r\n                <Controller\r\n                  name=\"name\"\r\n                  control={control}\r\n                  defaultValue={name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Name\"\r\n                        id=\"margin-normal\"\r\n                        name=\"name\"\r\n                        defaultValue={name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"empno\"\r\n                  control={control}\r\n                  defaultValue={empno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Emp No\"\r\n                        id=\"standard-empno\"\r\n                        defaultValue={empno}\r\n                        name=\"empno\"\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"email\"\r\n                  control={control}\r\n                  defaultValue={email}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Email\"\r\n                        id=\"margin-normal\"\r\n                        name=\"email\"\r\n                        defaultValue={email}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"ic_no\"\r\n                  control={control}\r\n                  defaultValue={ic_no}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"IC No\"\r\n                        id=\"margin-normal\"\r\n                        name=\"ic_no\"\r\n                        defaultValue={ic_no}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"birthdate\"\r\n                  control={control}\r\n                  defaultValue={birthdate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Birth Date\"\r\n                        id=\"margin-birthdate\"\r\n                        name=\"birthdate\"\r\n                        type=\"date\"\r\n                        defaultValue={birthdate}\r\n                        className={classes.textField}\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(parseInt(e.target.value, 10));\r\n                          let age = calculateAge(e.target.value);\r\n                          console.log(\"emp\", birthdate, age);\r\n                          setEmpage(age);\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"age\"\r\n                  control={control}\r\n                  defaultValue={empage}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Age\"\r\n                        type=\"number\"\r\n                        id=\"standard-number-age\"\r\n                        name=\"empage\"\r\n                        value={empage}\r\n                        className={classes.textField}\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(parseInt(e.target.value, 10));\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"passportno\"\r\n                  control={control}\r\n                  defaultValue={passportno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Passport No\"\r\n                        id=\"margin-normal\"\r\n                        name=\"passportno\"\r\n                        defaultValue={passportno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"passport_expirydate\"\r\n                  control={control}\r\n                  defaultValue={passport_expirydate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Passport Expiry Date\"\r\n                        id=\"margin-normal\"\r\n                        name=\"passport_expirydate\"\r\n                        type=\"date\"\r\n                        defaultValue={passport_expirydate}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"nationality\"\r\n                  control={control}\r\n                  defaultValue={nationality}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Nationality\"\r\n                        id=\"standard-nationality\"\r\n                        name=\"nationality\"\r\n                        defaultValue={nationality}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"gender\"\r\n                  control={control}\r\n                  defaultValue={gender}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Gender\"\r\n                        id=\"margin-normal\"\r\n                        name=\"gender\"\r\n                        defaultValue={gender}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        <MenuItem value=\"Male\">Male</MenuItem>\r\n                        <MenuItem value=\"Female\">Female</MenuItem>\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"address\"\r\n                  control={control}\r\n                  defaultValue={address}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Address\"\r\n                        id=\"standard-address\"\r\n                        name=\"address\"\r\n                        defaultValue={address}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <Divider className={classes.divider} />\r\n            <div>\r\n              <div>\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"basic_salary\"\r\n                    control={control}\r\n                    defaultValue={basic_salary}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Basic Salary\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"basic_pay\"\r\n                          defaultValue={basic_salary}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            onChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                        />\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"salary_currency\"\r\n                    control={control}\r\n                    defaultValue={salary_currency}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Currency\"\r\n                          id=\"standard-currency\"\r\n                          name=\"salary_currency\"\r\n                          defaultValue={salary_currency}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            onChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                          select\r\n                        >\r\n                          <MenuItem value=\"BND\">BND</MenuItem>\r\n                          <MenuItem value=\"USD\">USD</MenuItem>\r\n                          <MenuItem value=\"MYR\">MYR</MenuItem>\r\n                        </TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n              </div>\r\n              <div>\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"siteallows_fee\"\r\n                    control={control}\r\n                    defaultValue={siteallows_fee}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Site Allowances Fee\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"siteallows_fee\"\r\n                          defaultValue={siteallows_fee}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            onChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                        />\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n                {loginLevel.loginLevel !== \"Admin\" && (\r\n                  <Controller\r\n                    name=\"perdiem_fee\"\r\n                    control={control}\r\n                    defaultValue={perdiem_fee}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Per Diem Fee\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"perdiem_fee\"\r\n                          defaultValue={perdiem_fee}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            onChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          error={!!error}\r\n                          helperText={error ? error.message : null}\r\n                        />\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"IC No required\" }}\r\n                  />\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Controller\r\n                  name=\"tap_checkbox\"\r\n                  control={control}\r\n                  defaultValue={tap_checkbox}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Checkbox\r\n                            checked={tap_checkbox}\r\n                            onChange={onChange}\r\n                            name=\"tap_checkbox\"\r\n                          />\r\n                        }\r\n                        label=\"TAP/SCP Contribution\"\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"tap_acno\"\r\n                  control={control}\r\n                  defaultValue={tap_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"TAP Ac No\"\r\n                        id=\"margin-normal\"\r\n                        name=\"tap_acno\"\r\n                        defaultValue={tap_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"scp_acno\"\r\n                  control={control}\r\n                  defaultValue={scp_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"SCP Ac No\"\r\n                        id=\"margin-normal\"\r\n                        name=\"scp_acno\"\r\n                        defaultValue={scp_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"bank_name\"\r\n                  control={control}\r\n                  defaultValue={bank_name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Bank Name\"\r\n                        id=\"margin-normal\"\r\n                        name=\"bank_name\"\r\n                        defaultValue={bank_name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"bank_acno\"\r\n                  control={control}\r\n                  defaultValue={bank_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Bank Ac No\"\r\n                        id=\"margin-normal\"\r\n                        name=\"bank_acno\"\r\n                        defaultValue={bank_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  // rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"workpermitno\"\r\n                  control={control}\r\n                  defaultValue={workpermitno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Work Permit No\"\r\n                        id=\"margin-normal\"\r\n                        name=\"workpermitno\"\r\n                        defaultValue={workpermitno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"workpermit_expirydate\"\r\n                  control={control}\r\n                  defaultValue={workpermit_expirydate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Work Permit Expiry Date\"\r\n                        id=\"margin-normal\"\r\n                        name=\"workpermit_expirydate\"\r\n                        type=\"date\"\r\n                        defaultValue={workpermit_expirydate}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <Divider className={classes.divider} />\r\n              <div>\r\n                <Controller\r\n                  name=\"date_of_join\"\r\n                  control={control}\r\n                  defaultValue={date_of_join}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Joining Date\"\r\n                        id=\"margin-normal\"\r\n                        name=\"date_of_join\"\r\n                        type=\"date\"\r\n                        defaultValue={date_of_join}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"date_of_resign\"\r\n                  control={control}\r\n                  defaultValue={date_of_resign}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Resign Date\"\r\n                        id=\"margin-normal\"\r\n                        name=\"date_of_resign\"\r\n                        type=\"date\"\r\n                        defaultValue={date_of_resign}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"leave_entitled\"\r\n                  control={control}\r\n                  defaultValue={leave_entitled}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Annual Leaves Entitled\"\r\n                        id=\"standard-annualleave\"\r\n                        name=\"leave_entitled\"\r\n                        type=\"numeric\"\r\n                        defaultValue={leave_entitled}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"leave_bal\"\r\n                  control={control}\r\n                  defaultValue={leave_bal}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Leaves Balance\"\r\n                        id=\"standard-leavebal\"\r\n                        name=\"leave_bal\"\r\n                        type=\"numeric\"\r\n                        defaultValue={leave_bal}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"designation\"\r\n                  control={control}\r\n                  defaultValue={designation}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Designation\"\r\n                        id=\"margin-normal\"\r\n                        name=\"designation\"\r\n                        defaultValue={designation}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        {designations &&\r\n                          designations.map((r) => {\r\n                            return <MenuItem value={r.name}>{r.name}</MenuItem>;\r\n                          })}\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"department\"\r\n                  control={control}\r\n                  defaultValue={department}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Department\"\r\n                        id=\"margin-normal\"\r\n                        name=\"department\"\r\n                        defaultValue={department}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        {departments &&\r\n                          departments.map((r) => {\r\n                            return <MenuItem value={r.name}>{r.name}</MenuItem>;\r\n                          })}\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"reporting_to\"\r\n                  control={control}\r\n                  defaultValue={reporting_to}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Reporting To\"\r\n                        id=\"standard-reportingto\"\r\n                        name=\"reporting_to\"\r\n                        defaultValue={reporting_to}\r\n                        className={classes.textField}\r\n                        onChange={(e) => {\r\n                          onChange(e.target.value);\r\n                          handleReportingTo(e.target.value);\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        <MenuItem value=\"\">None</MenuItem>\r\n                        {employees &&\r\n                          employees.map((r) => {\r\n                            return <MenuItem value={r.name}>{r.name}</MenuItem>;\r\n                          })}\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"reporting_email\"\r\n                  control={control}\r\n                  defaultValue={reportemail}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Reporting Email\"\r\n                        id=\"standard-reportingemail\"\r\n                        name=\"reporting_email\"\r\n                        value={reportemail}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <Divider className={classes.divider} />\r\n            </div>\r\n          </Grid>\r\n          <Divider />\r\n        </Paper>\r\n      </form>\r\n\r\n      {/* <div>\r\n        <Grid xs={12}>\r\n          <EmpFamily />\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <EmpEducations />\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <EmpExperiences />\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <EmpTrainings />\r\n        </Grid>\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  divider: {\r\n    padding: 4,\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 350,\r\n  },\r\n}));\r\n\r\nexport default EmployeeFormNew;\r\n","import React from \"react\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport clsx from \"clsx\";\r\nimport {  makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport { Link } from \"react-router-dom\";\r\nimport EmployeeForm from \"./EmployeeForm\";\r\nimport EmployeeFormNew from \"./EmployeeFormNew\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\n\r\nconst drawerWidth = 240;\r\n\r\n// const ToolbarHeader = ({ title }) => {\r\n//   const classes = useToolbarStyles();\r\n\r\n//   return (\r\n//     <div>\r\n//       <Toolbar>\r\n//         <Typography\r\n//           className={classes.title}\r\n//           variant=\"h6\"\r\n//           id=\"tableTitle\"\r\n//           component=\"div\"\r\n//         >\r\n//           {title}\r\n//         </Typography>\r\n//       </Toolbar>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\nconst SingleEmployee = ({ title }) => {\r\n  const classes = useStyles();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const { isEditing } = useEmployeesContext();\r\n  if (isEditing) {\r\n    return (\r\n      <div>\r\n        <CssBaseline />\r\n\r\n        <div className={classes.appBarSpacer}>\r\n          <Container maxWidth=\"lg\" className={classes.container}>\r\n            <Grid container spacing={3}>\r\n              {/* <Grid item xs={12} md={8} lg={9}> */}\r\n              <Grid item xs={12}>\r\n                <Paper className={fixedHeightPaper}>\r\n                  <Link to=\"/allemployees\">\r\n                    <div>\r\n                      <ArrowBackIcon fontSize=\"large\" color=\"primary\" />\r\n                    </div>\r\n                  </Link>\r\n                  <div>\r\n                    {/* <ToolbarHeader title={title} /> */}\r\n\r\n                    <EmployeeForm />\r\n                  </div>\r\n                </Paper>\r\n              </Grid>\r\n            </Grid>\r\n          </Container>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\nreturn (\r\n  <div>\r\n    <CssBaseline />\r\n\r\n    <div className={classes.appBarSpacer}>\r\n      <Container maxWidth=\"lg\" className={classes.container}>\r\n        <Grid container spacing={3}>\r\n          {/* <Grid item xs={12} md={8} lg={9}> */}\r\n          <Grid item xs={12}>\r\n            <Paper className={fixedHeightPaper}>\r\n              <Link to=\"/allemployees\">\r\n                <div>\r\n                  <ArrowBackIcon fontSize=\"large\" color=\"primary\" />\r\n                </div>\r\n              </Link>\r\n              <div>\r\n                {/* <ToolbarHeader title={title} /> */}\r\n\r\n                <EmployeeFormNew />\r\n              </div>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  </div>\r\n);\r\n  }\r\n  \r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(9),\r\n    paddingBottom: theme.spacing(4),\r\n    border: \"1px solid\",\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    // display: \"flex\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n    border: \"1px solid\",\r\n    width: \"100%\",\r\n  },\r\n  fixedHeight: {\r\n    height: 800,\r\n  },\r\n}));\r\n\r\nexport default SingleEmployee;\r\n","import React, { useState } from \"react\";\r\nimport //   Button,\r\n//   Icon,\r\n//   MenuItem,\r\n//   TextField,\r\n//   Paper,\r\n//   Select,\r\n//   Typography,\r\n//   Divider,\r\n\"@material-ui/core\";\r\nimport {\r\n  //AspectRatio,\r\n  Box,\r\n  Button,\r\n  //ButtonGroup,\r\n  //Center,\r\n  Checkbox,\r\n  //Container,\r\n  Divider,\r\n  //Flex,\r\n  FormControl,\r\n  //FormLabel,\r\n  //FormErrorMessage,\r\n  //FormHelperText,\r\n  //Grid,\r\n  //GridItem,\r\n  Heading,\r\n  HStack,\r\n  //Icon,\r\n  //IconButton,\r\n  //Image,\r\n  Input,\r\n  InputGroup,\r\n  InputLeftAddon,\r\n  //InputLeftElement,\r\n  //Modal,\r\n  //ModalOverlay,\r\n  //ModalContent,\r\n  //ModalHeader,\r\n  //ModalFooter,\r\n  //ModalBody,\r\n  //ModalCloseButton,\r\n  //Radio,\r\n  //RadioGroup,\r\n  Select,\r\n  //SimpleGrid,\r\n  //Stack,\r\n  //StackDivider,\r\n  //Text,\r\n  //Tabs,\r\n \r\n} from \"@chakra-ui/react\";\r\n//import * as emailjs from \"emailjs-com\";\r\n//import { useRecoilState } from \"recoil\";\r\n//import { loginLevelState } from \"./data/atomdata\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import { useCustomToast } from \"../helpers/useCustomToast\";\r\n//import { useEmployees } from \"./employees/useEmployees\";\r\nimport { useDepartments } from \"./departments/useDepartments\";\r\nimport { useDesignations } from \"./designations/useDesignations\";\r\nimport { useJobstatus } from \"./jobstatus/useJobstatus\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\n\r\n//const SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\n//const TEMPLATE_ID = \"template_1y8odlq\";\r\n//const USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\n\r\n// const initial_state = {\r\n//   empid: \"\",\r\n//   name: \"\",\r\n//   designation: \"\",\r\n//   department: \"\",\r\n//   effectdate: \"\",\r\n//   basicsalary: 0,\r\n//   siteallows: 0,\r\n//   remark: \"\",\r\n//   status: \"\",\r\n//   isresign: false,\r\n//};\r\n\r\nconst JobhistoryForm = ({\r\n  state,\r\n  setState,\r\n  statustype,\r\n  add_Item,\r\n  update_Item,\r\n  onJobClose,\r\n}) => {\r\n  //const toast = useCustomToast();\r\n  const classes = useStyles();\r\n  const field_width = \"138\";\r\n  //const { employees } = useEmployees();\r\n  const { departments } = useDepartments();\r\n  const { designations } = useDesignations();\r\n  const { jobstatus } = useJobstatus();\r\n  const [isresign, setIsresign] = useState(false);\r\n  //const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { handleSubmit, control } = useForm({\r\n    defaultValues: {\r\n      ...state,\r\n    },\r\n  });\r\n\r\n  //console.log(\"jobstate\",state)  \r\n  const onSubmit = (values) => {\r\n    if (statustype === \"edit\") {\r\n      update_Item(values);\r\n    }\r\n    if (statustype === \"add\") {\r\n      add_Item(values);\r\n    }\r\n    handleClose();\r\n  };\r\n\r\n  const handleClose = () => {\r\n    onJobClose();\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   setState(initial_state);\r\n  //   setState({ ...formdata });\r\n  //   setState({ ...formdata });\r\n  //   console.log(\"laeve form\",state)\r\n  // }, [initialValues]);\r\n\r\n  return (\r\n    <Box>\r\n      <Box p={2}>\r\n        <Heading size=\"md\">EMPLOYMENT HISTORY FORM</Heading>\r\n      </Box>\r\n      <Divider />\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <div>\r\n          <FormControl>\r\n            <Controller\r\n              control={control}\r\n              name=\"name\"\r\n              defaultValue={state.name}\r\n              render={({ field: { onChange, value, ref } }) => (\r\n                <InputGroup>\r\n                  <HStack w=\"100%\" py={1}>\r\n                    <InputLeftAddon children=\"Name\" minWidth={field_width} />\r\n                    <Input\r\n                      name=\"name\"\r\n                      value={value}\r\n                      width=\"full\"\r\n                      onChange={onChange}\r\n                      borderColor=\"gray.400\"\r\n                      isReadOnly\r\n                      //textTransform=\"capitalize\"\r\n                      ref={ref}\r\n                      placeholder=\"name\"\r\n                    />\r\n                  </HStack>\r\n                </InputGroup>\r\n              )}\r\n            />\r\n          </FormControl>\r\n        </div>\r\n        <div>\r\n          <FormControl>\r\n            <Controller\r\n              control={control}\r\n              name=\"designation\"\r\n              defaultValue={state.designation}\r\n              render={({ field: { onChange, value, ref } }) => (\r\n                <InputGroup>\r\n                  <HStack w=\"100%\" py={1}>\r\n                    <InputLeftAddon\r\n                      children=\"Designation\"\r\n                      minWidth={field_width}\r\n                    />\r\n                    <Select\r\n                      name=\"designation\"\r\n                      value={value}\r\n                      width=\"full\"\r\n                      onChange={onChange}\r\n                      borderColor=\"gray.400\"\r\n                      //textTransform=\"capitalize\"\r\n                      ref={ref}\r\n                      //placeholder=\"category\"\r\n                    >\r\n                      <option value=\"\">None</option>\r\n                      {designations &&\r\n                        designations.map((rec) => {\r\n                          return (\r\n                            <option key={rec.id} value={rec.name}>\r\n                              {rec.name}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                    </Select>\r\n                  </HStack>\r\n                </InputGroup>\r\n              )}\r\n            />\r\n          </FormControl>\r\n        </div>\r\n        <div>\r\n          <FormControl>\r\n            <Controller\r\n              control={control}\r\n              name=\"department\"\r\n              defaultValue={state.department}\r\n              render={({ field: { onChange, value, ref } }) => (\r\n                <InputGroup>\r\n                  <HStack w=\"100%\" py={1}>\r\n                    <InputLeftAddon\r\n                      children=\"Department\"\r\n                      minWidth={field_width}\r\n                    />\r\n                    <Select\r\n                      name=\"department\"\r\n                      value={value}\r\n                      width=\"full\"\r\n                      onChange={onChange}\r\n                      borderColor=\"gray.400\"\r\n                      //textTransform=\"capitalize\"\r\n                      ref={ref}\r\n                      //placeholder=\"category\"\r\n                    >\r\n                      <option value=\"\">None</option>\r\n                      {departments &&\r\n                        departments.map((rec) => {\r\n                          return (\r\n                            <option key={rec.id} value={rec.name}>\r\n                              {rec.name}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                    </Select>\r\n                  </HStack>\r\n                </InputGroup>\r\n              )}\r\n            />\r\n          </FormControl>\r\n        </div>\r\n        <div>\r\n          <FormControl>\r\n            <Controller\r\n              control={control}\r\n              name=\"basicsalary\"\r\n              defaultValue={state.basicsalary}\r\n              render={({ field: { onChange, value, ref } }) => (\r\n                <InputGroup>\r\n                  <HStack w=\"100%\" py={1}>\r\n                    <InputLeftAddon\r\n                      children=\"Basic Salary\"\r\n                      minWidth={field_width}\r\n                    />\r\n                    <Input\r\n                      name=\"basicsalary\"\r\n                      value={value}\r\n                      type=\"number\"\r\n                      width=\"full\"\r\n                      onChange={onChange}\r\n                      borderColor=\"gray.400\"\r\n                      //textTransform=\"capitalize\"\r\n                      ref={ref}\r\n                      placeholder=\"basic salary\"\r\n                    />\r\n                  </HStack>\r\n                </InputGroup>\r\n              )}\r\n            />\r\n          </FormControl>\r\n        </div>\r\n        <div>\r\n          <FormControl>\r\n            <Controller\r\n              control={control}\r\n              name=\"siteallows\"\r\n              defaultValue={state.siteallows}\r\n              render={({ field: { onChange, value, ref } }) => (\r\n                <InputGroup>\r\n                  <HStack w=\"100%\" py={1}>\r\n                    <InputLeftAddon\r\n                      children=\"Site Allowance\"\r\n                      minWidth={field_width}\r\n                    />\r\n                    <Input\r\n                      name=\"siteallows\"\r\n                      value={value}\r\n                      type=\"number\"\r\n                      width=\"full\"\r\n                      onChange={onChange}\r\n                      borderColor=\"gray.400\"\r\n                      //textTransform=\"capitalize\"\r\n                      ref={ref}\r\n                      placeholder=\"site allowance\"\r\n                    />\r\n                  </HStack>\r\n                </InputGroup>\r\n              )}\r\n            />\r\n          </FormControl>\r\n        </div>\r\n        <div>\r\n          <FormControl>\r\n            <Controller\r\n              control={control}\r\n              name=\"effectdate\"\r\n              defaultValue={state.effectdate}\r\n              render={({ field: { onChange, value, ref } }) => (\r\n                <InputGroup>\r\n                  <HStack w=\"100%\" py={1}>\r\n                    <InputLeftAddon\r\n                      children=\"Effective Date\"\r\n                      minWidth={field_width}\r\n                    />\r\n                    <Input\r\n                      name=\"effectdate\"\r\n                      value={value}\r\n                      type=\"date\"\r\n                      width=\"full\"\r\n                      onChange={onChange}\r\n                      borderColor=\"gray.400\"\r\n                      //textTransform=\"capitalize\"\r\n                      ref={ref}\r\n                      placeholder=\"effective date\"\r\n                    />\r\n                  </HStack>\r\n                </InputGroup>\r\n              )}\r\n            />\r\n          </FormControl>\r\n        </div>\r\n\r\n        <div>\r\n          <FormControl>\r\n            <Controller\r\n              control={control}\r\n              name=\"status\"\r\n              defaultValue={state.department}\r\n              render={({ field: { onChange, value, ref } }) => (\r\n                <InputGroup>\r\n                  <HStack w=\"100%\" py={1}>\r\n                    <InputLeftAddon children=\"Status\" minWidth={field_width} />\r\n                    <Select\r\n                      name=\"status\"\r\n                      value={value}\r\n                      width=\"full\"\r\n                      onChange={onChange}\r\n                      borderColor=\"gray.400\"\r\n                      //textTransform=\"capitalize\"\r\n                      ref={ref}\r\n                      //placeholder=\"category\"\r\n                    >\r\n                      <option value=\"\">None</option>\r\n                      {jobstatus &&\r\n                        jobstatus.map((rec) => {\r\n                          return (\r\n                            <option key={rec.id} value={rec.name}>\r\n                              {rec.name}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                    </Select>\r\n                  </HStack>\r\n                </InputGroup>\r\n              )}\r\n            />\r\n          </FormControl>\r\n          <FormControl>\r\n            <Controller\r\n              control={control}\r\n              name=\"isresign\"\r\n              defaultValue={isresign}\r\n              render={({ field: { onChange, value, ref } }) => (\r\n                <InputGroup>\r\n                  <HStack w=\"100%\" py={1}>\r\n                    <InputLeftAddon\r\n                      children=\"Resign ?\"\r\n                      minWidth={field_width}\r\n                    />\r\n                    <Checkbox\r\n                      name=\"isresign\"\r\n                      value={value}\r\n                      width=\"full\"\r\n                      onChange={(e) => {\r\n                        onChange(e.target.checked);\r\n                        setIsresign(e.target.checked);\r\n                      }}\r\n                      borderColor=\"gray.400\"\r\n                      //textTransform=\"capitalize\"\r\n                      ref={ref}\r\n                    ></Checkbox>\r\n                  </HStack>\r\n                </InputGroup>\r\n              )}\r\n            />\r\n          </FormControl>\r\n        </div>\r\n        <div>\r\n          <FormControl>\r\n            <Controller\r\n              control={control}\r\n              name=\"remark\"\r\n              defaultValue={state.remark}\r\n              render={({ field: { onChange, value, ref } }) => (\r\n                <InputGroup>\r\n                  <HStack w=\"100%\" py={1}>\r\n                    <InputLeftAddon children=\"Remark\" minWidth={field_width} />\r\n                    <Input\r\n                      name=\"remark\"\r\n                      value={value}\r\n                      width=\"full\"\r\n                      onChange={onChange}\r\n                      borderColor=\"gray.400\"\r\n                      //textTransform=\"capitalize\"\r\n                      ref={ref}\r\n                      placeholder=\"remark\"\r\n                    />\r\n                  </HStack>\r\n                </InputGroup>\r\n              )}\r\n            />\r\n          </FormControl>\r\n        </div>\r\n\r\n        <div>\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.button}\r\n            onClick={handleSubmit(onSubmit)}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 400,\r\n  },\r\n}));\r\n\r\nexport default JobhistoryForm;\r\n","import React, { useState, useEffect, useMemo } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport {\r\n  Heading,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { AiFillEdit, AiFillDelete, AiOutlinePlus } from \"react-icons/ai\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useJobhistory } from \"./jobhistory/useJobhistory\";\r\nimport { useUpdateJobhistory } from \"./jobhistory/useUpdateJobhistory\";\r\nimport { useAddJobhistory } from \"./jobhistory/useAddJobhistory\";\r\nimport { useDeleteJobhistory } from \"./jobhistory/useDeleteJobhistory\";\r\nimport JobhistoryForm from \"./JobhistoryForm\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\n\r\nconst initial_jobhistory = {\r\n  empid: \"\",\r\n  name: \"\",\r\n  designation: \"\",\r\n  department: \"\",\r\n  status: \"\",\r\n  remark: \"\",\r\n  basicsalary: 0,\r\n  siteallows: 0,\r\n  isresign: false,\r\n};\r\n\r\nexport default function Emp_Jobhistory({\r\n  empid,\r\n  staffname,\r\n  basicsalary,\r\n  siteallows,\r\n  department,\r\n  designation,\r\n  jobhistorydata,\r\n  setJobhistorydata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const { jobhistory, filter, setFilter, setJobId } = useJobhistory();\r\n  //const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const updateJobhistory = useUpdateJobhistory();\r\n  const addJobhistory = useAddJobhistory();\r\n  const deleteJobhistory = useDeleteJobhistory();\r\n  const [state, setState] = useState({});\r\n  const [statustype, setStatusType] = useState(\"\");\r\n  const { editEmployeeID } = useEmployeesContext();\r\n  const {\r\n    isOpen: isJobOpen,\r\n    onOpen: onJobOpen,\r\n    onClose: onJobClose,\r\n  } = useDisclosure();\r\n  const {\r\n    isOpen: isAlertDeleteOpen,\r\n    onOpen: onAlertDeleteOpen,\r\n    onClose: onAlertDeleteClose,\r\n  } = useDisclosure();\r\n\r\n  const columns = useMemo(() => [\r\n    {\r\n      title: \"Designation\",\r\n      field: \"designation\",\r\n    },\r\n    {\r\n      title: \"Department\",\r\n      field: \"department\",\r\n    },\r\n    {\r\n      title: \"Effective Date\",\r\n      field: \"effectdate\",\r\n      type: \"date\",\r\n      dateSetting: { locale: \"en-GB\" },\r\n      editComponent: (props) => (\r\n        <TextField\r\n          defaultValue={props.value || new Date()}\r\n          onChange={(e) => props.onChange(e.target.value)}\r\n          type=\"date\"\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      title: \"Status\",\r\n      field: \"status\",\r\n    },\r\n    {\r\n      title: \"Remark\",\r\n      field: \"remark\",\r\n    },\r\n  ],[]);\r\n\r\n  useEffect(() => {\r\n    setJobId(editEmployeeID);\r\n  }, []);\r\n\r\n  const add_Jobhistory = (data) => {\r\n    console.log(\"addjob\", data);\r\n    addJobhistory({\r\n      ...data,\r\n    });\r\n  };\r\n\r\n  const delete_Jobhistory = (id) => {\r\n    deleteJobhistory(id);\r\n  };\r\n\r\n  const update_Jobhistory = (data) => {\r\n    const { id, rec_id, tableData, ...fields } = data;\r\n    updateJobhistory({ id, ...fields });\r\n  };\r\n\r\n  const handleAddJobhistory = () => {\r\n    const data = {\r\n      ...initial_jobhistory,\r\n      name: staffname,\r\n      empid: empid,\r\n      basicsalary: basicsalary,\r\n      siteallows: siteallows,\r\n      department: department,\r\n      designation: designation,\r\n    };\r\n    setState(data);\r\n    onJobOpen(true);\r\n  };\r\n\r\n  const handleUpdateJobhistory = (data) => {\r\n    setState(data);\r\n    onJobOpen(true);\r\n  };\r\n\r\n  const handleDeleteJobhistory = (rowData) => {\r\n    setState((prev) => (prev = { ...rowData }));\r\n    onAlertDeleteOpen();\r\n  };\r\n\r\n  const handleOnDeleteConfirm = () => {\r\n    const { id } = state;\r\n    delete_Jobhistory(id);\r\n    // toast({\r\n    //   title: \"Order being deleted!\",\r\n    //   status: \"warning\",\r\n    // });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={jobhistory}\r\n          title=\"Employment History\"\r\n          actions={[\r\n            {\r\n              icon: () => <AiOutlinePlus size=\"30px\" />,\r\n              tooltip: \"Add Record\",\r\n              isFreeAction: true,\r\n              onClick: (event, rowData) => {\r\n                setStatusType((prev) => (prev = \"add\"));\r\n                handleAddJobhistory(rowData);\r\n              },\r\n            },\r\n            (rowData) => ({\r\n              //disabled: rowData.status !== \"Pending\",\r\n              icon: () => <AiFillEdit size=\"30px\" />,\r\n              tooltip: \"Edit Record\",\r\n              onClick: (event, rowData) => {\r\n                setStatusType((prev) => (prev = \"edit\"));\r\n                handleUpdateJobhistory(rowData);\r\n              },\r\n            }),\r\n            (rowData) => ({\r\n              //disabled: rowData.status !== \"Pending\",\r\n              icon: () => <AiFillDelete />,\r\n              tooltip: \"Delete Record\",\r\n              onClick: (event, rowData) => {\r\n                handleDeleteJobhistory(rowData);\r\n              },\r\n            }),\r\n          ]}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n      <Modal\r\n        closeOnOverlayClick={false}\r\n        isOpen={isJobOpen}\r\n        onClose={onJobClose}\r\n        size=\"lg\"\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          {/* <ModalHeader>Product Form</ModalHeader> */}\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            <JobhistoryForm\r\n              state={state}\r\n              setState={setState}\r\n              statustype={statustype}\r\n              add_Item={add_Jobhistory}\r\n              update_Item={update_Jobhistory}\r\n              onJobClose={onJobClose}\r\n            />\r\n          </ModalBody>\r\n\r\n          {/* <ModalFooter>\r\n            <Button colorScheme=\"blue\" mr={3} onClick={onProductClose}>\r\n              Close\r\n            </Button>\r\n          </ModalFooter> */}\r\n        </ModalContent>\r\n      </Modal>\r\n      <AlertDialogBox\r\n        onClose={onAlertDeleteClose}\r\n        onConfirm={handleOnDeleteConfirm}\r\n        isOpen={isAlertDeleteOpen}\r\n        title=\"Delete Employment History\"\r\n      >\r\n        <Heading size=\"md\">\r\n          Are you sure you want to delete this history record ?\r\n        </Heading>\r\n      </AlertDialogBox>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n"],"sourceRoot":""}