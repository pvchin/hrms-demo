{"version":3,"sources":["components/PayForm.js","components/PaySummary.js","components/PrintPaySummary.js","components/payrun/useUpdatePayrun.js","components/payslips/useUpdatePayslips.js","components/Payrunbatch.js","../node_modules/@chakra-ui/react/node_modules/@chakra-ui/table/dist/chakra-ui-table.esm.js"],"names":["initial_state","name","period","date","payrun","bank_name","bank_acno","tap_acno","scp_acno","empid","status","allows_type1","allows_type1amt","allows_type2","allows_type2amt","allows_type3","allows_type3amt","allows_type4","allows_type4amt","allows_type5","allows_type5amt","allows_type6","allows_type6amt","allows_type7","allows_type7amt","allows_type8","allows_type8amt","deducts_type1","deducts_type1amt","deducts_type2","deducts_type2amt","deducts_type3","deducts_type3amt","deducts_type4","deducts_type4amt","deducts_type5","deducts_type5amt","deducts_type6","deducts_type6amt","deducts_type7","deducts_type7amt","deducts_type8","deducts_type8amt","tap_checkbox","salary_currency","currency_rate","wages","nett_pay","tap_amount","scp_amount","total_allowances","total_deductions","site_allows","expenses_claims","nett_pay_bnd","wages_bnd","site_allows_bnd","expenses_claims_bnd","tap_amount_bnd","scp_amount_bnd","total_allowances_bnd","total_deductions_bnd","useStyles","makeStyles","theme","root","flexGrow","button","margin","spacing","container","padding","width","display","gridTemplateColumns","gridAutoRows","position","left","transform","justifyContent","backgroundColor","fixedHeight","height","paper","overflow","flexDirection","border","color","bcakgroundColor","card","section","maxWidth","underline","marginBottom","background","marginLeft","marginRight","title","marginbottom","textAlign","jobscenter","btncontainer","flexWrap","jobbtn","borderColor","textTransform","fontSize","letterSpacing","transition","cursor","lineHeight","outlineColor","boxShadow","activebtn","jobinfo","fontWeight","divider","textField","divContainer","formLabel","marginTop","PayForm","formdata","loadFormdata","setFormdata","setLoadFormdata","payitems","rowindex","isStart","singlebatchpayslip","classes","useState","state","setState","isLoad","setIsLoad","useEffect","prev","handleCalc","handleChange","e","preventDefault","target","type","value","val","isNaN","undefined","parseFloat","data","tableData","checked","Update_Empdata","usePayslipsBatch","totalTAP","nettPay","siteallows","expsclaims","totalSCP","allows","deducts","wagesbnd","totalTAPbnd","totalSCPbnd","nettPaybnd","allowsbnd","deductsbnd","siteallowsbnd","expsclaimsbnd","Math","ceil","round","Number","EPSILON","currency","onSubmit","Grid","direction","style","item","sm","align","as","size","TextField","label","variant","onChange","InputLabelProps","shrink","InputProps","readOnly","displayEmpty","defaultValue","InputLabel","htmlFor","className","NativeSelect","filter","pay_type","map","row","id","p","isInvalid","isChecked","colorScheme","step","min","max","errorText","inputProps","minLength","Divider","PaySummary","useRecoilState","payrunState","payrundata","setPayrundata","isCalc","setIsCalc","columns","useMemo","field","editable","totalwages","reduce","acc","totalsitesallows","totalexpclaims","totalallows","totaldeducts","totaltap","totalscp","totalpayroll","totalexpensesclaims","handleCalcTotals","h","w","options","filtering","search","toolbar","paging","headerStyle","showTitle","totalsiteallows","PrintPaySummary","subtitle","names","r","formatPriceZero","tapamount","scpamount","sitesallowsamt","expclaimsamt","allowsamt","deductsamt","nettpay","totalnettpay","vfs","vfsFonts","pdfMake","documentDefinition","pageSize","pageOrientation","content","text","table","widths","body","alignment","stack","ul","styles","header","bold","subheader","footer","tableExample","tableOpacityExample","fillColor","fillOpacity","tableHeader","defaultStyle","createPdf","open","a","fields","fetch","payrun_url","method","JSON","stringify","useUpdatePayrun","queryClient","useQueryClient","toast","useCustomToast","useMutation","updatePayrun","onSuccess","invalidateQueries","onError","mutate","payslips_url","useUpdatePayslips","updatePayslips","onErrot","initial_formdata","pay_date","months","Payrunbatch","navigate","useNavigate","payslip_period","usePayslipsContext","payslipsbatch","psbpayrunId","setPSBPayrunId","employees","useEmployees","usePayrun","updatePayslip","useTablesContext","loadPayitems","payrunIdState","payrunId","payrunStatusState","setPayrunStatus","loadUpdatedata","setLoadUpdatedata","setRowIndex","emponclick","setEmponclick","setIsStart","isShow","setIsShow","isUpdPayslip","setIsUpdPayslip","tabno","setTabno","useDisclosure","isOpen","onOpen","onClose","cellStyle","calcPayrunTotals","saveIndividualPayslips","exportPdfTable","forEach","rec","rec_id","console","log","tmpbatch","index","handleSavePayrun","tmppayrun","SentEmailModal","selection","components","Toolbar","props","isDisabled","onClick","handleSentEmail","leftIcon","mth","substring","yr","pay","emaildata","to_name","to_email","email","message","emailjs","process","then","response","err","templateRows","templateColumns","rowSpan","colSpan","alignItems","pl","pt","pr","handleSavePayslips","handlePrintSummary","handleVerifyPayslips","orientation","defaultIndex","handleTabChange","base","md","lg","xl","length","whiteSpace","wordWrap","paydata","handleEmpButtonClick","mr","_extends","Object","assign","i","arguments","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","_excluded2","_excluded3","Table","forwardRef","ref","useMultiStyleConfig","_omitThemingProps","omitThemingProps","tableProps","React","StylesProvider","chakra","role","__css","cx","__DEV__","displayName","TableCaption","_props$placement","placement","rest","caption","captionSide","Tbody","tbody"],"mappings":"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","file":"static/js/18.ee9fd4b0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  //ButtonGroup,\r\n  Grid,\r\n  //GridItem,\r\n  Icon,\r\n  //Input,\r\n  TextField,\r\n  //FormControlLabel,\r\n  Divider,\r\n  //ListSubheader,\r\n  //MenuItem,\r\n  //Select,\r\n  NativeSelect,\r\n  InputLabel,\r\n} from \"@material-ui/core\";\r\nimport { Box, Checkbox, Heading, Text } from \"@chakra-ui/react\";\r\nimport currency from \"currency.js\";\r\n//import CurrencyTextField from \"@unicef/material-ui-currency-textfield\";\r\n//import { Autocomplete } from \"@material-ui/lab\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { usePayslipsBatch } from \"./payslips/usePayslipsBatch\";\r\n//import { useUpdatePayslips } from \"./payslips/useUpdatePayslips\";\r\n//import { usePayslipsContext } from \"../context/payslips_context\";\r\n//import { useAllowances } from \"./allowances/useAllowances\";\r\n\r\nconst initial_state = [\r\n  {\r\n    name: \"\",\r\n    period: \"\",\r\n    date: \"\",\r\n    payrun: \"\",\r\n    bank_name: \"\",\r\n    bank_acno: \"\",\r\n    tap_acno: \"\",\r\n    scp_acno: \"\",\r\n    empid: \"\",\r\n    status: \"\",\r\n    allows_type1: \" \",\r\n    allows_type1amt: 0,\r\n    allows_type2: \" \",\r\n    allows_type2amt: 0,\r\n    allows_type3: \" \",\r\n    allows_type3amt: 0,\r\n    allows_type4: \" \",\r\n    allows_type4amt: 0,\r\n    allows_type5: \" \",\r\n    allows_type5amt: 0,\r\n    allows_type6: \" \",\r\n    allows_type6amt: 0,\r\n    allows_type7: \" \",\r\n    allows_type7amt: 0,\r\n    allows_type8: \" \",\r\n    allows_type8amt: 0,\r\n    deducts_type1: \" \",\r\n    deducts_type1amt: 0,\r\n    deducts_type2: \" \",\r\n    deducts_type2amt: 0,\r\n    deducts_type3: \" \",\r\n    deducts_type3amt: 0,\r\n    deducts_type4: \" \",\r\n    deducts_type4amt: 0,\r\n    deducts_type5: \" \",\r\n    deducts_type5amt: 0,\r\n    deducts_type6: \" \",\r\n    deducts_type6amt: 0,\r\n    deducts_type7: \" \",\r\n    deducts_type7amt: 0,\r\n    deducts_type8: \" \",\r\n    deducts_type8amt: 0,\r\n    tap_checkbox: false,\r\n    salary_currency: \" \",\r\n    currency_rate: 1,\r\n\r\n    wages: 0,\r\n    nett_pay: 0,\r\n    tap_amount: 0,\r\n    scp_amount: 0,\r\n    total_allowances: 0,\r\n    total_deductions: 0,\r\n    site_allows: 0,\r\n    expenses_claims: 0,\r\n\r\n    nett_pay_bnd: 0,\r\n    wages_bnd: 0,\r\n    site_allows_bnd: 0,\r\n    expenses_claims_bnd: 0,\r\n    tap_amount_bnd: 0,\r\n    scp_amount_bnd: 0,\r\n    total_allowances_bnd: 0,\r\n    total_deductions_bnd: 0,\r\n  },\r\n];\r\n\r\nconst PayForm = ({\r\n  formdata,\r\n  setFormdata,\r\n  loadFormdata,\r\n  setLoadFormdata,\r\n  payitems,\r\n  //setLoadUpdatedata,\r\n  rowindex,\r\n  //isCalc,\r\n  isStart,\r\n  //setIsStart,\r\n  //setIsCalc,\r\n  singlebatchpayslip,\r\n}) => {\r\n  const classes = useStyles();\r\n  const [state, setState] = useState(initial_state);\r\n  //const { allowances } = useAllowances();\r\n  //const { payslipsbatch, psbpayrunId, setPSBPayrunId } = usePayslipsBatch();\r\n  //const updatePayslips = useUpdatePayslips();\r\n  //const { singlebatchpayslip } = usePayslipsContext();\r\n  const [isLoad, setIsLoad] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setState((prev) => (prev = { ...formdata }));\r\n    setLoadFormdata(false);\r\n  }, [loadFormdata]);\r\n\r\n  useEffect(() => {\r\n    if (state) {\r\n      handleCalc();\r\n      setIsLoad(false);\r\n    }\r\n  }, [isLoad]);\r\n\r\n  const Update_Empdata = ({ name, value }) => {\r\n    let data = singlebatchpayslip[rowindex];\r\n    data[name] = value;\r\n    data.tableData.checked = true;\r\n    //console.log(\"update data\", data);\r\n    //console.log(\"update payslip\", singlebatchpayslip[rowindex]);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    e.preventDefault();\r\n\r\n    const { name, type, value } = e.target;\r\n    let val =\r\n      type === \"number\"\r\n        ? isNaN(value) || value === undefined\r\n          ? 0\r\n          : parseFloat(value)\r\n        : value;\r\n\r\n    //setFormInput({ [name]: val });\r\n    setState((prev) => (prev = { ...state, [name]: val }));\r\n    Update_Empdata({ name: name, value: val });\r\n    setIsLoad(true);\r\n  };\r\n\r\n  const handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    handleCalc();\r\n  };\r\n\r\n  const handleCalc = (e) => {\r\n    //console.log(\"start\", isStart)\r\n    if (isStart) {\r\n      return;\r\n    }\r\n    if (!usePayslipsBatch) {\r\n      return;\r\n    }\r\n    if (!singlebatchpayslip) {\r\n      return;\r\n    }\r\n    if (!state) {\r\n      return;\r\n    }\r\n    var wages = 0,\r\n      totalTAP = 0,\r\n      totalSCP = 0,\r\n      nettPay = 0.0,\r\n      allows = 0,\r\n      deducts = 0,\r\n      siteallows = 0,\r\n      expsclaims = 0,\r\n      wagesbnd = 0,\r\n      totalTAPbnd = 0,\r\n      totalSCPbnd = 0,\r\n      nettPaybnd = 0,\r\n      allowsbnd = 0,\r\n      deductsbnd = 0,\r\n      siteallowsbnd = 0,\r\n      expsclaimsbnd = 0;\r\n    let data = singlebatchpayslip[rowindex];\r\n    if (!data) {\r\n      return false;\r\n    }\r\n    wages = isNaN(state.wages) || state.wages === undefined ? 0 : state.wages;\r\n    totalTAP = state.tap_checkbox ? Math.ceil(wages * 0.05) : 0;\r\n    totalSCP = state.tap_checkbox\r\n      ? Math.round((wages + Number.EPSILON) * 0.035 * 100) / 100\r\n      : 0;\r\n    if (totalSCP > 98) {\r\n      totalSCP = 98;\r\n    }\r\n    //console.log(\"scp\", totalSCP);\r\n    siteallows = parseFloat(isNaN(state.site_allows) ? 0 : state.site_allows);\r\n    expsclaims = parseFloat(\r\n      isNaN(state.expenses_claims) ? 0 : state.expenses_claims\r\n    );\r\n\r\n    allows =\r\n      parseFloat(isNaN(state.allows_type3amt) ? 0 : state.allows_type3amt) +\r\n      parseFloat(isNaN(state.allows_type4amt) ? 0 : state.allows_type4amt) +\r\n      parseFloat(isNaN(state.allows_type5amt) ? 0 : state.allows_type5amt) +\r\n      parseFloat(isNaN(state.allows_type6amt) ? 0 : state.allows_type6amt) +\r\n      parseFloat(isNaN(state.allows_type7amt) ? 0 : state.allows_type7amt) +\r\n      parseFloat(isNaN(state.allows_type8amt) ? 0 : state.allows_type8amt);\r\n\r\n    deducts =\r\n      parseFloat(isNaN(state.deducts_type1amt) ? 0 : state.deducts_type1amt) +\r\n      parseFloat(isNaN(state.deducts_type2amt) ? 0 : state.deducts_type2amt) +\r\n      parseFloat(isNaN(state.deducts_type3amt) ? 0 : state.deducts_type3amt) +\r\n      parseFloat(isNaN(state.deducts_type4amt) ? 0 : state.deducts_type4amt) +\r\n      parseFloat(isNaN(state.deducts_type5amt) ? 0 : state.deducts_type5amt) +\r\n      parseFloat(isNaN(state.deducts_type6amt) ? 0 : state.deducts_type6amt) +\r\n      parseFloat(isNaN(state.deducts_type7amt) ? 0 : state.deducts_type7amt) +\r\n      parseFloat(isNaN(state.deducts_type8amt) ? 0 : state.deducts_type8amt);\r\n\r\n    allows = isNaN(allows) ? 0 : allows;\r\n    deducts = isNaN(deducts) ? 0 : deducts;\r\n\r\n    nettPay =\r\n      wages + siteallows + expsclaims - totalTAP - totalSCP + allows - deducts;\r\n\r\n    if (state.currency === \"BND\") {\r\n      wagesbnd = wages;\r\n      allowsbnd = allows;\r\n      deductsbnd = deducts;\r\n      totalTAPbnd = totalTAP;\r\n      totalSCPbnd = totalSCP;\r\n      siteallowsbnd = siteallows;\r\n      expsclaimsbnd = expsclaims;\r\n      nettPaybnd = nettPay;\r\n    } else {\r\n      wagesbnd =\r\n        Math.round((wages + Number.EPSILON) * state.currency_rate * 100) / 100;\r\n      allowsbnd =\r\n        Math.round((allows + Number.EPSILON) * state.currency_rate * 100) / 100;\r\n      deductsbnd =\r\n        Math.round((deducts + Number.EPSILON) * state.currency_rate * 100) /\r\n        100;\r\n      totalTAPbnd =\r\n        Math.round((totalTAP + Number.EPSILON) * state.currency_rate * 100) /\r\n        100;\r\n      totalSCPbnd =\r\n        Math.round((totalSCP + Number.EPSILON) * state.currency_rate * 100) /\r\n        100;\r\n      siteallowsbnd =\r\n        Math.round((siteallows + Number.EPSILON) * state.currency_rate * 100) /\r\n        100;\r\n      expsclaimsbnd =\r\n        Math.round((expsclaims + Number.EPSILON) * state.currency_rate * 100) /\r\n        100;\r\n      nettPaybnd =\r\n        Math.round((nettPay + Number.EPSILON) * state.currency_rate * 100) /\r\n        100;\r\n    }\r\n\r\n    setState(\r\n      (prev) =>\r\n        (prev = {\r\n          ...state,\r\n          wages: wages,\r\n          total_allowances: allows,\r\n          total_deductions: deducts,\r\n          tap_amount: totalTAP,\r\n          scp_amount: totalSCP,\r\n          site_allows: siteallows,\r\n          expenses_claims: expsclaims,\r\n          nett_pay: nettPay,\r\n          wages_bnd: wagesbnd,\r\n          total_allowances_bnd: allowsbnd,\r\n          total_deductions_bnd: deductsbnd,\r\n          tap_amount_bnd: totalTAPbnd,\r\n          scp_amount_bnd: totalSCPbnd,\r\n          site_allows_bnd: siteallowsbnd,\r\n          expenses_claims_bnd: expsclaimsbnd,\r\n          nett_pay_bnd: nettPaybnd,\r\n        })\r\n    );\r\n\r\n    //update employee data\r\n    //data.wages = state.wages;\r\n    data.tap_amount = totalTAP;\r\n    data.scp_amount = totalSCP;\r\n    data.total_allowances = allows;\r\n    data.total_deductions = deducts;\r\n    data.site_allows = siteallows;\r\n    data.expenses_claims = expsclaims;\r\n    data.nett_pay = nettPay;\r\n    data.wages_bnd = wagesbnd;\r\n    data.tap_amount_bnd = totalTAPbnd;\r\n    data.scp_amount_bnd = totalSCPbnd;\r\n    data.site_allows_bnd = siteallowsbnd;\r\n    data.expenses_claims_bnd = expsclaimsbnd;\r\n    data.total_allowances_bnd = allowsbnd;\r\n    data.total_deductions_bnd = deductsbnd;\r\n    data.nett_pay_bnd = nettPaybnd;\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleFormSubmit}>\r\n      <Grid container direction=\"row\" style={{ border: \"1px solid white\" }}>\r\n        <Grid item sm={4} align=\"center\" style={{ border: \"1px solid white\" }}>\r\n          <Text as=\"u\" fontSize=\"md\">\r\n            <Heading size=\"sm\">Allowances</Heading>\r\n          </Text>\r\n        </Grid>\r\n\r\n        <Grid item sm={4} align=\"center\" style={{ border: \"1px solid white\" }}>\r\n          <Text as=\"u\" fontSize=\"md\">\r\n            <Heading size=\"sm\">Deductions</Heading>\r\n          </Text>\r\n        </Grid>\r\n        <Grid item sm={4} align=\"center\" style={{ border: \"1px solid white\" }}>\r\n          <Text as=\"u\" fontSize=\"md\">\r\n            <Heading size=\"sm\">Summary</Heading>\r\n            <Heading size=\"sm\">({state.name})</Heading>\r\n          </Text>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container direction=\"row\" style={{ border: \"1px solid white\" }}>\r\n        <Grid item sm={4} align=\"center\" style={{ border: \"1px solid white\" }}>\r\n          <Grid container direction=\"row\" style={{ border: \"1px solid white\" }}>\r\n            <Grid\r\n              item\r\n              sm={8}\r\n              align=\"center\"\r\n              style={{ border: \"1px solid white\" }}\r\n            >\r\n              <Box>\r\n                <Text fontSize=\"sm\">Description</Text>\r\n              </Box>\r\n              <div>\r\n                <TextField\r\n                  label=\"Allowance\"\r\n                  name=\"allows_type1\"\r\n                  variant=\"filled\"\r\n                  type=\"text\"\r\n                  value={state.allows_type1}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Allowance\"\r\n                  name=\"allows_type2\"\r\n                  variant=\"filled\"\r\n                  type=\"text\"\r\n                  displayEmpty\r\n                  defaultValue=\"\"\r\n                  value={state.allows_type2}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Allowance\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"allows_type3\"\r\n                  value={state.allows_type3}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Allowances\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Allowance\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"allows_type4\"\r\n                  value={state.allows_type4}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Allowances\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Allowance\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"allows_type5\"\r\n                  value={state.allows_type5}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Allowances\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Allowance\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"allows_type6\"\r\n                  value={state.allows_type6}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Allowances\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Allowance\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"allows_type7\"\r\n                  value={state.allows_type7}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Allowances\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Allowance\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"allows_type8\"\r\n                  value={state.allows_type8}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Allowances\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <Box p={2}>\r\n                <Checkbox\r\n                  isInvalid={!state.tap_checkbox}\r\n                  isChecked={state.tap_checkbox}\r\n                  colorScheme=\"red\"\r\n                  size=\"md\"\r\n                >\r\n                  <Heading size=\"sm\">TAP/SCP Contribution</Heading>\r\n                </Checkbox>\r\n              </Box>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              sm={4}\r\n              align=\"center\"\r\n              style={{ border: \"1px solid white\" }}\r\n            >\r\n              <Box>\r\n                <Text fontSize=\"sm\">\r\n                  {state.salary_currency ? state.salary_currency : \"BND\"}\r\n                </Text>\r\n              </Box>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"site_allows\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.site_allows}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"expenses_claims\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.expenses_claims}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"allows_type3amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  max=\"9999\"\r\n                  step=\"any\"\r\n                  value={state.allows_type3amt}\r\n                  onChange={(e) => {\r\n                    handleChange(e);\r\n                  }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  errorText={\"\"}\r\n                ></TextField>\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"allows_type4amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.allows_type4amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"allows_type5amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.allows_type5amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"allows_type6amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.allows_type6amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"allows_type7amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.allows_type7amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"allows_type8amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.allows_type8amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                ></TextField>\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item sm={4} align=\"center\" style={{ border: \"1px solid white\" }}>\r\n          <Grid container direction=\"row\" style={{ border: \"1px solid white\" }}>\r\n            <Grid\r\n              item\r\n              sm={8}\r\n              align=\"center\"\r\n              style={{ border: \"1px solid white\" }}\r\n            >\r\n              <Box>\r\n                <Text fontSize=\"sm\">Description</Text>\r\n              </Box>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Deduction\r\n                </InputLabel>\r\n\r\n                <NativeSelect\r\n                  name=\"deducts_type1\"\r\n                  value={state.deducts_type1}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Deductions\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Deduction\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"deducts_type2\"\r\n                  value={state.deducts_type2}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Deductions\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Deduction\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"deducts_type3\"\r\n                  value={state.deducts_type3}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Deductions\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Deduction\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"deducts_type4\"\r\n                  value={state.deducts_type4}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Deductions\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Deduction\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"deducts_type5\"\r\n                  value={state.deducts_type5}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Deductions\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Deduction\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"deducts_type6\"\r\n                  value={state.deducts_type6}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Deductions\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Deduction\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"deducts_type7\"\r\n                  value={state.deducts_type7}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Deductions\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              <div>\r\n                <InputLabel\r\n                  htmlFor=\"deduct-customized-native-simple\"\r\n                  className={classes.formLabel}\r\n                >\r\n                  Deduction\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  name=\"deducts_type8\"\r\n                  value={state.deducts_type8}\r\n                  style={{\r\n                    padding: 4,\r\n                    marginLeft: 5,\r\n                    width: \"100%\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"\">None</option>\r\n                  {payitems\r\n                    .filter(function (item) {\r\n                      return item.pay_type === \"Deductions\";\r\n                    })\r\n                    .map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.name}>\r\n                          {row.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </NativeSelect>\r\n              </div>\r\n              {state.salary_currency !== \"BND\" && (\r\n                <Box p={2}>\r\n                  <Text fontSize=\"md\">\r\n                    <Heading size=\"sm\">\r\n                      Exchange Rate: {state.currency_rate}\r\n                    </Heading>\r\n                  </Text>\r\n                </Box>\r\n              )}\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              sm={4}\r\n              align=\"center\"\r\n              style={{ border: \"1px solid white\" }}\r\n            >\r\n              <Box>\r\n                <Text fontSize=\"sm\">\r\n                  {state.salary_currency ? state.salary_currency : \"BND\"}\r\n                </Text>\r\n              </Box>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"deducts_type1amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  inputProps={{ minLength: 0 }}\r\n                  value={state.deducts_type1amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"deducts_type2amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.deducts_type2amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"deducts_type3amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.deducts_type3amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"deducts_type4amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.deducts_type4amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"deducts_type5amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.deducts_type5amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"deducts_type6amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.deducts_type6amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"deducts_type7amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.deducts_type7amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  name=\"deducts_type8amt\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.deducts_type8amt}\r\n                  onChange={handleChange}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item sm={4} align=\"center\" style={{ border: \"1px solid white\" }}>\r\n          <Grid container direction=\"row\" style={{ border: \"1px solid white\" }}>\r\n            {/* <div>\r\n            <h3>{state.name}</h3>\r\n          </div> */}\r\n            <Grid\r\n              item\r\n              sm={\r\n                !state.salary_currency || state.salary_currency === \"BND\"\r\n                  ? 12\r\n                  : 6\r\n              }\r\n              align=\"center\"\r\n              style={{ border: \"1px solid white\" }}\r\n            >\r\n              <Box>\r\n                <Text fontSize=\"sm\">\r\n                  {state.salary_currency ? state.salary_currency : \"BND\"}\r\n                </Text>\r\n              </Box>\r\n              <Divider variant=\"fullWidth\" className={classes.divider} />\r\n              <div>\r\n                <TextField\r\n                  label=\"Wages\"\r\n                  name=\"wages\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  step=\"any\"\r\n                  value={state.wages}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  // InputProps={{\r\n                  //   readOnly: true,\r\n                  //   min: 0,\r\n                  // }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"TAP Amount\"\r\n                  name=\"tap_amount\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  value={currency(state.tap_amount)}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"SCP Amount\"\r\n                  name=\"scp_amount\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  value={currency(state.scp_amount)}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Site Allowances\"\r\n                  name=\"siteallows\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  value={currency(state.site_allows)}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Expenses Claims\"\r\n                  name=\"expclaims\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  value={currency(state.expenses_claims)}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Total Allowances\"\r\n                  name=\"total_allowances\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  value={currency(state.total_allowances)}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Total Deductions\"\r\n                  name=\"total_deductions\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  value={currency(state.total_deductions)}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  label=\"Nett Pay\"\r\n                  name=\"nett_pay\"\r\n                  variant=\"filled\"\r\n                  type=\"number\"\r\n                  value={currency(state.nett_pay)}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              {/* <div>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={state.tap_checkbox}\r\n                  onChange={handleChange}\r\n                  name=\"tap_checkbox\"\r\n                />\r\n              }\r\n              label=\"TAP/SCP Contribution\"\r\n            />\r\n          </div> */}\r\n              <div>\r\n                {/* <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.button}\r\n                  style={{ marginLeft: 10 }}\r\n                  onClick={handleCalc}\r\n                >\r\n                  Calc <Icon className={classes.rightIcon}>send</Icon>\r\n                </Button> */}\r\n              </div>\r\n            </Grid>\r\n\r\n            {state.salary_currency && state.salary_currency !== \"BND\" && (\r\n              <Grid\r\n                item\r\n                sm={6}\r\n                align=\"center\"\r\n                style={{ border: \"1px solid white\" }}\r\n              >\r\n                <Divider variant=\"fullWidth\" className={classes.divider} />\r\n                <Box>\r\n                  <Text fontSize=\"sm\">\r\n                    {\" \"}\r\n                    {state.salary_currency ? \"BND\" : \"BND\"}\r\n                  </Text>\r\n                </Box>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Wages\"\r\n                    name=\"wages\"\r\n                    variant=\"filled\"\r\n                    type=\"number\"\r\n                    value={currency(state.wages_bnd)}\r\n                    onChange={handleChange}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n\r\n                <div>\r\n                  <TextField\r\n                    label=\"TAP Amount\"\r\n                    name=\"tap_amount\"\r\n                    variant=\"filled\"\r\n                    type=\"number\"\r\n                    value={currency(state.tap_amount_bnd)}\r\n                    onChange={handleChange}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"SCP Amount\"\r\n                    name=\"scp_amount\"\r\n                    variant=\"filled\"\r\n                    type=\"number\"\r\n                    value={currency(state.scp_amount_bnd)}\r\n                    onChange={handleChange}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Site Allowances\"\r\n                    name=\"siteallows\"\r\n                    variant=\"filled\"\r\n                    type=\"number\"\r\n                    value={currency(state.site_allows_bnd)}\r\n                    onChange={handleChange}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Expenses Claims\"\r\n                    name=\"expclaims\"\r\n                    variant=\"filled\"\r\n                    type=\"number\"\r\n                    value={currency(state.expenses_claims_bnd)}\r\n                    onChange={handleChange}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Total Allowances\"\r\n                    name=\"total_allowances\"\r\n                    variant=\"filled\"\r\n                    type=\"number\"\r\n                    value={currency(state.total_allowances_bnd)}\r\n                    onChange={handleChange}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Total Deductions\"\r\n                    name=\"total_deductions\"\r\n                    variant=\"filled\"\r\n                    type=\"number\"\r\n                    value={currency(state.total_deductions_bnd)}\r\n                    onChange={handleChange}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Nett Pay\"\r\n                    name=\"nett_pay\"\r\n                    variant=\"filled\"\r\n                    type=\"number\"\r\n                    value={currency(state.nett_pay_bnd)}\r\n                    onChange={handleChange}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n        {/* <button>Submit</button> */}\r\n      </Grid>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  container: {\r\n    margin: 0,\r\n    padding: 0,\r\n    width: \"80vw\",\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"repeat(auto-fill,250px)\",\r\n    gridAutoRows: \"10px\",\r\n    position: \"absolute\",\r\n    left: \"50%\",\r\n    transform: \"translateX(-50%)\",\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"primary\",\r\n  },\r\n  fixedHeight: {\r\n    height: 800,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(10),\r\n    // display: \"flex\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n    border: \"1px solid\",\r\n    width: \"100%\",\r\n    color: \"primary\",\r\n    bcakgroundColor: \"black\",\r\n  },\r\n  card: {\r\n    backgroundColor: \"black\",\r\n  },\r\n  section: {\r\n    width: \"80vw\",\r\n    margin: \"1rem auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n  },\r\n  underline: {\r\n    width: \"5rem\",\r\n    height: \"0.25rem\",\r\n    marginBottom: \"1.25rem\",\r\n    background: \"var(--clr-primary-5)\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n  },\r\n  title: {\r\n    marginbottom: \"4rem\",\r\n    textAlign: \"center\",\r\n  },\r\n  jobscenter: {\r\n    width: \"80vw\",\r\n    margin: \"0 auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n    flexDirection: \"row\",\r\n  },\r\n  btncontainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    marginBottom: \"4rem\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  jobbtn: {\r\n    background: \"transparent\",\r\n    borderColor: \"transparent\",\r\n    textTransform: \"capitalize\",\r\n    fontSize: \"1.25rem\",\r\n    letterSpacing: \"var(--spacing)\",\r\n    margin: \"0 0.5rem\",\r\n    transition: \"var(--transition)\",\r\n    cursor: \"pointer\",\r\n    padding: \"0.25rem 0\",\r\n    lineHeight: \"1\",\r\n    outlineColor: \"var(--clr-primary-10)\",\r\n    \"&:hover\": {\r\n      color: \"var(--clr-primary-5)\",\r\n      boxShadow: \"0 2px var(--clr-primary-5)\",\r\n    },\r\n  },\r\n  activebtn: {\r\n    color: \"var(--clr-primary-5)\",\r\n    boxShadow: \"0 2px var(--clr-primary-5)\",\r\n  },\r\n  jobinfo: {\r\n    fontWeight: \"400\",\r\n  },\r\n  divider: {\r\n    // Theme Color, or use css color in quote\r\n    background: \"white\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 350,\r\n  },\r\n  divContainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n  },\r\n  formLabel: {\r\n    fontSize: 12,\r\n    textAlign: \"left\",\r\n    marginLeft: 8,\r\n    marginTop: 5,\r\n  },\r\n}));\r\n\r\nexport default PayForm;\r\n","import React, { useState, useEffect, useMemo } from \"react\";\r\nimport currency from \"currency.js\";\r\n//import PrintPaySummary from \"./PrintPaySummary\";\r\nimport {\r\n  Box,\r\n  //Heading,\r\n  //Text,\r\n  //Table,\r\n  //Thead,\r\n  //Tbody,\r\n  //Tr,\r\n  //Th,\r\n  //Td,\r\n  //chakra,\r\n} from \"@chakra-ui/react\";\r\n//import { TriangleDownIcon, TriangleUpIcon } from \"@chakra-ui/icons\";\r\nimport MaterialTable from \"material-table\";\r\nimport { Grid, TextField } from \"@material-ui/core\";\r\n//import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\n//import { formatPriceZero } from \"../helpers/Utils\";\r\nimport { payrunState } from \"./data/atomdata\";\r\n//import { usePayslipsContext } from \"../context/payslips_context\";\r\n//import { ComponentToPrint } from \"./ComponentToPrint\";\r\n//import PaySummaryTable from \"./PaySummaryTable\";\r\n\r\n// const initial_state = [\r\n//   {\r\n//     totalwages: 0,\r\n//     totaltap: 0,\r\n//     totalscp: 0,\r\n//     totalallows: 0,\r\n//     totaldeducts: 0,\r\n//     totalpayroll: 0,\r\n//   },\r\n// ];\r\n\r\nconst PaySummary = ({ singlebatchpayslip }) => {\r\n  //const classes = useStyles();\r\n  //const componentRef = useRef();\r\n  //const [state, setState] = useState(initial_state);\r\n  const [payrundata, setPayrundata] = useRecoilState(payrunState);\r\n  //const [payrunstatus, setPayrunStatus] = useRecoilState(payrunStatusState);\r\n  const [isCalc, setIsCalc] = useState(true);\r\n  //const { payrun, updatePayrun, payslip_period } = usePayslipsContext();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"name\",\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Wages\",\r\n        field: \"wages_bnd\",\r\n        editable: \"never\",\r\n        type: \"currency\",\r\n      },\r\n      {\r\n        title: \"TAP Amount\",\r\n        field: \"tap_amount_bnd\",\r\n        editable: \"never\",\r\n        type: \"currency\",\r\n      },\r\n      {\r\n        title: \"SCP Amount\",\r\n        field: \"scp_amount_bnd\",\r\n        editable: \"never\",\r\n        type: \"currency\",\r\n      },\r\n      {\r\n        title: \"Site Allows\",\r\n        field: \"site_allows_bnd\",\r\n        editable: \"never\",\r\n        type: \"currency\",\r\n      },\r\n      {\r\n        title: \"Exps Claims\",\r\n        field: \"expenses_claims_bnd\",\r\n        editable: \"never\",\r\n        type: \"currency\",\r\n      },\r\n      {\r\n        title: \"Allowances\",\r\n        field: \"total_allowances_bnd\",\r\n        editable: \"never\",\r\n        type: \"currency\",\r\n      },\r\n      {\r\n        title: \"Deductions\",\r\n        field: \"total_deductions_bnd\",\r\n        editable: \"never\",\r\n        type: \"currency\",\r\n      },\r\n      {\r\n        title: \"Nett Pay\",\r\n        field: \"nett_pay_bnd\",\r\n        editable: \"never\",\r\n        type: \"currency\",\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  // const columns1 = [\r\n  //   {\r\n  //     Header: \"Name\",\r\n  //     accessor: \"name\",\r\n  //   },\r\n  //   {\r\n  //     Header: \"Wages\",\r\n  //     accessor: \"wages_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n\r\n  //   {\r\n  //     Header: \"TAP Amount\",\r\n  //     accessor: \"tap_amount_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  //   {\r\n  //     Header: \"SCP Amount\",\r\n  //     accessor: \"scp_amount_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  //   {\r\n  //     Header: \"Site Allows\",\r\n  //     accessor: \"site_allows_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  //   {\r\n  //     Header: \"Exps Claims\",\r\n  //     accessor: \"expenses_claims_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  //   {\r\n  //     Header: \"Allowances\",\r\n  //     accessor: \"total_allowances_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  //   {\r\n  //     Header: \"Deductions\",\r\n  //     accessor: \"total_deductions_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  //   {\r\n  //     Header: \"Nett Pay\",\r\n  //     accessor: \"nett_pay_bnd\",\r\n  //     isNumeric: true,\r\n  //     Cell: (props) => formatPriceZero(props.value),\r\n  //   },\r\n  // ];\r\n\r\n  // const exportPdfTable = () => {\r\n  //   PrintPaySummary((singlebatchpayslip = { singlebatchpayslip }));\r\n  // };\r\n\r\n  const handleCalcTotals = () => {\r\n    const data = singlebatchpayslip;\r\n    const totalwages = data.reduce((acc, item) => {\r\n      return acc + item.wages_bnd;\r\n    }, 0);\r\n    const totalsitesallows = data.reduce((acc, item) => {\r\n      return acc + item.site_allows_bnd;\r\n    }, 0);\r\n    const totalexpclaims = data.reduce((acc, item) => {\r\n      return acc + item.expenses_claims_bnd;\r\n    }, 0);\r\n    const totalallows = data.reduce((acc, item) => {\r\n      return acc + item.total_allowances_bnd;\r\n    }, 0);\r\n    const totaldeducts = data.reduce((acc, item) => {\r\n      return acc + item.total_deductions_bnd;\r\n    }, 0);\r\n    const totaltap = data.reduce((acc, item) => {\r\n      return acc + item.tap_amount_bnd;\r\n    }, 0);\r\n    const totalscp = data.reduce((acc, item) => {\r\n      return acc + item.scp_amount_bnd;\r\n    }, 0);\r\n    const totalpayroll = data.reduce((acc, item) => {\r\n      return acc + item.nett_pay_bnd;\r\n    }, 0);\r\n\r\n    setPayrundata({\r\n      ...payrundata,\r\n      totalpayroll: totalpayroll,\r\n      totalwages: totalwages,\r\n      totaltap: totaltap,\r\n      totalscp: totalscp,\r\n      totalallows: totalallows,\r\n      totaldeducts: totaldeducts,\r\n      totalsitesallows: totalsitesallows,\r\n      totalexpensesclaims: totalexpclaims,\r\n    });\r\n    // payrun\r\n    //   .filter((r) => r.payrun === payslip_period)\r\n    //   .map((rec) => {\r\n    //     //update payrun\r\n    //     return updatePayrun({\r\n    //       id: rec.id,\r\n    //       totalpayroll: totalpayroll,\r\n    //       totalwages: totalwages,\r\n    //       totaltap: totaltap,\r\n    //       totalscp: totalscp,\r\n    //       totalallows: totalallows,\r\n    //       totaldeducts: totaldeducts,\r\n    //       totalsitesallows: totalsitesallows,\r\n    //       totalexpensesclaims: totalexpclaims,\r\n    //     });\r\n    //   });\r\n    // console.log(\"payrundata\", payrundata);\r\n    // console.log(\r\n    //   \"totals\",\r\n    //   totalpayroll,\r\n    //   totalwages,\r\n    //   totaltap,\r\n    //   totalscp,\r\n    //   totalallows,\r\n    //   totaldeducts\r\n    // );\r\n  };\r\n\r\n  // const handleSaveCalcTotals = (e) => {\r\n  //   e.preventDefault();\r\n  //   handleCalcTotals();\r\n  //};\r\n\r\n  useEffect(() => {\r\n    handleCalcTotals();\r\n    setIsCalc(false);\r\n  }, [isCalc]);\r\n\r\n  return (\r\n    <div>\r\n      {/* <div style={{ display: \"none\" }}> */}\r\n      <div>\r\n        {/* <div style={{ border: \"1px solid black\" }} align=\"center\">\r\n          <button onClick={() => exportPdfTable()}>\r\n            <Heading size=\"sm\">Print Payroll Summary Report!</Heading>\r\n          </button>\r\n        </div> */}\r\n        {/* <div>\r\n          <div style={{ display: \"none\" }}>\r\n            <ComponentToPrint ref={componentRef} />\r\n          </div>\r\n          <button onClick={handlePrint}>Print this out!</button>\r\n        </div> */}\r\n      </div>\r\n      <form>\r\n        <Grid container direction=\"row\" style={{ border: \"1px solid black\" }}>\r\n          <Grid\r\n          // item\r\n          // sm={12}\r\n          // align=\"center\"\r\n          // style={{ border: \"1px solid black\" }}\r\n          >\r\n            <div>\r\n              {/* <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              style={{ marginLeft: 5 }}\r\n              onClick={(e) => handleSaveCalcTotals(e)}\r\n            >\r\n              Save <Icon className={classes.rightIcon}>send</Icon>\r\n            </Button> */}\r\n              {/* <Heading size=\"sm\">Summary</Heading> */}\r\n              {/* <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                style={{ marginLeft: 5 }}\r\n                onClick={(e) => handle_Print(e)}\r\n              >\r\n                Print <Icon className={classes.rightIcon}>send</Icon>\r\n              </Button> */}\r\n              {/* <div>\r\n                <ReactToPrint\r\n                  trigger={(e) => {\r\n                    handle_Print(e);\r\n                  }}\r\n                  content={() => this.componentRef}\r\n                />\r\n                <ComponentToPrint ref={(el) => (this.componentRef = el)} />\r\n              </div> */}\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container direction=\"row\" style={{ border: \"1px solid white\" }}>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Period\"\r\n                name=\"period\"\r\n                variant=\"filled\"\r\n                type=\"text\"\r\n                value={payrundata.period}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Pay Run Batch\"\r\n                name=\"payrun\"\r\n                variant=\"filled\"\r\n                type=\"text\"\r\n                value={payrundata.payrun}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Status\"\r\n                name=\"status\"\r\n                variant=\"filled\"\r\n                value={payrundata.status}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Payroll Total\"\r\n                name=\"paytotal\"\r\n                variant=\"filled\"\r\n                type=\"number\"\r\n                value={currency(payrundata.totalpayroll)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container direction=\"row\" style={{ border: \"1px solid white\" }}>\r\n          <Grid\r\n            item\r\n            sm={12}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            {/* <Box h=\"400\" overflow=\"scroll\">\r\n              <PaySummaryTable columns={columns} data={singlebatchpayslip} />\r\n            </Box> */}\r\n            <Box h=\"400\" w=\"full\" overflow=\"scroll\">\r\n              <MaterialTable\r\n                columns={columns}\r\n                data={singlebatchpayslip}\r\n                title=\"Payroll\"\r\n                options={{\r\n                  filtering: false,\r\n                  search: false,\r\n                  toolbar: false,\r\n                  paging: false,\r\n                  headerStyle: {\r\n                    backgroundColor: \"lightblue\",\r\n                    color: \"primary\",\r\n                  },\r\n                  showTitle: false,\r\n                }}\r\n              />\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container direction=\"row\" style={{ border: \"1px solid white\" }}>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total Wages\"\r\n                name=\"totalwages\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totalwages)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total TAP\"\r\n                name=\"totaltap\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totaltap)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total SCP\"\r\n                name=\"totalscp\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totalscp)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total Sites Allows\"\r\n                name=\"totalsitesallows\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totalsiteallows)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total Expenses Claims\"\r\n                name=\"totalsitesallows\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totalexpensesclaims)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total Allowances\"\r\n                name=\"totalallows\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totalallows)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total Deductions\"\r\n                name=\"totaldeducts\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totaldeducts)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            sm={3}\r\n            align=\"center\"\r\n            style={{ border: \"1px solid white\" }}\r\n          >\r\n            <div>\r\n              <TextField\r\n                label=\"Total Payroll\"\r\n                name=\"totalpayroll\"\r\n                variant=\"filled\"\r\n                type=\"currency\"\r\n                value={currency(payrundata.totalpayroll)}\r\n                style={{ width: \"100%\" }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   root: {\r\n//     flexGrow: 1,\r\n//   },\r\n//   button: {\r\n//     margin: theme.spacing(1),\r\n//   },\r\n//   container: {\r\n//     margin: 0,\r\n//     padding: 0,\r\n//     width: \"80vw\",\r\n//     display: \"grid\",\r\n//     gridTemplateColumns: \"repeat(auto-fill,250px)\",\r\n//     gridAutoRows: \"10px\",\r\n//     position: \"absolute\",\r\n//     left: \"50%\",\r\n//     transform: \"translateX(-50%)\",\r\n//     justifyContent: \"center\",\r\n//     backgroundColor: \"primary\",\r\n//   },\r\n//   fixedHeight: {\r\n//     height: 800,\r\n//   },\r\n//   paper: {\r\n//     padding: theme.spacing(10),\r\n//     // display: \"flex\",\r\n//     display: \"flex\",\r\n//     overflow: \"auto\",\r\n//     flexDirection: \"column\",\r\n//     border: \"1px solid\",\r\n//     width: \"100%\",\r\n//     color: \"primary\",\r\n//     bcakgroundColor: \"black\",\r\n//   },\r\n//   card: {\r\n//     backgroundColor: \"black\",\r\n//   },\r\n//   section: {\r\n//     width: \"80vw\",\r\n//     margin: \"1rem auto\",\r\n//     maxWidth: \"var(--max-width)\",\r\n//   },\r\n//   underline: {\r\n//     width: \"5rem\",\r\n//     height: \"0.25rem\",\r\n//     marginBottom: \"1.25rem\",\r\n//     background: \"var(--clr-primary-5)\",\r\n//     marginLeft: \"auto\",\r\n//     marginRight: \"auto\",\r\n//   },\r\n//   title: {\r\n//     marginbottom: \"4rem\",\r\n//     textAlign: \"center\",\r\n//   },\r\n//   jobscenter: {\r\n//     width: \"80vw\",\r\n//     margin: \"0 auto\",\r\n//     maxWidth: \"var(--max-width)\",\r\n//     flexDirection: \"row\",\r\n//   },\r\n//   btncontainer: {\r\n//     display: \"flex\",\r\n//     flexDirection: \"row\",\r\n//     justifyContent: \"center\",\r\n//     marginBottom: \"4rem\",\r\n//     flexWrap: \"wrap\",\r\n//   },\r\n//   jobbtn: {\r\n//     background: \"transparent\",\r\n//     borderColor: \"transparent\",\r\n//     textTransform: \"capitalize\",\r\n//     fontSize: \"1.25rem\",\r\n//     letterSpacing: \"var(--spacing)\",\r\n//     margin: \"0 0.5rem\",\r\n//     transition: \"var(--transition)\",\r\n//     cursor: \"pointer\",\r\n//     padding: \"0.25rem 0\",\r\n//     lineHeight: \"1\",\r\n//     outlineColor: \"var(--clr-primary-10)\",\r\n//     \"&:hover\": {\r\n//       color: \"var(--clr-primary-5)\",\r\n//       boxShadow: \"0 2px var(--clr-primary-5)\",\r\n//     },\r\n//   },\r\n//   activebtn: {\r\n//     color: \"var(--clr-primary-5)\",\r\n//     boxShadow: \"0 2px var(--clr-primary-5)\",\r\n//   },\r\n//   jobinfo: {\r\n//     fontWeight: \"400\",\r\n//   },\r\n//   divider: {\r\n//     // Theme Color, or use css color in quote\r\n//     background: \"white\",\r\n//   },\r\n//   textField: {\r\n//     marginLeft: theme.spacing(1),\r\n//     marginRight: theme.spacing(1),\r\n//     width: 350,\r\n//   },\r\n//   divContainer: {\r\n//     display: \"flex\",\r\n//     flexDirection: \"row\",\r\n//   },\r\n// }));\r\n\r\nexport default PaySummary;\r\n","import pdfMake from \"pdfmake/build/pdfmake.min\";\r\nimport vfsFonts from \"pdfmake/build/vfs_fonts\";\r\nimport { formatPriceZero } from \"../helpers/Utils\";\r\n\r\nconst PrintPaySummary = ({ singlebatchpayslip }) => {\r\n  const period = singlebatchpayslip[0].period;\r\n  const subtitle = `Payroll Summary for the period  ${period}`;\r\n  // const items = singlebatchpayslip.map((r) => {\r\n  //   return { name: r.name, wages: r.wages_bnd };\r\n  //});\r\n  const names = singlebatchpayslip.map((r) => {\r\n    return r.name;\r\n  });\r\n  const wages = singlebatchpayslip.map((r) => {\r\n    const amount = formatPriceZero(r.wages_bnd);\r\n    return amount;\r\n  });\r\n  const tapamount = singlebatchpayslip.map((r) => {\r\n    const amount = formatPriceZero(r.tap_amount_bnd);\r\n    return amount;\r\n  });\r\n  const scpamount = singlebatchpayslip.map((r) => {\r\n    const amount = formatPriceZero(r.scp_amount_bnd);\r\n    return amount;\r\n  });\r\n  const sitesallowsamt = singlebatchpayslip.map((r) => {\r\n    const amount = formatPriceZero(r.site_allows_bnd);\r\n    return amount;\r\n  });\r\n  const expclaimsamt = singlebatchpayslip.map((r) => {\r\n    const amount = formatPriceZero(r.expenses_claims_bnd);\r\n    return amount;\r\n  });\r\n  const allowsamt = singlebatchpayslip.map((r) => {\r\n    const amount = formatPriceZero(r.total_allowances_bnd);\r\n    return amount;\r\n  });\r\n  const deductsamt = singlebatchpayslip.map((r) => {\r\n    const amount = formatPriceZero(r.total_deductions_bnd);\r\n    return amount;\r\n  });\r\n  const nettpay = singlebatchpayslip.map((r) => {\r\n    const amount = formatPriceZero(r.nett_pay_bnd);\r\n    return amount;\r\n  });\r\n  const totalwages = singlebatchpayslip.reduce((acc, item) => {\r\n    return acc + item.wages_bnd;\r\n  }, 0);\r\n  const totaltap = singlebatchpayslip.reduce((acc, item) => {\r\n    return acc + item.tap_amount_bnd;\r\n  }, 0);\r\n  const totalscp = singlebatchpayslip.reduce((acc, item) => {\r\n    return acc + item.scp_amount_bnd;\r\n  }, 0);\r\n  const totalsitesallows = singlebatchpayslip.reduce((acc, item) => {\r\n    return acc + item.site_allows_bnd;\r\n  }, 0);\r\n  const totalexpclaims = singlebatchpayslip.reduce((acc, item) => {\r\n    return acc + item.expenses_claims_bnd;\r\n  }, 0);\r\n  const totalallows = singlebatchpayslip.reduce((acc, item) => {\r\n    return acc + item.total_allowances_bnd;\r\n  }, 0);\r\n  const totaldeducts = singlebatchpayslip.reduce((acc, item) => {\r\n    return acc + item.total_deductions_bnd;\r\n  }, 0);\r\n  const totalnettpay = singlebatchpayslip.reduce((acc, item) => {\r\n    return acc + item.nett_pay_bnd;\r\n  }, 0);\r\n  const { vfs } = vfsFonts.pdfMake;\r\n  pdfMake.vfs = vfs;\r\n\r\n  const documentDefinition = {\r\n    pageSize: \"A4\",\r\n    pageOrientation: \"landscape\",\r\n    content: [\r\n      { text: \"AppSmith Sutera Sdn Bhd\", style: \"header\" },\r\n      { text: subtitle, style: \"subheader\" },\r\n\r\n      {\r\n        style: \"tableExample\",\r\n        table: {\r\n          widths: [200, 50, 50, 50, 50, 50, 50, 50, 50],\r\n          body: [\r\n            [\r\n              {\r\n                alignment: \"center\",\r\n                text: \"Employee Name\",\r\n                style: \"subheader\",\r\n              },\r\n              { alignment: \"right\", text: \"Wages\", style: \"subheader\" },\r\n              { alignment: \"right\", text: \"TAP Amount\", style: \"subheader\" },\r\n              { alignment: \"right\", text: \"SCP Amount\", style: \"subheader\" },\r\n              {\r\n                alignment: \"right\",\r\n                text: \"Site Allowances\",\r\n                style: \"subheader\",\r\n              },\r\n              {\r\n                alignment: \"right\",\r\n                text: \"Expenses Claims\",\r\n                style: \"subheader\",\r\n              },\r\n              { alignment: \"right\", text: \"Allowances\", style: \"subheader\" },\r\n              { alignment: \"right\", text: \"Deductions\", style: \"subheader\" },\r\n              { alignment: \"right\", text: \"Nett Pay\", style: \"subheader\" },\r\n            ],\r\n            [\r\n              {\r\n                stack: [\r\n                  {\r\n                    type: \"none\",\r\n                    fontSize: 8,\r\n                    ul: names,\r\n                  },\r\n                ],\r\n              },\r\n              {\r\n                stack: [\r\n                  {\r\n                    type: \"none\",\r\n                    fontSize: 8,\r\n                    alignment: \"right\",\r\n                    ul: wages,\r\n                  },\r\n                ],\r\n              },\r\n              {\r\n                stack: [\r\n                  {\r\n                    type: \"none\",\r\n                    fontSize: 8,\r\n                    alignment: \"right\",\r\n                    ul: tapamount,\r\n                  },\r\n                ],\r\n              },\r\n\r\n              {\r\n                stack: [\r\n                  {\r\n                    type: \"none\",\r\n                    fontSize: 8,\r\n                    alignment: \"right\",\r\n                    ul: scpamount,\r\n                  },\r\n                ],\r\n              },\r\n              {\r\n                stack: [\r\n                  {\r\n                    type: \"none\",\r\n                    fontSize: 8,\r\n                    alignment: \"right\",\r\n                    ul: sitesallowsamt,\r\n                  },\r\n                ],\r\n              },\r\n              {\r\n                stack: [\r\n                  {\r\n                    type: \"none\",\r\n                    fontSize: 8,\r\n                    alignment: \"right\",\r\n                    ul: expclaimsamt,\r\n                  },\r\n                ],\r\n              },\r\n              {\r\n                stack: [\r\n                  {\r\n                    type: \"none\",\r\n                    fontSize: 8,\r\n                    alignment: \"right\",\r\n                    ul: allowsamt,\r\n                  },\r\n                ],\r\n              },\r\n              {\r\n                stack: [\r\n                  {\r\n                    type: \"none\",\r\n                    fontSize: 8,\r\n                    alignment: \"right\",\r\n                    ul: deductsamt,\r\n                  },\r\n                ],\r\n              },\r\n              {\r\n                stack: [\r\n                  {\r\n                    type: \"none\",\r\n                    fontSize: 8,\r\n                    alignment: \"right\",\r\n                    ul: nettpay,\r\n                  },\r\n                ],\r\n              },\r\n            ],\r\n            [\r\n              \"\",\r\n              {\r\n                alignment: \"right\",\r\n                text: formatPriceZero(totalwages),\r\n                style: \"footer\",\r\n              },\r\n              {\r\n                alignment: \"right\",\r\n                text: formatPriceZero(totaltap),\r\n                style: \"footer\",\r\n              },\r\n              {\r\n                alignment: \"right\",\r\n                text: formatPriceZero(totalscp),\r\n                style: \"footer\",\r\n              },\r\n              {\r\n                alignment: \"right\",\r\n                text: formatPriceZero(totalsitesallows),\r\n                style: \"footer\",\r\n              },\r\n              {\r\n                alignment: \"right\",\r\n                text: formatPriceZero(totalexpclaims),\r\n                style: \"footer\",\r\n              },\r\n              {\r\n                alignment: \"right\",\r\n                text: formatPriceZero(totalallows),\r\n                style: \"footer\",\r\n              },\r\n              {\r\n                alignment: \"right\",\r\n                text: formatPriceZero(totaldeducts),\r\n                style: \"footer\",\r\n              },\r\n              {\r\n                alignment: \"right\",\r\n                text: formatPriceZero(totalnettpay),\r\n                style: \"footer\",\r\n              },\r\n            ],\r\n          ],\r\n        },\r\n      },\r\n    ],\r\n    styles: {\r\n      header: {\r\n        fontSize: 12,\r\n        bold: true,\r\n        margin: [0, 0, 0, 10],\r\n      },\r\n      subheader: {\r\n        fontSize: 9,\r\n        bold: true,\r\n        margin: [0, 10, 0, 5],\r\n      },\r\n      footer: {\r\n        fontSize: 8,\r\n        bold: true,\r\n        margin: [0, 10, 0, 5],\r\n      },\r\n      tableExample: {\r\n        margin: [0, 5, 0, 15],\r\n      },\r\n      tableOpacityExample: {\r\n        margin: [0, 5, 0, 15],\r\n        fillColor: \"blue\",\r\n        fillOpacity: 0.3,\r\n      },\r\n      tableHeader: {\r\n        bold: true,\r\n        fontSize: 13,\r\n        color: \"black\",\r\n      },\r\n    },\r\n    defaultStyle: {\r\n      // alignment: 'justify'\r\n    },\r\n  };\r\n\r\n  pdfMake.createPdf(documentDefinition).open();\r\n};\r\n\r\nexport default PrintPaySummary;\r\n","import { useMutation, useQueryClient } from \"react-query\";\r\nimport { payrun_url } from \"../../utils/constants\";\r\nimport { useCustomToast } from \"../../helpers/useCustomToast\";\r\n\r\nasync function updatePayrun(data) {\r\n  const { id, ...fields } = data;\r\n\r\n  await fetch(payrun_url, {\r\n    method: \"PUT\",\r\n    body: JSON.stringify({ id, ...fields }),\r\n  });\r\n}\r\n\r\nexport function useUpdatePayrun(data) {\r\n  const queryClient = useQueryClient();\r\n  const toast = useCustomToast();\r\n\r\n  const { mutate } = useMutation((data) => updatePayrun(data), {\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries(\"payrun\");\r\n      toast({\r\n        title: \"Payrun batch being updated!\",\r\n        status: \"success\",\r\n      });\r\n    },\r\n    onError: () => {\r\n      toast({\r\n        title: \"Network Error! Please check your internet connection!\",\r\n        status: \"warning\",\r\n      });\r\n    },\r\n  });\r\n\r\n  return mutate;\r\n}\r\n","import { useMutation, useQueryClient } from \"react-query\";\r\nimport { payslips_url } from \"../../utils/constants\";\r\nimport { useCustomToast } from \"../../helpers/useCustomToast\";\r\n\r\nasync function updatePayslips(data) {\r\n  const { id, ...fields } = data;\r\n\r\n  await fetch(payslips_url, {\r\n    method: \"PUT\",\r\n    body: JSON.stringify({ id, ...fields }),\r\n  });\r\n}\r\n\r\nexport function useUpdatePayslips(data) {\r\n  const queryClient = useQueryClient();\r\n  const toast = useCustomToast();\r\n\r\n  const { mutate } = useMutation((data) => updatePayslips(data), {\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries(\"payslips\");\r\n      // toast({\r\n      //   title: \"Payslip record being updated!\",\r\n      //   status: \"success\",\r\n      // });\r\n    },\r\n    onErrot: () => {\r\n      toast({\r\n        title: \"Internet connection error! Record not updated!\",\r\n        status: \"warning\",\r\n      });\r\n    },\r\n  });\r\n\r\n  return mutate;\r\n}\r\n","import React, { useState, useEffect, useMemo } from \"react\";\r\n//import { makeStyles } from \"@material-ui/core/styles\";\r\n//import clsx from \"clsx\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport * as emailjs from \"emailjs-com\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { FiSave, FiCheckCircle, FiMail } from \"react-icons/fi\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\n//import { Button} from \"@material-ui/core\"\r\nimport {\r\n  Box,\r\n  Button,\r\n  Divider,\r\n  Grid,\r\n  GridItem,\r\n  Flex,\r\n  Heading,\r\n  Stack,\r\n  VStack,\r\n  //Spacer,\r\n  Tabs,\r\n  TabList,\r\n  TabPanels,\r\n  Tab,\r\n  TabPanel,\r\n  Table,\r\n  //Thead,\r\n  Tbody,\r\n  //Tfoot,\r\n  //Tr,\r\n  //Th,\r\n  //Td,\r\n  //TableCaption,\r\n  Text,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  //ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  //Wrap,\r\n  //WrapItem,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport PayForm from \"./PayForm\";\r\nimport PaySummary from \"./PaySummary\";\r\nimport PrintPaySummary from \"./PrintPaySummary\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\nimport { usePayrun } from \"./payrun/usePayrun\";\r\nimport { useUpdatePayrun } from \"./payrun/useUpdatePayrun\";\r\nimport { usePayslipsBatch } from \"./payslips/usePayslipsBatch\";\r\nimport { useUpdatePayslips } from \"./payslips/useUpdatePayslips\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport {\r\n  payrunState,\r\n  //paydataState,\r\n  payrunIdState,\r\n  payrunStatusState,\r\n} from \"./data/atomdata\";\r\n//import { useRecoilValue } from \"recoil\";\r\n\r\n//const drawerWidth = 240;\r\n//const PayForm = React.lazy(() => import(\"./PayForm\"));\r\n//const PaySummary = React.lazy(() => import(\"./PaySummary\"));\r\n//const module = await import(\"./PrintPaySummary\"));\r\n\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\n\r\nconst initial_formdata = {\r\n  name: \"\",\r\n  period: \"\",\r\n  pay_date: null,\r\n  payrun: \"\",\r\n  bank_name: \"\",\r\n  bank_acno: \"\",\r\n  salary_currency: \"BND\",\r\n  currency_rate: 1,\r\n  tap_acno: \"\",\r\n  scp_acno: \"\",\r\n  tap_checkbox: false,\r\n  empid: \"\",\r\n  status: \"\",\r\n  allows_type1: \"\",\r\n  allows_type1amt: \"\",\r\n  allows_type2: \"\",\r\n  allows_type2amt: \"\",\r\n  allows_type3: \" \",\r\n  allows_type3amt: 0,\r\n  allows_type4: \"\",\r\n  allows_type4amt: 0,\r\n  allows_type5: \" \",\r\n  allows_type5amt: 0,\r\n  allows_type6: \" \",\r\n  allows_type6amt: 0,\r\n  allows_type7: \" \",\r\n  allows_type7amt: 0,\r\n  allows_type8: \" \",\r\n  allows_type8amt: 0,\r\n  deducts_type1: \" \",\r\n  deducts_type1amt: 0,\r\n  deducts_type2: \" \",\r\n  deducts_type2amt: 0,\r\n  deducts_type3: \" \",\r\n  deducts_type3amt: 0,\r\n  deducts_type4: \" \",\r\n  deducts_type4amt: 0,\r\n  deducts_type5: \" \",\r\n  deducts_type5amt: 0,\r\n  deducts_type6: \" \",\r\n  deducts_type6amt: 0,\r\n  deducts_type7: \" \",\r\n  deducts_type7amt: 0,\r\n  deducts_type8: \" \",\r\n  deducts_type8amt: 0,\r\n\r\n  wages: 0,\r\n  tap_amount: 0,\r\n  scp_amount: 0,\r\n  total_allowances: 0,\r\n  total_deductions: 0,\r\n  site_allows: 0,\r\n  expenses_claims: 0,\r\n  nett_pay: 0,\r\n\r\n  wages_bnd: 0,\r\n  site_allows_bnd: 0,\r\n  expenses_claims_bnd: 0,\r\n  total_allowances_bnd: 0,\r\n  total_deductions_bnd: 0,\r\n  tap_amount_bnd: 0,\r\n  scp_amount_bnd: 0,\r\n  nett_pay_bnd: 0,\r\n};\r\n\r\nconst months = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\",\r\n];\r\n\r\nconst Payrunbatch = () => {\r\n  let navigate = useNavigate();\r\n  //const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  //const componentRef = useRef();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n  //const { register, handleSubmit, control, setValue, reset, watch } = useForm();\r\n\r\n  const {\r\n    //payrun,\r\n    //getSingleBatchPayslip,\r\n    //singlebatchpayslip,\r\n    payslip_period,\r\n    //updatePayslip,\r\n    //updatePayrun,\r\n    //singlebatch_payslip_loading,\r\n    //singlebatch_payslip_error,\r\n  } = usePayslipsContext();\r\n  const { payslipsbatch, psbpayrunId, setPSBPayrunId } = usePayslipsBatch();\r\n  const { employees } = useEmployees();\r\n  const { payrun } = usePayrun();\r\n  const updatePayslip = useUpdatePayslips();\r\n  const updatePayrun = useUpdatePayrun();\r\n  const { loadPayitems, payitems } = useTablesContext();\r\n  const [payrundata, setPayrundata] = useRecoilState(payrunState);\r\n  const [payrunId] = useRecoilState(payrunIdState);\r\n  const [payrunstatus, setPayrunStatus] = useRecoilState(payrunStatusState);\r\n  const [loadFormdata, setLoadFormdata] = useState(false);\r\n  const [loadUpdatedata, setLoadUpdatedata] = useState(false);\r\n  const [formdata, setFormdata] = useState(initial_formdata);\r\n  const [rowindex, setRowIndex] = useState(0);\r\n  const [emponclick, setEmponclick] = useState(false);\r\n  //const [showSumm, setShowSumm] = useState(false);\r\n  const [isCalc, setIsCalc] = useState(false);\r\n  const [isStart, setIsStart] = useState(true);\r\n  const [isShow, setIsShow] = useState(false);\r\n  const [isUpdPayslip, setIsUpdPayslip] = useState(false);\r\n  const [tabno, setTabno] = useState(0);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const singlebatchpayslip = payslipsbatch;\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"name\",\r\n        editable: \"never\",\r\n        cellStyle: {\r\n          width: 280,\r\n          maxWidth: 280,\r\n        },\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    loadPayitems();\r\n    setEmponclick(true);\r\n    // getSingleBatchPayslip(payslip_period);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setRowIndex(0);\r\n    // handleEmpButtonClick(0);\r\n    setEmponclick(false);\r\n  }, [emponclick]);\r\n\r\n  useEffect(() => {\r\n    setLoadFormdata(false);\r\n  }, [loadUpdatedata]);\r\n\r\n  useEffect(() => {\r\n    setPSBPayrunId(payslip_period);\r\n    setIsCalc(true);\r\n  }, [psbpayrunId]);\r\n\r\n  useEffect(() => {\r\n    calcPayrunTotals();\r\n    setIsCalc(false);\r\n  }, [isCalc]);\r\n\r\n  useEffect(() => {\r\n    saveIndividualPayslips();\r\n    setIsUpdPayslip(false);\r\n  }, [isUpdPayslip]);\r\n\r\n  useEffect(() => {\r\n    if (tabno === 1) {\r\n      setIsShow(true);\r\n    } else {\r\n      setIsShow(false);\r\n    }\r\n  }, [tabno]);\r\n\r\n  // useEffect(() => {\r\n  //   handleEmpButtonClick(0);\r\n  //   setIsLoad(false);\r\n  // }, [isLoad]);\r\n\r\n  // const handleShowSumm = (e) => {\r\n  //   e.preventDefault();\r\n  //   setShowSumm(!showSumm);\r\n  // };\r\n\r\n  const sleep = (time) => {\r\n    return new Promise((resolve) => setTimeout(resolve, time));\r\n  };\r\n\r\n  const handlePrintSummary = (e) => {\r\n    e.preventDefault();\r\n    if (payrundata.status === \"Verified\" || payrundata.status === \"Approved\") {\r\n      exportPdfTable(singlebatchpayslip);\r\n    } else {\r\n      //**\r\n      // save individual payslips\r\n      //saveIndividualPayslips();\r\n\r\n      // save payrun\r\n      updatePayrun({\r\n        id: payrunId,\r\n        totalpayroll: payrundata.totalpayroll,\r\n        totalwages: payrundata.totalwages,\r\n        totaltap: payrundata.totaltap,\r\n        totalscp: payrundata.totalscp,\r\n        totalallows: payrundata.totalallows,\r\n        totaldeducts: payrundata.totaldeducts,\r\n        totalsitesallows: payrundata.totalsiteallows,\r\n        totalexpensesclaims: payrundata.totalexpensesclaims,\r\n      });\r\n      exportPdfTable(singlebatchpayslip);\r\n    }\r\n  };\r\n\r\n  const exportPdfTable = (singlebatchpayslip) => {\r\n    PrintPaySummary((singlebatchpayslip = { singlebatchpayslip }));\r\n  };\r\n\r\n  const handleSavePayslips = (e) => {\r\n    e.preventDefault();\r\n\r\n    //calcPayrunTotals();\r\n    // eslint-disable-next-line no-lone-blocks\r\n    // {\r\n    //   singlebatchpayslip.forEach((rec) => {\r\n    //     const { id, rec_id, tableData, ...fields } = rec;\r\n    //     updatePayslip({ id, ...fields });\r\n    //   });\r\n    // }\r\n\r\n    //**\r\n    // save individual payslips\r\n    saveIndividualPayslips();\r\n\r\n    //update payrun\r\n    handleSavePayrun();\r\n    // toast({\r\n    //   title: \"Changes have been saved!\",\r\n    //   status: \"success\",\r\n    // });\r\n    navigate(\"/payslip\");\r\n  };\r\n\r\n  const saveIndividualPayslips = () => {\r\n    if (payrundata.status === \"Pending\") {\r\n      singlebatchpayslip.forEach((rec) => {\r\n        //const { id, rec_id, tableData, ...fields } = rec;\r\n        // const timer = setTimeout(() => {\r\n        //   console.log(\"This will run after 1 second!\");\r\n        //   updatePayslip({ id, ...fields });\r\n        // }, 300);\r\n        if (rec.tableData.checked) {\r\n          const { id, rec_id, tableData, ...fields } = rec;\r\n          console.log(\"updatepayslip\", rec);\r\n          updatePayslip({ id, ...fields });\r\n          //uncheck\r\n          const data = rec;\r\n          data.tableData.checked = false;\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const calcPayrunTotals = () => {\r\n    // if (!psbpayrunId) {\r\n    //   return null;\r\n    // }\r\n    const tmpbatch = singlebatchpayslip\r\n      .filter((r) => r.payrun === payslip_period)\r\n      .map((rec) => {\r\n        return { ...rec };\r\n      });\r\n    //console.log(\"recalc\", tmpbatch);\r\n\r\n    const totalpayroll = tmpbatch.reduce((acc, item) => {\r\n      const value = isNaN(item.nett_pay_bnd) ? 0 : item.nett_pay_bnd;\r\n      return acc + Math.round((value + Number.EPSILON) * 100) / 100;\r\n    }, 0);\r\n    const totalwages = tmpbatch.reduce((acc, item, index) => {\r\n      const value = isNaN(item.wages_bnd) ? 0 : item.wages_bnd;\r\n      return acc + Math.round((value + Number.EPSILON) * 100) / 100;\r\n    }, 0);\r\n    const totaltap = tmpbatch.reduce((acc, item) => {\r\n      const value = isNaN(item.tap_amount_bnd) ? 0 : item.tap_amount_bnd;\r\n      return acc + Math.round((value + Number.EPSILON) * 100) / 100;\r\n    }, 0);\r\n\r\n    const totalscp = tmpbatch.reduce((acc, item) => {\r\n      const value = isNaN(item.scp_amount_bnd) ? 0 : item.scp_amount_bnd;\r\n      return acc + Math.round((value + Number.EPSILON) * 100) / 100;\r\n    }, 0);\r\n\r\n    const totalallows = tmpbatch.reduce((acc, item) => {\r\n      const value = isNaN(item.total_allowances_bnd)\r\n        ? 0\r\n        : item.total_allowances_bnd;\r\n      return acc + Math.round((value + Number.EPSILON) * 100) / 100;\r\n    }, 0);\r\n\r\n    const totaldeducts = tmpbatch.reduce((acc, item) => {\r\n      const value = isNaN(item.total_deductions_bnd)\r\n        ? 0\r\n        : item.total_deductions_bnd;\r\n      return acc + Math.round((value + Number.EPSILON) * 100) / 100;\r\n    }, 0);\r\n\r\n    const totalsiteallows = tmpbatch.reduce((acc, item) => {\r\n      const value = isNaN(item.site_allows_bnd) ? 0 : item.site_allows_bnd;\r\n      return acc + Math.round((value + Number.EPSILON) * 100) / 100;\r\n    }, 0);\r\n\r\n    const totalexpensesclaims = tmpbatch.reduce((acc, item) => {\r\n      const value = isNaN(item.expenses_claims_bnd)\r\n        ? 0\r\n        : item.expenses_claims_bnd;\r\n      return acc + Math.round((value + Number.EPSILON) * 100) / 100;\r\n    }, 0);\r\n\r\n    setPayrundata(\r\n      (prev) =>\r\n        (prev = {\r\n          ...payrundata,\r\n          totalpayroll: totalpayroll,\r\n          totalwages: totalwages,\r\n          totaltap: totaltap,\r\n          totalscp: totalscp,\r\n          totalallows: totalallows,\r\n          totaldeducts: totaldeducts,\r\n          totalsiteallows: totalsiteallows,\r\n          totalexpensesclaims: totalexpensesclaims,\r\n        })\r\n    );\r\n  };\r\n\r\n  const handleSavePayrun = () => {\r\n    if (payrundata.status === \"Verified\" || payrundata.status === \"Approved\") {\r\n      toast({\r\n        title: `This payroll batch has been ${payrundata.status}! No changes can be made!`,\r\n        status: \"warning\",\r\n      });\r\n      return <div></div>;\r\n    }\r\n\r\n    const tmppayrun = payrun.filter((r) => r.payrun === payslip_period);\r\n    //console.log(\"paysave\", tmppayrun[0].id);\r\n    // eslint-disable-next-line no-lone-blocks\r\n    //console.log(\"paybatch\", payslip_period, payrundata);\r\n    updatePayrun({\r\n      id: tmppayrun[0].id,\r\n      totalpayroll: payrundata.totalpayroll,\r\n      totalwages: payrundata.totalwages,\r\n      totaltap: payrundata.totaltap,\r\n      totalscp: payrundata.totalscp,\r\n      totalallows: payrundata.totalallows,\r\n      totaldeducts: payrundata.totaldeducts,\r\n      totalsitesallows: payrundata.totalsiteallows,\r\n      totalexpensesclaims: payrundata.totalexpensesclaims,\r\n    });\r\n    navigate(\"/payslip\");\r\n  };\r\n\r\n  const handleVerifyPayslips = (e) => {\r\n    e.preventDefault();\r\n    setPayrundata((prev) => (prev = { ...payrundata, status: \"Verified\" }));\r\n    setPayrunStatus(\"Verified\");\r\n    console.log(\"Verify\", payrundata);\r\n    //**\r\n    // save individual payslips\r\n    //saveIndividualPayslips();\r\n\r\n    // save payrun\r\n    updatePayrun({\r\n      id: payrunId,\r\n      status: \"Verified\",\r\n      totalpayroll: payrundata.totalpayroll,\r\n      totalwages: payrundata.totalwages,\r\n      totaltap: payrundata.totaltap,\r\n      totalscp: payrundata.totalscp,\r\n      totalallows: payrundata.totalallows,\r\n      totaldeducts: payrundata.totaldeducts,\r\n      totalsitesallows: payrundata.totalsiteallows,\r\n      totalexpensesclaims: payrundata.totalexpensesclaims,\r\n    });\r\n    toast({\r\n      title: \"Batch has been verified!\",\r\n      status: \"success\",\r\n    });\r\n  };\r\n\r\n  const handleEmpButtonClick = (index) => {\r\n    const paydata = singlebatchpayslip[index];\r\n    //setFormdata(prev => prev = initial_formdata);\r\n    setFormdata((prev) => (prev = { ...initial_formdata, ...paydata }));\r\n    //setFormdata({ ...initial_formdata, ...paydata });\r\n    setLoadFormdata(true);\r\n    //**\r\n    setIsUpdPayslip(true);\r\n  };\r\n\r\n  const handleTabChange = (index) => {\r\n    setTabno(index);\r\n    if (index === 1) {\r\n      calcPayrunTotals();\r\n      setIsUpdPayslip(true);\r\n    }\r\n    setIsShow(false);\r\n  };\r\n\r\n  const SentEmailModal = () => {\r\n    return (\r\n      <Box>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={payslipsbatch}\r\n          title=\"Employees\"\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: true,\r\n            selection: true,\r\n            pageSize: 10,\r\n            headerStyle: {\r\n              backgroundColor: \"#daad86\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    colorScheme=\"blue\"\r\n                    isDisabled={payrundata.status !== \"Approve\" ? true : false}\r\n                    onClick={() => handleSentEmail()}\r\n                    leftIcon={<FiMail color=\"white\" fontSize=\"1.5em\" />}\r\n                  >\r\n                    Email\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  const handleSentEmail = (data) => {\r\n    const mth = months[payslip_period.substring(6, 7)];\r\n    const yr = payslip_period.substring(0, 4);\r\n\r\n    payslipsbatch.forEach((pay) => {\r\n      if (pay.tableData.checked) {\r\n        const { name, empid } = pay;\r\n        const emp = employees\r\n          .filter((r) => r.id === empid)\r\n          .map((rec) => {\r\n            return { ...rec };\r\n          });\r\n\r\n        var emaildata = {\r\n          to_name: name,\r\n          to_email: emp[0].email,\r\n          message: `Your payroll for the month of ${mth} ${yr} has been transfered. Please login in to view your payslip!`,\r\n        };\r\n\r\n        emailjs.send(SERVICE_ID, TEMPLATE_ID, emaildata, USER_ID).then(\r\n          function (response) {\r\n            console.log(response.status, response.text);\r\n            toast({\r\n              title: `Email has sent successfully to ${emaildata.to_email}!`,\r\n              status: \"success\",\r\n            });\r\n          },\r\n          function (err) {\r\n            console.log(err);\r\n            toast({\r\n              title: `Email has fail to send to ${emaildata.to_email}!`,\r\n              status: \"warning\",\r\n            });\r\n          }\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      marginLeft={4}\r\n      marginTop={70}\r\n      w=\"98%\"\r\n      h=\"100%\"\r\n      style={{ backgroundColor: \"lightcyan\" }}\r\n    >\r\n      <VStack>\r\n        <Grid templateRows=\"repeat(1,1fr)\" templateColumns=\"repeat(1,1fr)\">\r\n          <GridItem rowSpan={1} colSpan={1}>\r\n            <Grid templateRows=\"repeat(1,1fr)\" templateColumns=\"repeat(10,1fr)\">\r\n              <GridItem rowSpan={1} colSpan={2}></GridItem>\r\n              <GridItem rowSpan={1} colSpan={4}>\r\n                <Box textAlign=\"center\" alignItems=\"center\">\r\n                  <Heading pl=\"10\" pt={2}>\r\n                    Payroll\r\n                  </Heading>\r\n                </Box>\r\n              </GridItem>\r\n              <GridItem rowSpan={1} colSpan={4} pt={0}>\r\n                <Box pt=\"2\" pr={5} alignItems=\"right\" align=\"right\">\r\n                  <Stack spacing={4} direction=\"row\" align=\"center\" pl={150}>\r\n                    <Button\r\n                      width=\"800px\"\r\n                      colorScheme=\"blue\"\r\n                      isDisabled={\r\n                        payrundata.status === \"Verified\" ||\r\n                        payrundata.status === \"Approved\" ||\r\n                        !isShow\r\n                          ? true\r\n                          : false\r\n                      }\r\n                      onClick={(e) => handleSavePayslips(e)}\r\n                      leftIcon={<FiSave color=\"white\" fontSize=\"1.5em\" />}\r\n                    >\r\n                      Save/Exit\r\n                    </Button>\r\n                    <Button\r\n                      isDisabled={!isShow}\r\n                      width=\"500px\"\r\n                      colorScheme=\"blue\"\r\n                      onClick={(e) => handlePrintSummary(e)}\r\n                      leftIcon={<FiSave color=\"white\" fontSize=\"1.5em\" />}\r\n                    >\r\n                      Print\r\n                    </Button>\r\n\r\n                    <Button\r\n                      width=\"500px\"\r\n                      colorScheme=\"blue\"\r\n                      isDisabled={\r\n                        payrundata.status === \"Verified\" ||\r\n                        payrundata.status === \"Approved\" ||\r\n                        payrundata.status === \"New\" ||\r\n                        !isShow\r\n                          ? true\r\n                          : false\r\n                      }\r\n                      onClick={(e) => handleVerifyPayslips(e)}\r\n                      leftIcon={\r\n                        <FiCheckCircle color=\"white\" fontSize=\"1.5em\" />\r\n                      }\r\n                    >\r\n                      Verify\r\n                    </Button>\r\n                    <Button\r\n                      width=\"500px\"\r\n                      colorScheme=\"blue\"\r\n                      isDisabled={\r\n                        payrundata.status !== \"Approved\" ? true : false\r\n                      }\r\n                      onClick={onOpen}\r\n                      leftIcon={<FiMail color=\"white\" fontSize=\"1.5em\" />}\r\n                    >\r\n                      Email\r\n                    </Button>\r\n                  </Stack>\r\n                </Box>\r\n              </GridItem>\r\n            </Grid>\r\n            <Divider\r\n              style={{ border: \"1px solid lightgrey\" }}\r\n              orientation=\"horizontal\"\r\n              colorScheme=\"red\"\r\n              variant=\"solid\"\r\n            />\r\n          </GridItem>\r\n          <GridItem rowSpan={1} colSpan={1}>\r\n            <Tabs defaultIndex={0} onChange={(index) => handleTabChange(index)}>\r\n              <TabList marginLeft={4}>\r\n                <Tab>\r\n                  <Box>\r\n                    <Heading size=\"sm\">Details</Heading>\r\n                  </Box>\r\n                </Tab>\r\n                <Tab>\r\n                  <Box>\r\n                    <Heading size=\"sm\">Summary</Heading>\r\n                  </Box>\r\n                </Tab>\r\n              </TabList>\r\n              <TabPanels>\r\n                <TabPanel>\r\n                  <Grid\r\n                    templateRows=\"repeat(1,1fr)\"\r\n                    templateColumns=\"repeat(10,1fr)\"\r\n                  >\r\n                    <GridItem colSpan={2}>\r\n                      <Box textAlign=\"center\" p={4}>\r\n                        <Heading size=\"sm\" alignItems=\"center\">\r\n                          Employees\r\n                        </Heading>\r\n                      </Box>\r\n                      <Divider backgroundColor=\"white\" />\r\n                      <Box\r\n                        h=\"550\"\r\n                        border=\"2px solid white\"\r\n                        backgroundColor=\"cyan.100\"\r\n                        overflow=\"scroll\"\r\n                      >\r\n                        {/* {payslipsbatch &&\r\n                      payslipsbatch.map((item, index) => {\r\n                        return (\r\n                          <div>\r\n                            <Button\r\n                              className={classes.empbtn}\r\n                              variant=\"outlined\"\r\n                              // ${index === value && \"activebtn\"}\r\n                              onClick={(e) => {\r\n                                setRowIndex(index);\r\n                                handleEmpButtonClick(index);\r\n                              }}\r\n                            >\r\n                              <div key={item.id}> {item.name}</div>\r\n                            </Button>\r\n                            <Divider\r\n                              variant=\"fullWidth\"\r\n                              className={classes.divider}\r\n                            />\r\n                          </div>\r\n                        );\r\n                      })} */}\r\n                        <Table variant=\"simple\">\r\n                          {/* <Thead>\r\n                        <Tr>\r\n                          <Th>Employees</Th>\r\n                        </Tr>\r\n                      </Thead> */}\r\n                          <Tbody>\r\n                            {payslipsbatch.map((item, index) => {\r\n                              return (\r\n                                <div>\r\n                                  <Button\r\n                                    //className={classes.empbtn}\r\n                                    fontSize={{\r\n                                      base: \"10px\",\r\n                                      md: \"10px\",\r\n                                      lg: \"12px\",\r\n                                      xl: \"16px\",\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    height={[\r\n                                      `${\r\n                                        item.name.length > 30 ? \"60px\" : \"40px\"\r\n                                      }`,\r\n                                      \"40px\",\r\n                                    ]}\r\n                                    style={{\r\n                                      whiteSpace: \"normal\",\r\n                                      wordWrap: \"break-word\",\r\n                                    }}\r\n                                    // ${index === value && \"activebtn\"}\r\n                                    onClick={(e) => {\r\n                                      setRowIndex(index);\r\n                                      setIsStart(false);\r\n                                      handleEmpButtonClick(index);\r\n                                    }}\r\n                                  >\r\n                                    <Text align=\"left\">{item.name}</Text>\r\n                                  </Button>\r\n                                  <Divider backgroundColor=\"white\" />\r\n                                </div>\r\n                              );\r\n                            })}\r\n                          </Tbody>\r\n                        </Table>\r\n                      </Box>\r\n                    </GridItem>\r\n                    <GridItem colSpan={8}>\r\n                      <PayForm\r\n                        formdata={formdata}\r\n                        setFormdata={setFormdata}\r\n                        loadFormdata={loadFormdata}\r\n                        setLoadFormdata={setLoadFormdata}\r\n                        payitems={payitems}\r\n                        setLoadUpdatedata={setLoadUpdatedata}\r\n                        singlebatchpayslip={singlebatchpayslip}\r\n                        rowindex={rowindex}\r\n                        isCalc={isCalc}\r\n                        isStart={isStart}\r\n                        setIsStart={setIsStart}\r\n                        setIsCalc={setIsCalc}\r\n                      />\r\n                    </GridItem>\r\n                  </Grid>\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <PaySummary\r\n                    payrundata={payrundata}\r\n                    singlebatchpayslip={singlebatchpayslip}\r\n                  />\r\n                </TabPanel>\r\n              </TabPanels>\r\n            </Tabs>\r\n          </GridItem>\r\n        </Grid>\r\n      </VStack>\r\n      <Modal isOpen={isOpen} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          {/* <ModalHeader>Sending EMail Notifications</ModalHeader> */}\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            <SentEmailModal />\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button colorScheme=\"blue\" mr={3} onClick={onClose}>\r\n              Close\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </Flex>\r\n  );\r\n};\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   root: {\r\n//     flexGrow: 1,\r\n//   },\r\n//   button: {\r\n//     margin: theme.spacing(1),\r\n//   },\r\n//   container: {\r\n//     margin: 0,\r\n//     padding: 0,\r\n//     width: \"80vw\",\r\n//     display: \"grid\",\r\n//     gridTemplateColumns: \"repeat(auto-fill,250px)\",\r\n//     gridAutoRows: \"10px\",\r\n//     position: \"absolute\",\r\n//     left: \"50%\",\r\n//     transform: \"translateX(-50%)\",\r\n//     justifyContent: \"center\",\r\n//     backgroundColor: \"primary\",\r\n//   },\r\n//   fixedHeight: {\r\n//     height: 800,\r\n//   },\r\n//   paper: {\r\n//     paddingTop: theme.spacing(10),\r\n//     // display: \"flex\",\r\n//     display: \"flex\",\r\n//     overflow: \"auto\",\r\n//     flexDirection: \"column\",\r\n//     border: \"1px solid\",\r\n//     width: \"100%\",\r\n//     color: \"primary\",\r\n//     bcakgroundColor: \"white\",\r\n//   },\r\n//   card: {\r\n//     backgroundColor: \"white\",\r\n//   },\r\n//   section: {\r\n//     width: \"80vw\",\r\n//     margin: \"1rem auto\",\r\n//     maxWidth: \"var(--max-width)\",\r\n//   },\r\n//   underline: {\r\n//     width: \"5rem\",\r\n//     height: \"0.25rem\",\r\n//     marginBottom: \"1.25rem\",\r\n//     background: \"var(--clr-primary-5)\",\r\n//     marginLeft: \"auto\",\r\n//     marginRight: \"auto\",\r\n//   },\r\n//   title: {\r\n//     marginbottom: \"4rem\",\r\n//     textAlign: \"center\",\r\n//   },\r\n//   empscenter: {\r\n//     width: \"80vw\",\r\n//     margin: \"0 auto\",\r\n//     maxWidth: \"var(--max-width)\",\r\n//     flexDirection: \"row\",\r\n//   },\r\n//   empcontainer: {\r\n//     display: \"flex\",\r\n//     flexDirection: \"row\",\r\n//     justifyContent: \"center\",\r\n//     marginBottom: \"4rem\",\r\n//     flexWrap: \"wrap\",\r\n//   },\r\n//   empbtn: {\r\n//     background: \"transparent\",\r\n//     borderColor: \"transparent\",\r\n//     textTransform: \"capitalize\",\r\n//     fontSize: \"1rem\",\r\n//     letterSpacing: \"var(--spacing)\",\r\n//     margin: \"0 0.5rem\",\r\n//     transition: \"var(--transition)\",\r\n//     cursor: \"pointer\",\r\n//     padding: \"0.25rem 0\",\r\n//     lineHeight: \"1\",\r\n//     outlineColor: \"var(--clr-primary-10)\",\r\n//     \"&:hover\": {\r\n//       color: \"var(--clr-primary-5)\",\r\n//       boxShadow: \"0 2px var(--clr-primary-5)\",\r\n//     },\r\n//   },\r\n//   activebtn: {\r\n//     color: \"var(--clr-primary-5)\",\r\n//     boxShadow: \"0 2px var(--clr-primary-5)\",\r\n//   },\r\n//   empinfo: {\r\n//     fontWeight: \"400\",\r\n//   },\r\n//   divider: {\r\n//     // Theme Color, or use css color in quote\r\n//     background: \"white\",\r\n//   },\r\n//   textField: {\r\n//     marginLeft: theme.spacing(1),\r\n//     marginRight: theme.spacing(1),\r\n//     width: 350,\r\n//   },\r\n// }));\r\n\r\nexport default Payrunbatch;\r\n","import { forwardRef, chakra, useMultiStyleConfig, omitThemingProps, StylesProvider, useStyles } from '@chakra-ui/system';\nimport { cx, __DEV__ } from '@chakra-ui/utils';\nimport * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar _excluded = [\"overflow\", \"overflowX\", \"className\"],\n    _excluded2 = [\"className\"],\n    _excluded3 = [\"placement\"],\n    _excluded4 = [\"isNumeric\"],\n    _excluded5 = [\"isNumeric\"];\nvar TableContainer = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _ref;\n\n  var overflow = props.overflow,\n      overflowX = props.overflowX,\n      className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    className: cx(\"chakra-table__container\", className)\n  }, rest, {\n    __css: {\n      display: \"block\",\n      whiteSpace: \"nowrap\",\n      WebkitOverflowScrolling: \"touch\",\n      overflowX: (_ref = overflow != null ? overflow : overflowX) != null ? _ref : \"auto\",\n      overflowY: \"hidden\",\n      maxWidth: \"100%\"\n    }\n  }));\n});\nvar Table = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useMultiStyleConfig(\"Table\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      className = _omitThemingProps.className,\n      tableProps = _objectWithoutPropertiesLoose(_omitThemingProps, _excluded2);\n\n  return /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.table, _extends({\n    role: \"table\",\n    ref: ref,\n    __css: styles.table,\n    className: cx(\"chakra-table\", className)\n  }, tableProps)));\n});\n\nif (__DEV__) {\n  Table.displayName = \"Table\";\n}\n\nvar TableCaption = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _props$placement = props.placement,\n      placement = _props$placement === void 0 ? \"bottom\" : _props$placement,\n      rest = _objectWithoutPropertiesLoose(props, _excluded3);\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.caption, _extends({}, rest, {\n    ref: ref,\n    __css: _extends({}, styles.caption, {\n      captionSide: placement\n    })\n  }));\n});\n\nif (__DEV__) {\n  TableCaption.displayName = \"TableCaption\";\n}\n\nvar Thead = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.thead, _extends({}, props, {\n    ref: ref,\n    __css: styles.thead\n  }));\n});\nvar Tbody = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.tbody, _extends({}, props, {\n    ref: ref,\n    __css: styles.tbody\n  }));\n});\nvar Tfoot = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.tfoot, _extends({}, props, {\n    ref: ref,\n    __css: styles.tfoot\n  }));\n});\nvar Th = /*#__PURE__*/forwardRef(function (_ref2, ref) {\n  var isNumeric = _ref2.isNumeric,\n      rest = _objectWithoutPropertiesLoose(_ref2, _excluded4);\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.th, _extends({}, rest, {\n    ref: ref,\n    __css: styles.th,\n    \"data-is-numeric\": isNumeric\n  }));\n});\nvar Tr = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.tr, _extends({\n    role: \"row\"\n  }, props, {\n    ref: ref,\n    __css: styles.tr\n  }));\n});\nvar Td = /*#__PURE__*/forwardRef(function (_ref3, ref) {\n  var isNumeric = _ref3.isNumeric,\n      rest = _objectWithoutPropertiesLoose(_ref3, _excluded5);\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.td, _extends({\n    role: \"gridcell\"\n  }, rest, {\n    ref: ref,\n    __css: styles.td,\n    \"data-is-numeric\": isNumeric\n  }));\n});\n\nexport { Table, TableCaption, TableContainer, Tbody, Td, Tfoot, Th, Thead, Tr };\n"],"sourceRoot":""}