{"version":3,"sources":["components/ExpenseTableView.js","components/ExpenseFormView.js"],"names":["initial_form","name","date","purchased_from","description","status","amount","attachment1_name","attachment1_url","attachment2_name","attachment2_url","attachment3_name","attachment3_url","ExpenseTableView","classes","useStyles","expenses","useExpenses","useState","formdata","setFormdata","isDialogOpen","setIsDialogOpen","useExpensesContext","setEditExpenseID","editExpenseID","setIsExpenseEditingOn","columns","setIsExpenseEditingOff","useMemo","title","field","type","dateSetting","locale","handleDialogOpen","handleDialogClose","className","root","style","maxWidth","paddingTop","data","filter","r","map","rec","actions","rowData","icon","size","tooltip","onClick","event","id","prev","View_Expenses","options","filtering","search","toolbar","headerStyle","backgroundColor","color","showTitle","isOpen","handleClose","showButton","isFullscreen","isFullwidth","makeStyles","theme","padding","FileViewers","React","lazy","button","margin","spacing","leftIcon","marginRight","rightIcon","marginLeft","iconSmall","fontSize","container","display","flexWrap","textField","width","ExpenseForm","updateExpenses","useCustomToast","useUpdateExpenses","addExpenses","useAddExpenses","useDeleteExpenses","useExpensesAttachments","expensesattachments","setAttachmentId","useRecoilState","loginLevelState","loginLevel","isExpenseEditing","files","setFiles","viewImageState","image","setImage","useDisclosure","isViewImageOpen","onViewImageOpen","onOpen","onViewImageClose","onClose","useForm","defaultValues","handleSubmit","control","setValue","useEffect","attachmentid","newData","preview","url","variant","component","onSubmit","e","preventDefault","length","console","log","rec_id","tableData","editData","empid","loginUserId","loginUser","templateColumns","gap","colSpan","defaultValue","render","onChange","error","value","fieldState","label","helperText","message","InputProps","readOnly","InputLabelProps","shrink","rules","required","currencySymbol","outputFormat","decimalCharacter","digitGroupSeparator","decimalPlaces","parseFloat","currency","target","remark","undefined","file","w","h","mb","mr","p","border","borderRadius","src","alt","aria-label","newImage","handleViewImage","split","pop","closeOnOverlayClick","pb","imagefile"],"mappings":"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","file":"static/js/17.d37eb478.chunk.js","sourcesContent":["import React, { useState, useMemo } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { useExpenses } from \"./expenses/useExpenses\";\r\nimport { GrFormView } from \"react-icons/gr\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\nimport ExpenseFormView from \"./ExpenseFormView\";\r\n\r\n//const FILTERSTRING = \"Pending\";\r\n\r\nconst initial_form = {\r\n  name: \"\",\r\n  date: \"\",\r\n  purchased_from: \"\",\r\n  description: \"\",\r\n  status: \"Pending\",\r\n  amount: 0,\r\n  attachment1_name: \"\",\r\n  attachment1_url: \"\",\r\n  attachment2_name: \"\",\r\n  attachment2_url: \"\",\r\n  attachment3_name: \"\",\r\n  attachment3_url: \"\",\r\n};\r\n\r\nexport default function ExpenseTableView() {\r\n  const classes = useStyles();\r\n  //const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  //const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  //const { loadEmployees } = useEmployeesContext();\r\n  const { expenses } = useExpenses();\r\n  const [formdata, setFormdata] = useState(initial_form);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const {\r\n    //expenses,\r\n    editExpenseID,\r\n    //updateExpense,\r\n    //addExpense,\r\n    //deleteExpense,\r\n    setEditExpenseID,\r\n    setIsExpenseEditingOn,\r\n    setIsExpenseEditingOff,\r\n  } = useExpensesContext();\r\n  // const {\r\n  //   //expenses,\r\n  //   addExpense,\r\n  //   expenses_loading,\r\n  //   updateExpense,\r\n  //   deleteExpense,\r\n  //   loadPendingExpenses,\r\n  //   getSingleExpense,\r\n  //   setEditExpenseID,\r\n  //   setIsExpenseEditingOn,\r\n  //   setIsExpenseEditingOff,\r\n  //   resetSingleExpense,\r\n  // } = useExpensesContext();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"name\",\r\n      },\r\n      {\r\n        title: \"Date\",\r\n        field: \"date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n      },\r\n\r\n      { title: \"Description\", field: \"description\" },\r\n      { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n      { title: \"Status\", field: \"status\" },\r\n    ],\r\n    []\r\n  );\r\n\r\n  // useEffect(() => {\r\n  //   loadPendingExpenses(FILTERSTRING);\r\n  // }, []);\r\n\r\n  // const handleDialogOpen = () => {\r\n  //   setIsDialogOpen(true);\r\n  //};\r\n\r\n  // const handleDialogClose = () => {\r\n  //   setIsDialogOpen(false);\r\n  //   //loadPendingExpenses(FILTERSTRING);\r\n  // };\r\n\r\n  // const handleAlertOpen = () => {\r\n  //   setIsAlertOpen(true);\r\n  // };\r\n\r\n  // const handleAlertClose = () => {\r\n  //   setIsAlertOpen(false);\r\n  // };\r\n\r\n  const View_Expenses = (data) => {\r\n    const { id } = data;\r\n    setFormdata({ ...data });\r\n    setFormdata((prev) => (prev = { ...data }));\r\n    setEditExpenseID(id);\r\n    setIsExpenseEditingOn();\r\n    handleDialogOpen();\r\n  };\r\n\r\n  const handleDialogOpen = () => {\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={expenses\r\n            .filter((r) => r.status === \"Pending\")\r\n            .map((rec) => {\r\n              return { ...rec };\r\n            })}\r\n          title=\"Expenses Claims Application\"\r\n          actions={[\r\n            (rowData) => ({\r\n              icon: () => <GrFormView size=\"33px\" />,\r\n              tooltip: \"View\",\r\n              onClick: (event, rowData) => {\r\n                View_Expenses(rowData);\r\n              },\r\n            }),\r\n          ]}\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </div>\r\n      <CustomDialog\r\n        isOpen={isDialogOpen}\r\n        handleClose={handleDialogClose}\r\n        title=\"\"\r\n        showButton={true}\r\n        isFullscreen={false}\r\n        isFullwidth={false}\r\n      >\r\n        <ExpenseFormView\r\n          formdata={formdata}\r\n          setFormdata={setFormdata}\r\n          handleDialogClose={handleDialogClose}\r\n        />\r\n      </CustomDialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Button, Icon, TextField, Paper, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport * as emailjs from \"emailjs-com\";\r\nimport axios from \"axios\";\r\nimport currency from \"currency.js\";\r\nimport CurrencyTextField from \"@unicef/material-ui-currency-textfield\";\r\n//import { Box, Grid, GridItem, Heading } from \"@chakra-ui/react\";\r\nimport {\r\n  Box,\r\n  Image,\r\n  IconButton,\r\n  HStack,\r\n  VStack,\r\n  Grid,\r\n  GridItem,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { FiEye, FiTrash2 } from \"react-icons/fi\";\r\nimport { viewImageState } from \"../components/data/atomdata\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\n//import { useExpenses } from \"./expenses/useExpenses\";\r\nimport { useAddExpenses } from \"./expenses/useAddExpenses\";\r\nimport { useDeleteExpenses } from \"./expenses/useDeleteExpenses\";\r\nimport { useUpdateExpenses } from \"./expenses/useUpdateExpenses\";\r\nimport { useExpensesAttachments } from \"./expensesattachments/useExpensesAttachments\";\r\n\r\nconst FileViewers = React.lazy(() => import(\"../helpers/FileViewers\"));\r\n\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\nconst UPLOADURL = \"https://api.cloudinary.com/v1_1/dlmzwvakr/image/upload\";\r\nconst DOWNLOADURL = \"https://res.cloudinary.com/v1_1/dlmzwvakr/image/upload\";\r\nconst UPLOADPRESET = \"appsmiths\";\r\n// const initial_values = {\r\n//   name: \"\",\r\n//   date: \"\",\r\n//   purchased_date: \"\",\r\n//   purchased_from: \"\",\r\n//   description: \"\",\r\n//   remark: \"\",\r\n//   status: \"Pending\",\r\n//   amount: 0,\r\n//};\r\n\r\nconst ExpenseForm = ({ formdata, setFormdata, handleDialogClose }) => {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  //const { acceptedFiles, getRootProps, getInputProps } = useDropzone();\r\n  //const { expenses, filter, setFilter, setExpenseId } = useExpenses();\r\n  const updateExpenses = useUpdateExpenses();\r\n  const addExpenses = useAddExpenses();\r\n  const delExpenses = useDeleteExpenses();\r\n  const { expensesattachments, setAttachmentId } = useExpensesAttachments();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { isExpenseEditing, editExpenseID } = useExpensesContext();\r\n  const [files, setFiles] = useState([]);\r\n  const [filename, setFilename] = useState(\"\");\r\n  const [newFile, setNewFile] = useState({});\r\n  const [image, setImage] = useRecoilState(viewImageState);\r\n  const {\r\n    isOpen: isViewImageOpen,\r\n    onOpen: onViewImageOpen,\r\n    onClose: onViewImageClose,\r\n  } = useDisclosure();\r\n  const { handleSubmit, control, setValue } = useForm({\r\n    defaultValues: {\r\n      ...formdata,\r\n    },\r\n  });\r\n\r\n  //console.log(\"formdata\", formdata);\r\n  //console.log(\"files\", files);\r\n\r\n  const onDrop = (acceptedFiles) => {\r\n    acceptedFiles.forEach((file) => {\r\n      const formData = new FormData();\r\n      formData.append(\"file\", file);\r\n      formData.append(\"upload_preset\", UPLOADPRESET);\r\n      axios({\r\n        url: UPLOADURL,\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        },\r\n        data: formData,\r\n      })\r\n        .then((res) => {\r\n          //console.log(\"res\", res.data);\r\n          // Object.assign(file, {\r\n          //   preview: res.data.url,\r\n          // });\r\n          setFiles(\r\n            (prev) =>\r\n              (prev = [\r\n                ...files,\r\n                ...[\r\n                  { name: res.data.original_filename, preview: res.data.url },\r\n                ],\r\n              ])\r\n          );\r\n        })\r\n        .catch((err) => {\r\n          setNewFile({});\r\n          console.log(err);\r\n        });\r\n      // Object.assign(file, {\r\n      //   preview: URL.createObjectURL(file),\r\n      // });\r\n    });\r\n\r\n    //const allfiles = [...files, ...acceptedFiles];\r\n    //setFiles(allfiles);\r\n  };\r\n\r\n  const upLoad = () => {\r\n    const uploadURL = \"https://api.cloudinary.com/v1_1/dlmzwvakr/image/upload\";\r\n    const uploadPreset = \"appsmiths\";\r\n\r\n    files.forEach((file) => {\r\n      const formData = new FormData();\r\n      formData.append(\"file\", file);\r\n      formData.append(\"upload_preset\", uploadPreset);\r\n\r\n      axios({\r\n        url: uploadURL,\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        },\r\n        data: formData,\r\n      })\r\n        .then((res) => {\r\n          setFilename((prev) => (prev = res.data.public_id));\r\n          console.log(res.data.public_id);\r\n          //console.log(\"filename\", filename);\r\n        })\r\n        .catch((err) => console.log(err));\r\n    });\r\n  };\r\n\r\n  const handleSentEmail = (data) => {\r\n    const { date } = data;\r\n    //console.log(\"expense form\", loginLevel);\r\n    var emaildata = {\r\n      to_name: loginLevel.loginUser,\r\n      to_email: loginLevel.loginEmail,\r\n      message: `Your expenses claim application dated on ${date} has been successfully submitted for approval`,\r\n      cc_to: loginLevel.reporting_email,\r\n    };\r\n\r\n    emailjs.send(SERVICE_ID, TEMPLATE_ID, emaildata, USER_ID).then(\r\n      function (response) {\r\n        //console.log(response.status, response.text);\r\n        toast({\r\n          title: `Email has sent successfully to ${emaildata.to_email}!`,\r\n          status: \"success\",\r\n        });\r\n      },\r\n      function (err) {\r\n        console.log(err);\r\n        toast({\r\n          title: `Email has fail to send to ${emaildata.to_email}!`,\r\n          status: \"warning\",\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  const onSubmit = (data, e) => {\r\n    e.preventDefault();\r\n    //console.log(\"onSubmit\", isExpenseEditing);\r\n    let newData = {\r\n      ...data,\r\n      attachment1_name: files.length >= 1 ? files[0].name : \"\",\r\n      attachment1_url: files.length >= 1 ? files[0].preview : \"\",\r\n      attachment2_name: files.length >= 2 ? files[1].name : \"\",\r\n      attachment2_url: files.length >= 2 ? files[1].preview : \"\",\r\n      attachment3_name: files.length >= 3 ? files[2].name : \"\",\r\n      attachment3_url: files.length >= 3 ? files[2].preview : \"\",\r\n    };\r\n    console.log(\"newdata\", newData);\r\n    console.log(\"isEditing\", isExpenseEditing);\r\n    if (isExpenseEditing) {\r\n      //console.log(\"edit\");\r\n      const { rec_id, tableData, ...editData } = newData;\r\n      updateExpenses({ id: editExpenseID, ...editData });\r\n    } else {\r\n      //console.log(\"new\");\r\n      addExpenses({\r\n        ...newData,\r\n        empid: loginLevel.loginUserId,\r\n        name: loginLevel.loginUser,\r\n      });\r\n    }\r\n    // if (isExpenseEditing) {\r\n    //   const { rec_id, tableData, ...editData } = newData;\r\n    //   console.log(\"edit\", ...editData);\r\n    //   updateExpenses({ id: editExpenseID, ...editData });\r\n    // } else {\r\n    //   console.log(\"new\");\r\n    //   addExpenses({\r\n    //     ...newData,\r\n    //     empid: loginLevel.loginUserId,\r\n    //     name: loginLevel.loginUser,\r\n    //   });\r\n    //   handleSentEmail(data);\r\n    // }\r\n\r\n    handleDialogClose();\r\n  };\r\n\r\n  const handleViewImage = ({ preview, name }) => {\r\n    const newImage = { url: preview, name: name };\r\n    setImage((prev) => newImage);\r\n    onViewImageOpen();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isExpenseEditing) {\r\n      setAttachmentId(formdata.attachmentid);\r\n      const newData = expensesattachments\r\n        .filter((rec) => rec.attachmentid === formdata.attachmentid)\r\n        .map((rec) => {\r\n          return {\r\n            name: rec.name,\r\n            preview: rec.url,\r\n          };\r\n        });\r\n      \r\n      setFiles(newData);\r\n    } else {\r\n      setFiles([]);\r\n    }\r\n  }, [expensesattachments]);\r\n\r\n  return (\r\n    <div>\r\n      <Box size=\"x1\">\r\n        <Typography variant=\"h5\" component=\"h3\">\r\n          EXPENSES CLAIM FORM\r\n        </Typography>\r\n        <Typography component=\"p\">Expense Claim Application</Typography>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <Grid templateColumns=\"repeat(3, 1fr)\" gap={4}>\r\n            <GridItem colSpan={1}>\r\n              <div>\r\n                <Controller\r\n                  name=\"name\"\r\n                  control={control}\r\n                  defaultValue={formdata.name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Name\"\r\n                        id=\"margin-normal1\"\r\n                        name=\"name\"\r\n                        defaultValue={formdata.name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"date\"\r\n                  control={control}\r\n                  defaultValue={formdata.date}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Date\"\r\n                        type=\"date\"\r\n                        id=\"margin-normal2\"\r\n                        name=\"formdata.date\"\r\n                        value={value}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  rules={{ required: \"From Date is required\" }}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Controller\r\n                  name=\"purchased_from\"\r\n                  control={control}\r\n                  defaultValue={formdata.purchased_from}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Purchased From\"\r\n                        id=\"margin-normal3\"\r\n                        name=\"purchased_from\"\r\n                        defaultValue={formdata.purchased_from}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  // rules={{ required: \"Reason is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"description\"\r\n                  control={control}\r\n                  defaultValue={formdata.description}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Description\"\r\n                        id=\"margin-normal4\"\r\n                        name=\"description\"\r\n                        defaultValue={formdata.description}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  // rules={{ required: \"Reason is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"amount\"\r\n                  control={control}\r\n                  defaultValue={formdata.amount}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      // <TextField\r\n                      //   label=\"Amount\"\r\n                      //   type=\"number\"\r\n                      //   id=\"standard-number1\"\r\n                      //   name=\"amount\"\r\n                      //   defaultValue={formdata.amount}\r\n                      //   className={classes.textField}\r\n                      //   //onChange={onChange}\r\n                      //   onChange={(e) => {\r\n                      //     onChange(parseInt(e.target.value, 10));\r\n                      //   }}\r\n                      //   error={!!error}\r\n                      //   helperText={error ? error.message : null}\r\n                      // />\r\n                      <CurrencyTextField\r\n                        label=\"Amount\"\r\n                        variant=\"standard\"\r\n                        value={formdata.amount}\r\n                        currencySymbol=\"$\"\r\n                        outputFormat=\"string\"\r\n                        decimalCharacter=\".\"\r\n                        digitGroupSeparator=\",\"\r\n                        decimalPlaces=\"2\"\r\n                        className={classes.textField}\r\n                        id=\"standard-amount\"\r\n                        name=\"amount\"\r\n                        style={{ width: 100 }}\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(parseFloat(currency(e.target.value), 10));\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"remark\"\r\n                  control={control}\r\n                  defaultValue={formdata.remark}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Remark\"\r\n                        id=\"margin-normal5\"\r\n                        name=\"remark\"\r\n                        defaultValue={formdata.remark}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  // rules={{ required: \"Reason is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"status\"\r\n                  control={control}\r\n                  defaultValue={formdata.status}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Status\"\r\n                        id=\"margin-normal6\"\r\n                        name=\"status\"\r\n                        defaultValue={formdata.status}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Status is required\" }}\r\n                />\r\n              </div>\r\n              {/* <div>\r\n                <Controller\r\n                  name=\"attachment1_name\"\r\n                  control={control}\r\n                  defaultValue={files.length >= 1 ? files[0].name : \"\"}\r\n                  defaultValue={formdata.attachment1_name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Attachment #1\"\r\n                        id=\"margin-normal6\"\r\n                        name=\"attachment1_name\"\r\n                        defaultValue={files.length >= 1 ? files[0].name : \"\"}\r\n                        defaultValue={formdata.attachment1_name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                />\r\n              </div> */}\r\n              {/*  <div>\r\n                <Controller\r\n                  name=\"attachment2_name\"\r\n                  control={control}\r\n                  defaultValue={formdata.attachment2_name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Attachment #2\"\r\n                        id=\"margin-normal6\"\r\n                        name=\"attachment2_name\"\r\n                        defaultValue={formdata.attachment2_name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                />\r\n              </div> */}\r\n              {/* <div>\r\n                <Controller\r\n                  name=\"attachment3_name\"\r\n                  control={control}\r\n                  defaultValue={formdata.attachment3_name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Attachment #3\"\r\n                        id=\"margin-normal6\"\r\n                        name=\"attachment3_name\"\r\n                        defaultValue={formdata.attachment3_name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                />\r\n              </div> */}\r\n\r\n              <div>\r\n                {/* <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.button}\r\n                  //onClick={() => handleSubmit(onSubmit)()}\r\n                >\r\n                  Save <Icon className={classes.rightIcon}>send</Icon>\r\n                </Button> */}\r\n              </div>\r\n            </GridItem>\r\n            <GridItem colSpan={2}>\r\n              {/* <ImageUpload files={files} setFiles={setFiles} onDrop={onDrop} /> */}\r\n              {files\r\n                .filter((rec) => rec.name !== undefined && rec.name !== null)\r\n                .map((file) => {\r\n                  return (\r\n                    <Box\r\n                      display=\"inline-flex\"\r\n                      w=\"50%\"\r\n                      h={150}\r\n                      mb={8}\r\n                      mr={8}\r\n                      p={4}\r\n                      border=\"1px solid #eaeaea\"\r\n                      borderRadius={2}\r\n                      key={file.name}\r\n                    >\r\n                      <HStack p={5}>\r\n                        <Image\r\n                          src={file.preview}\r\n                          alt={file.name}\r\n                          display=\"block\"\r\n                          w=\"auto\"\r\n                          h=\"100%\"\r\n                        />\r\n                        <VStack>\r\n                          <IconButton\r\n                            size=\"sm\"\r\n                            aria-label=\"view image\"\r\n                            icon={<FiEye />}\r\n                            onClick={() =>\r\n                              handleViewImage({\r\n                                preview: file.preview,\r\n                                name: file.name,\r\n                                type: file.preview.split(\".\").pop(),\r\n                              })\r\n                            }\r\n                          />\r\n                          {/* <IconButton\r\n                            size=\"sm\"\r\n                            aria-label=\"delete image\"\r\n                            icon={<FiTrash2 />}\r\n                            onClick={() => handleDelImage(file.name)}\r\n                          /> */}\r\n                        </VStack>\r\n                      </HStack>\r\n                    </Box>\r\n                  );\r\n                })}\r\n            </GridItem>\r\n          </Grid>\r\n        </form>\r\n      </Box>\r\n      <Modal\r\n        closeOnOverlayClick={false}\r\n        isOpen={isViewImageOpen}\r\n        onClose={onViewImageClose}\r\n        size=\"3xl\"\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>{image.name}</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody pb={6}>\r\n            <Box\r\n              display=\"inline-flex\"\r\n              w=\"100%\"\r\n              h=\"800\"\r\n              mb={8}\r\n              mr={8}\r\n              p={4}\r\n              border=\"1px solid #eaeaea\"\r\n              borderRadius={2}\r\n            >\r\n              <FileViewers imagefile={image} />\r\n            </Box>\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button onClick={onViewImageClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 400,\r\n  },\r\n}));\r\n\r\nexport default ExpenseForm;\r\n"],"sourceRoot":""}