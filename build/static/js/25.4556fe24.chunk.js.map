{"version":3,"sources":["components/Payrun.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","button","margin","spacing","container","padding","width","display","gridTemplateColumns","gridAutoRows","position","left","transform","justifyContent","backgroundColor","fixedHeight","height","paper","overflow","flexDirection","border","color","bcakgroundColor","card","section","maxWidth","underline","marginBottom","background","marginLeft","marginRight","title","marginbottom","textAlign","jobscenter","btncontainer","flexWrap","jobbtn","borderColor","textTransform","fontSize","letterSpacing","transition","cursor","lineHeight","outlineColor","boxShadow","activebtn","jobinfo","fontWeight","rightIcon","formLabel","marginTop","Payrun","navigate","useNavigate","classes","fixedHeightPaper","clsx","currency","useCurrency","useDisclosure","isOpen","onOpen","onClose","useState","loadPaybatch","setLoadPaybatch","useEmployeesContext","loadEmployees","employees","useExpensesContext","loadUnpaidExpenses","unpaidexpenses","updateExpense","useDailyAllowancesContext","unpaiddailyallows","loadUnpaidDailyAllows","updateDailyAllowance","usePayslipsContext","addPayrun","getPayrun","payrun","payrun_loading","addPayslip","resetPayslipsData","singlebatch_payslip_loading","setPayslipPeriod","useRecoilState","payrunState","input","setInput","payrunIdState","setPayrunId","alert","setAlert","error","errornoselect","setErrornoselect","isPayrunExist","setIsPayrunExist","isSubmit","setIsSubmit","allemployees","filter","r","hasresigned","nonpayroll","columns","useMemo","field","editable","cellStyle","formatDate","string","Date","toLocaleDateString","year","month","day","useEffect","handleChange","e","target","name","value","checkSelectedEmployees","period","exp","allows","tmpbasicsalary","tmptotalallows","tmptotalTAP","tmptotalSCP","tmpnettpay","tmpcurrrate","tmpbasicsalarybnd","tmptotalallowsbnd","tmptotalTAPbnd","tmptotalSCPbnd","tmpsiteallowsbnd","tmpexpsclaimsbnd","tmpnettpaybnd","forEach","emp","index","tableData","checked","empid","id","map","i","amount","bank_name","bank_acno","basic_salary","salary_currency","tap_acno","scp_acno","tap_checkbox","table","rec","rate","Math","ceil","round","Number","EPSILON","data","pay_date","currency_rate","status","allows_type1","allows_type1amt","allows_type2","allows_type2amt","allows_type3","allows_type3amt","allows_type4","allows_type4amt","allows_type5","allows_type5amt","allows_type6","allows_type6amt","allows_type7","allows_type7amt","allows_type8","allows_type8amt","deducts_type1","deducts_type1amt","deducts_type2","deducts_type2amt","deducts_type3","deducts_type3amt","deducts_type4","deducts_type4amt","deducts_type5","deducts_type5amt","deducts_type6","deducts_type6amt","deducts_type7","deducts_type7amt","deducts_type8","deducts_type8amt","wages","tap_amount","scp_amount","total_allowances","total_deductions","site_allows","expenses_claims","nett_pay","wages_bnd","site_allows_bnd","expenses_claims_bnd","total_allowances_bnd","total_deductions_bnd","tap_amount_bnd","scp_amount_bnd","nett_pay_bnd","add_Payrun","pay_freq","payfreq","from_date","fromdate","to_date","todate","paydate","className","style","direction","item","sm","align","onSubmit","preventDefault","reduce","acc","setTimeout","payrundata","substring","some","el","label","variant","required","defaultValue","onChange","select","type","InputLabelProps","shrink","onClick","disabled","orientation","flexItem","h","w","options","filtering","search","toolbar","selection","paging","pageSize","headerStyle","showTitle","colorScheme","mr"],"mappings":"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","file":"static/js/25.4556fe24.chunk.js","sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport MaterialTable from \"material-table\";\r\nimport clsx from \"clsx\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  Paper,\r\n  Grid,\r\n  Icon,\r\n  Divider,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  Box,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  //Select,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\n// import {\r\n//   Input,\r\n//   InputGroup,\r\n//   InputLeftAddon,\r\n//   NumberInput,\r\n//   NumberInputField,\r\n//   NumberInputStepper,\r\n//   NumberIncrementStepper,\r\n//   NumberDecrementStepper,\r\n//   Stack,\r\n//} from \"@chakra-ui/react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\nimport { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\nimport { payrunState, payrunIdState } from \"./data/atomdata\";\r\n//import { usePayrun } from \"./payrun/usePayrun\";\r\nimport { useCurrency } from \"./currency/useCurrency\";\r\n//import { useExpenses } from \"./expenses/useExpenses\";\r\nimport UpdateCurrency from \"./CurrencyTable\";\r\n//import { usePayslipsBatch } from \"./payslips/usePayslipsBatch\";\r\n\r\n//const drawerWidth = 240;\r\n// const selectmonths = [\r\n//   { mth: \"January\" },\r\n//   { mth: \"February\" },\r\n//   { mth: \"March\" },\r\n//   { mth: \"April\" },\r\n//   { mth: \"May\" },\r\n//   { mth: \"June\" },\r\n//   { mth: \"July\" },\r\n//   { mth: \"August\" },\r\n//   { mth: \"September\" },\r\n//   { mth: \"October\" },\r\n//   { mth: \"November\" },\r\n//   { mth: \"December\" },\r\n// ];\r\n\r\nconst Payrun = () => {\r\n  let navigate = useNavigate();\r\n  //let date = new Date();\r\n  //let longMonth = date.toLocaleString(\"en-us\", { month: \"long\" });\r\n\r\n  const classes = useStyles();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  //const { payrun } = usePayrun();\r\n  //const { payslipsbatch, psbpayrunId, setPSBPayrunId } = usePayslipsBatch();\r\n  const { currency } = useCurrency();\r\n  //const { expenses, setPayrunId } = useExpensesPayrun();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [loadPaybatch, setLoadPaybatch] = useState(false);\r\n  const { loadEmployees, employees } = useEmployeesContext();\r\n  const { loadUnpaidExpenses, unpaidexpenses, updateExpense } =\r\n    useExpensesContext();\r\n  const { unpaiddailyallows, loadUnpaidDailyAllows, updateDailyAllowance } =\r\n    useDailyAllowancesContext();\r\n  const {\r\n    addPayrun,\r\n    getPayrun,\r\n    payrun,\r\n    payrun_loading,\r\n    addPayslip,\r\n    resetPayslipsData,\r\n    singlebatch_payslip_loading,\r\n    setPayslipPeriod,\r\n  } = usePayslipsContext();\r\n  const [input, setInput] = useRecoilState(payrunState);\r\n  const [payrunid, setPayrunId] = useRecoilState(payrunIdState);\r\n  const [alert, setAlert] = useState(false);\r\n  const [error] = useState(false);\r\n  const [errornoselect, setErrornoselect] = useState(false);\r\n  const [isPayrunExist, setIsPayrunExist] = useState(false);\r\n  const [isSubmit, setIsSubmit] = useState(false);\r\n\r\n  //filter regisned employees\r\n  const allemployees = employees.filter((r) => !r.hasresigned && !r.nonpayroll);\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"NAME\",\r\n        field: \"name\",\r\n        editable: \"never\",\r\n        cellStyle: {\r\n          width: 280,\r\n          maxWidth: 280,\r\n        },\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!payrun_loading) {\r\n      setLoadPaybatch(false);\r\n    }\r\n  }, [loadPaybatch]);\r\n\r\n  function formatDate(string) {\r\n    var options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\r\n    return new Date(string).toLocaleDateString(\"en-GB\", options);\r\n  }\r\n\r\n  function formatPayrun() {\r\n    // const yy =\r\n    //   input.fromdate.substring(0, 4) + \"-\" + input.fromdate.substring(5, 7);\r\n    // const mm = input.fromdate.substring(5, 7);\r\n    // const d = input.fromdate;\r\n  }\r\n\r\n  const payrunExists = (data) => {\r\n    return payrun.some(function (el) {\r\n      return el.payrun === data;\r\n    });\r\n  };\r\n  const handleChange = (e) => {\r\n    setInput({ ...input, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handlePayrunSubmit = (e) => {\r\n    e.preventDefault();\r\n    setPayrunId(\"\");\r\n    var count = allemployees.reduce((acc, r) => {\r\n      if (r.tableData.checked) {\r\n        return acc + 1;\r\n      } else {\r\n        return acc;\r\n      }\r\n    }, 0);\r\n    //console.log(\"count\", count);\r\n    if (count === 0) {\r\n      setErrornoselect(true);\r\n      setTimeout(() => {\r\n        setErrornoselect(false);\r\n      }, 3000);\r\n      return null;\r\n    }\r\n\r\n    const period =\r\n      formatDate(input.fromdate) + \" - \" + formatDate(input.todate);\r\n    const payrundata =\r\n      input.fromdate.substring(0, 4) + \"-\" + input.fromdate.substring(5, 7);\r\n    setInput({\r\n      ...input,\r\n      period: period,\r\n      payrun: payrundata,\r\n      status: \"New\",\r\n    });\r\n    formatPayrun();\r\n    setPayslipPeriod(payrundata);\r\n    const isExist = payrunExists(payrundata);\r\n\r\n    if (isExist) {\r\n      //console.log(\"exist\");\r\n      setIsPayrunExist(true);\r\n      setIsSubmit(false);\r\n      setAlert(true);\r\n    } else {\r\n      //console.log(\"add\");\r\n      checkSelectedEmployees(period, payrundata);\r\n      add_Payrun(period, payrundata);\r\n      setIsPayrunExist(false);\r\n      setAlert(true);\r\n      setIsSubmit(true);\r\n      setLoadPaybatch(true);\r\n    }\r\n  };\r\n\r\n  const checkSelectedEmployees = (period, payrun) => {\r\n    //console.log(\"payrun\", payrun, period);\r\n    var exp = 0,\r\n      allows = 0,\r\n      tmpbasicsalary = 0,\r\n      tmptotalallows = 0,\r\n      tmptotalTAP = 0,\r\n      tmptotalSCP = 0,\r\n      //tmpsiteallows = 0,\r\n      //tmpexpsclaims = 0,\r\n      tmpnettpay = 0,\r\n      tmpcurrrate = 0,\r\n      tmpbasicsalarybnd = 0,\r\n      tmptotalallowsbnd = 0,\r\n      tmptotalTAPbnd = 0,\r\n      tmptotalSCPbnd = 0,\r\n      tmpsiteallowsbnd = 0,\r\n      tmpexpsclaimsbnd = 0,\r\n      tmpnettpaybnd = 0;\r\n\r\n    resetPayslipsData();\r\n    allemployees &&\r\n      allemployees.forEach((emp, index) => {\r\n        exp = 0;\r\n        allows = 0;\r\n        tmpbasicsalary = 0;\r\n        tmptotalallows = 0;\r\n        tmptotalTAP = 0;\r\n        tmptotalSCP = 0;\r\n        tmpnettpay = 0;\r\n        tmpcurrrate = 0;\r\n        tmpbasicsalarybnd = 0;\r\n        tmptotalallowsbnd = 0;\r\n        tmptotalTAPbnd = 0;\r\n        tmpsiteallowsbnd = 0;\r\n        tmpexpsclaimsbnd = 0;\r\n        tmptotalSCPbnd = 0;\r\n        tmpnettpaybnd = 0;\r\n\r\n        if (emp.tableData.checked) {\r\n          exp = 0;\r\n          if (unpaidexpenses) {\r\n            unpaidexpenses\r\n              .filter((r) => r.empid === emp.id)\r\n              .map((i) => {\r\n                updateExpense({ id: i.id, payrun: payrun });\r\n                return (exp = exp + i.amount);\r\n              });\r\n          }\r\n          allows = 0;\r\n          if (unpaiddailyallows) {\r\n            unpaiddailyallows\r\n              .filter((r) => r.empid === emp.id)\r\n              .map((i) => {\r\n                updateDailyAllowance({ id: i.id, payrun: payrun });\r\n                return (allows = allows + i.amount);\r\n              });\r\n          }\r\n\r\n          const {\r\n            id,\r\n            name,\r\n            bank_name,\r\n            bank_acno,\r\n            basic_salary,\r\n            salary_currency,\r\n            tap_acno,\r\n            scp_acno,\r\n            tap_checkbox,\r\n          } = emp;\r\n\r\n          tmpbasicsalary = basic_salary;\r\n\r\n          if (salary_currency && salary_currency !== \"BND\") {\r\n            const table = currency\r\n              .filter((r) => r.currency === salary_currency)\r\n              .map((rec) => {\r\n                return { ...rec };\r\n              });\r\n            tmpcurrrate = table[0].rate;\r\n          } else {\r\n            tmpcurrrate = 1;\r\n          }\r\n\r\n          //console.log(\"USD\", table, basic_salary, tmpbasicsalary);\r\n          //tmptotalallows = allows + exp;\r\n          tmptotalTAP = tap_checkbox ? Math.ceil(tmpbasicsalary * 0.05) : 0;\r\n          tmptotalSCP = tap_checkbox\r\n            ? Math.round((tmpbasicsalary + Number.EPSILON) * 0.035 * 100) / 100\r\n            : 0;\r\n          if (tmptotalSCP > 98) {\r\n            tmptotalSCP = 98;\r\n          }\r\n          tmpnettpay =\r\n            tmpbasicsalary +\r\n            allows +\r\n            exp +\r\n            tmptotalallows -\r\n            tmptotalTAP -\r\n            tmptotalSCP;\r\n\r\n          tmpbasicsalarybnd =\r\n            Math.round((basic_salary + Number.EPSILON) * tmpcurrrate * 100) /\r\n            100;\r\n\r\n          tmptotalTAPbnd =\r\n            Math.round((tmptotalTAP + Number.EPSILON) * tmpcurrrate * 100) /\r\n            100;\r\n          tmptotalSCPbnd =\r\n            Math.round((tmptotalSCP + Number.EPSILON) * tmpcurrrate * 100) /\r\n            100;\r\n          tmpnettpaybnd =\r\n            Math.round((tmpnettpay + Number.EPSILON) * tmpcurrrate * 100) / 100;\r\n          tmpsiteallowsbnd =\r\n            Math.round((allows + Number.EPSILON) * tmpcurrrate * 100) / 100;\r\n          tmpexpsclaimsbnd =\r\n            Math.round((exp + Number.EPSILON) * tmpcurrrate * 100) / 100;\r\n\r\n          tmpnettpaybnd =\r\n            tmpbasicsalarybnd +\r\n            tmpsiteallowsbnd +\r\n            tmpexpsclaimsbnd -\r\n            tmptotalTAPbnd -\r\n            tmptotalSCPbnd;\r\n\r\n          const data = {\r\n            name: name,\r\n            period: period,\r\n            pay_date: input.pay_date,\r\n            payrun: payrun,\r\n            bank_name: bank_name,\r\n            bank_acno: bank_acno,\r\n            salary_currency: salary_currency ? salary_currency : \"BND\",\r\n            currency_rate: tmpcurrrate,\r\n            tap_acno: tap_acno,\r\n            scp_acno: scp_acno,\r\n            tap_checkbox: tap_checkbox,\r\n            empid: id,\r\n            status: \"Pending\",\r\n            allows_type1: \"Site Allowances\",\r\n            allows_type1amt: allows,\r\n            allows_type2: \"Expenses Claims\",\r\n            allows_type2amt: exp,\r\n            allows_type3: \" \",\r\n            allows_type3amt: 0,\r\n            allows_type4: \" \",\r\n            allows_type4amt: 0,\r\n            allows_type5: \" \",\r\n            allows_type5amt: 0,\r\n            allows_type6: \" \",\r\n            allows_type6amt: 0,\r\n            allows_type7: \" \",\r\n            allows_type7amt: 0,\r\n            allows_type8: \" \",\r\n            allows_type8amt: 0,\r\n            deducts_type1: \" \",\r\n            deducts_type1amt: 0,\r\n            deducts_type2: \" \",\r\n            deducts_type2amt: 0,\r\n            deducts_type3: \" \",\r\n            deducts_type3amt: 0,\r\n            deducts_type4: \" \",\r\n            deducts_type4amt: 0,\r\n            deducts_type5: \" \",\r\n            deducts_type5amt: 0,\r\n            deducts_type6: \" \",\r\n            deducts_type6amt: 0,\r\n            deducts_type7: \" \",\r\n            deducts_type7amt: 0,\r\n            deducts_type8: \" \",\r\n            deducts_type8amt: 0,\r\n\r\n            wages: tmpbasicsalary,\r\n            tap_amount: tmptotalTAP,\r\n            scp_amount: tmptotalSCP,\r\n            total_allowances: tmptotalallows,\r\n            total_deductions: 0,\r\n            site_allows: allows,\r\n            expenses_claims: exp,\r\n            nett_pay: tmpnettpay,\r\n\r\n            wages_bnd: tmpbasicsalarybnd,\r\n            site_allows_bnd: tmpsiteallowsbnd,\r\n            expenses_claims_bnd: tmpexpsclaimsbnd,\r\n            total_allowances_bnd: tmptotalallowsbnd,\r\n            total_deductions_bnd: 0,\r\n            tap_amount_bnd: tmptotalTAPbnd,\r\n            scp_amount_bnd: tmptotalSCPbnd,\r\n            nett_pay_bnd: tmpnettpaybnd,\r\n          };\r\n          addPayslip({ ...data });\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleNext = () => {\r\n    navigate(\"/payrunbatch\");\r\n  };\r\n\r\n  const add_Payrun = (period, payrun) => {\r\n    //update payrun\r\n    addPayrun({\r\n      pay_freq: input.payfreq,\r\n      from_date: input.fromdate,\r\n      to_date: input.todate,\r\n      pay_date: input.paydate,\r\n      period: period,\r\n      payrun: payrun,\r\n      status: \"Pending\",\r\n    });\r\n    getPayrun();\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadEmployees();\r\n    loadUnpaidExpenses();\r\n    loadUnpaidDailyAllows();\r\n    getPayrun();\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   loadUnpaidDailyAllows();\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   console.log(\"useEffect here\", input.payrun);\r\n\r\n  //   // getSingleBatchPayslip(input.payrun);\r\n  //   if (singlebatchpayslip) {\r\n  //     checkSelectedEmployees(input.period, input.payrun);\r\n  //     setLoadPaybatch(false);\r\n  //   }\r\n  // }, [loadPaybatch]);\r\n\r\n  //   useEffect(() => {\r\n  //     if (input.period && input.payrun) {\r\n  //       //add_Payrun();\r\n\r\n  //       setAlert(true);\r\n  //     }\r\n  //   }, [input]);\r\n\r\n  return (\r\n    <Paper className={fixedHeightPaper} style={{ backgroundColor: \"659dbd\" }}>\r\n      <section className={classes.section}>\r\n        <Grid\r\n          direction=\"row\"\r\n          container\r\n          spacing={1}\r\n          // style={{ border: \"1px solid white\" }}\r\n        >\r\n          <Grid\r\n            container\r\n            item\r\n            sm={3}\r\n            style={{ border: \"1px solid black\" }}\r\n            direction=\"column\"\r\n            align=\"left\"\r\n          >\r\n            <article className={classes.jobinfo}>\r\n              <h2>Pay Run</h2>\r\n              <form onSubmit={handlePayrunSubmit}>\r\n                <div>\r\n                  {/* <InputLabel\r\n                    htmlFor=\"deduct-customized-native-simple\"\r\n                    className={classes.formLabel}\r\n                  >\r\n                    Copy From\r\n                  </InputLabel>\r\n                  <NativeSelect\r\n                    name=\"copyfrom\"\r\n                    value={\"New\"}\r\n                    style={{\r\n                      padding: 4,\r\n                      marginLeft: 5,\r\n                      width: \"100%\",\r\n                      textAlign: \"left\",\r\n                    }}\r\n                    onChange={(e) => handleChange(e)}\r\n                  >\r\n                    <option value=\"\">New</option>\r\n                    {payrun.map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.payrun}>\r\n                          {row.payrun}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </NativeSelect> */}\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Pay Frequency\"\r\n                    variant=\"filled\"\r\n                    required\r\n                    defaultValue=\"Monthly\"\r\n                    style={{ width: \"100%\" }}\r\n                    name=\"payfreq\"\r\n                    value={input.payfreq}\r\n                    onChange={(e) => handleChange(e)}\r\n                    select\r\n                  >\r\n                    {/* <MenuItem value=\"Weekly\">Weekly</MenuItem> */}\r\n                    <option value=\"Monthly\">Monthly</option>\r\n                  </TextField>\r\n                </div>\r\n                {/* <div>\r\n                  <InputLabel\r\n                    htmlFor=\"deduct-customized-native-simple\"\r\n                    className={classes.formLabel}\r\n                  >\r\n                    Month\r\n                  </InputLabel>\r\n                  <NativeSelect\r\n                    name=\"selectmonth\"\r\n                    defaultValue={longMonth}\r\n                    // value={input.selectmonth}\r\n                    style={{\r\n                      padding: 4,\r\n                      marginLeft: 5,\r\n                      width: \"100%\",\r\n                      textAlign: \"left\",\r\n                    }}\r\n                    onChange={(e) => handleChange(e)}\r\n                  >\r\n                    {selectmonths.map((row, i) => {\r\n                      return (\r\n                        <option key={i} value={row.mth}>\r\n                          {row.mth}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </NativeSelect>\r\n                </div> */}\r\n                <div>\r\n                  <TextField\r\n                    label=\"From Date\"\r\n                    variant=\"filled\"\r\n                    name=\"fromdate\"\r\n                    type=\"date\"\r\n                    value={input.fromdate}\r\n                    required\r\n                    style={{ width: \"100%\" }}\r\n                    onChange={(e) => handleChange(e)}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"To Date\"\r\n                    variant=\"filled\"\r\n                    type=\"date\"\r\n                    name=\"todate\"\r\n                    value={input.todate}\r\n                    required\r\n                    onChange={(e) => handleChange(e)}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Payment Date\"\r\n                    variant=\"filled\"\r\n                    type=\"date\"\r\n                    name=\"paydate\"\r\n                    value={input.paydate}\r\n                    required\r\n                    style={{ width: \"100%\" }}\r\n                    onChange={(e) => handleChange(e)}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <div>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.button}\r\n                      onClick={onOpen}\r\n                      disabled={isSubmit}\r\n                    >\r\n                      Currency Exchange Table\r\n                    </Button>\r\n                  </div>\r\n                  <div>\r\n                    <Button\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.button}\r\n                    >\r\n                      Submit <Icon className={classes.rightIcon}>send</Icon>\r\n                    </Button>\r\n\r\n                    {alert && !isPayrunExist && (\r\n                      <Button\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.button}\r\n                        onClick={handleNext}\r\n                      >\r\n                        Next <Icon className={classes.rightIcon}>send</Icon>\r\n                      </Button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  {alert && !isPayrunExist && !singlebatch_payslip_loading && (\r\n                    <h3>New Payrun being added!</h3>\r\n                  )}\r\n                  {alert && isPayrunExist && (\r\n                    <h3>This payrun already existed!</h3>\r\n                  )}\r\n                </div>\r\n                <div>\r\n                  {error && <h3>This Payrun period already existed!</h3>}\r\n                  {errornoselect && <h3>You must select employees!</h3>}\r\n                </div>\r\n              </form>\r\n            </article>\r\n          </Grid>\r\n          <Divider\r\n            orientation=\"vertical\"\r\n            flexItem\r\n            style={{ background: \"white\" }}\r\n          />\r\n          <Grid\r\n            container\r\n            item\r\n            sm={3}\r\n            style={{ border: \"1px solid black\" }}\r\n            align=\"right\"\r\n          >\r\n            <Box h=\"500\" w=\"full\" overflow=\"scroll\">\r\n              <MaterialTable\r\n                columns={columns}\r\n                //data={employees.filter((r) => !r.hasresigned && !r.nonpayroll)}\r\n                data={allemployees}\r\n                title=\"Employee Listing\"\r\n                options={{\r\n                  filtering: false,\r\n                  search: false,\r\n                  toolbar: true,\r\n                  selection: true,\r\n                  paging: false,\r\n                  pageSize: 10,\r\n                  headerStyle: {\r\n                    backgroundColor: \"#90CDF4\",\r\n                    color: \"primary\",\r\n                  },\r\n                  showTitle: true,\r\n                  // selectionProps: rowData => {\r\n                  //   rowData.tableData.checked = true\r\n                  // }\r\n                }}\r\n              />\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n        <Modal isOpen={isOpen} onClose={onClose}>\r\n          <ModalOverlay />\r\n          <ModalContent>\r\n            <ModalHeader>Currency Table</ModalHeader>\r\n            <ModalCloseButton />\r\n            <ModalBody>\r\n              <Box>\r\n                <UpdateCurrency />\r\n                {/* <Stack spacing={4}>\r\n                  <InputGroup>\r\n                    <InputLeftAddon children=\"USD\" />\r\n                    <Input type=\"text\" placeholder=\"USD Rate\" />\r\n                  </InputGroup>\r\n                  <InputGroup>\r\n                    <InputLeftAddon children=\"MYR\" />\r\n                    <Input type=\"text\" placeholder=\"MYR Rate\" />\r\n                  </InputGroup>\r\n                </Stack> */}\r\n              </Box>\r\n            </ModalBody>\r\n\r\n            <ModalFooter>\r\n              <Button colorScheme=\"blue\" mr={3} onClick={onClose}>\r\n                Close\r\n              </Button>\r\n            </ModalFooter>\r\n          </ModalContent>\r\n        </Modal>\r\n      </section>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  container: {\r\n    margin: 0,\r\n    padding: 0,\r\n    width: \"80vw\",\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"repeat(auto-fill,250px)\",\r\n    gridAutoRows: \"10px\",\r\n    position: \"absolute\",\r\n    left: \"50%\",\r\n    transform: \"translateX(-50%)\",\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"primary\",\r\n  },\r\n  fixedHeight: {\r\n    height: 800,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(10),\r\n    // display: \"flex\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n    border: \"1px solid\",\r\n    width: \"100%\",\r\n    color: \"primary\",\r\n    bcakgroundColor: \"black\",\r\n  },\r\n  card: {\r\n    backgroundColor: \"black\",\r\n  },\r\n  section: {\r\n    width: \"95vw\",\r\n    margin: \"5rem auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n  },\r\n  underline: {\r\n    width: \"5rem\",\r\n    height: \"0.25rem\",\r\n    marginBottom: \"1.25rem\",\r\n    background: \"var(--clr-primary-5)\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n  },\r\n  title: {\r\n    marginbottom: \"4rem\",\r\n    textAlign: \"center\",\r\n  },\r\n  jobscenter: {\r\n    width: \"80vw\",\r\n    margin: \"0 auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n    flexDirection: \"row\",\r\n  },\r\n  btncontainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    marginBottom: \"4rem\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  jobbtn: {\r\n    background: \"transparent\",\r\n    borderColor: \"transparent\",\r\n    textTransform: \"capitalize\",\r\n    fontSize: \"1.25rem\",\r\n    letterSpacing: \"var(--spacing)\",\r\n    margin: \"0 0.5rem\",\r\n    transition: \"var(--transition)\",\r\n    cursor: \"pointer\",\r\n    padding: \"0.25rem 0\",\r\n    lineHeight: \"1\",\r\n    outlineColor: \"var(--clr-primary-10)\",\r\n    \"&:hover\": {\r\n      color: \"var(--clr-primary-5)\",\r\n      boxShadow: \"0 2px var(--clr-primary-5)\",\r\n    },\r\n  },\r\n  activebtn: {\r\n    color: \"var(--clr-primary-5)\",\r\n    boxShadow: \"0 2px var(--clr-primary-5)\",\r\n  },\r\n  jobinfo: {\r\n    fontWeight: \"400\",\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  formLabel: {\r\n    fontSize: 12,\r\n    textAlign: \"left\",\r\n    marginLeft: 8,\r\n    marginTop: 5,\r\n  },\r\n}));\r\n\r\nexport default Payrun;\r\n"],"sourceRoot":""}