{"version":3,"sources":["components/Payslip_ViewEarnings.js","components/Payslip_ViewDeductions.js","components/Payslip_Earnings.js","components/Payslip_Deductions.js","components/PayslipForm.js","components/SinglePayslip.js"],"names":["Payslip_ViewEarnings","setCalc","classes","useStyles","payPeriodEmpId","useRecoilValue","payPeriodEmpIdState","payPeriod","payPeriodState","usePayslipsContext","payslipearnings","payslipearnings_loading","getSingleBatchPayslipEarnings","columns","useMemo","title","field","type","useEffect","className","root","style","maxWidth","paddingTop","data","options","search","toolbar","makeStyles","theme","padding","Payslip_ViewDeductions","payslipdeductions","payslipdeductions_loading","getSingleBatchPayslipDeductions","Payslip_Earnings","earningsdata","oldEarningsdata","setEarningsdata","handleDialogClose","addPayslipEarning","updatePayslipEarning","deletePayslipEarning","single_payslip","payslip_period","allowances","useTablesContext","editComponent","props","TextField","onChange","e","target","value","width","select","map","r","MenuItem","name","empid","Save_EarningsData","console","log","forEach","row","id","rec_id","res","find","description","amount","fields","tableData","period","editable","onRowAdd","newData","Promise","resolve","reject","setTimeout","onRowUpdate","oldData","dataUpdate","onRowDelete","dataDelete","index","splice","filtering","headerStyle","backgroundColor","color","showTitle","components","Toolbar","Button","variant","button","onClick","Icon","rightIcon","Payslip_Deductions","deductionsdata","oldDeductionsdata","setDeductionsdata","addPayslipDeduction","updatePayslipDeduction","deletePayslipDeduction","deductions","Save_DeductionsData","margin","spacing","leftIcon","marginRight","marginLeft","iconSmall","fontSize","container","display","flexWrap","divider","textField","grid","box","height","border","PayslipForm","navigate","useNavigate","updatePayslip","editPayslipID","getSinglePayslip","single_payslip_loading","single_payslip_error","setPayslipEarningAmount","setPayslipDeductionAmount","useState","setOldEarningsdata","setOldDeductionsdata","isEarningsDialogOpen","setIsEarningsDialogOpen","isDeductionsDialogOpen","setIsDeductionsDialogOpen","useForm","handleSubmit","control","date","bank_name","bank_acno","total_earnings","total_deductions","tap_amount","scp_amount","basic_pay","nett_pay","tap_checkbox","handleChange","event","handleEarningsDialogClose","handleDeductionsDialogClose","Paper","Grid","xs","md","lg","CardLayout2","onSubmit","Typography","component","Divider","item","defaultValue","render","fieldState","error","label","InputProps","readOnly","rules","required","InputLabelProps","shrink","parseInt","totalTAP","totalSCP","Math","ceil","round","Number","EPSILON","totalEarnings","reduce","a","v","totalDeductions","nettPay","alignItems","CardLayout","handleClick","CustomDialog","isOpen","handleClose","showButton","isFullscreen","isFullwidth","paddingRight","toolbarIcon","justifyContent","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","enteringScreen","menuButton","menuButtonHidden","flexGrow","drawerPaper","position","whiteSpace","drawerPaperClose","overflowX","breakpoints","up","appBarSpacer","content","overflow","paddingBottom","paper","flexDirection","fixedHeight","SinglePayslip","fixedHeightPaper","clsx","CssBaseline","Container","to"],"mappings":"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","file":"static/js/32.33d90f07.chunk.js","sourcesContent":["import React, { useEffect, useMemo } from \"react\";\r\n\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport {\r\n  payPeriodState,\r\n  //payPeriodEndMonthState,\r\n  payPeriodEmpIdState,\r\n} from \"./data/atomdata\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\n\r\nexport default function Payslip_ViewEarnings({ setCalc }) {\r\n  //let history = useHistory();\r\n  //const [load, setLoad] = useState(true);\r\n  const classes = useStyles();\r\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\r\n  const payPeriod = useRecoilValue(payPeriodState);\r\n  const {\r\n    payslipearnings,\r\n    //payslip_earning_amount,\r\n    //setPayslipEarningAmount,\r\n    //addPayslipEarning,\r\n    payslipearnings_loading,\r\n    //updatePayslipEarning,\r\n    //deletePayslipEarning,\r\n    //updatePayslip,\r\n    //editPayslipID,\r\n    //single_payslip,\r\n    //payslip_period,\r\n    getSingleBatchPayslipEarnings,\r\n  } = usePayslipsContext();\r\n\r\n  //const { description, amount } = payslipearnings;\r\n  //const { allowances } = useTablesContext();\r\n  //console.log(\"recoil\", payPeriod, payPeriodEmpId);\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"description\",\r\n      },\r\n      { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    getSingleBatchPayslipEarnings(payPeriodEmpId, payPeriod);\r\n  }, []);\r\n\r\n  // const calc_Earning = (data) => {\r\n  //   const sum = data.reduce((a, v) => (a = a + v.amount), 0);\r\n  //   console.log(\"Earning\", data);\r\n  //   setPayslipEarningAmount(sum);\r\n  // };\r\n\r\n  // const update_Payslip = () => {\r\n  //   const { rec_id, id, total_earnings, ...paydata } = single_payslip;\r\n  //   updatePayslip({\r\n  //     id: editPayslipID,\r\n  //     total_earnings: payslip_earning_amount,\r\n  //     ...paydata,\r\n  //   });\r\n  //   setCalc(true);\r\n  //};\r\n\r\n  if (payslipearnings_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading... Incomes.</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={payslipearnings}\r\n          title=\"Income\"\r\n          options={{\r\n            search: false,\r\n            toolbar: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","import React, { useEffect, useMemo } from \"react\";\r\n\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport {\r\n  payPeriodState,\r\n  //payPeriodEndMonthState,\r\n  payPeriodEmpIdState,\r\n} from \"./data/atomdata\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\n//import { useTablesContext } from \"../context/tables_context\";\r\n\r\nexport default function Payslip_ViewDeductions() {\r\n  const classes = useStyles();\r\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\r\n  const payPeriod = useRecoilValue(payPeriodState);\r\n\r\n  const {\r\n    payslipdeductions,\r\n    //payslip_deduction_amount,\r\n    //setPayslipDeductionAmount,\r\n    //loadPayslipDeductions,\r\n    //addPayslipDeduction,\r\n    payslipdeductions_loading,\r\n    //updatePayslipDeduction,\r\n    //deletePayslipDeduction,\r\n    //updatePayslip,\r\n    //editPayslipID,\r\n    //single_payslip,\r\n    //payslip_period,\r\n    getSingleBatchPayslipDeductions,\r\n  } = usePayslipsContext();\r\n  //const { name, amount } = payslipdeductions;\r\n  //const { deductions } = useTablesContext();\r\n\r\n  // const calc_Deduction = (data) => {\r\n  //   const sum = data.reduce((a, v) => (a = a + v.amount), 0);\r\n  //   setPayslipDeductionAmount(sum);\r\n  // };\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"description\",\r\n      },\r\n      { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    getSingleBatchPayslipDeductions(payPeriodEmpId, payPeriod);\r\n  }, []);\r\n\r\n  // const update_Payslip = () => {\r\n  //   const { rec_id, id, total_deductions, ...paydata } = single_payslip;\r\n  //   updatePayslip({\r\n  //     id: editPayslipID,\r\n  //     total_deductions: payslip_deduction_amount,\r\n  //     ...paydata,\r\n  //   });\r\n  // };\r\n\r\n  // const update_PayslipDeduction = async (data) => {\r\n  //   const { id, rec_id, empid, ...fields } = data;\r\n  //   updatePayslipDeduction({ id: data.id, empid: empid, ...fields });\r\n  //   update_Payslip();\r\n  //   getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  // const add_PayslipDeduction = (data) => {\r\n  //   const { description, amount } = data;\r\n  //   addPayslipDeduction({\r\n  //     description: description,\r\n  //     amount: amount,\r\n  //     name: single_payslip.name,\r\n  //     empid: single_payslip.empid,\r\n  //     period: single_payslip.period,\r\n  //   });\r\n  //   getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  // const delete_PayslipDeduction = (data) => {\r\n  //   const { id } = data;\r\n  //   deletePayslipDeduction(id);\r\n  //   getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  if (payslipdeductions_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading... Expenses.</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={payslipdeductions}\r\n          title=\"Expense\"\r\n          options={{\r\n            search: false,\r\n            toolbar: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","import React, {  useEffect, useMemo } from \"react\";\r\n\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, Icon, TextField, MenuItem } from \"@material-ui/core\";\r\n\r\n//import { useHistory} from \"react-router-dom\";\r\nimport {  useRecoilValue } from \"recoil\";\r\nimport {\r\n  payPeriodState,\r\n  //payPeriodEndMonthState,\r\n  payPeriodEmpIdState,\r\n  //payEarningDataState,\r\n} from \"./data/atomdata\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\n\r\nexport default function Payslip_Earnings({\r\n  //setCalc,\r\n  earningsdata,\r\n  oldEarningsdata,\r\n  setEarningsdata,\r\n  handleDialogClose,\r\n}) {\r\n  //let history = useHistory();\r\n   const classes = useStyles();\r\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\r\n  const payPeriod = useRecoilValue(payPeriodState);\r\n  //const payEarningData = useRecoilValue(payEarningDataState);\r\n  const {\r\n    //payslipearnings,\r\n    //payslip_earning_amount,\r\n    //setPayslipEarningAmount,\r\n    addPayslipEarning,\r\n    payslipearnings_loading,\r\n    updatePayslipEarning,\r\n    deletePayslipEarning,\r\n    //updatePayslip,\r\n    //editPayslipID,\r\n    single_payslip,\r\n    payslip_period,\r\n    getSingleBatchPayslipEarnings,\r\n  } = usePayslipsContext();\r\n\r\n  //const { name, amount } = payslipearnings;\r\n  const { allowances } = useTablesContext();\r\n\r\n  const columns = useMemo(()=>[\r\n    {\r\n      title: \"Description\",\r\n      field: \"description\",\r\n      editComponent: (props) => (\r\n        <TextField\r\n          //defaultValue={props.value || null}\r\n          onChange={(e) => props.onChange(e.target.value)}\r\n          style={{ width: 200 }}\r\n          value={props.value}\r\n          select\r\n        >\r\n          {allowances.map((r) => {\r\n            return <MenuItem value={r.name}>{r.name}</MenuItem>;\r\n          })}\r\n        </TextField>\r\n      ),\r\n    },\r\n    { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n  ],[]);\r\n\r\n  useEffect(() => {\r\n    getSingleBatchPayslipEarnings(single_payslip.empid, payslip_period);\r\n  }, []);\r\n\r\n  // const calc_Earning = (data) => {\r\n  //   const sum = data.reduce((a, v) => (a = a + v.amount), 0);\r\n  //   console.log(\"Earning\", data);\r\n  //   setPayslipEarningAmount(sum);\r\n  // };\r\n\r\n  // const update_Payslip = () => {\r\n  //   const { rec_id, id, total_earnings, ...paydata } = single_payslip;\r\n  //   updatePayslip({\r\n  //     id: editPayslipID,\r\n  //     total_earnings: payslip_earning_amount,\r\n  //     ...paydata,\r\n  //   });\r\n  //   setCalc(true);\r\n  // };\r\n\r\n  // const update_PayslipEarning = async (data) => {\r\n  //   const { id, rec_id, empid, ...fields } = data;\r\n  //   console.log(\"update\", data);\r\n  //   updatePayslipEarning({ id: data.id, empid: empid, ...fields });\r\n\r\n  //   update_Payslip();\r\n  //   getSingleBatchPayslipEarnings(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  // const add_PayslipEarning = (data) => {\r\n  //   console.log(\"add\", data);\r\n  //   const { description, amount } = data;\r\n  //   addPayslipEarning({\r\n  //     description: description,\r\n  //     amount: amount,\r\n  //     name: single_payslip.name,\r\n  //     empid: single_payslip.empid,\r\n  //     period: single_payslip.period,\r\n  //   });\r\n\r\n  //   getSingleBatchPayslipEarnings(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  // const delete_PayslipEarning = (data) => {\r\n  //   const { id } = data;\r\n  //   deletePayslipEarning(id);\r\n  //   getSingleBatchPayslipEarnings(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  const Save_EarningsData = () => {\r\n    // delete unwanted data\r\n    console.log(\"update\", earningsdata, oldEarningsdata);\r\n    oldEarningsdata.forEach((row) => {\r\n      const { id, rec_id } = row;\r\n      const res = earningsdata.find((r) => r.rec_id === rec_id);\r\n      console.log(\"find\", id, res);\r\n      if (!res) {\r\n        deletePayslipEarning(id);\r\n      }\r\n    });\r\n    //add or update new data\r\n\r\n    earningsdata.forEach((data) => {\r\n      const { id, description, amount } = data;\r\n      if (id) {\r\n        const { id, rec_id, tableData, ...fields } = data;\r\n        updatePayslipEarning({ id, ...fields });\r\n      } else {\r\n        addPayslipEarning({\r\n          description: description,\r\n          amount: amount,\r\n          name: single_payslip.name,\r\n          empid: payPeriodEmpId,\r\n          period: payPeriod,\r\n        });\r\n      }\r\n    });\r\n\r\n    handleDialogClose();\r\n  };\r\n\r\n  if (payslipearnings_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading... Incomes.</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={earningsdata}\r\n          title=\"Income\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  setEarningsdata([...earningsdata, newData]);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataUpdate = [...earningsdata];\r\n                  const index = oldData.tableData.id;\r\n                  dataUpdate[index] = newData;\r\n                  setEarningsdata([...dataUpdate]);\r\n\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataDelete = [...earningsdata];\r\n                  const index = oldData.tableData.id;\r\n                  dataDelete.splice(index, 1);\r\n                  setEarningsdata([...dataDelete]);\r\n\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Save_EarningsData}\r\n                  >\r\n                    Update <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","import React, { useEffect, useMemo } from \"react\";\r\n\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, Icon, TextField, MenuItem } from \"@material-ui/core\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport {\r\n  payPeriodState,\r\n  //payPeriodEndMonthState,\r\n  payPeriodEmpIdState,\r\n  //payEarningDataState,\r\n} from \"./data/atomdata\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\n\r\nexport default function Payslip_Deductions({\r\n  //setCalc,\r\n  deductionsdata,\r\n  oldDeductionsdata,\r\n  setDeductionsdata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\r\n  const payPeriod = useRecoilValue(payPeriodState);\r\n  //const payEarningData = useRecoilValue(payEarningDataState);\r\n  const {\r\n    //payslipdeductions,\r\n    //payslip_deduction_amount,\r\n    //setPayslipDeductionAmount,\r\n    //loadPayslipDeductions,\r\n    addPayslipDeduction,\r\n    payslipdeductions_loading,\r\n    updatePayslipDeduction,\r\n    deletePayslipDeduction,\r\n    //updatePayslip,\r\n    //editPayslipID,\r\n    single_payslip,\r\n    payslip_period,\r\n    getSingleBatchPayslipDeductions,\r\n  } = usePayslipsContext();\r\n  //const { name, amount } = payslipdeductions;\r\n  const { deductions } = useTablesContext();\r\n\r\n  // const calc_Deduction = (data) => {\r\n  //   const sum = data.reduce((a, v) => (a = a + v.amount), 0);\r\n  //   setPayslipDeductionAmount(sum);\r\n  // };\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Description\",\r\n        field: \"description\",\r\n        editComponent: (props) => (\r\n          <TextField\r\n            //defaultValue={props.value || null}\r\n            onChange={(e) => props.onChange(e.target.value)}\r\n            style={{ width: 200 }}\r\n            value={props.value}\r\n            select\r\n          >\r\n            {deductions.map((r) => {\r\n              return <MenuItem value={r.name}>{r.name}</MenuItem>;\r\n            })}\r\n          </TextField>\r\n        ),\r\n      },\r\n      { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  }, []);\r\n\r\n  // const update_Payslip = () => {\r\n  //   const { rec_id, id, total_deductions, ...paydata } = single_payslip;\r\n  //   updatePayslip({\r\n  //     id: editPayslipID,\r\n  //     total_deductions: payslip_deduction_amount,\r\n  //     ...paydata,\r\n  //   });\r\n  //};\r\n\r\n  // const update_PayslipDeduction = async (data) => {\r\n  //   const { id, rec_id, empid, ...fields } = data;\r\n  //   updatePayslipDeduction({ id: data.id, empid: empid, ...fields });\r\n  //   update_Payslip();\r\n  //   getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  // const add_PayslipDeduction = (data) => {\r\n  //   const { description, amount } = data;\r\n  //   addPayslipDeduction({\r\n  //     description: description,\r\n  //     amount: amount,\r\n  //     name: single_payslip.name,\r\n  //     empid: single_payslip.empid,\r\n  //     period: single_payslip.period,\r\n  //   });\r\n  //   getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  //};\r\n\r\n  // const delete_PayslipDeduction = (data) => {\r\n  //   const { id } = data;\r\n  //   deletePayslipDeduction(id);\r\n  //   getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  // };\r\n\r\n  const Save_DeductionsData = () => {\r\n    // delete unwanted data\r\n    console.log(\"update\", deductionsdata, oldDeductionsdata);\r\n    oldDeductionsdata.forEach((row) => {\r\n      const { id, rec_id } = row;\r\n      const res = deductionsdata.find((r) => r.rec_id === rec_id);\r\n      console.log(\"find\", id, res);\r\n      if (!res) {\r\n        deletePayslipDeduction(id);\r\n      }\r\n    });\r\n    //add or update new data\r\n\r\n    deductionsdata.forEach((data) => {\r\n      const { id, description, amount } = data;\r\n      if (id) {\r\n        const { id, rec_id, tableData, ...fields } = data;\r\n        updatePayslipDeduction({ id, ...fields });\r\n      } else {\r\n        addPayslipDeduction({\r\n          description: description,\r\n          amount: amount,\r\n          name: single_payslip.name,\r\n          empid: payPeriodEmpId,\r\n          period: payPeriod,\r\n        });\r\n      }\r\n    });\r\n    handleDialogClose();\r\n  };\r\n\r\n  if (payslipdeductions_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading... Expenses.</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={deductionsdata}\r\n          title=\"Deductions\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  setDeductionsdata([...deductionsdata, newData]);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataUpdate = [...deductionsdata];\r\n                  const index = oldData.tableData.id;\r\n                  dataUpdate[index] = newData;\r\n                  setDeductionsdata([...dataUpdate]);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataDelete = [...deductionsdata];\r\n                  const index = oldData.tableData.id;\r\n                  dataDelete.splice(index, 1);\r\n                  setDeductionsdata([...dataDelete]);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Save_DeductionsData}\r\n                  >\r\n                    Update <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","import React, { useState,  useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  TextField,\r\n    Paper,\r\n  Typography,\r\n    Divider,\r\n  Grid,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CardLayout from \"../helpers/CardLayout\";\r\nimport CardLayout2 from \"../helpers/CardLayout2\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport {\r\n  payPeriodState,\r\n  //payPeriodEndMonthState,\r\n  payPeriodEmpIdState,\r\n  //payEarningDataState,\r\n  //payDeductionDataState,\r\n} from \"./data/atomdata\";\r\n\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport Payslip_ViewEarnings from \"./Payslip_ViewEarnings\";\r\nimport Payslip_ViewDeductions from \"./Payslip_ViewDeductions\";\r\nimport Payslip_Earnings from \"./Payslip_Earnings\";\r\nimport Payslip_Deductions from \"./Payslip_Deductions\";\r\n\r\n// const initial_values = {\r\n//   name: \"\",\r\n//   period: \"\",\r\n//   date: \"\",\r\n//   bank_name: \"\",\r\n//   bank_acno: \"\",\r\n//   status: \"Pending\",\r\n//   total_earnings: 0,\r\n//   total_deductions: 0,\r\n//   tap_amount: 0,\r\n//   scp_amount: 0,\r\n//   basic_pay: 0,\r\n//   nett_pay: 0,\r\n//   tap_checkbox: true,\r\n// };\r\n\r\nconst PayslipForm = () => {\r\n  let navigate = useNavigate();\r\n   const classes = useStyles();\r\n  const {\r\n    //isPayslipEditing,\r\n    single_payslip,\r\n    updatePayslip,\r\n    //addPayslip,\r\n    editPayslipID,\r\n    //loadPayslips,\r\n    getSinglePayslip,\r\n    single_payslip_loading,\r\n    single_payslip_error,\r\n    //payslip_period,\r\n    //payslip_earning_amount,\r\n    //payslip_deduction_amount,\r\n    setPayslipEarningAmount,\r\n    setPayslipDeductionAmount,\r\n    payslipearnings,\r\n    payslipdeductions,\r\n    getSingleBatchPayslipEarnings,\r\n    getSingleBatchPayslipDeductions,\r\n  } = usePayslipsContext();\r\n  \r\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\r\n  const payPeriod = useRecoilValue(payPeriodState);\r\n    const [earningsdata, setEarningsdata] = useState([]);\r\n  const [oldEarningsdata, setOldEarningsdata] = useState([]);\r\n  const [deductionsdata, setDeductionsdata] = useState([]);\r\n  const [oldDeductionsdata, setOldDeductionsdata] = useState([]);\r\n  const [isEarningsDialogOpen, setIsEarningsDialogOpen] = useState(false);\r\n  const [isDeductionsDialogOpen, setIsDeductionsDialogOpen] = useState(false);\r\n  //const [state, setState] = useState(single_payslip);\r\n  const { handleSubmit, control } = useForm();\r\n\r\n  const {\r\n    name,\r\n    period,\r\n    date,\r\n    bank_name,\r\n    bank_acno,\r\n    //status,\r\n    total_earnings,\r\n    total_deductions,\r\n    tap_amount,\r\n    scp_amount,\r\n    basic_pay,\r\n    nett_pay,\r\n    tap_checkbox,\r\n  } = single_payslip;\r\n\r\n  useEffect(\r\n    getSinglePayslip(editPayslipID)\r\n  , []);\r\n\r\n  // useEffect(() => {\r\n  //   if (calc) {\r\n  //     setTimeout(() => {\r\n  //       console.log(\"calc\");\r\n  //       calc_totals();\r\n  //       setCalc(false);\r\n  //     }, 10000);\r\n  //   }\r\n  // }, [calc]);\r\n\r\n  const handleChange = (event) => {\r\n    //const { rec_id, ...fields } = single_payslip;\r\n    // const value =\r\n    //   event.target.type === \"number\"\r\n    //     ? parseInt(event.target.value, 10)\r\n    //     : event.target.value;\r\n    // setState({ ...state, [event.target.name]: value });\r\n  };\r\n\r\n  const calc_totals = () => {\r\n    let totalTAP = 0;\r\n    let totalSCP = 0;\r\n    if (tap_checkbox) {\r\n      totalTAP = Math.ceil(basic_pay * 0.05);\r\n      totalSCP = Math.round((basic_pay + Number.EPSILON) * 0.035 * 100) / 100;\r\n    }\r\n    console.log(\"calc\", totalTAP, totalSCP)\r\n    const totalEarnings = payslipearnings.reduce(\r\n      (a, v) => (a = a + v.amount),\r\n      0\r\n    );\r\n    const totalDeductions = payslipdeductions.reduce(\r\n      (a, v) => (a = a + v.amount),\r\n      0\r\n    );\r\n    const nettPay =\r\n      basic_pay + totalEarnings - totalDeductions - totalTAP - totalSCP;\r\n    setPayslipEarningAmount(totalEarnings);\r\n    setPayslipDeductionAmount(totalDeductions);\r\n    updatePayslip({\r\n      id: editPayslipID,\r\n      total_earnings: totalEarnings,\r\n      total_deductions: totalDeductions,\r\n      tap_amount: totalTAP,\r\n      scp_amount: totalSCP,\r\n      nett_pay: nettPay,\r\n    });\r\n    console.log(\r\n      \"total\",\r\n      totalEarnings,\r\n      totalDeductions,\r\n      totalTAP,\r\n      totalSCP,\r\n      nettPay\r\n    );\r\n    getSinglePayslip(editPayslipID);\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    const { rec_id, ...fields } = single_payslip;\r\n    updatePayslip(...fields);\r\n\r\n    // if (isPayslipEditing) {\r\n    //   updatePayslip({ id: editPayslipID, ...data });\r\n    // } else {\r\n    //   addPayslip({ ...data });\r\n    // }\r\n    // loadPayslips();\r\n    // history.push(\"/batchpayslips\");\r\n  };\r\n  const handleEarningsDialogOpen = () => {\r\n    // setPayEarningData([...payslipearnings]);\r\n    setOldEarningsdata([...payslipearnings]);\r\n    setEarningsdata([...payslipearnings]);\r\n    setIsEarningsDialogOpen(true);\r\n  };\r\n\r\n  const handleEarningsDialogClose = () => {\r\n    setIsEarningsDialogOpen(false);\r\n    getSingleBatchPayslipEarnings(payPeriodEmpId, payPeriod);\r\n  };\r\n  const handleDeductionsDialogOpen = () => {\r\n    setOldDeductionsdata([...payslipdeductions]);\r\n    setDeductionsdata([...payslipdeductions]);\r\n    setIsDeductionsDialogOpen(true);\r\n  };\r\n\r\n  const handleDeductionsDialogClose = () => {\r\n    setIsDeductionsDialogOpen(false);\r\n    getSingleBatchPayslipDeductions(payPeriodEmpId, payPeriod);\r\n  };\r\n\r\n  if (single_payslip_loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (single_payslip_error) {\r\n    navigate(\"/error\");\r\n  }\r\n  return (\r\n    <div>\r\n      <Paper className={classes.root}>\r\n        <Grid xs={12} md={8} lg={12}>\r\n          <CardLayout2 title=\"Employee Profile\">\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n              <Grid>\r\n                <div>\r\n                  <Typography variant=\"h5\" component=\"h3\">\r\n                    PAYSLIP FORM\r\n                  </Typography>\r\n                  <Typography component=\"p\">Payslip Preparation</Typography>\r\n\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                  >\r\n                    Submit <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                </div>\r\n              </Grid>\r\n              <Divider className={classes.divider} />\r\n              <Grid item xs={12}>\r\n                <div>\r\n                  <Controller\r\n                    name=\"name\"\r\n                    control={control}\r\n                    defaultValue={name}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Name\"\r\n                          id=\"margin-normal\"\r\n                          name=\"name\"\r\n                          defaultValue={name}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        >\r\n                          {/* {employees.map((e) => {\r\n                  return (\r\n                    <MenuItem key={e.name} value={e.name}>\r\n                      {e.name}\r\n                    </MenuItem>\r\n                  );\r\n                })} */}\r\n                        </TextField>\r\n                      );\r\n                    }}\r\n                    rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Controller\r\n                    name=\"period\"\r\n                    control={control}\r\n                    defaultValue={period}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Period\"\r\n                          id=\"margin-normal\"\r\n                          name=\"period\"\r\n                          defaultValue={period}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                  <Controller\r\n                    name=\"date\"\r\n                    control={control}\r\n                    defaultValue={date}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Date\"\r\n                          type=\"date\"\r\n                          id=\"margin-normal\"\r\n                          name=\"date\"\r\n                          defaultValue={date}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputLabelProps={{\r\n                            shrink: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Controller\r\n                    name=\"bank_name\"\r\n                    control={control}\r\n                    defaultValue={bank_name}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Bank Name\"\r\n                          id=\"margin-normal\"\r\n                          name=\"bank_name\"\r\n                          defaultValue={bank_name}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                  <Controller\r\n                    name=\"bank_acno\"\r\n                    control={control}\r\n                    defaultValue={bank_acno}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Bank AC No\"\r\n                          id=\"margin-normal\"\r\n                          name=\"bank_acno\"\r\n                          value={bank_acno}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Controller\r\n                    name=\"tap_amount\"\r\n                    control={control}\r\n                    defaultValue={tap_amount}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"TAP Contrinution\"\r\n                          type=\"currency\"\r\n                          id=\"standard-number\"\r\n                          name=\"tap_amount\"\r\n                          defaultValue={tap_amount}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            handleChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                  <Controller\r\n                    name=\"scp_amount\"\r\n                    control={control}\r\n                    defaultValue={scp_amount}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"SCP Contribution\"\r\n                          type=\"currency\"\r\n                          id=\"standard-number\"\r\n                          name=\"scp_amount\"\r\n                          defaultValue={scp_amount}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            handleChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Controller\r\n                    name=\"total_earnings\"\r\n                    control={control}\r\n                    defaultValue={total_earnings}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Total Earnings\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"total_earnings\"\r\n                          value={total_earnings}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            handleChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                  <Controller\r\n                    name=\"total_deductions\"\r\n                    control={control}\r\n                    defaultValue={total_deductions}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Total Deductions\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"total_deductions\"\r\n                          value={total_deductions}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            handleChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Controller\r\n                    name=\"basic_pay\"\r\n                    control={control}\r\n                    defaultValue={basic_pay}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Basic Pay\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"basic_pay\"\r\n                          value={basic_pay}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                          // onChange={(e) => {\r\n                          //   handleChange(parseInt(e.target.value, 10));\r\n                          // }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                  <Controller\r\n                    name=\"nett_pay\"\r\n                    control={control}\r\n                    defaultValue={nett_pay}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Nett Pay\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"nett_pay\"\r\n                          value={nett_pay}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            handleChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.button}\r\n                  onClick={calc_totals}\r\n                >\r\n                  Calc <Icon className={classes.rightIcon}>send</Icon>\r\n                </Button>\r\n              </Grid>\r\n              <Divider className={classes.divider} />\r\n            </form>\r\n          </CardLayout2>\r\n        </Grid>\r\n        <div>\r\n          <Grid container alignItems=\"center\" className={classes.grid}>\r\n            <Grid item xs={6} md={8} lg={6}>\r\n              <div>\r\n                <CardLayout\r\n                  title=\"Earnings\"\r\n                  handleClick={handleEarningsDialogOpen}\r\n                >\r\n                  <Payslip_ViewEarnings />\r\n                </CardLayout>\r\n              </div>\r\n            </Grid>\r\n            <Grid item xs={6} md={8} lg={6}>\r\n              <div>\r\n                <CardLayout\r\n                  title=\"Deductions\"\r\n                  handleClick={handleDeductionsDialogOpen}\r\n                >\r\n                  <Payslip_ViewDeductions />\r\n                </CardLayout>\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n        <Divider className={classes.divider} />\r\n        <CustomDialog\r\n          isOpen={isEarningsDialogOpen}\r\n          handleClose={handleEarningsDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <Payslip_Earnings\r\n            setEarningsdata={setEarningsdata}\r\n            earningsdata={earningsdata}\r\n            oldEarningsdata={oldEarningsdata}\r\n            handleDialogClose={handleEarningsDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isDeductionsDialogOpen}\r\n          handleClose={handleDeductionsDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <Payslip_Deductions\r\n            setDeductionsdata={setDeductionsdata}\r\n            deductionsdata={deductionsdata}\r\n            oldDeductionsdata={oldDeductionsdata}\r\n            handleDialogClose={handleDeductionsDialogClose}\r\n          />\r\n        </CustomDialog>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  divider: {\r\n    padding: 4,\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 350,\r\n  },\r\n  grid: {\r\n    padding: theme.spacing(3, 2),\r\n    // justifyContent: \"center\",\r\n  },\r\n  box: {\r\n    height: 100,\r\n    display: \"flex\",\r\n    border: \"1px solid black\",\r\n    padding: 8,\r\n  },\r\n}));\r\n\r\nexport default PayslipForm;\r\n","import React from \"react\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n//import Toolbar from \"@material-ui/core/Toolbar\";\r\n//import Typography from \"@material-ui/core/Typography\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport PayslipForm from \"./PayslipForm\";\r\n\r\nconst drawerWidth = 240;\r\n\r\n// const ToolbarHeader = ({ title }) => {\r\n//   const classes = useToolbarStyles();\r\n\r\n//   return (\r\n//     <div>\r\n//       <Toolbar>\r\n//         <Typography\r\n//           className={classes.title}\r\n//           variant=\"h6\"\r\n//           id=\"tableTitle\"\r\n//           component=\"div\"\r\n//         >\r\n//           {title}\r\n//         </Typography>\r\n//       </Toolbar>\r\n//     </div>\r\n//   );\r\n// };\r\nconst SinglePayslip = ({ title }) => {\r\n  const classes = useStyles();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  return (\r\n    <div>\r\n      <CssBaseline />\r\n\r\n      <div className={classes.appBarSpacer}>\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid container spacing={3}>\r\n            {/* <Grid item xs={12} md={8} lg={9}> */}\r\n            <Grid item xs={12}>\r\n              <Paper className={fixedHeightPaper}>\r\n                <Link to=\"/batchpayslips\">\r\n                  <div>\r\n                    <ArrowBackIcon fontSize=\"large\" color=\"primary\" />\r\n                  </div>\r\n                </Link>\r\n                <div>\r\n                  {/* <ToolbarHeader title={title} /> */}\r\n\r\n                  <PayslipForm />\r\n                </div>\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(9),\r\n    paddingBottom: theme.spacing(4),\r\n    border: \"1px solid\",\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    // display: \"flex\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n    border: \"1px solid\",\r\n    width: \"100%\",\r\n  },\r\n  fixedHeight: {\r\n    height: 800,\r\n  },\r\n}));\r\n\r\n// const useToolbarStyles = makeStyles((theme) => ({\r\n//   root: {\r\n//     paddingLeft: theme.spacing(2),\r\n//     paddingRight: theme.spacing(1),\r\n//   },\r\n//   highlight:\r\n//     theme.palette.type === \"light\"\r\n//       ? {\r\n//           color: theme.palette.secondary.main,\r\n//           backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n//         }\r\n//       : {\r\n//           color: theme.palette.text.primary,\r\n//           backgroundColor: theme.palette.secondary.dark,\r\n//         },\r\n//   title: {\r\n//     flex: \"1 1 100%\",\r\n//   },\r\n// }));\r\n\r\nexport default SinglePayslip;\r\n"],"sourceRoot":""}