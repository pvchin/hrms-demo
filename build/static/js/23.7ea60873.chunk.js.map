{"version":3,"sources":["components/ExpenseTableManager.js"],"names":["ADMINMANAGER_EMAIL","process","FILTERSTRING","ExpenseTable","setExpensesdata","handleDialogClose","classes","useStyles","toast","useCustomToast","useState","isDialogOpen","setIsDialogOpen","isAlertOpen","setIsAlertOpen","employees","useEmployees","expenses","useExpenses","useExpensesContext","editExpenseID","updateExpense","update_expense_error","deleteExpense","loadPendingExpenses","expensesdata","filter","r","status","columns","useMemo","title","field","editable","type","dateSetting","locale","editComponent","props","onChange","e","target","value","style","width","select","handleExpenseFormDialogClose","handleSentEmail","data","result","date","empid","emaildata","to_name","name","to_email","f","id","map","email","message","cc_to","emailjs","then","response","console","log","text","err","Approve_ExpenseData","forEach","rec","tableData","checked","d","Reject_ExpenseData","className","root","maxWidth","paddingTop","icons","Add","Edit","Delete","Clear","Check","Search","ResetSearch","options","filtering","selection","headerStyle","backgroundColor","color","showTitle","components","Toolbar","padding","variant","button","onClick","rightIcon","isOpen","handleClose","showButton","isFullscree","onClose","onConfirm","makeStyles","theme","margin","spacing"],"mappings":"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","file":"static/js/23.7ea60873.chunk.js","sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { TextField, MenuItem, Button, Icon } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport * as emailjs from \"emailjs-com\";\r\n//import { useRecoilState } from \"recoil\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport CheckCircleOutlineOutlinedIcon from \"@material-ui/icons/CheckCircleOutlineOutlined\";\r\n//import { loginLevelState } from \"./data/atomdata\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\nimport { useExpenses } from \"./expenses/useExpenses\";\r\n\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\nconst ADMINMANAGER_EMAIL = process.env.ADMINMANAGER_EMAIL;\r\nconst FILTERSTRING = \"Pending\";\r\n\r\nexport default function ExpenseTable({\r\n  setExpensesdata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  //const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  //const [isLoad, setIsLoad] = useState(false);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const { employees } = useEmployees();\r\n  const { expenses } = useExpenses();\r\n  const {\r\n    editExpenseID,\r\n    updateExpense,\r\n    update_expense_error,\r\n    //expenses_loading,\r\n    deleteExpense,\r\n    loadPendingExpenses,\r\n  } = useExpensesContext();\r\n\r\n  const expensesdata = expenses.filter((r)=>r.status === \"Pending\")\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      { title: \"Name\", field: \"name\", editable: \"never\" },\r\n      {\r\n        title: \"Date\",\r\n        field: \"date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n        editable: \"never\",\r\n      },\r\n      {\r\n        title: \"Description\",\r\n        field: \"description\",\r\n        editable: \"never\",\r\n      },\r\n      { title: \"Amount\", field: \"amount\", type: \"currency\", editable: \"never\" },\r\n      {\r\n        title: \"Status\",\r\n        field: \"status\",\r\n        editComponent: (props) => (\r\n          <TextField\r\n            //defaultValue={props.value || null}\r\n            onChange={(e) => props.onChange(e.target.value)}\r\n            style={{ width: 100 }}\r\n            value={props.value}\r\n            select\r\n          >\r\n            <MenuItem value=\"Pending\">Pending</MenuItem>\r\n            <MenuItem value=\"Approve\">Approve</MenuItem>\r\n            <MenuItem value=\"Reject\">Reject</MenuItem>\r\n            <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n          </TextField>\r\n        ),\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  // useEffect(() => {\r\n  //   setExpensesdata(expenses);\r\n  //   console.log(expensesdata)\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   loadEmployees();\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   if (expenses) {\r\n  //     setExpensesdata(expenses);\r\n  //     console.log(\"expenses\", expenses, expensesdata)\r\n  //   } else {\r\n  //     setIsLoad(!isLoad);\r\n  //   }\r\n  // }, [isLoad]);\r\n\r\n  // const handleExpenseFormDialogOpen = () => {\r\n  //   setIsDialogOpen(true);\r\n  // };\r\n\r\n  const handleExpenseFormDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n    loadPendingExpenses(FILTERSTRING);\r\n  };\r\n\r\n  // const handleExpenseFormAlertOpen = () => {\r\n  //   setIsAlertOpen(true);\r\n  // };\r\n\r\n  const handleExpenseFormAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleExpenseFormOnDeleteConfirm = () => {\r\n    const id = editExpenseID;\r\n    deleteExpense(id);\r\n    loadPendingExpenses(FILTERSTRING);\r\n  };\r\n\r\n  const handleSentEmail = (data, result) => {\r\n    const { date, empid, name } = data;\r\n    const emp = employees\r\n      .filter((f) => f.id === empid)\r\n      .map((r) => {\r\n        return { ...r };\r\n      });\r\n    // console.log(\"leave form\", emp[0].email, data);\r\n    var emaildata = {\r\n      to_name: name,\r\n      to_email: emp[0].email,\r\n      message: `Your expenses claim application dated on ${date} has been ${result}!`,\r\n      cc_to: ADMINMANAGER_EMAIL,\r\n    };\r\n\r\n    emailjs.send(SERVICE_ID, TEMPLATE_ID, emaildata, USER_ID).then(\r\n      function (response) {\r\n        console.log(response.status, response.text);\r\n        toast({\r\n          title: `Email has sent successfully to ${emaildata.to_email}!`,\r\n          status: \"success\",\r\n        });\r\n      },\r\n      function (err) {\r\n        console.log(err);\r\n        toast({\r\n          title: `Email has fail to send to ${emaildata.to_email}!`,\r\n          status: \"warning\",\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  // const Save_ExpenseData = () => {\r\n  //   expensesdata.forEach((data) => {\r\n  //     const { id } = data;\r\n  //     if (id) {\r\n  //       const { id, rec_id, tableData, ...fields } = data;\r\n  //       updateExpense({ id, ...fields });\r\n  //     }\r\n  //   });\r\n\r\n  //   handleDialogClose();\r\n  //};\r\n\r\n  const Approve_ExpenseData = () => {\r\n    expensesdata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        updateExpense({ id: rec.id, status: \"Approved\" });\r\n        //update leavesdata\r\n        if (!update_expense_error) {\r\n          const recdata = expensesdata.filter((r) => r.id === rec.id);\r\n          recdata[0].status = \"Approved\";\r\n        }\r\n        //sent email\r\n        handleSentEmail(rec, \"Approved\");\r\n      }\r\n    });\r\n    expensesdata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  const Reject_ExpenseData = () => {\r\n    expensesdata.forEach((rec) => {\r\n      if (rec.tableData.checked) {\r\n        updateExpense({ id: rec.id, status: \"Rejected\" });\r\n        //update leavesdata\r\n        if (!update_expense_error) {\r\n          const recdata = expensesdata.filter((r) => r.id === rec.id);\r\n          recdata[0].status = \"Rejected\";\r\n        }\r\n        //sent email\r\n        handleSentEmail(rec, \"Rejected\");\r\n      }\r\n    });\r\n    expensesdata.forEach((d) => {\r\n      if (d.tableData) d.tableData.checked = false;\r\n    });\r\n  };\r\n\r\n  if (!expensesdata) {\r\n    return (\r\n      <div>\r\n        <h2>Loading...Expenses</h2>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={expensesdata}\r\n          title=\"Expenses Claims Application\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <CheckCircleOutlineOutlinedIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n          }}\r\n          // editable={{\r\n          //   onRowUpdate: (newData, oldData) =>\r\n          //     new Promise((resolve, reject) => {\r\n          //       setTimeout(() => {\r\n          //         const dataUpdate = [...expensesdata];\r\n          //         const index = oldData.tableData.id;\r\n          //         dataUpdate[index] = newData;\r\n          //         setExpensesdata([...dataUpdate]);\r\n          //         //approve_Expense(newData);\r\n\r\n          //         resolve();\r\n          //       }, 1000);\r\n          //     }),\r\n          // }}\r\n          options={{\r\n            filtering: true,\r\n            selection: true,\r\n            headerStyle: {\r\n              backgroundColor: \"#90CDF4\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Approve_ExpenseData}\r\n                  >\r\n                    Approve <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Reject_ExpenseData}\r\n                  >\r\n                    Reject <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                  {/* <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Save_ExpenseData}\r\n                  >\r\n                    Update <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button> */}\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <CustomDialog\r\n          isOpen={isDialogOpen}\r\n          handleClose={handleExpenseFormDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscree={false}\r\n        >\r\n          <ExpenseForm handleDialogClose={handleExpenseFormDialogClose} />\r\n        </CustomDialog>\r\n\r\n        <AlertDialogBox\r\n          onClose={handleExpenseFormAlertClose}\r\n          onConfirm={handleExpenseFormOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete Expenses\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialogBox>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n"],"sourceRoot":""}