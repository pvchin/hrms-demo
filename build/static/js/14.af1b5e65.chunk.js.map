{"version":3,"sources":["components/EmployeeFormStaff.js","components/SingleEmployeeStaff.js","components/JobhistoryForm.js","components/EmpJobhistory.js"],"names":["initial_values","name","birthdate","empno","gender","ic_no","email","age","basic_salary","salary_currency","bank_name","bank_acno","nationality","address","leave_bal","leave_bf","leave_entitled","tap_acno","scp_acno","date_of_join","date_of_resign","designation","department","passportno","passport_expirydate","workpermitno","workpermit_expirydate","siteallows_fee","perdiem_fee","reporting_to","reporting_email","useStyles","makeStyles","theme","button","margin","spacing","leftIcon","marginRight","rightIcon","marginLeft","iconSmall","fontSize","root","padding","container","display","flexDirection","flexWrap","divider","textField","width","EmployeeForm","classes","toast","useCustomToast","useEmployees","employees","updateEmployees","setEmployeeId","useUpdateEmployees","useState","empage","setEmpage","setReportEmail","useForm","handleSubmit","control","setValue","register","useRecoilState","loginLevelState","loginLevel","filter","r","id","loginUserId","map","calculateAge","dob","today","Date","birthDate","getFullYear","m","getMonth","getDate","useEffect","onSubmit","data","Paper","className","Grid","Typography","variant","component","Button","type","color","Icon","onClick","App","auth","sendPasswordResetEmail","title","status","error","console","log","Divider","item","xs","defaultValue","render","field","onChange","value","fieldState","TextField","label","helperText","message","inputProps","readOnly","rules","required","e","target","InputLabelProps","shrink","parseInt","select","MenuItem","currencySymbol","outputFormat","decimalCharacter","digitGroupSeparator","decimalPlaces","parseFloat","InputProps","EmpFamily","EmpEducations","EmpExperiences","EmpTrainings","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","enteringScreen","menuButton","menuButtonHidden","flexGrow","drawerPaper","position","whiteSpace","drawerPaperClose","overflowX","breakpoints","up","appBarSpacer","content","height","overflow","paddingTop","paddingBottom","border","paper","fixedHeight","SingleEmployee","fixedHeightPaper","clsx","useEmployeesContext","isEditing","CssBaseline","Container","maxWidth","EmployeeFormStaff"],"mappings":"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","file":"static/js/14.af1b5e65.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  TextField,\r\n  Paper,\r\n  Typography,\r\n  Grid,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\n//import { Alert, AlertTitle } from \"@material-ui/lab\";\r\nimport CurrencyTextField from \"@unicef/material-ui-currency-textfield\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\n\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\n//import { useSingleEmployee } from \"./employees/useSingleEmployee\";\r\nimport { useUpdateEmployees } from \"./employees/useUpdateEmployees\";\r\n// import EmpFamilyStaff from \"./EmpFamilyStaff\";\r\n// import EmpEducationsStaff from \"./EmpEducationsStaff\";\r\n// import EmpExperiencesStaff from \"./EmpExperiencesStaff\";\r\nimport EmpFamily from \"./EmpFamily\";\r\nimport EmpEducations from \"./EmpEducations\";\r\nimport EmpExperiences from \"./EmpExperiences\";\r\nimport EmpTrainings from \"./EmpTrainings\";\r\nimport EmpJobhistory from \"./EmpJobhistory\";\r\nimport App from \"../utils/firebase\";\r\n\r\nconst initial_values = {\r\n  name: \"\",\r\n  birthdate: null,\r\n  empno: \"\",\r\n  gender: \"\",\r\n  ic_no: \"\",\r\n  email: \"\",\r\n  age: 0,\r\n  basic_salary: 0,\r\n  salary_currency: \"BND\",\r\n  bank_name: \"\",\r\n  bank_acno: \"\",\r\n  nationality: \"\",\r\n  address: \"\",\r\n  leave_bal: 0,\r\n  leave_bf: 0,\r\n  leave_entitled: 0,\r\n  tap_acno: \"\",\r\n  scp_acno: \"\",\r\n  date_of_join: null,\r\n  date_of_resign: null,\r\n  designation: \"\",\r\n  department: \"\",\r\n  passportno: \"\",\r\n  passport_expirydate: null,\r\n  workpermitno: \"\",\r\n  workpermit_expirydate: null,\r\n  siteallows_fee: 0,\r\n  perdiem_fee: 0,\r\n  reporting_to: \"\",\r\n  reporting_email: \"\",\r\n};\r\n\r\nconst EmployeeForm = () => {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  const { employees, setEmployeeId } = useEmployees();\r\n  //const { singleemployee, setSingleEmployeeId } = useSingleEmployee();\r\n  const updateEmployees = useUpdateEmployees();\r\n  const [empage, setEmpage] = useState(0);\r\n  const [reportemail, setReportEmail] = useState(\"\");\r\n  const { handleSubmit, control, setValue, register } = useForm();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  // const {\r\n  //   isEditing,\r\n  //   single_employee,\r\n  //   editEmployeeID,\r\n  //   getSingleEmployee,\r\n  //   single_employee_loading,\r\n  // } = useEmployeesContext();\r\n  const single_employee = employees\r\n    .filter((r) => r.id === loginLevel.loginUserId)\r\n    .map((r) => {\r\n      return { ...r };\r\n    });\r\n  const {\r\n    name,\r\n    empno,\r\n    birthdate,\r\n    ic_no,\r\n    gender,\r\n    //age,\r\n    email,\r\n    nationality,\r\n    address,\r\n    basic_salary,\r\n    salary_currency,\r\n    bank_name,\r\n    bank_acno,\r\n    tap_acno,\r\n    scp_acno,\r\n    leave_bf,\r\n    leave_entitled,\r\n    date_of_join,\r\n    date_of_resign,\r\n    designation,\r\n    department,\r\n    passportno,\r\n    passport_expirydate,\r\n    workpermitno,\r\n    workpermit_expirydate,\r\n    siteallows_fee,\r\n    perdiem_fee,\r\n    reporting_to,\r\n    reporting_email,\r\n  } = single_employee[0] || initial_values;\r\n\r\n  //console.log(\"single employee\", single_employee);\r\n\r\n  const handleReportingTo = (name) => {\r\n    const emp = employees\r\n      .filter((f) => f.name === name)\r\n      .map((r) => {\r\n        return { ...r };\r\n      });\r\n    setReportEmail(emp[0].email);\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    //console.log(\"Data\",data)\r\n    updateEmployees({ id: loginLevel.loginUserId, ...data });\r\n  };\r\n\r\n  const Reset_PW = () => {\r\n    try {\r\n      App.auth().sendPasswordResetEmail(email);\r\n      toast({\r\n        title: `Reset Password sent to ${email}!`,\r\n        status: \"success\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: `Fail to reset password on ${email}!`,\r\n        status: \"warning\",\r\n      });\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const calculateAge = (dob) => {\r\n    var today = new Date();\r\n    var birthDate = new Date(dob);\r\n    var age = today.getFullYear() - birthDate.getFullYear();\r\n    var m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      age--;\r\n    }\r\n    return age;\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   setEmployeeId(loginLevel.loginUserId);\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    let age = calculateAge(birthdate);\r\n    setEmpage(age);\r\n    setReportEmail(reporting_email);\r\n  }, []);\r\n\r\n  // if (single_employee_loading) {\r\n  //   return (\r\n  //     <div>\r\n  //       <h2>Loading... </h2>\r\n  //     </div>\r\n  //   );\r\n  //}\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <Paper className={classes.root}>\r\n          <Grid container className={classes.root} spacing={15}>\r\n            <div>\r\n              <Typography variant=\"h5\" component=\"h3\">\r\n                EMPLOYEE FORM\r\n              </Typography>\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n              >\r\n                Submit <Icon className={classes.rightIcon}>send</Icon>\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                onClick={Reset_PW}\r\n              >\r\n                Reset PW <Icon className={classes.rightIcon}>send</Icon>\r\n              </Button>\r\n            </div>\r\n          </Grid>\r\n          <Divider className={classes.divider} />\r\n          <Grid item xs={12}>\r\n            <div>\r\n              <div>\r\n                <Controller\r\n                  name=\"name\"\r\n                  control={control}\r\n                  defaultValue={name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Name\"\r\n                        id=\"standard-name\"\r\n                        defaultValue={name}\r\n                        name=\"name\"\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"empno\"\r\n                  control={control}\r\n                  defaultValue={empno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Emp No\"\r\n                        id=\"standard-empno\"\r\n                        name=\"empno\"\r\n                        defaultValue={empno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"email\"\r\n                  control={control}\r\n                  defaultValue={email}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Email\"\r\n                        id=\"standard-email\"\r\n                        name=\"email\"\r\n                        defaultValue={email}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"ic_no\"\r\n                  control={control}\r\n                  defaultValue={ic_no}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"IC No\"\r\n                        id=\"standard-icno\"\r\n                        defaultValue={ic_no}\r\n                        name=\"ic_no\"\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"birthdate\"\r\n                  control={control}\r\n                  defaultValue={birthdate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Birth Date\"\r\n                        id=\"standard-birthdate\"\r\n                        name=\"birthdate\"\r\n                        type=\"date\"\r\n                        defaultValue={birthdate}\r\n                        className={classes.textField}\r\n                        onChange={(e) => {\r\n                          onChange(e.target.value);\r\n                          let age = calculateAge(e.target.value);\r\n                          console.log(\"emp\", birthdate, age);\r\n                          setEmpage(age);\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"age\"\r\n                  control={control}\r\n                  //defaultValue={age}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Age\"\r\n                        type=\"number\"\r\n                        id=\"standard-age\"\r\n                        name=\"age\"\r\n                        value={empage}\r\n                        className={classes.textField}\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(parseInt(e.target.value, 10));\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"passportno\"\r\n                  control={control}\r\n                  defaultValue={passportno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Passport No\"\r\n                        id=\"stanrad-ppno\"\r\n                        name=\"passportno\"\r\n                        defaultValue={passportno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"passport_expirydate\"\r\n                  control={control}\r\n                  defaultValue={passport_expirydate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Passport Expiry Date\"\r\n                        id=\"standard-ppexpiry\"\r\n                        name=\"passport_expirydate\"\r\n                        type=\"date\"\r\n                        defaultValue={passport_expirydate}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"nationality\"\r\n                  control={control}\r\n                  defaultValue={nationality}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Nationality\"\r\n                        id=\"standard-nationality\"\r\n                        name=\"nationality\"\r\n                        defaultValue={nationality}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"gender\"\r\n                  control={control}\r\n                  defaultValue={gender}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Gender\"\r\n                        id=\"standard-gender\"\r\n                        name=\"gender\"\r\n                        defaultValue={gender}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        select\r\n                      >\r\n                        <MenuItem value=\"Male\">Male</MenuItem>\r\n                        <MenuItem value=\"Female\">Female</MenuItem>\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"address\"\r\n                  control={control}\r\n                  defaultValue={address}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Address\"\r\n                        id=\"standard-address\"\r\n                        name=\"address\"\r\n                        defaultValue={address}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <Divider className={classes.divider} />\r\n            <div>\r\n              <div>\r\n                <Controller\r\n                  name=\"basic_salary\"\r\n                  control={control}\r\n                  defaultValue={basic_salary}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <CurrencyTextField\r\n                        label=\"Basic Salary\"\r\n                        variant=\"standard\"\r\n                        defaultValue={basic_salary}\r\n                        currencySymbol=\"$\"\r\n                        outputFormat=\"number\"\r\n                        decimalCharacter=\".\"\r\n                        digitGroupSeparator=\",\"\r\n                        decimalPlaces=\"2\"\r\n                        className={classes.textField}\r\n                        id=\"standard-basicsalary\"\r\n                        name=\"basic_pay\"\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(parseFloat(e.target.value, 10));\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"salary_currency\"\r\n                  control={control}\r\n                  defaultValue={salary_currency}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Currency\"\r\n                        id=\"standard-currency\"\r\n                        name=\"salary_currency\"\r\n                        defaultValue={salary_currency}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                        select\r\n                      >\r\n                        <MenuItem value=\"BND\">BND</MenuItem>\r\n                        <MenuItem value=\"MYR\">MYR</MenuItem>\r\n                        <MenuItem value=\"USD\">USD</MenuItem>\r\n                      </TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"siteallows_fee\"\r\n                  control={control}\r\n                  defaultValue={siteallows_fee}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <CurrencyTextField\r\n                        label=\"Site Allowances Fee\"\r\n                        variant=\"standard\"\r\n                        defaultValue={siteallows_fee}\r\n                        currencySymbol=\"$\"\r\n                        outputFormat=\"number\"\r\n                        decimalCharacter=\".\"\r\n                        digitGroupSeparator=\",\"\r\n                        decimalPlaces=\"2\"\r\n                        className={classes.textField}\r\n                        id=\"standard-siteallowances\"\r\n                        name=\"siteallows_fee\"\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(parseFloat(e.target.value, 10));\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"perdiem_fee\"\r\n                  control={control}\r\n                  defaultValue={perdiem_fee}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <CurrencyTextField\r\n                        label=\"Per Diem Fee\"\r\n                        variant=\"standard\"\r\n                        defaultValue={perdiem_fee}\r\n                        currencySymbol=\"$\"\r\n                        outputFormat=\"number\"\r\n                        decimalCharacter=\".\"\r\n                        digitGroupSeparator=\",\"\r\n                        decimalPlaces=\"2\"\r\n                        className={classes.textField}\r\n                        id=\"standard-perdiem\"\r\n                        name=\"perdiem_fee\"\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(parseFloat(e.target.value, 10));\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"bank_name\"\r\n                  control={control}\r\n                  defaultValue={bank_name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Bank Name\"\r\n                        id=\"standard-bankname\"\r\n                        name=\"bank_name\"\r\n                        defaultValue={bank_name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"bank_acno\"\r\n                  control={control}\r\n                  defaultValue={bank_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Bank Ac No\"\r\n                        id=\"standard-bankacno\"\r\n                        name=\"bank_acno\"\r\n                        defaultValue={bank_acno}\r\n                        value={bank_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  // rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"tap_acno\"\r\n                  control={control}\r\n                  defaultValue={tap_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"TAP Ac No\"\r\n                        id=\"standard-tapacno\"\r\n                        name=\"tap_acno\"\r\n                        defaultValue={tap_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n\r\n                <Controller\r\n                  name=\"scp_acno\"\r\n                  control={control}\r\n                  defaultValue={scp_acno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"SCP Ac No\"\r\n                        id=\"standard-scpacno\"\r\n                        name=\"scp_acno\"\r\n                        defaultValue={scp_acno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"workpermitno\"\r\n                  control={control}\r\n                  defaultValue={workpermitno}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Work Permit No\"\r\n                        id=\"standard-wpno\"\r\n                        name=\"workpermitno\"\r\n                        defaultValue={workpermitno}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"workpermit_expirydate\"\r\n                  control={control}\r\n                  defaultValue={workpermit_expirydate}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Work Permit Expiry Date\"\r\n                        id=\"standard-wpexpiry\"\r\n                        name=\"workpermit_expirydate\"\r\n                        type=\"date\"\r\n                        defaultValue={workpermit_expirydate}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Name required\" }}\r\n                />\r\n              </div>\r\n              <Divider className={classes.divider} />\r\n              <div>\r\n                <Controller\r\n                  name=\"date_of_join\"\r\n                  control={control}\r\n                  defaultValue={date_of_join}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Joining Date\"\r\n                        id=\"standard-joindate\"\r\n                        name=\"date_of_join\"\r\n                        type=\"date\"\r\n                        defaultValue={date_of_join}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"date_of_resign\"\r\n                  control={control}\r\n                  defaultValue={date_of_resign}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Resign Date\"\r\n                        id=\"standard-resigndate\"\r\n                        name=\"date_of_resign\"\r\n                        type=\"date\"\r\n                        defaultValue={date_of_resign}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        inputProps={{ readOnly: true }}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"leave_entitled\"\r\n                  control={control}\r\n                  defaultValue={leave_entitled}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Annual Leaves Entitled\"\r\n                        id=\"standard-annualleave\"\r\n                        name=\"leave_entitled\"\r\n                        type=\"numeric\"\r\n                        defaultValue={leave_entitled}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"leave_bf\"\r\n                  control={control}\r\n                  defaultValue={leave_bf}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Leaves B/F\"\r\n                        id=\"standard-leavebal\"\r\n                        name=\"leave_bf\"\r\n                        type=\"numeric\"\r\n                        defaultValue={leave_bf}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                        inputProps={{ readOnly: true }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"designation\"\r\n                  control={control}\r\n                  defaultValue={designation}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Designation\"\r\n                        id=\"standard-designation\"\r\n                        name=\"designation\"\r\n                        defaultValue={designation}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"department\"\r\n                  control={control}\r\n                  defaultValue={department}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Department\"\r\n                        id=\"standard-department\"\r\n                        name=\"department\"\r\n                        defaultValue={department}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"reporting_to\"\r\n                  control={control}\r\n                  defaultValue={reporting_to}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      // <TextField\r\n                      //   label=\"Reporting To\"\r\n                      //   id=\"standard-reportingto\"\r\n                      //   name=\"reporting_to\"\r\n                      //   defaultValue={reporting_to}\r\n                      //   className={classes.textField}\r\n                      //   onChange={(e) => {\r\n                      //     onChange(e.target.value);\r\n                      //     handleReportingTo(e.target.value);\r\n                      //   }}\r\n                      //   error={!!error}\r\n                      //   helperText={error ? error.message : null}\r\n                      //   select\r\n                      // >\r\n                      //   <MenuItem value=\"\">None</MenuItem>\r\n                      //   {employees &&\r\n                      //     employees.map((r) => {\r\n                      //       return <MenuItem value={r.name}>{r.name}</MenuItem>;\r\n                      //     })}\r\n                      // </TextField>\r\n                      <TextField\r\n                        label=\"Reporting To\"\r\n                        id=\"standard-reportingto\"\r\n                        name=\"reporting_to\"\r\n                        defaultValue={reporting_to}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n                <Controller\r\n                  name=\"reporting_email\"\r\n                  control={control}\r\n                  defaultValue={reporting_email}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Reporting Email\"\r\n                        id=\"standard-reportingemail\"\r\n                        name=\"reporting_email\"\r\n                        defaultValue={reporting_email}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Email is required\" }}\r\n                />\r\n              </div>\r\n              <Divider className={classes.divider} />\r\n            </div>\r\n          </Grid>\r\n          <Divider />\r\n        </Paper>\r\n      </form>\r\n\r\n      {/* <Grid xs={12}>\r\n        <EmpJobhistory />\r\n      </Grid> */}\r\n      <Grid xs={12}>\r\n        <EmpFamily />\r\n      </Grid>\r\n      <Grid xs={12}>\r\n        <EmpEducations />\r\n      </Grid>\r\n      <Grid xs={12}>\r\n        <EmpExperiences />\r\n      </Grid>\r\n      <Grid xs={12}>\r\n        <EmpTrainings />\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  divider: {\r\n    padding: 4,\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 350,\r\n  },\r\n}));\r\n\r\nexport default EmployeeForm;\r\n","import React from \"react\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport clsx from \"clsx\";\r\nimport {  makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport EmployeeFormStaff from \"./EmployeeFormStaff\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\n\r\nconst drawerWidth = 240;\r\n\r\n// const ToolbarHeader = ({ title }) => {\r\n//   const classes = useToolbarStyles();\r\n\r\n//   return (\r\n//     <div>\r\n//       <Toolbar>\r\n//         <Typography\r\n//           className={classes.title}\r\n//           variant=\"h6\"\r\n//           id=\"tableTitle\"\r\n//           component=\"div\"\r\n//         >\r\n//           {title}\r\n//         </Typography>\r\n//       </Toolbar>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n\r\nconst SingleEmployee = ({ title }) => {\r\n  const classes = useStyles();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const { isEditing } =\r\n    useEmployeesContext();\r\n   \r\n  \r\n  if (isEditing) {\r\n    return (\r\n      <div>\r\n        <CssBaseline />\r\n\r\n        <div className={classes.appBarSpacer}>\r\n          <Container maxWidth=\"lg\" className={classes.container}>\r\n            <Grid container spacing={3}>\r\n              {/* <Grid item xs={12} md={8} lg={9}> */}\r\n              <Grid item xs={12}>\r\n                <Paper className={fixedHeightPaper}>\r\n                  {/* <Link to=\"/allemployees\">\r\n                    <div>\r\n                      <ArrowBackIcon fontSize=\"large\" color=\"primary\" />\r\n                    </div>\r\n                  </Link> */}\r\n                  <div>\r\n                    {/* <ToolbarHeader title={title} /> */}\r\n\r\n                    <EmployeeFormStaff />\r\n                  </div>\r\n                </Paper>\r\n              </Grid>\r\n            </Grid>\r\n          </Container>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <CssBaseline />\r\n\r\n        <div className={classes.appBarSpacer}>\r\n          <Container maxWidth=\"lg\" className={classes.container}>\r\n            <Grid container spacing={3}>\r\n              {/* <Grid item xs={12} md={8} lg={9}> */}\r\n              <Grid item xs={12}>\r\n                <Paper className={fixedHeightPaper}>\r\n                  {/* <Link to=\"/allemployees\">\r\n                    <div>\r\n                      <ArrowBackIcon fontSize=\"large\" color=\"primary\" />\r\n                    </div>\r\n                  </Link> */}\r\n                  <div>\r\n                    {/* <ToolbarHeader title={title} /> */}\r\n\r\n                    <EmployeeFormStaff />\r\n                  </div>\r\n                </Paper>\r\n              </Grid>\r\n            </Grid>\r\n          </Container>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(9),\r\n    paddingBottom: theme.spacing(4),\r\n    border: \"1px solid\",\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    // display: \"flex\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n    border: \"1px solid\",\r\n    width: \"100%\",\r\n  },\r\n  fixedHeight: {\r\n    height: 800,\r\n  },\r\n}));\r\n\r\n\r\n\r\nexport default SingleEmployee;\r\n","import React, { useState } from \"react\";\r\nimport //   Button,\r\n//   Icon,\r\n//   MenuItem,\r\n//   TextField,\r\n//   Paper,\r\n//   Select,\r\n//   Typography,\r\n//   Divider,\r\n\"@material-ui/core\";\r\nimport {\r\n  //AspectRatio,\r\n  Box,\r\n  Button,\r\n  //ButtonGroup,\r\n  //Center,\r\n  Checkbox,\r\n  //Container,\r\n  Divider,\r\n  //Flex,\r\n  FormControl,\r\n  //FormLabel,\r\n  //FormErrorMessage,\r\n  //FormHelperText,\r\n  //Grid,\r\n  //GridItem,\r\n  Heading,\r\n  HStack,\r\n  //Icon,\r\n  //IconButton,\r\n  //Image,\r\n  Input,\r\n  InputGroup,\r\n  InputLeftAddon,\r\n  //InputLeftElement,\r\n  //Modal,\r\n  //ModalOverlay,\r\n  //ModalContent,\r\n  //ModalHeader,\r\n  //ModalFooter,\r\n  //ModalBody,\r\n  //ModalCloseButton,\r\n  //Radio,\r\n  //RadioGroup,\r\n  Select,\r\n  //SimpleGrid,\r\n  //Stack,\r\n  //StackDivider,\r\n  //Text,\r\n  //Tabs,\r\n \r\n} from \"@chakra-ui/react\";\r\n//import * as emailjs from \"emailjs-com\";\r\n//import { useRecoilState } from \"recoil\";\r\n//import { loginLevelState } from \"./data/atomdata\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import { useCustomToast } from \"../helpers/useCustomToast\";\r\n//import { useEmployees } from \"./employees/useEmployees\";\r\nimport { useDepartments } from \"./departments/useDepartments\";\r\nimport { useDesignations } from \"./designations/useDesignations\";\r\nimport { useJobstatus } from \"./jobstatus/useJobstatus\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\n\r\n//const SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\n//const TEMPLATE_ID = \"template_1y8odlq\";\r\n//const USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\n\r\n// const initial_state = {\r\n//   empid: \"\",\r\n//   name: \"\",\r\n//   designation: \"\",\r\n//   department: \"\",\r\n//   effectdate: \"\",\r\n//   basicsalary: 0,\r\n//   siteallows: 0,\r\n//   remark: \"\",\r\n//   status: \"\",\r\n//   isresign: false,\r\n//};\r\n\r\nconst JobhistoryForm = ({\r\n  state,\r\n  setState,\r\n  statustype,\r\n  add_Item,\r\n  update_Item,\r\n  onJobClose,\r\n}) => {\r\n  //const toast = useCustomToast();\r\n  const classes = useStyles();\r\n  const field_width = \"138\";\r\n  //const { employees } = useEmployees();\r\n  const { departments } = useDepartments();\r\n  const { designations } = useDesignations();\r\n  const { jobstatus } = useJobstatus();\r\n  const [isresign, setIsresign] = useState(false);\r\n  //const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { handleSubmit, control } = useForm({\r\n    defaultValues: {\r\n      ...state,\r\n    },\r\n  });\r\n\r\n  //console.log(\"jobstate\",state)  \r\n  const onSubmit = (values) => {\r\n    if (statustype === \"edit\") {\r\n      update_Item(values);\r\n    }\r\n    if (statustype === \"add\") {\r\n      add_Item(values);\r\n    }\r\n    handleClose();\r\n  };\r\n\r\n  const handleClose = () => {\r\n    onJobClose();\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   setState(initial_state);\r\n  //   setState({ ...formdata });\r\n  //   setState({ ...formdata });\r\n  //   console.log(\"laeve form\",state)\r\n  // }, [initialValues]);\r\n\r\n  return (\r\n    <Box>\r\n      <Box p={2}>\r\n        <Heading size=\"md\">EMPLOYMENT HISTORY FORM</Heading>\r\n      </Box>\r\n      <Divider />\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <div>\r\n          <FormControl>\r\n            <Controller\r\n              control={control}\r\n              name=\"name\"\r\n              defaultValue={state.name}\r\n              render={({ field: { onChange, value, ref } }) => (\r\n                <InputGroup>\r\n                  <HStack w=\"100%\" py={1}>\r\n                    <InputLeftAddon children=\"Name\" minWidth={field_width} />\r\n                    <Input\r\n                      name=\"name\"\r\n                      value={value}\r\n                      width=\"full\"\r\n                      onChange={onChange}\r\n                      borderColor=\"gray.400\"\r\n                      isReadOnly\r\n                      //textTransform=\"capitalize\"\r\n                      ref={ref}\r\n                      placeholder=\"name\"\r\n                    />\r\n                  </HStack>\r\n                </InputGroup>\r\n              )}\r\n            />\r\n          </FormControl>\r\n        </div>\r\n        <div>\r\n          <FormControl>\r\n            <Controller\r\n              control={control}\r\n              name=\"designation\"\r\n              defaultValue={state.designation}\r\n              render={({ field: { onChange, value, ref } }) => (\r\n                <InputGroup>\r\n                  <HStack w=\"100%\" py={1}>\r\n                    <InputLeftAddon\r\n                      children=\"Designation\"\r\n                      minWidth={field_width}\r\n                    />\r\n                    <Select\r\n                      name=\"designation\"\r\n                      value={value}\r\n                      width=\"full\"\r\n                      onChange={onChange}\r\n                      borderColor=\"gray.400\"\r\n                      //textTransform=\"capitalize\"\r\n                      ref={ref}\r\n                      //placeholder=\"category\"\r\n                    >\r\n                      <option value=\"\">None</option>\r\n                      {designations &&\r\n                        designations.map((rec) => {\r\n                          return (\r\n                            <option key={rec.id} value={rec.name}>\r\n                              {rec.name}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                    </Select>\r\n                  </HStack>\r\n                </InputGroup>\r\n              )}\r\n            />\r\n          </FormControl>\r\n        </div>\r\n        <div>\r\n          <FormControl>\r\n            <Controller\r\n              control={control}\r\n              name=\"department\"\r\n              defaultValue={state.department}\r\n              render={({ field: { onChange, value, ref } }) => (\r\n                <InputGroup>\r\n                  <HStack w=\"100%\" py={1}>\r\n                    <InputLeftAddon\r\n                      children=\"Department\"\r\n                      minWidth={field_width}\r\n                    />\r\n                    <Select\r\n                      name=\"department\"\r\n                      value={value}\r\n                      width=\"full\"\r\n                      onChange={onChange}\r\n                      borderColor=\"gray.400\"\r\n                      //textTransform=\"capitalize\"\r\n                      ref={ref}\r\n                      //placeholder=\"category\"\r\n                    >\r\n                      <option value=\"\">None</option>\r\n                      {departments &&\r\n                        departments.map((rec) => {\r\n                          return (\r\n                            <option key={rec.id} value={rec.name}>\r\n                              {rec.name}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                    </Select>\r\n                  </HStack>\r\n                </InputGroup>\r\n              )}\r\n            />\r\n          </FormControl>\r\n        </div>\r\n        <div>\r\n          <FormControl>\r\n            <Controller\r\n              control={control}\r\n              name=\"basicsalary\"\r\n              defaultValue={state.basicsalary}\r\n              render={({ field: { onChange, value, ref } }) => (\r\n                <InputGroup>\r\n                  <HStack w=\"100%\" py={1}>\r\n                    <InputLeftAddon\r\n                      children=\"Basic Salary\"\r\n                      minWidth={field_width}\r\n                    />\r\n                    <Input\r\n                      name=\"basicsalary\"\r\n                      value={value}\r\n                      type=\"number\"\r\n                      width=\"full\"\r\n                      onChange={onChange}\r\n                      borderColor=\"gray.400\"\r\n                      //textTransform=\"capitalize\"\r\n                      ref={ref}\r\n                      placeholder=\"basic salary\"\r\n                    />\r\n                  </HStack>\r\n                </InputGroup>\r\n              )}\r\n            />\r\n          </FormControl>\r\n        </div>\r\n        <div>\r\n          <FormControl>\r\n            <Controller\r\n              control={control}\r\n              name=\"siteallows\"\r\n              defaultValue={state.siteallows}\r\n              render={({ field: { onChange, value, ref } }) => (\r\n                <InputGroup>\r\n                  <HStack w=\"100%\" py={1}>\r\n                    <InputLeftAddon\r\n                      children=\"Site Allowance\"\r\n                      minWidth={field_width}\r\n                    />\r\n                    <Input\r\n                      name=\"siteallows\"\r\n                      value={value}\r\n                      type=\"number\"\r\n                      width=\"full\"\r\n                      onChange={onChange}\r\n                      borderColor=\"gray.400\"\r\n                      //textTransform=\"capitalize\"\r\n                      ref={ref}\r\n                      placeholder=\"site allowance\"\r\n                    />\r\n                  </HStack>\r\n                </InputGroup>\r\n              )}\r\n            />\r\n          </FormControl>\r\n        </div>\r\n        <div>\r\n          <FormControl>\r\n            <Controller\r\n              control={control}\r\n              name=\"effectdate\"\r\n              defaultValue={state.effectdate}\r\n              render={({ field: { onChange, value, ref } }) => (\r\n                <InputGroup>\r\n                  <HStack w=\"100%\" py={1}>\r\n                    <InputLeftAddon\r\n                      children=\"Effective Date\"\r\n                      minWidth={field_width}\r\n                    />\r\n                    <Input\r\n                      name=\"effectdate\"\r\n                      value={value}\r\n                      type=\"date\"\r\n                      width=\"full\"\r\n                      onChange={onChange}\r\n                      borderColor=\"gray.400\"\r\n                      //textTransform=\"capitalize\"\r\n                      ref={ref}\r\n                      placeholder=\"effective date\"\r\n                    />\r\n                  </HStack>\r\n                </InputGroup>\r\n              )}\r\n            />\r\n          </FormControl>\r\n        </div>\r\n\r\n        <div>\r\n          <FormControl>\r\n            <Controller\r\n              control={control}\r\n              name=\"status\"\r\n              defaultValue={state.department}\r\n              render={({ field: { onChange, value, ref } }) => (\r\n                <InputGroup>\r\n                  <HStack w=\"100%\" py={1}>\r\n                    <InputLeftAddon children=\"Status\" minWidth={field_width} />\r\n                    <Select\r\n                      name=\"status\"\r\n                      value={value}\r\n                      width=\"full\"\r\n                      onChange={onChange}\r\n                      borderColor=\"gray.400\"\r\n                      //textTransform=\"capitalize\"\r\n                      ref={ref}\r\n                      //placeholder=\"category\"\r\n                    >\r\n                      <option value=\"\">None</option>\r\n                      {jobstatus &&\r\n                        jobstatus.map((rec) => {\r\n                          return (\r\n                            <option key={rec.id} value={rec.name}>\r\n                              {rec.name}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                    </Select>\r\n                  </HStack>\r\n                </InputGroup>\r\n              )}\r\n            />\r\n          </FormControl>\r\n          <FormControl>\r\n            <Controller\r\n              control={control}\r\n              name=\"isresign\"\r\n              defaultValue={isresign}\r\n              render={({ field: { onChange, value, ref } }) => (\r\n                <InputGroup>\r\n                  <HStack w=\"100%\" py={1}>\r\n                    <InputLeftAddon\r\n                      children=\"Resign ?\"\r\n                      minWidth={field_width}\r\n                    />\r\n                    <Checkbox\r\n                      name=\"isresign\"\r\n                      value={value}\r\n                      width=\"full\"\r\n                      onChange={(e) => {\r\n                        onChange(e.target.checked);\r\n                        setIsresign(e.target.checked);\r\n                      }}\r\n                      borderColor=\"gray.400\"\r\n                      //textTransform=\"capitalize\"\r\n                      ref={ref}\r\n                    ></Checkbox>\r\n                  </HStack>\r\n                </InputGroup>\r\n              )}\r\n            />\r\n          </FormControl>\r\n        </div>\r\n        <div>\r\n          <FormControl>\r\n            <Controller\r\n              control={control}\r\n              name=\"remark\"\r\n              defaultValue={state.remark}\r\n              render={({ field: { onChange, value, ref } }) => (\r\n                <InputGroup>\r\n                  <HStack w=\"100%\" py={1}>\r\n                    <InputLeftAddon children=\"Remark\" minWidth={field_width} />\r\n                    <Input\r\n                      name=\"remark\"\r\n                      value={value}\r\n                      width=\"full\"\r\n                      onChange={onChange}\r\n                      borderColor=\"gray.400\"\r\n                      //textTransform=\"capitalize\"\r\n                      ref={ref}\r\n                      placeholder=\"remark\"\r\n                    />\r\n                  </HStack>\r\n                </InputGroup>\r\n              )}\r\n            />\r\n          </FormControl>\r\n        </div>\r\n\r\n        <div>\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.button}\r\n            onClick={handleSubmit(onSubmit)}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 400,\r\n  },\r\n}));\r\n\r\nexport default JobhistoryForm;\r\n","import React, { useState, useEffect, useMemo } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport {\r\n  Heading,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { AiFillEdit, AiFillDelete, AiOutlinePlus } from \"react-icons/ai\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useJobhistory } from \"./jobhistory/useJobhistory\";\r\nimport { useUpdateJobhistory } from \"./jobhistory/useUpdateJobhistory\";\r\nimport { useAddJobhistory } from \"./jobhistory/useAddJobhistory\";\r\nimport { useDeleteJobhistory } from \"./jobhistory/useDeleteJobhistory\";\r\nimport JobhistoryForm from \"./JobhistoryForm\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\n\r\nconst initial_jobhistory = {\r\n  empid: \"\",\r\n  name: \"\",\r\n  designation: \"\",\r\n  department: \"\",\r\n  status: \"\",\r\n  remark: \"\",\r\n  basicsalary: 0,\r\n  siteallows: 0,\r\n  isresign: false,\r\n};\r\n\r\nexport default function Emp_Jobhistory({\r\n  empid,\r\n  staffname,\r\n  basicsalary,\r\n  siteallows,\r\n  department,\r\n  designation,\r\n  jobhistorydata,\r\n  setJobhistorydata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const { jobhistory, filter, setFilter, setJobId } = useJobhistory();\r\n  //const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const updateJobhistory = useUpdateJobhistory();\r\n  const addJobhistory = useAddJobhistory();\r\n  const deleteJobhistory = useDeleteJobhistory();\r\n  const [state, setState] = useState({});\r\n  const [statustype, setStatusType] = useState(\"\");\r\n  const { editEmployeeID } = useEmployeesContext();\r\n  const {\r\n    isOpen: isJobOpen,\r\n    onOpen: onJobOpen,\r\n    onClose: onJobClose,\r\n  } = useDisclosure();\r\n  const {\r\n    isOpen: isAlertDeleteOpen,\r\n    onOpen: onAlertDeleteOpen,\r\n    onClose: onAlertDeleteClose,\r\n  } = useDisclosure();\r\n\r\n  const columns = useMemo(() => [\r\n    {\r\n      title: \"Designation\",\r\n      field: \"designation\",\r\n    },\r\n    {\r\n      title: \"Department\",\r\n      field: \"department\",\r\n    },\r\n    {\r\n      title: \"Effective Date\",\r\n      field: \"effectdate\",\r\n      type: \"date\",\r\n      dateSetting: { locale: \"en-GB\" },\r\n      editComponent: (props) => (\r\n        <TextField\r\n          defaultValue={props.value || new Date()}\r\n          onChange={(e) => props.onChange(e.target.value)}\r\n          type=\"date\"\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      title: \"Status\",\r\n      field: \"status\",\r\n    },\r\n    {\r\n      title: \"Remark\",\r\n      field: \"remark\",\r\n    },\r\n  ],[]);\r\n\r\n  useEffect(() => {\r\n    setJobId(editEmployeeID);\r\n  }, []);\r\n\r\n  const add_Jobhistory = (data) => {\r\n    console.log(\"addjob\", data);\r\n    addJobhistory({\r\n      ...data,\r\n    });\r\n  };\r\n\r\n  const delete_Jobhistory = (id) => {\r\n    deleteJobhistory(id);\r\n  };\r\n\r\n  const update_Jobhistory = (data) => {\r\n    const { id, rec_id, tableData, ...fields } = data;\r\n    updateJobhistory({ id, ...fields });\r\n  };\r\n\r\n  const handleAddJobhistory = () => {\r\n    const data = {\r\n      ...initial_jobhistory,\r\n      name: staffname,\r\n      empid: empid,\r\n      basicsalary: basicsalary,\r\n      siteallows: siteallows,\r\n      department: department,\r\n      designation: designation,\r\n    };\r\n    setState(data);\r\n    onJobOpen(true);\r\n  };\r\n\r\n  const handleUpdateJobhistory = (data) => {\r\n    setState(data);\r\n    onJobOpen(true);\r\n  };\r\n\r\n  const handleDeleteJobhistory = (rowData) => {\r\n    setState((prev) => (prev = { ...rowData }));\r\n    onAlertDeleteOpen();\r\n  };\r\n\r\n  const handleOnDeleteConfirm = () => {\r\n    const { id } = state;\r\n    delete_Jobhistory(id);\r\n    // toast({\r\n    //   title: \"Order being deleted!\",\r\n    //   status: \"warning\",\r\n    // });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={jobhistory}\r\n          title=\"Employment History\"\r\n          actions={[\r\n            {\r\n              icon: () => <AiOutlinePlus size=\"30px\" />,\r\n              tooltip: \"Add Record\",\r\n              isFreeAction: true,\r\n              onClick: (event, rowData) => {\r\n                setStatusType((prev) => (prev = \"add\"));\r\n                handleAddJobhistory(rowData);\r\n              },\r\n            },\r\n            (rowData) => ({\r\n              //disabled: rowData.status !== \"Pending\",\r\n              icon: () => <AiFillEdit size=\"30px\" />,\r\n              tooltip: \"Edit Record\",\r\n              onClick: (event, rowData) => {\r\n                setStatusType((prev) => (prev = \"edit\"));\r\n                handleUpdateJobhistory(rowData);\r\n              },\r\n            }),\r\n            (rowData) => ({\r\n              //disabled: rowData.status !== \"Pending\",\r\n              icon: () => <AiFillDelete />,\r\n              tooltip: \"Delete Record\",\r\n              onClick: (event, rowData) => {\r\n                handleDeleteJobhistory(rowData);\r\n              },\r\n            }),\r\n          ]}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n      <Modal\r\n        closeOnOverlayClick={false}\r\n        isOpen={isJobOpen}\r\n        onClose={onJobClose}\r\n        size=\"lg\"\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          {/* <ModalHeader>Product Form</ModalHeader> */}\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            <JobhistoryForm\r\n              state={state}\r\n              setState={setState}\r\n              statustype={statustype}\r\n              add_Item={add_Jobhistory}\r\n              update_Item={update_Jobhistory}\r\n              onJobClose={onJobClose}\r\n            />\r\n          </ModalBody>\r\n\r\n          {/* <ModalFooter>\r\n            <Button colorScheme=\"blue\" mr={3} onClick={onProductClose}>\r\n              Close\r\n            </Button>\r\n          </ModalFooter> */}\r\n        </ModalContent>\r\n      </Modal>\r\n      <AlertDialogBox\r\n        onClose={onAlertDeleteClose}\r\n        onConfirm={handleOnDeleteConfirm}\r\n        isOpen={isAlertDeleteOpen}\r\n        title=\"Delete Employment History\"\r\n      >\r\n        <Heading size=\"md\">\r\n          Are you sure you want to delete this history record ?\r\n        </Heading>\r\n      </AlertDialogBox>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n"],"sourceRoot":""}