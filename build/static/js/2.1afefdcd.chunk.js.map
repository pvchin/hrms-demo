{"version":3,"sources":["components/expenses/useExpensesPeriod.js","components/ExpenseTableViewSummary.js","components/ExpenseFormView.js"],"names":["expperiodMthId","expperiodYrId","a","axios","get","expenses_url","data","useExpensesPeriod","payrun","useState","expperiodfilter","setExpPeriodFilter","setExpPeriodYrId","setExpPeriodMthId","selectFn","useCallback","unfiltered","filterByStatus","useQuery","queryKeys","expensesperiod","getExpensesPeriod","select","undefined","initial_form","name","date","purchased_from","description","status","amount","attachment1_name","attachment1_url","attachment2_name","attachment2_url","attachment3_name","attachment3_url","ExpenseTableView","year","month","classes","useStyles","toast","useCustomToast","useRecoilState","loginLevelState","loginLevel","setTotals","isCalc","setIsCalc","isDialogOpen","setIsDialogOpen","formdata","setFormdata","updateExpenses","useDeleteExpenses","useUpdateExpenses","useExpensesAttachments","setAttachmentId","expensesattachments","useDeleteExpensesAttachment","setExpattachId","isAlertOpen","setIsAlertOpen","useDisclosure","defaultIsOpen","isErrOpen","isOpen","onClose","onOpen","useExpensesContext","editExpenseID","setEditExpenseID","setIsExpenseEditingOn","columns","setIsExpenseEditingOff","useMemo","title","field","type","dateSetting","locale","useEffect","Calc_Totals","reduce","acc","r","handleDialogClose","View_Expenses","id","handleAlertOpen","className","root","maxW","pt","overflow","actions","rowData","icon","size","tooltip","onClick","event","hidden","attachmentid","fields","rec_id","tableData","editData","posted","Delete_Expenses","options","filtering","search","toolbar","paging","headerStyle","backgroundColor","color","showTitle","CustomDialog","handleClose","showButton","isFullscreen","isFullwidth","ExpenseFormView","AlertDialogBox","onConfirm","upddata","makeStyles","theme","padding","FileViewers","React","lazy","button","margin","spacing","leftIcon","marginRight","rightIcon","marginLeft","iconSmall","fontSize","container","display","flexWrap","textField","width","ExpenseForm","addExpenses","useAddExpenses","isExpenseEditing","files","setFiles","viewImageState","image","setImage","isViewImageOpen","onViewImageOpen","onViewImageClose","useForm","defaultValues","handleSubmit","control","setValue","newData","filter","rec","map","preview","url","variant","component","onSubmit","e","preventDefault","length","console","log","empid","loginUserId","loginUser","templateColumns","gap","colSpan","defaultValue","render","onChange","error","value","fieldState","label","helperText","message","InputProps","readOnly","InputLabelProps","shrink","rules","required","currencySymbol","outputFormat","decimalCharacter","digitGroupSeparator","decimalPlaces","style","parseFloat","currency","target","remark","file","w","h","mb","mr","p","border","borderRadius","src","alt","aria-label","newImage","prev","handleViewImage","split","pop","closeOnOverlayClick","pb","imagefile"],"mappings":"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","file":"static/js/2.1afefdcd.chunk.js","sourcesContent":["import { useState, useCallback } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport { expenses_url } from \"../../utils/constants\";\r\nimport { filterByStatus } from \"./utils\";\r\n\r\nimport axios from \"axios\";\r\nimport { queryKeys } from \"../react-query/constants\";\r\n\r\nasync function getExpensesPeriod(expperiodMthId, expperiodYrId) {\r\n  const { data } = await axios.get(`${expenses_url}?m=${expperiodMthId}&y=${expperiodYrId}`);\r\n  //const { data } = await axios.get(`${expenses_url}`);\r\n  return data;\r\n}\r\n\r\nexport function useExpensesPeriod(payrun) {\r\n  const [expperiodfilter, setExpPeriodFilter] = useState(\"all\");\r\n    const [expperiodYrId, setExpPeriodYrId] = useState(\"\");\r\n     const [expperiodMthId, setExpPeriodMthId] = useState(\"\");\r\n\r\n  const selectFn = useCallback(\r\n    (unfiltered) => filterByStatus(unfiltered, expperiodfilter),\r\n    [expperiodfilter]\r\n  );\r\n\r\n  const fallback = [];\r\n  const { data: expensesperiod = fallback } = useQuery(\r\n    [queryKeys.expensesperiod, expperiodMthId, expperiodYrId],\r\n    //queryKeys.expenses_payrun,\r\n      () => getExpensesPeriod(expperiodMthId,expperiodYrId),\r\n    {\r\n      select: expperiodfilter !== \"all\" ? selectFn : undefined,\r\n    }\r\n  );\r\n\r\n  return {\r\n    expensesperiod,\r\n    expperiodfilter,\r\n    setExpPeriodFilter,\r\n    setExpPeriodYrId,\r\n    setExpPeriodMthId,\r\n  };\r\n}\r\n","import React, { useState, useEffect, useMemo } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport {\r\n  Alert,\r\n  AlertIcon,\r\n  AlertTitle,\r\n  AlertDescription,\r\n  Box,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\n//import AddIcon from \"@material-ui/icons/Add\";\r\n//import { EditIcon } from \"@material-ui/icons\";\r\nimport { GrFormView, GrTrash } from \"react-icons/gr\";\r\n//import DeleteIcon from \"@material-ui/icons/Delete\";\r\n//import CheckIcon from \"@material-ui/icons/Check\";\r\n//import SearchIcon from \"@material-ui/icons/Search\";\r\n//import LeaveForm from \"./LeaveForm\";\r\n//import { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { AlertDialog } from \"../helpers/AlertDialogBox\";\r\n//import { useExpensesStatus } from \"./expenses/useExpensesStatus\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport { AlertDialogBox } from \"../helpers/AlertDialogBox\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useExpensesPeriod } from \"./expenses/useExpensesPeriod\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\nimport ExpenseFormView from \"./ExpenseFormView\";\r\nimport { useDeleteExpenses } from \"./expenses/useDeleteExpenses\";\r\nimport { useUpdateExpenses } from \"./expenses/useUpdateExpenses\";\r\nimport { useExpensesAttachments } from \"./expensesattachments/useExpensesAttachments\";\r\nimport { useDeleteExpensesAttachment } from \"./expensesattachments/useDeleteExpensesAttachment\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\n\r\n//const FILTERSTRING = \"Pending\";\r\n\r\nconst initial_form = {\r\n  name: \"\",\r\n  date: \"\",\r\n  purchased_from: \"\",\r\n  description: \"\",\r\n  status: \"Pending\",\r\n  amount: 0,\r\n  attachment1_name: \"\",\r\n  attachment1_url: \"\",\r\n  attachment2_name: \"\",\r\n  attachment2_url: \"\",\r\n  attachment3_name: \"\",\r\n  attachment3_url: \"\",\r\n};\r\n\r\nexport default function ExpenseTableView({ year, month }) {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  //const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  //const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const [totals, setTotals] = useState(0);\r\n  const [isCalc, setIsCalc] = useState(false);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  //const { loadEmployees } = useEmployeesContext();\r\n  //const { expensesstatus, setExpStatusId } = useExpensesStatus();\r\n  const [formdata, setFormdata] = useState(initial_form);\r\n  const deleteExpenses = useDeleteExpenses();\r\n  const updateExpenses = useUpdateExpenses();\r\n  const { expensesattachments, setAttachmentId } = useExpensesAttachments();\r\n  const deleteExpensesAttachment = useDeleteExpensesAttachment();\r\n  const [expattachId, setExpattachId] = useState(\"\");\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const {\r\n    isOpen: isErrOpen,\r\n    onClose: onErrClose,\r\n    onOpen: onErrOpen,\r\n  } = useDisclosure({ defaultIsOpen: false });\r\n  const { expensesperiod, setExpPeriodYrId, setExpPeriodMthId } =\r\n    useExpensesPeriod();\r\n  const {\r\n    //expenses,\r\n    editExpenseID,\r\n    //updateExpense,\r\n    //addExpense,\r\n    //deleteExpense,\r\n    setEditExpenseID,\r\n    setIsExpenseEditingOn,\r\n    setIsExpenseEditingOff,\r\n  } = useExpensesContext();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Name\",\r\n        field: \"name\",\r\n      },\r\n      {\r\n        title: \"Date\",\r\n        field: \"date\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n      },\r\n\r\n      { title: \"Description\", field: \"description\" },\r\n      { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n      { title: \"Status\", field: \"status\" },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    setExpPeriodYrId(year);\r\n    setExpPeriodMthId(month);\r\n    setIsCalc(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (expensesperiod) {\r\n      Calc_Totals();\r\n      setIsCalc(false);\r\n    }\r\n  }, [isCalc]);\r\n\r\n  const Calc_Totals = () => {\r\n    const amount = expensesperiod.reduce((acc, r) => {\r\n      if (r.status === \"Approved\" || r.status === \"Approve\") {\r\n        return acc + r.amount;\r\n      } else {\r\n        return acc;\r\n      }\r\n    }, 0);\r\n    setTotals(amount);\r\n  };\r\n\r\n  const handleDialogOpen = () => {\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n  };\r\n\r\n  const View_Expenses = (data) => {\r\n    const { id } = data;\r\n    setFormdata({ ...data });\r\n    setFormdata({ ...data });\r\n    setEditExpenseID(id);\r\n    setIsExpenseEditingOn();\r\n    handleDialogOpen();\r\n  };\r\n\r\n  const Delete_Expenses = (data) => {\r\n    //console.log(\"del data\", data);\r\n    const { id, attachmentid, rec_id, tableData, ...fields } = data;\r\n    const editData = { ...fields, posted: \"D\" };\r\n\r\n    setFormdata({ ...editData });\r\n    setFormdata({ ...editData });\r\n    setEditExpenseID(id);\r\n    setAttachmentId(attachmentid);\r\n    setExpattachId(attachmentid);\r\n    data.payrun\r\n      ? toast({\r\n        title: \"This expense has been paid. It can not be deleted!\",\r\n        status: \"error\",\r\n      }) : handleAlertOpen();\r\n  };\r\n\r\n  const handleAlertOpen = () => {\r\n    setIsAlertOpen(true);\r\n  };\r\n  const handleAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleOnDeleteConfirm = () => {\r\n    const upddata = { ...formdata, posted: \"D\" };\r\n    updateExpenses({ id: editExpenseID, ...upddata });\r\n    // const id = editExpenseID;\r\n    // deleteExpenses(id);\r\n    // expensesattachments\r\n    //   .filter((r) => r.attachmentid === expattachId)\r\n    //   .forEach((rec) => {\r\n    //     const id = rec.id;\r\n    //     deleteExpensesAttachment(id);\r\n    //   });\r\n  };\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <Box maxW=\"100%\" pt=\"5px\" overflow=\"scroll\">\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={expensesperiod}\r\n          title=\"Leave Application\"\r\n          actions={[\r\n            (rowData) => ({\r\n              icon: () => <GrFormView size=\"33px\" />,\r\n              tooltip: \"View\",\r\n              onClick: (event, rowData) => {\r\n                View_Expenses(rowData);\r\n              },\r\n            }),\r\n            (rowData) => ({\r\n              icon: () => <GrTrash size=\"23px\" />,\r\n              hidden: loginLevel.loginLevel !== \"Manager\",\r\n              tooltip: \"Delete\",\r\n              onClick: (event, rowData) => {\r\n                Delete_Expenses(rowData);\r\n              },\r\n            }),\r\n          ]}\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            paging: false,\r\n            headerStyle: {\r\n              backgroundColor: \"rgba(75, 192, 192, 1)\",\r\n              color: \"white\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </Box>\r\n      <CustomDialog\r\n        isOpen={isDialogOpen}\r\n        handleClose={handleDialogClose}\r\n        title=\"\"\r\n        showButton={true}\r\n        isFullscreen={false}\r\n        isFullwidth={false}\r\n      >\r\n        <ExpenseFormView\r\n          formdata={formdata}\r\n          setFormdata={setFormdata}\r\n          handleDialogClose={handleDialogClose}\r\n        />\r\n      </CustomDialog>\r\n      <AlertDialogBox\r\n        onClose={handleAlertClose}\r\n        onConfirm={handleOnDeleteConfirm}\r\n        isOpen={isAlertOpen}\r\n        title=\"Delete Expenses\"\r\n      >\r\n        <h2>\r\n          Are you sure you want to delete {formdata.name} expense dated on{\" \"}\r\n          {formdata.date} with amount ${formdata.amount} ?\r\n        </h2>\r\n      </AlertDialogBox>\r\n      {isErrOpen && (\r\n        <Alert status=\"error\">\r\n          <AlertIcon />\r\n          <Box>\r\n            <AlertDescription>\r\n              This Expenses has been paid! It can not be deleted!\r\n            </AlertDescription>\r\n          </Box>\r\n          {/* <CloseButton\r\n            alignSelf=\"flex-start\"\r\n            position=\"relative\"\r\n            right={-1}\r\n            top={-1}\r\n            onClick={onClose}\r\n          /> */}\r\n        </Alert>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Button, Icon, TextField, Paper, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport * as emailjs from \"emailjs-com\";\r\nimport axios from \"axios\";\r\nimport currency from \"currency.js\";\r\nimport CurrencyTextField from \"@unicef/material-ui-currency-textfield\";\r\n//import { Box, Grid, GridItem, Heading } from \"@chakra-ui/react\";\r\nimport {\r\n  Box,\r\n  Image,\r\n  IconButton,\r\n  HStack,\r\n  VStack,\r\n  Grid,\r\n  GridItem,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { FiEye, FiTrash2 } from \"react-icons/fi\";\r\nimport { viewImageState } from \"../components/data/atomdata\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useCustomToast } from \"../helpers/useCustomToast\";\r\n//import { useExpenses } from \"./expenses/useExpenses\";\r\nimport { useAddExpenses } from \"./expenses/useAddExpenses\";\r\nimport { useDeleteExpenses } from \"./expenses/useDeleteExpenses\";\r\nimport { useUpdateExpenses } from \"./expenses/useUpdateExpenses\";\r\nimport { useExpensesAttachments } from \"./expensesattachments/useExpensesAttachments\";\r\n\r\nconst FileViewers = React.lazy(() => import(\"../helpers/FileViewers\"));\r\n\r\nconst SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICEID;\r\nconst TEMPLATE_ID = \"template_1y8odlq\";\r\nconst USER_ID = process.env.REACT_APP_EMAILJS_USERID;\r\nconst UPLOADURL = \"https://api.cloudinary.com/v1_1/dlmzwvakr/image/upload\";\r\nconst DOWNLOADURL = \"https://res.cloudinary.com/v1_1/dlmzwvakr/image/upload\";\r\nconst UPLOADPRESET = \"appsmiths\";\r\n// const initial_values = {\r\n//   name: \"\",\r\n//   date: \"\",\r\n//   purchased_date: \"\",\r\n//   purchased_from: \"\",\r\n//   description: \"\",\r\n//   remark: \"\",\r\n//   status: \"Pending\",\r\n//   amount: 0,\r\n//};\r\n\r\nconst ExpenseForm = ({ formdata, setFormdata, handleDialogClose }) => {\r\n  const classes = useStyles();\r\n  const toast = useCustomToast();\r\n  //const { acceptedFiles, getRootProps, getInputProps } = useDropzone();\r\n  //const { expenses, filter, setFilter, setExpenseId } = useExpenses();\r\n  const updateExpenses = useUpdateExpenses();\r\n  const addExpenses = useAddExpenses();\r\n  const delExpenses = useDeleteExpenses();\r\n  const { expensesattachments, setAttachmentId } = useExpensesAttachments();\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n  const { isExpenseEditing, editExpenseID } = useExpensesContext();\r\n  const [files, setFiles] = useState([]);\r\n  const [filename, setFilename] = useState(\"\");\r\n  const [newFile, setNewFile] = useState({});\r\n  const [image, setImage] = useRecoilState(viewImageState);\r\n  const {\r\n    isOpen: isViewImageOpen,\r\n    onOpen: onViewImageOpen,\r\n    onClose: onViewImageClose,\r\n  } = useDisclosure();\r\n  const { handleSubmit, control, setValue } = useForm({\r\n    defaultValues: {\r\n      ...formdata,\r\n    },\r\n  });\r\n\r\n  //console.log(\"formdata\", formdata);\r\n  //console.log(\"files\", files);\r\n\r\n  const onDrop = (acceptedFiles) => {\r\n    acceptedFiles.forEach((file) => {\r\n      const formData = new FormData();\r\n      formData.append(\"file\", file);\r\n      formData.append(\"upload_preset\", UPLOADPRESET);\r\n      axios({\r\n        url: UPLOADURL,\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        },\r\n        data: formData,\r\n      })\r\n        .then((res) => {\r\n          //console.log(\"res\", res.data);\r\n          // Object.assign(file, {\r\n          //   preview: res.data.url,\r\n          // });\r\n          setFiles(\r\n            (prev) =>\r\n              (prev = [\r\n                ...files,\r\n                ...[\r\n                  { name: res.data.original_filename, preview: res.data.url },\r\n                ],\r\n              ])\r\n          );\r\n        })\r\n        .catch((err) => {\r\n          setNewFile({});\r\n          console.log(err);\r\n        });\r\n      // Object.assign(file, {\r\n      //   preview: URL.createObjectURL(file),\r\n      // });\r\n    });\r\n\r\n    //const allfiles = [...files, ...acceptedFiles];\r\n    //setFiles(allfiles);\r\n  };\r\n\r\n  const upLoad = () => {\r\n    const uploadURL = \"https://api.cloudinary.com/v1_1/dlmzwvakr/image/upload\";\r\n    const uploadPreset = \"appsmiths\";\r\n\r\n    files.forEach((file) => {\r\n      const formData = new FormData();\r\n      formData.append(\"file\", file);\r\n      formData.append(\"upload_preset\", uploadPreset);\r\n\r\n      axios({\r\n        url: uploadURL,\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        },\r\n        data: formData,\r\n      })\r\n        .then((res) => {\r\n          setFilename((prev) => (prev = res.data.public_id));\r\n          console.log(res.data.public_id);\r\n          //console.log(\"filename\", filename);\r\n        })\r\n        .catch((err) => console.log(err));\r\n    });\r\n  };\r\n\r\n  const handleSentEmail = (data) => {\r\n    const { date } = data;\r\n    //console.log(\"expense form\", loginLevel);\r\n    var emaildata = {\r\n      to_name: loginLevel.loginUser,\r\n      to_email: loginLevel.loginEmail,\r\n      message: `Your expenses claim application dated on ${date} has been successfully submitted for approval`,\r\n      cc_to: loginLevel.reporting_email,\r\n    };\r\n\r\n    emailjs.send(SERVICE_ID, TEMPLATE_ID, emaildata, USER_ID).then(\r\n      function (response) {\r\n        //console.log(response.status, response.text);\r\n        toast({\r\n          title: `Email has sent successfully to ${emaildata.to_email}!`,\r\n          status: \"success\",\r\n        });\r\n      },\r\n      function (err) {\r\n        console.log(err);\r\n        toast({\r\n          title: `Email has fail to send to ${emaildata.to_email}!`,\r\n          status: \"warning\",\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  const onSubmit = (data, e) => {\r\n    e.preventDefault();\r\n    //console.log(\"onSubmit\", isExpenseEditing);\r\n    let newData = {\r\n      ...data,\r\n      attachment1_name: files.length >= 1 ? files[0].name : \"\",\r\n      attachment1_url: files.length >= 1 ? files[0].preview : \"\",\r\n      attachment2_name: files.length >= 2 ? files[1].name : \"\",\r\n      attachment2_url: files.length >= 2 ? files[1].preview : \"\",\r\n      attachment3_name: files.length >= 3 ? files[2].name : \"\",\r\n      attachment3_url: files.length >= 3 ? files[2].preview : \"\",\r\n    };\r\n    console.log(\"newdata\", newData);\r\n    console.log(\"isEditing\", isExpenseEditing);\r\n    if (isExpenseEditing) {\r\n      //console.log(\"edit\");\r\n      const { rec_id, tableData, ...editData } = newData;\r\n      updateExpenses({ id: editExpenseID, ...editData });\r\n    } else {\r\n      //console.log(\"new\");\r\n      addExpenses({\r\n        ...newData,\r\n        empid: loginLevel.loginUserId,\r\n        name: loginLevel.loginUser,\r\n      });\r\n    }\r\n    // if (isExpenseEditing) {\r\n    //   const { rec_id, tableData, ...editData } = newData;\r\n    //   console.log(\"edit\", ...editData);\r\n    //   updateExpenses({ id: editExpenseID, ...editData });\r\n    // } else {\r\n    //   console.log(\"new\");\r\n    //   addExpenses({\r\n    //     ...newData,\r\n    //     empid: loginLevel.loginUserId,\r\n    //     name: loginLevel.loginUser,\r\n    //   });\r\n    //   handleSentEmail(data);\r\n    // }\r\n\r\n    handleDialogClose();\r\n  };\r\n\r\n  const handleViewImage = ({ preview, name }) => {\r\n    const newImage = { url: preview, name: name };\r\n    setImage((prev) => newImage);\r\n    onViewImageOpen();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isExpenseEditing) {\r\n      setAttachmentId(formdata.attachmentid);\r\n      const newData = expensesattachments\r\n        .filter((rec) => rec.attachmentid === formdata.attachmentid)\r\n        .map((rec) => {\r\n          return {\r\n            name: rec.name,\r\n            preview: rec.url,\r\n          };\r\n        });\r\n      \r\n      setFiles(newData);\r\n    } else {\r\n      setFiles([]);\r\n    }\r\n  }, [expensesattachments]);\r\n\r\n  return (\r\n    <div>\r\n      <Box size=\"x1\">\r\n        <Typography variant=\"h5\" component=\"h3\">\r\n          EXPENSES CLAIM FORM\r\n        </Typography>\r\n        <Typography component=\"p\">Expense Claim Application</Typography>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <Grid templateColumns=\"repeat(3, 1fr)\" gap={4}>\r\n            <GridItem colSpan={1}>\r\n              <div>\r\n                <Controller\r\n                  name=\"name\"\r\n                  control={control}\r\n                  defaultValue={formdata.name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Name\"\r\n                        id=\"margin-normal1\"\r\n                        name=\"name\"\r\n                        defaultValue={formdata.name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"date\"\r\n                  control={control}\r\n                  defaultValue={formdata.date}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Date\"\r\n                        type=\"date\"\r\n                        id=\"margin-normal2\"\r\n                        name=\"formdata.date\"\r\n                        value={value}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    );\r\n                  }}\r\n                  rules={{ required: \"From Date is required\" }}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Controller\r\n                  name=\"purchased_from\"\r\n                  control={control}\r\n                  defaultValue={formdata.purchased_from}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Purchased From\"\r\n                        id=\"margin-normal3\"\r\n                        name=\"purchased_from\"\r\n                        defaultValue={formdata.purchased_from}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  // rules={{ required: \"Reason is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"description\"\r\n                  control={control}\r\n                  defaultValue={formdata.description}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Description\"\r\n                        id=\"margin-normal4\"\r\n                        name=\"description\"\r\n                        defaultValue={formdata.description}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  // rules={{ required: \"Reason is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"amount\"\r\n                  control={control}\r\n                  defaultValue={formdata.amount}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      // <TextField\r\n                      //   label=\"Amount\"\r\n                      //   type=\"number\"\r\n                      //   id=\"standard-number1\"\r\n                      //   name=\"amount\"\r\n                      //   defaultValue={formdata.amount}\r\n                      //   className={classes.textField}\r\n                      //   //onChange={onChange}\r\n                      //   onChange={(e) => {\r\n                      //     onChange(parseInt(e.target.value, 10));\r\n                      //   }}\r\n                      //   error={!!error}\r\n                      //   helperText={error ? error.message : null}\r\n                      // />\r\n                      <CurrencyTextField\r\n                        label=\"Amount\"\r\n                        variant=\"standard\"\r\n                        value={formdata.amount}\r\n                        currencySymbol=\"$\"\r\n                        outputFormat=\"string\"\r\n                        decimalCharacter=\".\"\r\n                        digitGroupSeparator=\",\"\r\n                        decimalPlaces=\"2\"\r\n                        className={classes.textField}\r\n                        id=\"standard-amount\"\r\n                        name=\"amount\"\r\n                        style={{ width: 100 }}\r\n                        //onChange={onChange}\r\n                        onChange={(e) => {\r\n                          onChange(parseFloat(currency(e.target.value), 10));\r\n                        }}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"IC No required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"remark\"\r\n                  control={control}\r\n                  defaultValue={formdata.remark}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Remark\"\r\n                        id=\"margin-normal5\"\r\n                        name=\"remark\"\r\n                        defaultValue={formdata.remark}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                      />\r\n                    );\r\n                  }}\r\n                  // rules={{ required: \"Reason is required\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Controller\r\n                  name=\"status\"\r\n                  control={control}\r\n                  defaultValue={formdata.status}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Status\"\r\n                        id=\"margin-normal6\"\r\n                        name=\"status\"\r\n                        defaultValue={formdata.status}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                  //rules={{ required: \"Status is required\" }}\r\n                />\r\n              </div>\r\n              {/* <div>\r\n                <Controller\r\n                  name=\"attachment1_name\"\r\n                  control={control}\r\n                  defaultValue={files.length >= 1 ? files[0].name : \"\"}\r\n                  defaultValue={formdata.attachment1_name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Attachment #1\"\r\n                        id=\"margin-normal6\"\r\n                        name=\"attachment1_name\"\r\n                        defaultValue={files.length >= 1 ? files[0].name : \"\"}\r\n                        defaultValue={formdata.attachment1_name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                />\r\n              </div> */}\r\n              {/*  <div>\r\n                <Controller\r\n                  name=\"attachment2_name\"\r\n                  control={control}\r\n                  defaultValue={formdata.attachment2_name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Attachment #2\"\r\n                        id=\"margin-normal6\"\r\n                        name=\"attachment2_name\"\r\n                        defaultValue={formdata.attachment2_name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                />\r\n              </div> */}\r\n              {/* <div>\r\n                <Controller\r\n                  name=\"attachment3_name\"\r\n                  control={control}\r\n                  defaultValue={formdata.attachment3_name}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => {\r\n                    return (\r\n                      <TextField\r\n                        label=\"Attachment #3\"\r\n                        id=\"margin-normal6\"\r\n                        name=\"attachment3_name\"\r\n                        defaultValue={formdata.attachment3_name}\r\n                        className={classes.textField}\r\n                        onChange={onChange}\r\n                        error={!!error}\r\n                        helperText={error ? error.message : null}\r\n                        InputProps={{\r\n                          readOnly: true,\r\n                        }}\r\n                      ></TextField>\r\n                    );\r\n                  }}\r\n                />\r\n              </div> */}\r\n\r\n              <div>\r\n                {/* <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.button}\r\n                  //onClick={() => handleSubmit(onSubmit)()}\r\n                >\r\n                  Save <Icon className={classes.rightIcon}>send</Icon>\r\n                </Button> */}\r\n              </div>\r\n            </GridItem>\r\n            <GridItem colSpan={2}>\r\n              {/* <ImageUpload files={files} setFiles={setFiles} onDrop={onDrop} /> */}\r\n              {files\r\n                .filter((rec) => rec.name !== undefined && rec.name !== null)\r\n                .map((file) => {\r\n                  return (\r\n                    <Box\r\n                      display=\"inline-flex\"\r\n                      w=\"50%\"\r\n                      h={150}\r\n                      mb={8}\r\n                      mr={8}\r\n                      p={4}\r\n                      border=\"1px solid #eaeaea\"\r\n                      borderRadius={2}\r\n                      key={file.name}\r\n                    >\r\n                      <HStack p={5}>\r\n                        <Image\r\n                          src={file.preview}\r\n                          alt={file.name}\r\n                          display=\"block\"\r\n                          w=\"auto\"\r\n                          h=\"100%\"\r\n                        />\r\n                        <VStack>\r\n                          <IconButton\r\n                            size=\"sm\"\r\n                            aria-label=\"view image\"\r\n                            icon={<FiEye />}\r\n                            onClick={() =>\r\n                              handleViewImage({\r\n                                preview: file.preview,\r\n                                name: file.name,\r\n                                type: file.preview.split(\".\").pop(),\r\n                              })\r\n                            }\r\n                          />\r\n                          {/* <IconButton\r\n                            size=\"sm\"\r\n                            aria-label=\"delete image\"\r\n                            icon={<FiTrash2 />}\r\n                            onClick={() => handleDelImage(file.name)}\r\n                          /> */}\r\n                        </VStack>\r\n                      </HStack>\r\n                    </Box>\r\n                  );\r\n                })}\r\n            </GridItem>\r\n          </Grid>\r\n        </form>\r\n      </Box>\r\n      <Modal\r\n        closeOnOverlayClick={false}\r\n        isOpen={isViewImageOpen}\r\n        onClose={onViewImageClose}\r\n        size=\"3xl\"\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>{image.name}</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody pb={6}>\r\n            <Box\r\n              display=\"inline-flex\"\r\n              w=\"100%\"\r\n              h=\"800\"\r\n              mb={8}\r\n              mr={8}\r\n              p={4}\r\n              border=\"1px solid #eaeaea\"\r\n              borderRadius={2}\r\n            >\r\n              <FileViewers imagefile={image} />\r\n            </Box>\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button onClick={onViewImageClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 400,\r\n  },\r\n}));\r\n\r\nexport default ExpenseForm;\r\n"],"sourceRoot":""}