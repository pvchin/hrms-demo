{"version":3,"sources":["components/expenses/useExpensesPeriod.js","components/ExpenseTableViewSummary.js"],"names":["expperiodMthId","expperiodYrId","a","axios","get","expenses_url","data","useExpensesPeriod","payrun","useState","expperiodfilter","setExpPeriodFilter","setExpPeriodYrId","setExpPeriodMthId","selectFn","useCallback","unfiltered","filterByStatus","useQuery","queryKeys","expensesperiod","getExpensesPeriod","select","undefined","columns","title","field","type","dateSetting","locale","ExpenseTableView","year","month","classes","useStyles","setTotals","isCalc","setIsCalc","useEffect","Calc_Totals","amount","reduce","acc","r","status","className","root","maxW","pt","overflow","options","filtering","search","toolbar","paging","headerStyle","backgroundColor","color","showTitle","makeStyles","theme","padding"],"mappings":"wTAQA,WAAiCA,EAAgBC,GAAjD,iBAAAC,EAAA,sEACyBC,IAAMC,IAAN,UAAaC,IAAb,cAA+BL,EAA/B,cAAmDC,IAD5E,uBACUK,EADV,EACUA,KADV,kBAGSA,GAHT,4C,sBAMO,SAASC,EAAkBC,GAAS,IAAD,EACMC,mBAAS,OADf,mBACjCC,EADiC,KAChBC,EADgB,OAEIF,mBAAS,IAFb,mBAE/BR,EAF+B,KAEhBW,EAFgB,OAGOH,mBAAS,IAHhB,mBAG9BT,EAH8B,KAGda,EAHc,KAKlCC,EAAWC,uBACf,SAACC,GAAD,OAAgBC,YAAeD,EAAYN,KAC3C,CAACA,IAPqC,EAWIQ,mBAC1C,CAACC,IAAUC,eAAgBpB,EAAgBC,IAEzC,kB,6CAAMoB,CAAkBrB,EAAeC,KACzC,CACEqB,OAA4B,QAApBZ,EAA4BI,OAAWS,IAL3CjB,KASR,MAAO,CACLc,oBArBsC,MAUvB,GAVuB,EAsBtCV,kBACAC,qBACAC,mBACAC,qB,WCrBEW,EAAU,CACd,CACEC,MAAO,OACPC,MAAO,QAET,CACED,MAAO,OACPC,MAAO,OACPC,KAAM,OACNC,YAAa,CAAEC,OAAQ,UAGzB,CAAEJ,MAAO,cAAeC,MAAO,eAC/B,CAAED,MAAO,SAAUC,MAAO,SAAUC,KAAM,YAC1C,CAAEF,MAAO,SAAUC,MAAO,WAGb,SAASI,EAAT,GAA4C,IAAhBC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MACzCC,EAAUC,IADwC,EAI5BzB,mBAAS,GAJmB,mBAIzC0B,GAJyC,aAK5B1B,oBAAS,GALmB,mBAKjD2B,EALiD,KAKzCC,EALyC,OAStD9B,IADMa,EARgD,EAQhDA,eAAgBR,EARgC,EAQhCA,iBAAkBC,EARc,EAQdA,kBAG1CyB,qBAAU,WACR1B,EAAiBmB,GACjBlB,EAAkBmB,GAClBK,GAAU,KACT,IAEHC,qBAAU,WACJlB,IACFmB,IACAF,GAAU,MAEX,CAACD,IAEJ,IAAMG,EAAc,WAClB,IAAMC,EAASpB,EAAeqB,QAAO,SAACC,EAAKC,GACzC,MAAiB,aAAbA,EAAEC,QAAsC,YAAbD,EAAEC,OACxBF,EAAMC,EAAEH,OAERE,IAER,GACHP,EAAUK,IAGZ,OACE,qBAAKK,UAAWZ,EAAQa,KAAxB,SAGE,cAAC,IAAD,CAAKC,KAAK,OAAOC,GAAG,MAAMC,SAAS,SAAnC,SACE,cAAC,IAAD,CACEzB,QAASA,EACTlB,KAAMc,EACNK,MAAM,oBACNyB,QAAS,CACPC,WAAW,EACXC,QAAQ,EACRC,SAAS,EACTC,QAAQ,EACRC,YAAa,CACXC,gBAAiB,wBACjBC,MAAO,SAETC,WAAW,SAQvB,IAAMxB,EAAYyB,aAAW,SAACC,GAAD,MAAY,CACvCd,KAAM,CACJe,QAAS","file":"static/js/3.29219f76.chunk.js","sourcesContent":["import { useState, useCallback } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport { expenses_url } from \"../../utils/constants\";\r\nimport { filterByStatus } from \"./utils\";\r\n\r\nimport axios from \"axios\";\r\nimport { queryKeys } from \"../react-query/constants\";\r\n\r\nasync function getExpensesPeriod(expperiodMthId, expperiodYrId) {\r\n  const { data } = await axios.get(`${expenses_url}?m=${expperiodMthId}&y=${expperiodYrId}`);\r\n  //const { data } = await axios.get(`${expenses_url}`);\r\n  return data;\r\n}\r\n\r\nexport function useExpensesPeriod(payrun) {\r\n  const [expperiodfilter, setExpPeriodFilter] = useState(\"all\");\r\n    const [expperiodYrId, setExpPeriodYrId] = useState(\"\");\r\n     const [expperiodMthId, setExpPeriodMthId] = useState(\"\");\r\n\r\n  const selectFn = useCallback(\r\n    (unfiltered) => filterByStatus(unfiltered, expperiodfilter),\r\n    [expperiodfilter]\r\n  );\r\n\r\n  const fallback = [];\r\n  const { data: expensesperiod = fallback } = useQuery(\r\n    [queryKeys.expensesperiod, expperiodMthId, expperiodYrId],\r\n    //queryKeys.expenses_payrun,\r\n      () => getExpensesPeriod(expperiodMthId,expperiodYrId),\r\n    {\r\n      select: expperiodfilter !== \"all\" ? selectFn : undefined,\r\n    }\r\n  );\r\n\r\n  return {\r\n    expensesperiod,\r\n    expperiodfilter,\r\n    setExpPeriodFilter,\r\n    setExpPeriodYrId,\r\n    setExpPeriodMthId,\r\n  };\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Box } from \"@chakra-ui/react\";\r\n//import AddIcon from \"@material-ui/icons/Add\";\r\n//import EditIcon from \"@material-ui/icons/Edit\";\r\n//import DeleteIcon from \"@material-ui/icons/Delete\";\r\n//import CheckIcon from \"@material-ui/icons/Check\";\r\n//import SearchIcon from \"@material-ui/icons/Search\";\r\n//import LeaveForm from \"./LeaveForm\";\r\n//import { CustomDialog } from \"../helpers/CustomDialog\";\r\n//import { AlertDialog } from \"../helpers/AlertDialogBox\";\r\n//import { useExpensesStatus } from \"./expenses/useExpensesStatus\";\r\nimport { useExpensesPeriod } from \"./expenses/useExpensesPeriod\";\r\n//import { useEmployeesContext } from \"../context/employees_context\";\r\n\r\n//const FILTERSTRING = \"Pending\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n  },\r\n  {\r\n    title: \"Date\",\r\n    field: \"date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n  },\r\n\r\n  { title: \"Description\", field: \"description\" },\r\n  { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n  { title: \"Status\", field: \"status\" },\r\n];\r\n\r\nexport default function ExpenseTableView({ year, month }) {\r\n  const classes = useStyles();\r\n  //const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  //const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const [totals, setTotals] = useState(0);\r\n  const [isCalc, setIsCalc] = useState(false);\r\n  //const { loadEmployees } = useEmployeesContext();\r\n  //const { expensesstatus, setExpStatusId } = useExpensesStatus();\r\n  const { expensesperiod, setExpPeriodYrId, setExpPeriodMthId } =\r\n    useExpensesPeriod();\r\n\r\n  useEffect(() => {\r\n    setExpPeriodYrId(year);\r\n    setExpPeriodMthId(month);\r\n    setIsCalc(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (expensesperiod) {\r\n      Calc_Totals();\r\n      setIsCalc(false);\r\n    }\r\n  }, [isCalc]);\r\n\r\n  const Calc_Totals = () => {\r\n    const amount = expensesperiod.reduce((acc, r) => {\r\n      if (r.status === \"Approved\" || r.status === \"Approve\") {\r\n        return acc + r.amount;\r\n      } else {\r\n        return acc;\r\n      }\r\n    }, 0);\r\n    setTotals(amount);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <Box maxW=\"100%\" pt=\"5px\" overflow=\"scroll\">\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={expensesperiod}\r\n          title=\"Leave Application\"\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            paging: false,\r\n            headerStyle: {\r\n              backgroundColor: \"rgba(75, 192, 192, 1)\",\r\n              color: \"white\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </Box>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n"],"sourceRoot":""}