{"version":3,"sources":["components/payrun/usePayrunStatus.js","components/PayslipTableViewSummary.js"],"names":["status","a","axios","get","payrun_url","data","usePayrunStatus","empid","useState","filter","setFilter","payrunstatusId","setPayrunStatusId","selectFn","useCallback","unfiltered","filterByEmpId","useQuery","queryKeys","payrunstatus","getPayrunStatus","select","undefined","PayslipTableVIew","classes","useStyles","columns","useMemo","title","field","type","dateSetting","locale","useEffect","className","root","maxW","pt","overflow","options","filtering","search","toolbar","paging","headerStyle","backgroundColor","color","showTitle","makeStyles","theme","padding"],"mappings":"gUAQA,WAA+BA,GAA/B,iBAAAC,EAAA,sEACyBC,IAAMC,IAAN,UAAaC,IAAb,eAA8BJ,IADvD,uBACUK,EADV,EACUA,KADV,kBAGSA,GAHT,4C,sBAMO,SAASC,EAAgBC,GAAQ,IAAD,EACTC,mBAAS,OADA,mBAC9BC,EAD8B,KACtBC,EADsB,OAEOF,mBAAS,IAFhB,mBAE9BG,EAF8B,KAEdC,EAFc,KAI/BC,EAAWC,uBACf,SAACC,GAAD,OAAgBC,YAAcD,EAAYN,KAC1C,CAACA,IANkC,EAUKQ,mBACxC,CAACC,IAAUC,aAAeR,IAE1B,kB,2CAAMS,CAAgBT,KACtB,CACEU,OAAmB,QAAXZ,EAAmBI,OAAWS,IALlCjB,KASR,MAAO,CAAEc,kBAnB4B,MASpB,GAToB,EAmBdV,SAAQC,YAAWE,qB,WClB7B,SAASW,EAAT,GAAuC,IAAXvB,EAAU,EAAVA,OAEnCwB,EAAUC,IAFmC,EAOPnB,IAApCa,EAP2C,EAO3CA,aAAcP,EAP6B,EAO7BA,kBAEhBc,EAAUC,mBACd,iBAAM,CAEJ,CACEC,MAAO,eACPC,MAAO,SACPC,KAAM,OACNC,YAAa,CAAEC,OAAQ,UAQzB,CAAEJ,MAAO,cAAeC,MAAO,aAAcC,KAAM,YACnD,CAAEF,MAAO,aAAcC,MAAO,WAAYC,KAAM,YAChD,CAAEF,MAAO,aAAcC,MAAO,WAAYC,KAAM,YAChD,CAAEF,MAAO,kBAAmBC,MAAO,mBAAoBC,KAAM,YAC7D,CACEF,MAAO,kBACPC,MAAO,sBACPC,KAAM,YAER,CAAEF,MAAO,mBAAoBC,MAAO,cAAeC,KAAM,YACzD,CAAEF,MAAO,mBAAoBC,MAAO,eAAgBC,KAAM,YAC1D,CAAEF,MAAO,gBAAiBC,MAAO,eAAgBC,KAAM,YACvD,CAAEF,MAAO,SAAUC,MAAO,aAE5B,IAOF,OAJAI,qBAAU,WACRrB,EAAkBZ,KACjB,IAGD,qBAAKkC,UAAWV,EAAQW,KAAxB,SACE,cAAC,IAAD,CAAKC,KAAK,OAAOC,GAAG,MAAMC,SAAS,SAAnC,SACE,cAAC,IAAD,CACEZ,QAASA,EACTrB,KAAMc,EACNS,MAAM,WACNW,QAAS,CACPC,WAAW,EACXC,QAAQ,EACRC,SAAS,EACTC,QAAQ,EACRC,YAAa,CACXC,gBAAiB,wBACjBC,MAAO,QAETC,WAAW,SAQvB,IAAMtB,EAAYuB,aAAW,SAACC,GAAD,MAAY,CACvCd,KAAM,CACJe,QAAS","file":"static/js/4.1d5bdd17.chunk.js","sourcesContent":["import { useState, useCallback } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport { payrun_url } from \"../../utils/constants\";\r\nimport { filterByEmpId } from \"./utils\";\r\n\r\nimport axios from \"axios\";\r\nimport { queryKeys } from \"../react-query/constants\";\r\n\r\nasync function getPayrunStatus(status) {\r\n  const { data } = await axios.get(`${payrun_url}?fi=${status}`);\r\n  //const { data } = await axios.get(`${payrun_url}`);\r\n  return data;\r\n}\r\n\r\nexport function usePayrunStatus(empid) {\r\n  const [filter, setFilter] = useState(\"all\");\r\n  const [payrunstatusId, setPayrunStatusId] = useState(\"\");\r\n\r\n  const selectFn = useCallback(\r\n    (unfiltered) => filterByEmpId(unfiltered, filter),\r\n    [filter]\r\n  );\r\n\r\n  const fallback = [];\r\n  const { data: payrunstatus = fallback } = useQuery(\r\n    [queryKeys.payrunstatus,  payrunstatusId ],\r\n    //queryKeys.payrun,\r\n    () => getPayrunStatus(payrunstatusId),\r\n    {\r\n      select: filter !== \"all\" ? selectFn : undefined,\r\n    }\r\n  );\r\n\r\n  return { payrunstatus, filter, setFilter, setPayrunStatusId };\r\n}\r\n","import React, { useEffect, useMemo } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Box } from \"@chakra-ui/react\";\r\n//import { useHistory } from \"react-router-dom\";\r\n//import { useSetRecoilState } from \"recoil\";\r\nimport //payPeriodState,\r\n//payPeriodEndMonthState,\r\n//payPeriodEmpIdState,\r\n\"./data/atomdata\";\r\n//import { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { usePayrunStatus } from \"./payrun/usePayrunStatus\";\r\n\r\n//const FILTERSTRING = \"Pending\";\r\n\r\nexport default function PayslipTableVIew({ status }) {\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  //const setPayPeriodEmpId = useSetRecoilState(payPeriodEmpIdState);\r\n  //const { payrun, getPayrun,payrun_loading, loadPendingPayslips } =\r\n  //  usePayslipsContext();\r\n  //const { loadEmployees, employees } = useEmployeesContext();\r\n  const { payrunstatus, setPayrunStatusId } = usePayrunStatus();\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      // { title: \"Period\", field: \"period\" },\r\n      {\r\n        title: \"Payrun Batch\",\r\n        field: \"payrun\",\r\n        type: \"date\",\r\n        dateSetting: { locale: \"en-GB\" },\r\n      },\r\n      // {\r\n      //   title: \"Pay Date\",\r\n      //   field: \"pay_date\",\r\n      //   type: \"date\",\r\n      //   dateSetting: { locale: \"en-GB\" },\r\n      // },\r\n      { title: \"Total Wages\", field: \"totalwages\", type: \"currency\" },\r\n      { title: \"TAP Amount\", field: \"totaltap\", type: \"currency\" },\r\n      { title: \"SCP Amount\", field: \"totalscp\", type: \"currency\" },\r\n      { title: \"Site Allowances\", field: \"totalsitesallows\", type: \"currency\" },\r\n      {\r\n        title: \"Expenses Claims\",\r\n        field: \"totalexpensesclaims\",\r\n        type: \"currency\",\r\n      },\r\n      { title: \"Total Allowances\", field: \"totalallows\", type: \"currency\" },\r\n      { title: \"Total Deductions\", field: \"totaldeducts\", type: \"currency\" },\r\n      { title: \"Total Payroll\", field: \"totalpayroll\", type: \"currency\" },\r\n      { title: \"Status\", field: \"status\" },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    setPayrunStatusId(status);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Box maxW=\"100%\" pt=\"5px\" overflow=\"Scroll\">\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={payrunstatus}\r\n          title=\"Payslips\"\r\n          options={{\r\n            filtering: false,\r\n            search: false,\r\n            toolbar: false,\r\n            paging: false,\r\n            headerStyle: {\r\n              backgroundColor: \"rgba(75, 192, 192, 1)\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </Box>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n"],"sourceRoot":""}